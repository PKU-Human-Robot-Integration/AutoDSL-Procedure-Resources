subject	protocol	sentense	ground truth	ours	strong baseline-biocoder	strong baseline-python	medium baseline	weak baseline-gpt3.5	weak baseline-gpt4
Molecular Biology & Genetics	0	Bile Sample Preparation: Collect bile into a sterile bottle.	COLLECT: [['Volume', None], ['Container', 'bottle']] -> sterile bile sample	COLLECT: [['Volume', None], ['Container', 'bottle']] -> sterile bile sample	bile_sample_prep: [['Container', None], ['Container', None], ['Device', None], ['Volume', 1000]] -> 	bile_sample_preparation: [['String', 'Collect bile into a sterile bottle']] -> 	Collect Bile: [['Container', 'sterile bottle']] -> 	Bile Sample Preparation: [['Container', 'sterile bottle']] -> 	COLLECT: [['Container', 'sterile bottle'], ['REG', 'bile']] -> Bile Sample
		Centrifuge at 3000g for 10 minutes at 4°C to clear sediments.	CENTRIFUGE: [['Force', '3000g'], ['Time', '10 minutes'], ['Temperature', '4°C']] -> Clear sediments	PUMP: [['Force', '3000g'], ['Time', '10 minutes'], ['Temperature', '4°C']] -> Clear sediments	Centrifuge: [['Device', None], ['Force', 3000], ['Temperature', 4], ['Time', 10]] -> 	centrifuge: [['Force', 3000], ['Time', 10], ['Temperature', 4]] -> Centrifuging to clear sediments	Centrifugation: [['Force', '3000g'], ['Time', '10 minutes'], ['Temperature', '4°C']] -> Clear sediments	Centrifuge: [['Force', 3000], ['Time', 10], ['Temperature', 4], ['Container', None]] -> Clear sediments	CENTRIFUGE: [['Force', '3000g'], ['Time', '10 minutes'], ['Temperature', '4°C']] -> Clear sediments
		Aliquot 1 ml into tubes.	ALIQUOT: [['REG', None], ['Time', None], ['Temperature', None]] -> Samples in tubes.	RINSE: [['REG', None], ['Time', None], ['Temperature', None]] -> Samples in tubes	Aliquot: [['Container', 'TUBE'], ['Volume', '1 ml'], ['String', '1 ml into tubes'], ['Device', None]] -> fluid	aliquot_into_tubes: [['Volume', 1], ['Length', None], ['Mass', None]] -> Printed aliquoted volume into tubes	Aliquot: [['Volume', 1], ['Container', None]] -> 	Aliquot: [['Volume', 1], ['Container', 'tubes']] -> 	ALIQUOT: [['Volume', '1 ml'], ['Container', 'tubes']] -> 
		Store aliquots at -20°C.	STORE: [['Container', None], ['Temperature', '-20°C']] -> Frozen samples	STORE: [['Container', None], ['Temperature', '-20°C']] -> Frozen samples	StoreAliquots: [['String', 'Aliquots'], ['Temperature', -20], ['Device', None]] -> 	STORE: [['Temperature', -20], ['String', 'aliquots'], ['Temperature', None]] -> 	STORE: [['Container', 'aliquots'], ['Temperature', '-20°C']] -> 	STORE: [['Temperature', '-20°C'], ['Container', None]] -> Alciquots	STORE: [['Temperature', '-20°C'], ['Container', 'aliquots']] -> 
	1	3' Terminal Nucleosides Determination in RNA: Dissolve yeast tRNA<sup>Phe</sup> or mouse piRNAs in Milli-Q water.	DISSOLVE: [['REG', 'mouse piRNAs'], ['REG', 'yeast tRNA<sup>Phe</sup>'], ['Container', None]] -> nucleosides	MERGE: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> nucleosides	DISSOLVE: [['Container', 'yeast tRNA^Phe'], ['Container', 'mouse piRNAs'], ['Container', 'Milli-Q water']] -> solutions	determine_terminal_nucleosides: [['String', 'AUGUCGAAUCCG']] -> last_two_nucleotides	"DETERMINE: [['String', ""3' Terminal Nucleosides""], ['String', None], ['Container', None]] -> RNA samples dissolved in Milli-Q water"	Determine: [['Mass', None], ['Container', 'Milli-Q water'], ['String', 'yeast tRNA<Phe> or mouse piRNAs']] -> 3' Terminal Nucleosides	3' Terminal Nucleosides Determination in RNA: [['REG', 'yeast tRNA<sup>Phe</sup>'], ['REG', 'mouse piRNAs'], ['Container', 'Milli-Q water']] -> 
		Add ammonium acetate buffer and RNase T<sub>2</sub>, then incubate.	ADD: [['REG', 'ammonium acetate buffer'], ['Container', None], ['Volume', None], ['REG', 'RNase T<sub>2</sub>']] -> incubated RNase T2	INCUBATE: [['REG', 'ammonium acetate buffer'], ['Container', None], ['Volume', None], ['REG', 'RNase T2']] -> incubated RNase T2	Incubation: [['Container', 'Ammonium Acetate Buffer'], ['Temperature', 37], ['Time', 30]] -> 	protocol: [['String', 'Add ammonium acetate buffer'], ['String', 'Add RNase T2'], ['String', 'Incubate']] -> 	INCUBATE: [['Container', None], ['Temperature', None], ['Time', None]] -> RNA degradation	Incubate: [['Container', 'ammonium acetate buffer'], ['Container', 'RNase T2'], ['Time', None]] -> 	ADD: [['REG', 'ammonium acetate buffer'], ['REG', 'RNase T2']] -> Incubate
		After RNA hydrolysis, analyze the hydrolysate using an LC/MS system.	ANALYZE: [['REG', 'RNA hydrolysis'], ['Device', 'LC/MS system']] -> hydrolysate composition	EVALUATE: [['REG', 'RNA hydrolysis'], ['Device', 'LC/MS system']] -> hydrolysate composition	RNA Hydrolysate Analysis: [] -> LC/MS Analysis results	Hydrolysis Analysis: [['String', 'RNA hydrolysis'], ['String', 'Analyze using LC/MS system']] -> Hydrolysate analysis completed	RNA hydrolysis and analysis: [['String', 'Perform RNA hydrolysis'], ['String', 'Analyze the hydrolysate using an LC/MS system'], ['Time', None]] -> RNA fragment analysis	analyze: [['String', 'RNA hydrolysate'], ['Container', 'LC/MS system']] -> data analysis	Analyze: [['REG', 'RNA hydrolysis'], ['Device', 'LC/MS system']] -> Hydrolysate analysis results
	2	Cell Thawing, Splitting, and Transfection: Thaw cells, spin down, and plate in growth media.	THAW: [['REG', None], ['Time', None], ['Temperature', None], ['Device', None]] -> plate in growth media.	DRY: [['REG', None], ['Time', None], ['Temperature', None], ['Device', None]] -> plate in growth media	cell_thaw_split_transfect: [['Device', None], ['Temperature', 25], ['Time', 1], ['Force', 1000], ['String', 'x g'], ['Time', 5], ['Mass', 1], ['String', 'h2o'], ['Container', None], ['Container', None]] -> Plate in growth media	cell_thawing_splitting_transfection: [['String', 'thawed'], ['Bool', True], ['Bool', True], ['String', 'growth media']] -> None	Cell Culture: [['Container', None], ['Time', None], ['String', 'appropriate medium']] -> Plate in Growth Media	Cell Thawing, Splitting, and Transfection: [['Device', None], ['Time', None], ['String', 'Thaw cells, spin down, and plate in growth media']] -> 	Cell Thawing, Splitting, and Transfection: [['REG', 'cells'], ['REG', 'growth media']] -> Thawed, spun down, and plated cells
		Event trigger: Split cells at 80% confluency to avoid differentiation.	SPLIT: [['Volume', None], ['Time', None], ['Temperature', None]] -> cell behavior at different confluency levels	SPLIT: [['Volume', None], ['Force', None], ['Time', None], ['Temperature', None]] -> cell behavior at different confluency levels	SPLIT: [['Container', 'Cells with 80% confluency'], ['Volume', '1X PBS'], ['Volume', '0.25% Trypsin-EDTA solution'], ['Volume', 'complete growth medium'], ['Container', 'New cell culture flask']] -> Split cells at 80% confluency protocol	CELL_SPLIT: [['Mass', None], ['Mass', 80]] -> Split cells to avoid differentiation	SPLIT: [['Time', None], ['String', 'appropriate method'], ['Device', None]] -> Split cells	Split: [['Container', None], ['Concentration', None], ['String', '80% confluency']] -> Avoid differentiation	SPLIT: [['REG', 'cells'], ['REG', '80% confluency'], ['Bool', 'avoid differentiation']] -> 
		For transfection, seed at low density and change media post-transfection for differentiation or growth.	SEED: [['REG', None], ['Time', None]] -> Modified cells	CHANGE: [['REG', None], ['Time', None], ['REG', None], ['Time', None]] -> Modified cells	Transfection: [['Container', 'growth plate'], ['Container', 'transfection medium']] -> Transfection Protocol	: [] -> 	Transfection: [['Device', None], ['REG', 'low-density cells'], ['REG', 'transfection reagent'], ['Container', None]] -> Differentiation or growth	transfection: [['Container', None], ['String', 'low density'], ['Time', None], ['String', 'change media'], ['String', 'differentiation or growth']] -> post-transfection	TRANSFECTION: [['REG', 'low density'], ['REG', 'media post-transfection'], ['REG', 'differentiation'], ['REG', 'growth']] -> 
	3	Bile Processing Protocol: Collect bile in sterile bottles from patients with biliary tubes.	COLLECT: [['REG', None], ['Container', 'bottles'], ['Volume', None]] -> sterile bile samples	COLLECT: [['REG', None], ['REG', None], ['Volume', None]] -> sterile bile samples	Bile Processing Protocol: [['Container', 'STERILE_BOTTLE']] -> Store the collected bile samples in a safe and properly labeled storage space for further analysis.	COLLECT: [['String', '12345'], ['Time', '2022-10-15']] -> Bile sample collected from Patient ID: 12345 on 2022-10-15	COLLECT: [['Container', 'sterile bottles'], ['REG', 'patients with biliary tubes'], ['Volume', None]] -> Bile samples	Collect: [['Container', 'sterile bottles'], ['String', 'bile from patients with biliary tubes'], ['Device', None]] -> Processing	Collect: [['Container', 'sterile bottles'], ['REG', 'patients with biliary tubes']] -> Bile
		Centrifuge at 3000g for 10 minutes at 4°C to remove sediment and debris.	"CENTRIFUGE: [['Force', '3000g'], ['Time', '10 minutes'], ['Temperature', '4°C'], ['REG', 'sediment'], ['REG', 'debris']] -> ""Centrifuged supernatant"""	PUMP: [['Force', '3000g'], ['Time', '10 minutes'], ['Temperature', '4°C'], ['REG', 'sediment'], ['REG', 'debris']] -> Centrifuged supernatant	: [] -> 	CENTRIFUGE: [['Force', 3000], ['Time', 10], ['Temperature', 4]] -> Centrifugation complete.	Centrifuge: [['Force', '3000g'], ['Time', '10 minutes'], ['Temperature', '4°C'], ['String', 'remove sediment and debris']] -> 	Centrifuge: [['Force', 3000], ['Time', '10 minutes'], ['Temperature', '4°C']] -> Remove sediment and debris	CENTRIFUGE: [['Force', '3000g'], ['Time', '10 minutes'], ['Temperature', '4°C']] -> sediment and debris removal
		Aliquot the clear bile into 1 ml volumes in microcentrifuge tubes.	ALIQUOT: [['REG', None], ['Time', None], ['Temperature', None], ['Container', 'microcentrifuge tubes']] -> 1 ml volumes of clear bile in microcentrifuge tubes.	RINSE: [['REG', None], ['Time', None], ['Temperature', None], ['Volume', '1 ml'], ['Container', 'microcentrifuge tubes'], ['String', 'clear bile']] -> 	Aliquot: [['Container', 'clear bile'], ['Container', None], ['Volume', '1 ml']] -> Aliquoted into microcentrifuge tubes	MIX: [['Volume', 1000], ['String', 'clear bile'], ['Container', None]] -> Mix well	TRANSFER: [['Container', 'microcentrifuge tubes'], ['Volume', '1 ml']] -> Clear bile aliquot	Aliquot: [['Volume', 1], ['Container', 'microcentrifuge tubes']] -> 	ALIQUOT: [['Volume', '1 ml'], ['Container', 'microcentrifuge tubes']] -> clear bile
		Store the aliquots at -20°C for future use.	STORE: [['Container', None], ['Temperature', '-20°C']] -> preserved aliquots	STORE: [['Container', None], ['Temperature', '-20°C']] -> preserved aliquots	STORE: [['Container', None], ['Temperature', '-20°C'], ['Time', None]] -> Future use	store_aliquots: [['Temperature', -20]] -> Aliquots stored at -20°C	STORE: [['REG', 'aliquots'], ['Temperature', -20], ['Time', None]] -> Future use	Store: [['Container', 'aliquots'], ['Temperature', -20], ['Time', None]] -> 	STORE: [['Temperature', '-20°C']] -> Aliquots for future use
	4	Bile Collection and Centrifugation: Collect bile into a sterile collection bottle.	COLLECT: [['Volume', None], ['Container', 'bottle']] -> Bile sample	COLLECT: [['Volume', None], ['Container', 'bottle']] -> Bile sample	: [] -> 	: [] -> 	Bile Collection and Centrifugation: [['Container', None], ['Device', None]] -> Centrifuged bile sample	Bile Collection and Centrifugation: [['Container', 'sterile collection bottle'], ['String', None]] -> Centrifuged bile sample	Bile Collection and Centrifugation: [['Container', 'sterile collection bottle']] -> Bile
		Use a centrifuge tube to spin at 3000g for 10 minutes at 4°C.	SPIN: [['REG', None], ['Force', '3000g'], ['Device', None], ['Time', '10 minutes'], ['Temperature', '4°C'], ['Container', 'centrifuge tube']] -> Centrifuged sample	SPIN: [['REG', None], ['Force', '3000g'], ['Device', None], ['Time', '10 minutes'], ['Temperature', '4°C']] -> Centrifuged sample	Spin: [['Container', 'CENTRIFUGE_TUBE_50ML'], ['Time', '10 MINS'], ['Mass', None]] -> Centrifuged tube	SPIN: [['Force', 3000], ['Time', 10], ['Temperature', 4]] -> Spin completed.	CENTRIFUGE: [['Container', 'centrifuge tube'], ['String', 'sample'], ['Mass', None]] -> Centrifuged tube with separated components	SPIN: [['Container', 'centrifuge tube'], ['Force', 3000], ['Time', 10], ['Temperature', 4]] -> 	centrifuge: [['Container', 'tube'], ['Force', '3000g'], ['Time', '10 minutes'], ['Temperature', '4°C']] -> 
		Aliquot the clarified supernatant into microcentrifuge tubes, 1 ml each.	ALIQUOT: [['REG', 'clarified supernatant'], ['Time', None], ['Temperature', None], ['Volume', '1ml']] -> clarified supernatant	RINSE: [['REG', None], ['Time', None], ['Temperature', None]] -> clarified supernatant	Aliquot: [['Container', 'microcentrifuge tubes'], ['Container', None], ['Volume', 1]] -> Biocoder protocol	ALIQUOT: [['Volume', 10], ['Volume', 1]] -> Aliquoting supernatant into microcentrifuge tube	Aliquot: [['Volume', '1 ml'], ['Container', None]] -> microcentrifuge tubes	Aliquot: [['Container', 'microcentrifuge tubes'], ['Volume', '1 ml']] -> 	ALIQUOT: [['Container', 'microcentrifuge tubes'], ['Volume', '1 ml']] -> Aliquoted supernatant in microcentrifuge tubes
		Freeze aliquots in microcentrifuge tubes at -20°C for storage.	FREEZE: [['REG', 'aliquots'], ['Container', 'microcentrifuge tubes'], ['Temperature', '-20°C']] -> Frozen aliquots	SUSPEND: [['REG', 'aliquots'], ['Container', 'microcentrifuge tubes'], ['Temperature', '-20°C']] -> Frozen aliquots	: [] -> 	freeze_aliquots: [['Temperature', -20]] -> Freezing aliquots in microcentrifuge tubes at -20°C for storage	Freeze aliquots in microcentrifuge tubes: [['Temperature', '-20°C'], ['Time', 'for storage']] -> 	Freeze: [['Container', 'microcentrifuge tubes'], ['Temperature', '-20°C'], ['Time', None]] -> 	FREEZE: [['Container', 'microcentrifuge tubes'], ['Temperature', '-20°C']] -> Frozen aliquots for storage
Biomedical & Clinical Research	0	Muscle Elasticity Therapy Study: For 4 weeks, repeat 5 sessions per week: Group A performs MET, Group B performs static stretching and motor control exercise.	REPEAT: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', 'MET']] -> Improved muscle elasticity	REPEAT: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', 'MET']] -> Improved muscle elasticity	No program: [] -> No specific action mentioned	REPEAT: [['Time', None], ['Frequency', None], ['REG', 'MET'], ['REG', 'static stretching and motor control exercise']] -> Print group activities for 4 weeks and 5 sessions per week	Muscle Elasticity Therapy Study: [['Time', '4 weeks'], ['Frequency', 5], ['Container', None]] -> Groups: Group A (MET - Muscle Elasticity Therapy), Group B (static stretching and motor control exercise)	Muscle Elasticity Therapy Study: [['Time', '4 weeks'], ['Frequency', 5], ['String', 'MET'], ['String', 'static stretching and motor control exercise']] -> Study results	Muscle Elasticity Therapy Study: [['Time', '4 weeks'], ['String', '5 sessions per week'], ['String', 'Group A performs MET'], ['String', 'Group B performs static stretching and motor control exercise']] -> 
	1	Fluorescence Assay for Enzyme Activity: Repeat the addition of substrates and enzyme to the cuvette, and record fluorescence intensity.	REPEAT: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> Fluorescence intensity measurements	Fluorescence intensity measurements: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> 	enzyme_activity_assay: [['Container', 'substrate'], ['Container', 'enzyme'], ['Container', 'cuvette'], ['Volume', 10]] -> fluorescence intensity	FLUORESCENCE_ASSAY: [['Container', 'cuvette'], ['Mass', None], ['Volume', None]] -> Fluorescence intensity	FluorescenceAssay: [['Container', 'cuvette'], ['String', 'substrates'], ['String', 'enzyme']] -> Fluorescence intensity	Fluorescence Assay: [['Container', 'cuvette'], ['String', 'substrates'], ['Device', 'enzyme']] -> fluorescence intensity measurement	Fluorescence Assay for Enzyme Activity: [['Container', 'cuvette'], ['String', 'substrates'], ['String', 'enzyme']] -> fluorescence intensity recorded
		Keep repeating these additions and measurements until no further change in fluorescence intensity is detected, indicating equilibrium.	REPEAT: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> Equilibrium fluorescence intensity.	REPEAT: [['REG', 'Equilibrium fluorescence intensity'], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> 	Monitor Fluorescence Until Equilibrium: [['Container', 'fluorsample'], ['Bool', False], ['Mass', None], ['Mass', None]] -> Equilibrium detected, stopping.	measure_fluorescence: [['Bool', None], ['Mass', None], ['Mass', None]] -> Equilibrium reached.	Fluorescence Intensity Measurement: [['Volume', None], ['Container', 'sample'], ['Device', None]] -> Fluorescence intensity readings	Repeating: [['REG', 'additions'], ['REG', 'measurements'], ['String', 'fluorescence intensity'], ['Bool', 'equilibrium']] -> No further change in fluorescence intensity detected	REPEAT: [['String', 'additions and measurements']] -> Change in fluorescence intensity
	2	For in vivo experiments using ViroMag, the volume of virus injected depends on the viral preparation, injection route, target tissue, and preliminary in vitro results.	DEPEND: [['REG', 'ViroMag'], ['Volume', None]] -> information	CONCENTRATE: [['Device', None], ['Mass', None], ['REG', None], ['Volume', None], ['Volume', None]] -> information	Viromag_Exp_Protocol: [['Volume', None], ['String', 'injection route'], ['String', 'target tissue'], ['String', None]] -> preliminary in vitro results	calculate_virus_volume: [['String', 'ViroMag'], ['String', 'intravenous'], ['String', 'brain'], ['String', 'positive']] -> virus_volume	IN VIVO EXPERIMENT: [['String', 'ViroMag'], ['String', 'Depends on viral preparation'], ['String', 'Depends on injection route'], ['String', 'Depends on target tissue'], ['String', 'Preliminary in vitro results']] -> Data analysis	INJECT: [['Device', 'ViroMag'], ['Container', None], ['Volume', None], ['Time', None]] -> In vivo results	INJECT: [['Volume', None], ['String', 'Virus'], ['String', 'ViroMag'], ['String', 'Injection route'], ['String', 'Target tissue'], ['String', 'Preliminary in vitro results']] -> In vivo experiment results
		Keep In vivo ViroMag and saline at room temperature.	KEEP: [['REG', 'ViroMag'], ['REG', 'saline'], ['Temperature', 'room temperature']] -> In vivo ViroMag particles.	KEEP: [['REG', 'In vivo ViroMag'], ['REG', 'saline'], ['Temperature', 'room temperature']] -> In vivo ViroMag particles	: [] -> 	STORAGE_CHECK: [['Temperature', 'room temperature'], ['String', None]] -> Storage verification	STORAGE: [['Device', 'In vivo ViroMag'], ['Temperature', 'room temperature'], ['Device', 'saline'], ['Temperature', 'room temperature']] -> 	storage: [['Device', 'In vivo ViroMag'], ['Container', 'saline'], ['Temperature', 'room temperature']] -> 	KEEP: [['String', 'In vivo ViroMag'], ['String', 'saline'], ['Temperature', 'room temperature']] -> 
		Use 10 to 20 µL of In vivo ViroMag for each 1x10^6 infectious viral particles, avoiding exceeding recommended injection volumes.	USE: [['REG', 'ViroMag'], ['Volume', '10 to 20 µL']] -> concentrated viral particles	USE: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> concentrated viral particles	Transfection: [['Container', 'ViroMag'], ['Container', 'viral particles'], ['Volume', '10 to 20 µL'], ['Concentration', '1x10^6 infectious viral particles'], ['Bool', True]] -> execute	Mixing: [['Volume', 20], ['Concentration', 'viral particles'], ['Container', None]] -> Mix well before use	INJECT: [['Device', 'In vivo ViroMag'], ['Volume', '10-20 µL'], ['Concentration', '1x10^6 viral particles']] -> Visualization of viral particles	Injection: [['Volume', '10-20 µL'], ['Concentration', '1x10^6 infectious viral particles'], ['Container', 'In vivo ViroMag']] -> Avoid exceeding recommended injection volumes	USE: [['Volume', '10 to 20 µL'], ['Concentration', '1x10^6 infectious viral particles'], ['String', 'In vivo ViroMag']] -> recommended injection volumes
	3	Place the larvae in a 1m^3 box filled with dirt.	PLACE: [['Volume', '1m^3']] -> Soil-dwelling larvae	PLACE: [['Volume', '1m^3'], ['Container', None], ['Device', 'Soil-dwelling larvae']] -> Environmental conditions	TRANSFER: [['Container', '1m^3 box'], ['Container', 'Dirt'], ['Device', None]] -> Larvae	PLACE: [['Volume', 1], ['Mass', 10], ['Container', None]] -> Instructions	Place: [['Container', '1m^3 box'], ['Device', 'larvae'], ['Container', 'dirt']] -> 	Place: [['Container', '1m^3 box'], ['String', 'dirt'], ['Container', 'larvae']] -> 	Place: [['REG', 'larvae'], ['Container', '1m^3 box'], ['REG', 'dirt']] -> 
		Feed them the specified food 3-4 times daily at 2-3 hour intervals for optimal growth.	FEED: [['REG', None], ['Concentration', None]] -> Optimal growth of cells.	SEND: [['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> Optimal growth of cells	No Program: [] -> N/A	feed_specified_food: [['Time', None], ['Frequency', None]] -> optimal growth	FEED: [['String', 'specified food'], ['Frequency', None], ['Time', None]] -> optimal growth	Feed: [['String', 'specified food'], ['Frequency', '3-4 times daily'], ['Time', '2-3 hour intervals']] -> 	FEED: [['String', 'the specified food'], ['Frequency', '3-4 times daily'], ['Time', '2-3 hour intervals']] -> optimal growth
		Continue feeding until the larvae turn into pupae, at which point increase the food quantity.	FEED: [['REG', None], ['Concentration', None]] -> pupae with increased food intake	INCREASE: [['REG', None], ['Concentration', None], ['Concentration', None]] -> pupae with increased food intake	FEED: [['Container', 'larvae'], ['Container', 'food'], ['String', None]] -> Increased food supply	feeding: [['Bool', True], ['Mass', 1], ['Mass', None], ['String', 'pupae']] -> increase food quantity	Feed larvae: [['String', 'Regular food quantity'], ['Device', None]] -> 	FEED: [['Time', None], ['String', 'larvae to pupae'], ['String', 'increase food quantity']] -> healthy pupae	FEEDING: [['REG', 'larvae'], ['REG', 'pupae'], ['Volume', None]] -> Increased food quantity
		Once pupae become adults, modify their environment by adding water to facilitate mating.	MODIFY: [['REG', 'water'], ['Time', None]] -> Mated adults	MODIFY: [['REG', None], ['REG', None], ['Time', None], ['REG', None], ['REG', None]] -> Mated adults	Fly Mating: [['Container', 'Adult Fly from Pupae'], ['Container', None], ['Time', 24]] -> Modified environment for mating	modify_environment: [['String', 'adult']] -> water added for mating	Facilitating mating in adult pupae: [['Time', None], ['Container', 'water']] -> 	modify_environment: [['Time', None], ['Container', 'pupae'], ['Volume', 'water']] -> facilitate mating	modify environment: [['REG', 'pupae'], ['REG', 'adults'], ['Volume', 'water']] -> facilitated mating
		After mating, collect the resulting larvae.	COLLECT: [['REG', None], ['Container', None]] -> resulting larvae, collected	COLLECT: [['REG', None], ['Container', None], ['Force', None], ['Time', None]] -> resulting larvae, collected	Collecting larvae after mating: [['Time', None], ['String', 'specified period'], ['Device', None]] -> resulting larvae	COLLECT: [['String', 'larvae'], ['Volume', None], ['Time', None]] -> resulting_larvae	larvae collection: [['REG', None], ['REG', None], ['Device', None]] -> resulting larvae	Collect: [['Time', None], ['String', 'resulting larvae']] -> Larvae collection	COLLECT: [['REG', 'mating'], ['REG', 'larvae']] -> larvae
	4	Larvae Experiment Protocol: Preparation: Place larvae in a pre-filled 1m³ box with dirt.	PLACE: [['Volume', '1m^3']] -> soil samples	PLACE: [['REG', 'soil samples'], ['REG', None], ['REG', None]] -> 	: [] -> 	PLACEMENT: [['Volume', 1], ['String', 'dirt'], ['Container', None]] -> Larvae in box	Preparation: [['Container', '1m³ box'], ['Container', 'dirt']] -> 	Preparation: [['Container', '1m³ box'], ['Volume', 'full'], ['String', 'dirt']] -> 	PREPARATION: [['Container', '1m³ box'], ['Volume', 'dirt'], ['REG', 'larvae']] -> Prepared box with larvae
		Feeding: Administer specific food 3-4 times daily at 2-3 hour intervals for optimal growth.	ADMINISTER: [['Time', '2-3 hour intervals'], ['Container', None]] -> Well-nourished cells	DISTRIBUTE: [['Container', None], ['Container', None], ['Container', None]] -> Well-nourished cells	GROWTH: [['Container', None], ['Temperature', 37], ['Volume', None]] -> Optimized growth	feed_fish: [['String', 'specific food'], ['Mass', None], ['Time', 2]] -> Administering specific food for fish	Administer specific food: [['Frequency', '3-4 times daily'], ['Time', '2-3 hours'], ['Container', None]] -> 	Feeding: [['String', 'specific food'], ['Frequency', '3-4 times daily'], ['Time', '2-3 hour intervals']] -> 	FEEDING: [['String', 'specific food'], ['Time', '3-4 times daily at 2-3 hour intervals']] -> optimal growth
		Monitoring: Continue feeding until larvae transition to pupals, increasing food supply at this stage.	CONTINUE: [['REG', None]] -> pupal stage	CONTINUE: [['REG', None], ['REG', None], ['REG', None]] -> pupal stage	Transition Monitoring: [['Container', 'LARVAE'], ['Volume', 'x l'], ['Volume', 'y l']] -> Larvae to Pupal Transition Monitoring Protocol	feeding: [['Bool', True]] -> Increasing food supply	Monitoring: [['String', 'Continue feeding until larvae transition to pupals, increasing food supply at this stage'], ['Bool', None]] -> 	Monitor: [['Time', None], ['String', 'Transition to pupals'], ['String', 'Increase food supply']] -> Continued feeding	MONITORING: [['Time', 'until larvae transition to pupals'], ['Mass', 'increasing food supply']] -> 
		Environmental Change: Upon reaching adulthood, introduce water to the dirt environment for mating.	"INTRODUCE: [['Volume', None], ['REG', 'water']] -> ""Water-based mating conditions"""	INTRODUCE: [['Volume', None], ['REG', None], ['Device', None], ['Length', None], ['Device', None]] -> Water-based mating conditions	INTRODUCE_WATER: [['Container', 'Dirt environment'], ['Concentration', None]] -> Mating initiation	introduce_water: [['Bool', True]] -> Print message indicating whether water is introduced to dirt environment for mating or not	Introduce water: [['Container', 'dirt environment'], ['String', 'for mating'], ['Volume', None]] -> 	Environmental Change: [['Time', None], ['Container', 'dirt'], ['Volume', 'water']] -> Mating	Environmental Change: [['Time', 'adulthood'], ['Volume', 'water'], ['String', 'dirt environment'], ['String', 'mating']] -> 
		Larvae Collection: Post-mating, collect new larvae.	COLLECT: [['REG', None], ['Container', None]] -> Newly hatched larvae.	COLLECT: [['REG', 'Newly hatched larvae'], ['Container', None], ['Force', None], ['Time', None]] -> 	LARVAE_COLLECTION: [['Device', None], ['Container', 'New larvae'], ['REG', None]] -> Collection of new larvae	collect_larvae: [] -> Collecting new larvae after mating	COLLECT: [['Container', None], ['Time', None], ['String', 'Post-mating, collect new larvae.']] -> 	Larvae_Collection: [['Time', 'Post-mating'], ['String', 'new larvae']] -> 	COLLECT: [['String', 'Larvae'], ['Time', 'Post-mating']] -> new larvae
Ecology & Environmental Biology	0	Thaw frozen samples to room temperature.	THAW: [['Temperature', 'room temperature']] -> Room temperature samples.	CHANGE: [['Temperature', 'room temperature']] -> Room temperature samples	Thaw samples: [['Container', None], ['Temperature', 'room temperature']] -> Thawed samples at ambient temperature	Thawing: [['Temperature', None]] -> Samples thawed to room temperature	Thaw: [['Container', None]] -> Room temperature samples	Thaw: [['REG', 'frozen samples'], ['Temperature', 'room temperature'], ['Time', None]] -> Ready for further processing	THAW: [['Temperature', 'room temperature']] -> Thawed samples
		For homogenization, sterilize a metal spatula, transfer ~50g of sample into an Erlenmeyer flask, add 2 ml of sterilized tap water, and homogenize.	STERILIZE: [['Container', 'Erlenmeyer flask'], ['Volume', '~50g'], ['REG', 'sterilized tap water'], ['Volume', '2ml']] -> homogenized sample	RINSE: [['Container', 'Erlenmeyer flask'], ['Volume', None], ['Volume', None]] -> homogenized sample	Homogenization Protocol: [['Container', 'Erlenmeyer'], ['Device', None], ['Mass', 50], ['Volume', 2]] -> Homogenized solution	homogenization: [['Mass', 50], ['Container', 'Erlenmeyer flask'], ['Volume', 2]] -> Homogenized sample	HOMOGENIZE: [['Mass', '~50g'], ['Container', 'Erlenmeyer flask'], ['Volume', '2 ml']] -> Homogenized sample	homogenization: [['Mass', '50g'], ['Container', 'Erlenmeyer flask'], ['Volume', '2 ml'], ['String', 'sterilized tap water']] -> homogenized sample	HOMOGENIZE: [['Device', 'metal spatula'], ['Mass', '~50g'], ['Container', 'Erlenmeyer flask'], ['Volume', '2 ml'], ['String', 'sterilized tap water']] -> Homogenized sample
		Next, place ~20g of homogenized sample into a tissue culture flask, add 20 ml of MDV medium, and gently shake.	PLACE: [['REG', 'homogenized sample'], ['Volume', '~20g'], ['Container', 'tissue culture flask'], ['REG', 'MDV medium'], ['Volume', '20 ml']] -> MDV medium and homogenized sample	PLACE: [['REG', 'homogenized sample'], ['Container', 'tissue culture flask'], ['Volume', '20 ml'], ['REG', 'MDV medium']] -> MDV medium and homogenized sample	: [] -> 	ADD: [['Mass', 20], ['Volume', 20], ['String', 'MDV medium']] -> Gently shaking the flask...	GROW: [['Container', 'tissue culture flask'], ['Mass', '20g'], ['Volume', '20ml']] -> Gently shake	Place: [['Mass', '20g'], ['Container', 'tissue culture flask'], ['Volume', '20ml'], ['String', 'MDV medium'], ['String', 'gently shake']] -> 	PLACE: [['Mass', '20g'], ['Container', 'tissue culture flask'], ['Volume', '20 ml'], ['String', 'MDV medium']] -> Gently shake
		Autoclave the samples in Erlenmeyer flasks for 15 minutes at 121°C.	AUTOCLAVE: [['Container', 'Erlenmeyer flasks'], ['Time', '15 minutes'], ['Temperature', '121°C']] -> sterilized samples	RINSE: [['Container', 'Erlenmeyer flasks'], ['Time', '15 minutes'], ['Temperature', '121°C']] -> sterilized samples	AUTOCLAVE: [['Container', 'Erlenmeyer flasks'], ['Time', 15], ['Temperature', 121]] -> Sterilized samples	autoclave_samples: [['Container', 'Erlenmeyer flasks'], ['Time', 900]] -> Autoclaving process complete.	Autoclave: [['Container', 'Erlenmeyer flasks'], ['Time', '15 minutes'], ['Temperature', '121°C']] -> 	Autoclave: [['Container', 'Erlenmeyer flask'], ['Time', '15 minutes'], ['Temperature', '121°C']] -> 	AUTOCLAVE: [['Container', 'Erlenmeyer flasks'], ['Time', '15 minutes'], ['Temperature', '121°C']] -> Autoclaved samples
		Repeat the process of adding sterilized sample and MDV medium to the culture flask, gently shaking for even distribution.	REPEAT: [['REG', 'sterilized sample'], ['REG', 'MDV medium'], ['Volume', None], ['Container', 'culture flask']] -> cultured cells	REPEAT: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> cultured cells	: [] -> 	CULTURE: [['Container', 'culture flask'], ['String', 'sterilized sample'], ['String', 'MDV medium'], ['Time', 5]] -> Final culture flask content	Culture: [['Container', 'culture flask'], ['String', 'sterilized sample'], ['Container', 'MDV medium']] -> Even distribution	REPEAT: [['String', 'add sterilized sample and MDV medium to the culture flask'], ['String', 'shake gently for even distribution']] -> N/A	REPEAT: [['REG', 'sterilized sample'], ['REG', 'MDV medium'], ['Container', 'culture flask'], ['String', 'gently shaking']] -> even distribution
		Repeat these steps (2.2-2.5) for all samples, including positive controls.	REPEAT: [['REG', None]] -> analyzed results	REPEAT: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> analyzed results	Perform Operations: [['Container', 'sample'], ['Container', 'positive control']] -> Execute steps 2.2-2.5 for each sample and positive control	Process Samples: [['Container', None]] -> Processed sample results	Repeat: [['Container', None]] -> Positive controls	REPEAT: [['Container', None], ['Time', None]] -> Results analysis	REPEAT: [['String', 'steps 2.2-2.5'], ['String', 'all samples'], ['String', 'positive controls']] -> 
	1	For habituation, mice were placed at the ladder's start and encouraged to move forward using air puffs, repeating until they were accustomed to walking on the rungs.	REPEAT: [['Time', None]] -> trained mice	trained: [['Time', None], ['Temperature', None], ['String', None]] -> mice	Habituation protocol: [['String', 'place_start'], ['String', 'encourage_forward_movement']] -> mice get familiar with walking on ladder rungs	HABITUATION: [['String', 'mice'], ['String', 'start'], ['String', 'air puffs']] -> Mouse habituated	HABITUATION: [['Container', 'ladder'], ['Bool', None], ['String', 'air puffs']] -> Mice habituated to walking on the ladder	habituation: [['Container', 'ladder'], ['Container', 'mice'], ['String', 'air puffs']] -> habituated to walking on rungs	HABITUATE: [['REG', 'mice'], ['Device', 'ladder'], ['Device', 'air puffs'], ['REG', 'rungs'], ['String', 'move forward']] -> accustomed mice
		Motor performance was assessed by recording the time and number of foot slips as mice crossed the ladder, with trials repeated 4-5 times daily after a 15-minute interval for 3-4 days to evaluate motor learning.	RECORD: [['REG', None], ['Time', '15-minute interval for 3-4 days']] -> Motor learning data	RECORD: [['REG', None], ['Time', 'time']] -> Motor learning data	Experiment: [] -> Data analysis	EXPERIMENT: [['Time', None], ['Mass', None]] -> Average time taken and foot slips	ASSESS: [['String', 'Assessment of motor performance in mice crossing a ladder'], ['Time', None], ['Volume', None]] -> Motor learning	ASSESS: [['Time', None], ['Length', None], ['Container', 'ladder'], ['Container', 'mice'], ['Time', '15 minutes'], ['Volume', None], ['Time', '3-4 days'], ['Volume', None]] -> Motor performance assessment	ASSESS: [['Time', None], ['REG', 'foot slips'], ['REG', 'mice'], ['REG', 'ladder'], ['Time', '4-5 times daily'], ['Time', '15-minute interval'], ['Time', '3-4 days']] -> motor learning evaluation
		Data analysis involved calculating daily averages of time and foot slips and comparing these between groups.	COMPARE: [['REG', None]] -> comparison of groups' daily averages	COMPARE: [['Temperature', None], ['REG', None], ['REG', None], ['Device', None], ['String', None]] -> comparison of groups' daily averages	Experiment: [['Time', '24 hours'], ['Device', 'Microscope'], ['Container', None]] -> Cell viability analysis	compare_groups: [['Container', 'group1_data'], ['Container', 'group2_data']] -> Comparison results between groups	Data analysis: [['String', 'Calculate daily average of time and foot slips'], ['String', 'Compare daily averages between groups'], ['String', None]] -> Calculate the average time and number of foot slips for each day of the experiment	Data analysis: [['Time', None], ['String', 'daily averages'], ['String', 'foot slips'], ['String', 'comparing'], ['String', 'groups']] -> Statistical comparison results	ANALYZE: [['Time', 'daily averages'], ['REG', 'foot slips'], ['REG', 'groups']] -> comparison results
		If a mouse failed to place its paws correctly or slipped, this was noted for further analysis, and if video recording was possible, missteps were reviewed afterward.	NOTE: [['REG', None]] -> video recordings, missteps	video recordings: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> missteps	Mouse Paw Placement Analysis: [['Device', 'Mouse'], ['Container', None], ['Bool', 'video_recording']] -> Review_behavior	Note Failure Analysis: [['Bool', False], ['Bool', False]] -> Further analysis needed	: [['String', 'Observe mouse behavior in placing paws correctly'], ['Bool', None]] -> 	Record Missteps: [['Device', None], ['String', 'video recording'], ['Bool', None]] -> Review Missteps	ANALYZE: [['REG', 'mouse'], ['Bool', 'failed to place its paws correctly'], ['Bool', 'slipped'], ['REG', 'further analysis'], ['Bool', 'video recording possible'], ['REG', 'missteps reviewed afterward']] -> noted
	2	Premoisten 3 swabs with 1.5 mL of PBST solution and press out excess against the tube's wall.	MOISTEN: [['Volume', '1.5 mL'], ['REG', 'PBST solution']] -> moistened swabs	RINSE: [['Volume', '1.5 mL'], ['Concentration', 'PBST solution']] -> moistened swabs	Premoisten swabs: [['Container', 'swabs'], ['Volume', 1.5], ['Volume', 0.5], ['Volume', 0.5], ['Volume', 0.5]] -> Excess PBST solution removal	premoisten_swabs: [['Volume', 3], ['Volume', 1.5]] -> Premoisten swabs with PBST solution	Premoisten: [['Volume', '1.5 mL'], ['Container', 'swabs']] -> Moistened swabs	Preparation: [['Volume', '1.5 mL'], ['Container', 'tube'], ['String', 'PBST solution']] -> Premoistened swabs	PREMOISTEN: [['REG', 'swabs'], ['Volume', '3'], ['REG', 'PBST solution'], ['Volume', '1.5 mL']] -> Prepared swabs
		In parallel, for each sampling location, swab target surfaces three times using the 3 swabs together, rotating and switching order each time to ensure consistent application.	SWAB: [['Device', None], ['Concentration', None], ['Time', None]] -> swabbed surfaces	RINSE: [['Device', None], ['Device', None], ['Concentration', None], ['Time', None]] -> swabbed surfaces	Swabbing: [['Device', None], ['Container', None], ['Time', None]] -> Swabbing target surfaces using swabs	Swabbing: [['Container', 'swabs'], ['String', None]] -> Swabbing surface at specified locations	Swabbing: [['Container', '3 swabs'], ['String', None]] -> Collected samples	SWAB: [['Container', '3 swabs'], ['String', 'rotating and switching order each time'], ['String', 'ensure consistent application']] -> Sampling locations	SWAB: [['REG', 'sampling location'], ['String', 'target surfaces'], ['REG', '3 swabs'], ['String', 'rotating and switching order'], ['Time', 'three times']] -> consistent application
		Return swabs to the tube after breaking at the breakpoint.	RETURN: [['REG', 'swabs'], ['Container', 'tube']] -> Returned swabs	RETURN: [['REG', 'swabs'], ['Container', 'tube'], ['REG', 'breakpoint']] -> Returned swabs	return_to_tube: [['Device', 'Swab'], ['Device', None]] -> Tube	return_swabs_to_tube: [['Container', 'swabs'], ['Length', 2]] -> tube	Swab Processing: [['Container', 'Swab'], ['Container', 'Tube']] -> Processed swabs in the tube	Return Swabs: [['Container', 'tube'], ['Device', 'swabs'], ['String', 'breakpoint'], ['Bool', False]] -> Protocol completed	Return: [['Container', 'tube'], ['String', 'after breaking at the breakpoint']] -> swabs
		Collect two negative field controls, one at the start and end of the session, and prepare two unopened PBST tubes as negative media controls.	COLLECT: [['REG', None], ['Container', 'PBST tubes']] -> field controls, PBST tubes	COLLECT: [['REG', None], ['Container', 'PBST tubes']] -> field controls, PBST tubes	Collection and Preparation of Negative Controls: [['String', 'Collect two negative field controls'], ['String', 'Prepare two unopened PBST tubes'], ['Volume', None]] -> Collection and preparation of negative controls	Negative_Control_Preparation: [['Device', 'PBST tube'], ['Container', 'unopened'], ['Container', 'unopened']] -> Negative field controls and negative media controls prepared	COLLECT AND PREPARE: [['Volume', None], ['Container', 'PBST tubes'], ['String', 'negative media controls']] -> Two negative field controls and two unopened PBST tubes	Collect: [['Container', 'negative field control'], ['Time', 'start of session'], ['Time', 'end of session'], ['Container', 'unopened PBST tube'], ['String', 'negative media control']] -> Prepared samples	COLLECT: [['REG', 'two negative field controls'], ['Time', 'start'], ['Time', 'end'], ['Container', 'two unopened PBST tubes']] -> negative media controls
		Store all samples in a cooler with ice for up to 12 hours.	STORE: [['Time', '12 hours'], ['REG', 'samples'], ['Device', 'cooler with ice']] -> Preserved samples.	COLLECT: [['Time', '12 hours']] -> Preserved samples	: [] -> 	: [] -> 	Store samples: [['Container', 'cooler with ice'], ['Time', 'Up to 12 hours']] -> 	STORE: [['Container', 'samples'], ['Temperature', 'ice'], ['Time', '12 hours']] -> 	STORE: [['Container', 'cooler'], ['Temperature', 'ice'], ['Time', '12 hours']] -> samples
		This method emphasizes parallel actions in swabbing and sample preparation, aligning with a parallel-for execution model in experimental procedures.	EMPHASIZE: [['Time', None], ['Container', None]] -> prepared samples with parallel-for execution	DEFINE: [['Time', None], ['Time', None], ['Time', None], ['Length', None], ['Container', None]] -> prepared samples with parallel-for execution	swab_and_sample_preparation: [['String', 'Perform swabbing according to the specific procedure'], ['String', 'Perform sample preparation according to the specific procedure'], ['Device', None]] -> Z-stack images	Swab and Prepare Sample: [['REG', None], ['Time', None], ['Device', None]] -> None	Parallel Swabbing and Sample Preparation Protocol: [['String', 'Perform swabbing of the sample material using multiple swabs simultaneously.'], ['String', 'Conduct sample preparation concurrently with swabbing to optimize time and resources.']] -> 	PARALLEL_EXECUTION: [['Container', 'swab'], ['Container', 'sample']] -> Sample preparation	SWAB_AND_PREPARE: [['String', 'parallel actions'], ['String', 'swabbing'], ['String', 'sample preparation'], ['String', 'parallel-for execution model'], ['String', 'experimental procedures']] -> Sample preparations
	3	Press out excess solution inside the tube, swab target surfaces three times using 3 swabs together, ensuring consistent pressure and speed, and rotate swabs for each sampling.	PRESS: [['REG', 'excess solution'], ['Container', 'tube'], ['Time', None]] -> samples of target surfaces	PRESS: [['REG', None], ['Time', None]] -> samples of target surfaces	Surfaces Swabbing Protocol: [['Container', 'STERILE_MICROFUGE_TUBE'], ['String', 'Press out Excess Solution'], ['Volume', 500], ['String', 'Swab Target Surfaces']] -> Comment: Swab surfaces three times with 3 swabs together, ensuring consistent pressure and speed. Rotate swabs after each sampling.	COLLECT: [['Device', 'Tube'], ['Device', 'Swab'], ['Time', '3 times']] -> Z-stack images	CollectSamples: [['Container', None], ['String', 'target surfaces'], ['Volume', None]] -> Swab samples	Sampling: [['Container', 'Tube'], ['String', 'Excess solution'], ['Volume', '3 swabs'], ['Bool', 'Consistent pressure'], ['Bool', 'Consistent speed'], ['Bool', 'Rotate swabs for each sampling']] -> Sample collection completed	SWAB: [['REG', 'excess solution'], ['Device', 'tube'], ['REG', 'target surfaces'], ['REG', '3 swabs'], ['Time', 'consistent pressure and speed'], ['REG', 'rotate swabs'], ['REG', 'each sampling']] -> Swabbed samples
		Break the swab at its breakpoint and return it to the falcon tube.	RETURN: [['REG', None], ['Container', 'falcon tube']] -> broken swab	broken swab: [['REG', None], ['REG', None], ['Device', None], ['Device', None]] -> 	SWAB_PROCESSING: [['Container', 'Falcon tube'], ['Container', None], ['String', 'swab'], ['Device', None]] -> Processed swab returned to Falcon tube	break_swab: [['Device', 'Swab'], ['Container', 'Falcon Tube']] -> Broken swab and returned to falcon tube	break: [['Device', None], ['Container', 'breakpoint']] -> 	Return: [['Container', 'falcon tube'], ['Device', 'swab']] -> Breakpoint	BREAK: [['REG', 'swab'], ['Length', 'breakpoint']] -> swab in falcon tube
		Collect two negative field controls, one at the start and one at the end of sampling, and prepare two unopened tubes of PBST as negative media controls.	COLLECT: [['REG', None], ['Container', 'PBST tubes']] -> Control samples	COLLECT: [['REG', None], ['REG', None], ['REG', None]] -> Control samples	Collective Negative Field and Media Control: [['Container', 'PBST'], ['String', 'cold_room'], ['Device', None]] -> Sampling Procedure	Collect Negative Controls: [['Device', None], ['Container', 'PBST']] -> Negative field controls and negative media controls prepared	COLLECT: [['Time', None], ['Container', 'negative field controls'], ['Container', None]] -> Sampling process	Collect: [['Volume', None], ['Container', 'tube'], ['String', 'PBST']] -> Negative field controls and negative media controls prepared	COLLECT: [['REG', 'two negative field controls'], ['Time', 'start'], ['Time', 'end'], ['Container', 'two unopened tubes of PBST']] -> negative media controls
		Store all samples in a cooler with ice for up to 12 hours during collection.	STORE: [['Time', '12 hours'], ['REG', 'samples'], ['Device', 'cooler with ice']] -> Preserved samples	COLLECT: [['Time', '12 hours']] -> Preserved samples	storage_on_ice: [['Device', None]] -> samples on ice in a cooler for up to 12 hours during collection	: [] -> 	Sample Storage: [['Container', None], ['Time', 'up to 12 hours'], ['Bool', True]] -> storage cooler with ice	Store: [['Container', 'cooler with ice'], ['Time', 'up to 12 hours']] -> 	STORE: [['Container', 'cooler with ice'], ['Time', 'up to 12 hours']] -> collected samples
		Proceed with swab extraction, sample aggregation, and subsequent cultivation as per the experimental setup.	PROCEED: [['Device', None]] -> cultured samples	CULTURE: [['Device', None], ['Device', None], ['Device', None], ['Device', None]] -> cultured samples	Extraction and Cultivation: [['Container', 'Swab'], ['Container', 'Extraction Buffer'], ['Volume', '100ul'], ['Container', 'New Tube'], ['Container', 'Cultivation Plate'], ['Temperature', '37°C'], ['Time', '48:00'], ['Bool', None]] -> Cultivated samples in plate at 37°C for 48 hours	Experimental Protocol: [['String', 'Swab extraction'], ['String', 'Sample aggregation'], ['String', 'Cultivation']] -> Finished experimental protocol execution	CULTIVATION: [['Container', None], ['Volume', None], ['Temperature', 'specified conditions'], ['Time', None]] -> growth of microorganisms	CULTIVATE: [['Container', 'Petri dish'], ['Time', None]] -> Colony growth observation	PROCEED: [['REG', 'swab extraction'], ['REG', 'sample aggregation'], ['REG', 'subsequent cultivation'], ['REG', 'experimental setup']] -> 
	4	Always ensure containers are not tightly sealed to prevent pressure buildup and heed warnings about ensuring adequate ventilation to avoid oxygen deficiency from inert gas displacement.	ENSURE: [['REG', None], ['Time', None]] -> data on pressure and ventilation	MAINTAIN: [['Time', None], ['REG', None], ['Time', None]] -> data on pressure and ventilation	Preparation: [['String', 'containers are not tightly sealed'], ['String', 'adequate ventilation to avoid oxygen deficiency']] -> prevent pressure buildup and inert gas displacement	experimental_protocol: [['Bool', False], ['Bool', True]] -> Print whether experiment can proceed safely or not	ENSURE: [['Container', None]] -> Safety precautions	PRECAUTIONS: [['Container', None], ['String', 'ensure containers are not tightly sealed'], ['String', 'heed warnings about ensuring adequate ventilation']] -> avoid pressure buildup and oxygen deficiency	ENSURE: [['Container', None], ['Bool', 'not tightly sealed'], ['String', 'prevent pressure buildup'], ['String', 'ensure adequate ventilation'], ['String', 'avoid oxygen deficiency from inert gas displacement']] -> 
		Protect yourself against liquid nitrogen (LN2) splatter.	PROTECT: [['REG', 'liquid nitrogen']] -> Safety measures	SECURE: [['Device', None], ['REG', None], ['Device', None], ['REG', None]] -> Safety measures	: [] -> 	: [] -> 	Protect: [['Container', None], ['Volume', None]] -> Protection against liquid nitrogen splatter	SAFETY: [['String', 'Liquid nitrogen (LN2) splatter']] -> Protective gear	Protect: [['REG', 'yourself against liquid nitrogen (LN2) splatter']] -> 
		Label cryogenic tubes with sample name, date frozen, and initials before aliquoting 1 mL samples.	LABEL: [['Container', 'cryogenic tubes'], ['REG', 'sample name'], ['Time', 'date frozen'], ['REG', 'initials'], ['Volume', '1 mL samples']] -> Labeled cryogenic tubes.	RECORD: [['Container', 'cryogenic tubes'], ['REG', 'sample name'], ['Time', 'date frozen'], ['REG', 'initials'], ['Volume', '1 mL samples']] -> Labeled cryogenic tubes	ALIQUOT: [['Container', 'cryogenic_tube'], ['Container', 'sample_in_tube'], ['Volume', {'value': 1, 'unit': 'mL'}]] -> Aliquoted samples into cryogenic tubes	Labeling Cryogenic Tubes: [['String', 'Sample1'], ['Time', '2022-12-31'], ['String', 'AB']] -> Printing labeling information	Aliquot samples: [['Volume', '1 mL'], ['Container', 'cryogenic tube']] -> 	LABEL: [['Container', 'cryogenic tubes'], ['String', 'sample name'], ['Time', 'date frozen'], ['String', 'initials'], ['Volume', '1 mL']] -> Aliquoted samples	LABEL: [['Container', 'cryogenic tubes'], ['String', 'sample name'], ['Time', 'date frozen'], ['String', 'initials'], ['Volume', '1 mL']] -> aliquoted samples
		Fill an insulated pan with LN2 to about 2 cm depth and place a CoolRack in it to cool to -150°C in approximately 15 minutes; pre-chilling the CoolRack in a -80°C freezer can save LN2 and time.	"FILL: [['REG', 'LN2'], ['Length', '2 cm'], ['Device', 'CoolRack'], ['Temperature', '-150°C'], ['Time', '15 minutes'], ['Device', 'CoolRack'], ['Temperature', '-80°C'], ['REG', 'LN2'], ['Time', 'time']] -> ""Cooled CoolRack"""	COOL: [['REG', 'LN2'], ['Length', '2 cm'], ['Device', 'CoolRack'], ['Temperature', '-150°C'], ['Time', '15 minutes'], ['Device', 'CoolRack'], ['Temperature', '-80°C'], ['REG', 'LN2'], ['Time', None]] -> Cooled CoolRack	Cooling: [['Container', 'CoolRack'], ['Temperature', None], ['Time', '15 minutes']] -> Cool the CoolRack to -150°C in approximately 15 minutes	CoolRack Cooling Protocol: [['Temperature', '-80°C'], ['Length', '2 cm'], ['Device', 'CoolRack']] -> CoolRack is now cooled to -150°C	Cooling: [['Container', 'insulated pan'], ['Volume', 2], ['Temperature', None], ['Time', 15], ['Temperature', -150]] -> CoolRack	COOL: [['Container', 'insulated pan'], ['Temperature', '-150°C'], ['Time', '15 minutes'], ['Device', 'CoolRack'], ['Temperature', '-80°C'], ['Device', None]] -> Pre-chilled CoolRack	Fill: [['Container', 'insulated pan'], ['Length', '2 cm'], ['Temperature', '-150°C'], ['Time', '15 minutes'], ['Device', 'CoolRack'], ['Temperature', '-80°C']] -> Prepared insulated pan and CoolRack
		Place cryogenic tubes in the CoolRack on dry ice for snap freezing, leaving them for 1 minute before transferring to a freezer box with forceps, then store in a -80°C freezer.	PLACE: [['REG', None], ['Device', None], ['Container', 'cryogenic tubes']] -> Frozen cryogenic tubes	PLACE: [['REG', None], ['Device', None], ['REG', None]] -> Frozen cryogenic tubes	Snap Freezing Protocol: [['Container', 'Cool Rack'], ['Time', '1 minute'], ['Device', 'forceps']] -> Cryogenic Tubes are now stored in a -80°C freezer.	snap_freeze: [['Container', 'cryogenic tubes'], ['Temperature', '-80°C'], ['Device', 'CoolRack']] -> freezer box with forceps	Protocol Execution: [['Container', 'Cryogenic tubes'], ['Container', 'CoolRack'], ['Container', 'Dry ice'], ['Time', '1 minute'], ['Container', 'Freezer box'], ['Container', '-80°C freezer']] -> Proper storage of biological samples	FREEZE: [['Container', 'cryogenic tubes'], ['Container', 'CoolRack'], ['Time', '1 minute'], ['Container', 'freezer box'], ['Temperature', '-80°C'], ['Device', 'forceps']] -> Stored in -80°C freezer	Place and Freeze: [['Container', 'cryogenic tubes'], ['Device', 'CoolRack'], ['Device', 'dry ice'], ['Time', '1 minute'], ['Device', 'forceps'], ['Container', 'freezer box'], ['Temperature', '-80°C']] -> snap freezing
		For warming, thaw tubes at 4°C.	THAW: [['Time', None], ['Temperature', '4°C'], ['Container', 'tubes']] -> Thawed tubes at 4°C	CHANGE: [['Time', None], ['REG', None]] -> Thawed tubes at 4°C	WARM: [['Container', 'Tubes'], ['Temperature', 4]] -> Thawed tubes	THAW: [['Temperature', '4°C']] -> Thaw tubes	Thaw tubes: [['Temperature', '4°C'], ['Device', None]] -> 	warming: [['Temperature', '4°C'], ['Container', None]] -> 	WARMING: [['Temperature', '4°C']] -> thawed tubes
Bioengineering & Technology	0	Grow yeast cells with GFP-fusion on solid media, transfer to a microscope slide covered with a coverslip, and acquire Z-sections using a spinning disk confocal microscope.	GROW: [['REG', 'solid media'], ['Time', None]] -> GFP-fusion cells    Spinning disk confocal microscopy     	GROW: [['Temperature', None], ['Time', None], ['Device', 'Spinning disk confocal microscopy']] -> GFP-fusion cells	Imaging: [['Device', 'Spinning disk confocal microscope'], ['Container', 'Slide'], ['Temperature', '30 celsius']] -> Captured Z-stack images	ACQUIRE: [['Device', 'spinning disk confocal microscope'], ['Container', 'microscope slide covered with coverslip'], ['REG', None]] -> Z-sections	GROW: [['REG', 'GFP-fusion'], ['REG', 'solid media'], ['Device', None]] -> Z-stack images	GROW: [['REG', 'GFP-fusion'], ['REG', 'solid media'], ['Device', 'microscope slide covered with a coverslip']] -> Z-stack images	GROW: [['REG', 'GFP-fusion'], ['REG', 'solid media'], ['Device', 'microscope slide'], ['Device', 'coverslip'], ['Device', 'spinning disk confocal microscope']] -> Z-sections
	1	Grow yeast cells transformed with GFP-fusion on solid media, then transfer them to a microscope slide and cover with a coverslip.	GROW: [['REG', 'solid media'], ['Device', 'microscope slide'], ['Device', 'coverslip']] -> Microscope images	GROW: [['REG', 'GFP-fusion'], ['REG', 'solid media'], ['Device', 'microscope slide'], ['Device', 'coverslip']] -> Microscope images	GROW: [['REG', 'yeast_cells'], ['REG', 'solid_media'], ['REG', 'GFP_fusion']] -> Z-stack images	GROW: [['Device', 'microscope slide'], ['Container', 'coverslip'], ['Container', None]] -> yeast cells transformed with GFP-fusion	GROW: [['REG', 'GFP-fusion'], ['REG', 'solid media'], ['Device', None]] -> Z-stack images	Grow: [['Device', 'microscope slide'], ['Container', 'coverslip'], ['Bool', None], ['String', 'yeast cells transformed with GFP-fusion'], ['String', 'solid media']] -> Z-stack images	GROW: [['REG', 'yeast cells'], ['REG', 'GFP-fusion'], ['REG', 'solid media'], ['Device', 'microscope slide'], ['Device', 'coverslip']] -> Transformed yeast cells
		Acquire Z-sections using a spinning disk confocal microscope as described.	ACQUIRE: [['Device', 'spinning disk confocal microscope']] -> Z-sections	ACQUIRE: [['Device', 'spinning disk confocal microscope']] -> Z-sections	perform_protocol: [['String', 'initial setup parameters'], ['String', 'actual process steps']] -> Cleanup and end	ACQUIRE: [['Device', 'spinning disk confocal microscope'], ['REG', 'Z-sections']] -> Z-stack images	ACQUIRE: [['Device', 'Spinning disk confocal microscope']] -> Z-sections	Acquire: [['Device', 'spinning disk confocal microscope'], ['String', 'Z-sections']] -> Imaging data	ACQUIRE: [['Device', 'spinning disk confocal microscope']] -> Z-sections
	2	Prior to the onset of directed differentiation, pluripotent stem cells are cultured in maintenance medium with 1% or 2% DMSO for 24-48h.	CULTURE: [['REG', 'DMSO'], ['Time', '24-48h']] -> modified pluripotent stem cells	CULTURE: [['REG', 'DMSO'], ['Time', '24-48h']] -> modified pluripotent stem cells	Directed differentiation of pluripotent stem cells: [['Container', 'maintenance_medium'], ['Container', 'DMSO'], ['Container', 'medium_with_DMSO'], ['Container', 'cell_plate'], ['Temperature', 'ROOM'], ['Time', '24-48h'], ['Concentration', '1% or 2%'], ['Mass', '1'], ['Volume', None], ['Speed', None]] -> Pluripotent stem cells cultivation before directed differentiation	: [] -> 	CULTURE: [['Container', 'Maintenance medium'], ['Container', 'Pluripotent stem cells'], ['Mass', None], ['Time', '24-48h']] -> Directed differentiation	CULTURE: [['Container', None], ['String', 'maintenance medium with 1% or 2% DMSO'], ['Time', '24-48h']] -> pluripotent stem cells culture	CULTURE: [['Container', 'maintenance medium'], ['Concentration', '1% or 2% DMSO'], ['Time', '24-48h']] -> pluripotent stem cells
		Proceed with desired differentiation protocol after this treatment.	PROCEED: [['REG', None]] -> Differentiated cells	PROCEED: [['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> Differentiated cells	: [] -> 	: [] -> 	Differentiation: [['Device', None]] -> Proceed with desired differentiation protocol	desired differentiation: [['REG', 'treatment'], ['String', None]] -> protocol	Proceed with desired differentiation: [['REG', 'this treatment']] -> 
	3	Place larvae in a 1m^3 box filled with dirt, feed them the specified food 3-4 times a day at 2-3 hour intervals for optimal growth.	PLACE: [['Volume', '1m^3'], ['Time', '3-4 times'], ['Time', '2-3 hour']] -> Well-fed and growing larvae.	PLACE: [['Volume', '1m^3'], ['Time', '3-4 times'], ['Time', '2-3 hour']] -> Well-fed and growing larvae	LARVAE_GROWTH: [['Container', 'larvae'], ['Container', None], ['Time', '2-3 hours'], ['Time', 'optimal growth']] -> feeding specified food	FEED: [['String', 'specified food'], ['Mass', None], ['Time', 2]] -> Feeding larvae specified food...	GROW: [['Container', '1m^3 box filled with dirt'], ['String', 'specified food'], ['Time', None]] -> optimal larvae growth	Place larvae: [['Container', '1m^3 box filled with dirt'], ['String', 'specified food'], ['Time', '3-4 times a day at 2-3 hour intervals']] -> optimal growth	GROW: [['Container', '1m^3 box'], ['String', 'dirt'], ['String', 'specified food'], ['Time', '3-4 times a day'], ['Time', '2-3 hour intervals']] -> Larvae growth
		Continue until larvae become pupae, at which point increase food quantity.	INCREASE: [['REG', None]] -> Increased pupal size.	INCREASE: [['REG', 'larvae'], ['Device', None], ['REG', 'pupae']] -> Increased pupal size.	Monitor: [['Container', 'Drosophila larvae'], ['Container', 'Drosophila food'], ['Time', '24.0 HR']] -> Observation of larval behavior and transformation signs	increase_food_quantity: [['String', 'food_quantity']] -> increase in larval growth	FEED: [['Time', None], ['String', 'larvae'], ['Mass', 'food']] -> Pupal stage	Increase food quantity: [['Time', None]] -> Pupation	CONTINUE: [['Time', 'until larvae become pupae'], ['Mass', 'increase food quantity']] -> 
		Once pupae develop into adults, introduce water to the environment for mating.	INTRODUCE: [['REG', 'water']] -> Mated adults.	LAUNCH: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> Mated adults.	Introduce Water: [['String', 'water'], ['String', 'environment'], ['String', None]] -> Mating process enhancement	introduce_water_for_mating: [['Bool', True], ['String', None]] -> Water has been introduced to the environment for mating.	Introduce water for mating: [['Time', None], ['Container', 'water'], ['String', 'environment']] -> Adults mating	introduce_water: [['Time', 'Upon adult emergence'], ['String', 'water']] -> mating environment	INTRODUCE WATER: [['REG', 'pupae'], ['REG', 'adult'], ['REG', 'mating']] -> Environment ready for mating
		After mating, collect the new larvae.	COLLECT: [['REG', None]] -> new larvae	COLLECT: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['Device', None]] -> new larvae	LARVAE_COLLECTION: [['Container', 'mating samples'], ['Container', 'new larvae']] -> successful collection	collect_larvae: [] -> Collecting new larvae after mating	COLLECTION: [['Device', None], ['Container', None]] -> new larvae	collect: [['Time', None], ['Container', 'larvae']] -> larvae collection	MATE: [['REG', 'new larvae']] -> new larvae collection
	4	Recruit 7 mandibular models and apply radio opaque markers.	RECRUIT: [['REG', None]] -> labeled mandibular models	LOCATE: [['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> labeled mandibular models	Radio opaque marker application: [['Container', 'Mandibular models'], ['Container', 'Radio opaque markers'], ['String', 'Place the 7 mandibular models on the workbench'], ['String', 'Apply the radio opaque marker to model #7']] -> Complete radio opaque marker application	apply_radio_opaque_markers: [['Container', 'mandibular_model']] -> updated mandibular_model	MANDIBULAR_MODEL_EXPERIMENT: [['String', 'Recruit 7 mandibular models'], ['String', 'Apply radio opaque markers']] -> 	Recruit: [['Mass', None], ['String', 'mandibular models']] -> Apply radio opaque markers	Recruit: [['REG', '7 mandibular models'], ['String', 'apply radio opaque markers']] -> 
		Record 10 predetermined linear measurements, perform CBCT scanning of each model, and convert DICOM files into STL format.	RECORD: [['Time', None], ['Device', 'CBCT']] -> CBCT images in STL format	RECORD: [['Container', None], ['Time', None]] -> CBCT images in STL format	CBCT Scanning and DICOM to STL Conversion: [['Container', 'Object'], ['Time', None], ['Device', 'CBCT Scanner']] -> STL files of scanned models	record_linear_measurements: [['Volume', None]] -> list of linear measurements	Record and Perform CBCT scanning: [['Container', None], ['Device', None], ['String', 'linear measurements']] -> DICOM files	Record: [['Length', None]] -> Predetermined linear measurements	SCAN: [['REG', '10 predetermined linear measurements'], ['Device', 'CBCT Scanner'], ['String', 'DICOM files'], ['String', 'STL format']] -> STL files
		Use SLS and FFF printers for 3D printing the models.	PRINT: [['Device', 'SLS printers'], ['Device', 'FFF printers']] -> 3D printed models with SLS and FFF printers.	PRINT: [['REG', None], ['REG', None], ['Device', 'SLS'], ['Device', 'FFF']] -> 3D printed models with SLS and FFF printers	Experiment: [['Device', None], ['Time', '30 minutes'], ['Container', None]] -> Data analysis results	print_3d_models: [['String', 'SLS'], ['String', 'FFF']] -> 3D printing the models	3D_PRINT: [['Device', 'SLS printer'], ['Device', 'FFF printer']] -> 3D printed models	3D printing: [['Device', 'SLS printer'], ['Device', 'FFF printer']] -> 3D printed models	3D PRINT: [['Device', 'SLS printer'], ['Device', 'FFF printer']] -> 3D models
		Record the same 10 linear measurements on the printed models and compare these values against the reference models and each other.	RECORD: [['Container', None], ['Time', None]] -> Comparison of measurements	RECORD: [['Container', None], ['Time', None]] -> Comparison of measurements	Measure: [['Container', 'printed models'], ['Container', 'reference models'], ['Volume', None]] -> Comparison results	COMPARE: [['String', 'Printed Model 1'], ['String', 'Printed Model 2']] -> Comparison of linear measurements	Measure: [['Container', 'printed models'], ['Length', None]] -> Comparison of measured values	Record measurements: [['String', 'linear measurements'], ['String', 'printed models'], ['String', 'reference models']] -> Comparison of measurements	RECORD: [['REG', '10 linear measurements'], ['String', 'printed models'], ['String', 'reference models']] -> comparison values
Bioinformatics & Computational Biology	0	To evaluate CSC triage algorithms, review clinical data and existing algorithms, define the crisis, select and devise algorithms, define clinical endpoints, and select patient cohorts.	EVALUATE: [['REG', None], ['Device', None]] -> CSC triage algorithms evaluation	DETERMINE: [['REG', None], ['Device', None], ['REG', 'CSC triage algorithms']] -> CSC triage algorithms evaluation	experiment: [['Time', '24 hours'], ['Container', 'Petri dish'], ['Temperature', '37°C']] -> cell viability assay	evaluate_triage_algorithm: [['REG', 'clinical data'], ['REG', 'existing algorithms'], ['String', 'crisis definition'], ['REG', 'selected algorithm'], ['REG', 'clinical endpoints'], ['REG', 'patient cohorts']] -> selected_algorithm, clinical_endpoints, patient_cohorts	Evaluate: [['String', 'Clinical data and existing algorithms'], ['String', 'Crisis'], ['String', 'Algorithms'], ['String', 'Clinical endpoints'], ['String', 'Patient cohorts']] -> Algorithm evaluation	Evaluate: [['Container', None], ['String', 'CSC triage algorithms'], ['String', 'clinical data'], ['String', 'existing algorithms'], ['String', 'crisis'], ['String', 'clinical endpoints'], ['String', 'patient cohorts']] -> 	EVALUATE_CSC_TRIAGE_ALGORITHMS: [['String', 'review clinical data'], ['String', 'existing algorithms'], ['String', 'define the crisis'], ['String', 'select and devise algorithms'], ['String', 'define clinical endpoints'], ['String', 'select patient cohorts']] -> 
		Test algorithm accuracy using AUROC, simulate clinical decision-making in small patient groups using a bootstrap method, format input files with patient outcomes and priority scores, run simulations, and analyze decision-making efficacy.	TEST: [['Device', 'AUROC'], ['Device', 'bootstrap method']] -> decision-making efficacy	DETERMINE: [['REG', 'AUROC'], ['Device', None], ['REG', 'bootstrap method']] -> decision-making efficacy	No program: [] -> No output	bootstrap_simulation: [['Device', None], ['Volume', None]] -> Decision-making efficacy	Run simulations: [['String', 'input files with patient outcomes and priority scores'], ['Bool', None]] -> Decision-making efficacy	Test algorithm accuracy: [['String', 'AUROC'], ['String', 'simulate clinical decision-making in small patient groups using a bootstrap method'], ['String', 'format input files with patient outcomes and priority scores'], ['REG', None], ['REG', None], ['REG', None], ['Device', None]] -> run simulations and analyze decision-making efficacy	TEST: [['REG', 'AUROC'], ['String', 'bootstrap method'], ['REG', 'patient outcomes'], ['REG', 'priority scores'], ['String', 'simulations'], ['String', 'decision-making efficacy']] -> algorithm accuracy
	1	Download and install STNMF from GitHub, link: https://github.com/jiankliu/STNMF-SNN.	DOWNLOAD: [['REG', None]] -> Code	COPY: [['REG', None], ['REG', None], ['REG', None], ['Length', None], ['REG', None]] -> Code	Experimental Protocol: [['REG', None], ['Device', None], ['Container', None], ['Time', None]] -> Data analysis and visualization	DOWNLOAD_INSTALL: [['String', 'STNMF'], ['String', 'GitHub'], ['String', 'setup.py']] -> STNMF has been successfully downloaded and installed.	Download and Install: [['String', 'STNMF'], ['String', 'https://github.com/jiankliu/STNMF-SNN'], ['String', 'Follow installation instructions']] -> Installed STNMF successfully	Download and Install: [['String', 'STNMF'], ['String', 'GitHub'], ['String', 'https://github.com/jiankliu/STNMF-SNN']] -> 	Download and Install: [['REG', 'STNMF'], ['String', 'https://github.com/jiankliu/STNMF-SNN']] -> Installed STNMF program
		Process data by generating effective spike-triggered stimulus images (STE) from neuron spike trains and stimulus array, applying Singular Value Decomposition (SVD) for spatial and temporal filters.	PROCESS: [['REG', None]] -> filtered stimulus images	PROCEED: [['REG', None], ['Length', None], ['REG', None], ['REG', None]] -> filtered stimulus images	: [] -> 	STE: [['Device', None], ['Container', None], ['Container', None]] -> Spatial and temporal filters	Process data: [['String', 'neuron spike trains'], ['String', 'stimulus array'], ['String', 'STE'], ['String', 'SVD filter for spatial'], ['String', 'SVD filter for temporal']] -> effective spike-triggered stimulus images (STE) generated by applying Singular Value Decomposition (SVD) for spatial and temporal filters	: [] -> 	PROCESS_DATA: [['String', 'stimulus images'], ['String', 'neuron spike trains'], ['String', 'stimulus array'], ['REG', 'Singular Value Decomposition (SVD)'], ['String', 'spatial filters'], ['String', 'temporal filters']] -> Effective Spike-Triggered Stimulus Images
		Use STNMF on STE to infer subunits' spatial receptive field, obtaining weight matrix W and module matrix M. Analyze M and W to infer temporal filters, nonlinearity, and synaptic weights of subunits.	ANALYZE: [['REG', None], ['Device', None]] -> Temporal filters, nonlinearity, and synaptic weights of subunits.	DETERMINE: [['REG', None], ['Device', None], ['REG', None]] -> Temporal filters, nonlinearity, and synaptic weights of subunits	No program: [] -> None	STNMF: [['Container', 'STE matrix'], ['Container', 'W weight matrix'], ['Container', 'M module matrix']] -> Temporal Filters, Nonlinearity, Synaptic Weights	"STNMF: [['String', 'STE'], ['String', ""Subunits' Spatial Receptive Field Inference""], ['REG', None], ['Container', None]] -> weight matrix W, module matrix M, temporal filters, nonlinearity, synaptic weights of subunits"	"Use: [['Container', 'STNMF'], ['Container', 'STE'], ['Device', None], ['String', ""subunits' spatial receptive field""], ['Bool', None], ['String', 'weight matrix W'], ['String', 'module matrix M'], ['String', 'temporal filters'], ['String', 'nonlinearity'], ['String', 'synaptic weights of subunits']] -> Analysis results"	ANALYZE: [['Device', 'STNMF'], ['Device', 'STE'], ['REG', 'spatial receptive field'], ['REG', 'weight matrix W'], ['REG', 'module matrix M']] -> temporal filters, nonlinearity, synaptic weights of subunits
		For detailed computational analysis, apply algorithms to calculate temporal filter, nonlinearity, and classify spikes into modules based on synaptic connection weights, aiming to reveal complex neuronal network dynamics.	APPLY: [['REG', None]] -> modules with synaptic connection weights	APPLY: [['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> modules with synaptic connection weights	experiment: [['Time', None], ['Device', 'microscope'], ['Container', 'petri dish']] -> cell growth	SPIKE_CLASSIFICATION: [['Device', None], ['Container', None], ['Time', None]] -> Spike Modules	ANALYZE: [['String', 'Apply algorithms to calculate temporal filter'], ['String', 'Apply algorithms to calculate nonlinearity'], ['String', 'Classify spikes into modules based on synaptic connection weights']] -> reveal complex neuronal network dynamics	Calculate: [['String', 'temporal filter'], ['String', 'nonlinearity'], ['String', 'synaptic connection weights']] -> Neuronal network dynamics	COMPUTATIONAL ANALYSIS: [['String', 'algorithms'], ['String', 'temporal filter'], ['String', 'nonlinearity'], ['String', 'classify spikes'], ['String', 'modules'], ['String', 'synaptic connection weights'], ['String', 'neuronal network dynamics']] -> Complex neural network dynamics details
	2	Access PAD2 for TF colocalization analysis by selecting signal files from the database for targeted analysis within specific genomic regions identified by ChromHMM.	ACCESS: [['REG', None]] -> TF colocalization analysis	TF colocalization analysis: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> 	Access PAD2_tf_colocalization: [['Device', None], ['String', 'signal files from the database'], ['String', 'specific genomic regions identified by ChromHMM']] -> targeted analysis	perform_colocalization_analysis: [['Container', 'genomic_regions'], ['Container', 'signal_files']] -> TF colocalization analysis	TF colocalization analysis: [['REG', 'PAD2'], ['REG', 'specific genomic regions identified by ChromHMM'], ['String', 'selecting signal files from database'], ['Device', None]] -> N/A	TF colocalization analysis: [['REG', 'PAD2'], ['String', 'signal files'], ['String', 'database'], ['REG', 'ChromHMM'], ['Container', None]] -> targeted analysis	Access PAD2: [['REG', 'TF colocalization analysis'], ['REG', 'signal files'], ['REG', 'specific genomic regions'], ['Device', 'database'], ['REG', 'ChromHMM']] -> targeted analysis
		Optionally, upload personal signal files for analysis.	UPLOAD: [['REG', None]] -> Analysis results	SELECT: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> Analysis results	personal_signal_files_analysis: [['String', 'Upload personal signal files for analysis'], ['String', 'Optionally, upload personal signal files for analysis.'], ['String', None]] -> null	analyze_signal: [['Container', 'signal_files']] -> Signal analysis results	UPLOAD: [['String', 'personal signal files']] -> Analysis	upload: [['String', 'personal signal files']] -> analysis	UPLOAD: [['String', 'personal signal files']] -> analysis
	3	Install STNMF by downloading from GitHub (https://github.com/jiankliu/STNMF-SNN) and adding to MATLAB path.	INSTALL: [['REG', None]] -> software tool	BUILD: [['REG', None], ['REG', None], ['String', None], ['String', None], ['String', None]] -> software tool	STNMF installation: [['String', 'This protocol must be performed in a computer system with MATLAB installed.'], ['String', 'Step 1: Download STNMF from GitHub'], ['String', 'Unzip the downloaded file if it is a .zip file. You can execute this action with suitable software on your PC.'], ['String', 'Step 2: Add the file to the MATLAB path']] -> addpath(genpath('/path/to/STNMF-SNN'))	"install_STNMF: [['String', 'git clone https://github.com/jiankliu/STNMF-SNN'], ['String', ""addpath(genpath('STNMF-SNN'))""], ['String', None]] -> STNMF has been successfully installed."	Execution: [['String', 'Download STNMF from GitHub at https://github.com/jiankliu/STNMF-SNN'], ['String', 'Add STNMF to MATLAB path'], ['String', None]] -> STNMF installed successfully	Install: [['String', 'STNMF'], ['String', 'download from GitHub (https://github.com/jiankliu/STNMF-SNN)'], ['String', 'add to MATLAB path']] -> Successful installation	INSTALL: [['String', 'STNMF'], ['String', 'https://github.com/jiankliu/STNMF-SNN'], ['String', 'MATLAB']] -> 
		Preprocess data by generating effective spike-triggered stimulus images from stimulus array and spike trains, using Singular Value Decomposition for spatial and temporal filters, and forming an N×P matrix STE.	GENERATE: [['REG', None]] -> Spike-triggered stimulus images.	GENERATE: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> Spike-triggered stimulus images	Preprocessing Data: [['String', 'stimulus array'], ['String', 'spike trains'], ['String', None]] -> Spike-Triggered Ensemble (STE) matrix	GENERATE_STE: [['Container', 'stimulus_array'], ['Container', 'spike_trains'], ['Length', 5]] -> STE	Image Generation: [['String', 'Spike-Triggered Stimulus Image Generation'], ['Bool', None], ['Container', 'stimulus array']] -> N×P matrix STE	: [] -> 	PREPROCESS: [['String', 'spike-triggered stimulus images'], ['String', 'stimulus array'], ['String', 'spike trains'], ['String', 'Singular Value Decomposition'], ['String', 'spatial and temporal filters'], ['String', 'N×P matrix STE']] -> Preprocessed data
		Analyze M and W to infer subunits' temporal filter, nonlinearity, and synaptic connection weights by calculating spatial filter and temporal filter convolution, creating generator signal, and visualizing nonlinearity.	ANALYZE: [['REG', None]] -> Inference of subunits' temporal filter, nonlinearity, and synaptic connection weights.	"DETERMINE: [['REG', 'M'], ['REG', 'W'], ['REG', ""subunits'""], ['REG', 'temporal filter'], ['REG', 'synaptic connection weights'], ['REG', 'spatial filter'], ['REG', 'temporal filter convolution'], ['REG', 'generator signal']] -> Inference of subunits' temporal filter, nonlinearity, and synaptic connection weights"	"Analyze: [['String', 'M and W'], ['String', ""subunits' temporal filter, nonlinearity, and synaptic connection weights""], ['Device', None]] -> spatial filter, temporal filter convolution, generator signal, visualize nonlinearity"	Run: [['Container', 'M'], ['Container', 'W'], ['Container', 'temporal_filter']] -> Visualization of Nonlinearity	ANALYZE: [['Time', 'M'], ['Time', 'W'], ['Device', None]] -> Visualization of inferred subunits	"Analyze: [['String', 'M'], ['String', 'W'], ['String', ""subunits' temporal filter""], ['String', 'nonlinearity'], ['String', 'synaptic connection weights'], ['String', 'spatial filter'], ['String', 'temporal filter convolution'], ['String', 'generator signal']] -> visualizing nonlinearity"	"ANALYZE: [['REG', 'M'], ['REG', 'W'], ['String', ""subunits' temporal filter""], ['String', 'nonlinearity'], ['String', 'synaptic connection weights'], ['String', 'spatial filter'], ['String', 'temporal filter convolution'], ['String', 'generator signal']] -> visualizing nonlinearity"
		Obtain synaptic connection weights and spike trains by averaging W matrix columns, determining ON-OFF attribute, and classifying spikes into corresponding modules.	OBTAIN: [['Length', None], ['Time', None]] -> synaptic connection weights	COLLECT: [['Container', None], ['Length', None], ['Time', None]] -> synaptic connection weights	Obtain Synaptic Connection Weights: [['Container', 'weight matrix W'], ['Container', 'synaptic_weights']] -> synaptic connection weights	Obtain synaptic connection weights: [['Device', None], ['Container', None], ['Bool', 0.5]] -> Average synaptic connection weights	Classify: [['Device', None], ['Container', None], ['String', 'spike classification']] -> classified modules	Obtain synaptic connection weights: [['REG', 'W matrix'], ['REG', 'spike trains'], ['REG', 'ON-OFF attribute'], ['REG', 'spike modules']] -> averaging columns	OBTAIN: [['REG', 'synaptic connection weights'], ['REG', 'spike trains'], ['REG', 'W matrix columns'], ['REG', 'ON-OFF attribute'], ['REG', 'spike modules']] -> averaged W matrix columns, ON-OFF attribute, classified spikes into modules
	4	To format phosphoproteomic data for CausalPath analysis, first ensure the data is in the required format, potentially using R for reformatting.	FORMAT: [['REG', None]] -> formatted data, restructured data	COPY: [['REG', None], ['REG', None], ['REG', 'phosphoproteomic data'], ['Length', None], ['REG', 'CausalPath analysis']] -> formatted data, restructured data	Experimental Protocol: [['Time', None], ['Bool', None], ['Concentration', '10mM'], ['Temperature', None]] -> Data Analysis	reformat_data: [['Container', 'phosphoproteomic data']] -> formatted_data	CausalPath analysis: [['Device', None]] -> Phosphoproteomic data	Format: [['String', 'phosphoproteomic data'], ['String', 'CausalPath analysis'], ['String', 'R']] -> 	FORMAT: [['REG', 'phosphoproteomic data'], ['Device', 'R'], ['REG', 'CausalPath analysis']] -> Reformatted data
		Adjust parameters in parameters.txt to match your analysis needs, including specifying input files and analysis options.	ADJUST: [['REG', None]] -> data analysis results	CHANGE: [['REG', None], ['REG', None], ['Device', None], ['Container', None], ['Time', None]] -> data analysis results	No action specified: [] -> No output specified	Perform analysis: [['String', 'input_file1'], ['String', 'input_file2'], ['String', 'analysis_option1'], ['String', 'analysis_option2']] -> Analysis results	ADJUST_PARAMETERS: [['String', 'parameters.txt'], ['String', 'Adjust parameters to match analysis needs, specify input files and analysis options'], ['String', None]] -> 	Adjust parameters: [['String', 'input files'], ['String', 'analysis options']] -> Match analysis needs	Adjust parameters: [['String', 'parameters.txt'], ['String', 'analysis needs'], ['String', 'input files'], ['String', 'analysis options']] -> Adjusted parameters
		Execute the CausalPath algorithm via command line with the necessary files in the same directory, producing results in various formats for detailed network analysis.	EXECUTE: [['REG', None]] -> results	EXECUTE: [['REG', None], ['REG', None], ['REG', None], ['REG', None], ['REG', None]] -> results	Execute: [['String', 'CausalPath algorithm'], ['String', 'inputFile'], ['String', 'outputFile']] -> Processed data	execute CausalPath algorithm: [['String', 'CausalPath -i input_file.txt -o output_file.txt -f detailed_results'], ['String', 'os.system(command)'], ['Device', None]] -> output_file.txt	Execute: [['String', 'CausalPath algorithm'], ['String', 'command line'], ['String', 'necessary files in the same directory'], ['String', None], ['String', 'network analysis']] -> various formats	Execute: [['String', 'CausalPath algorithm'], ['String', 'command line'], ['String', 'necessary files'], ['String', 'same directory'], ['String', 'results in various formats'], ['String', 'detailed network analysis']] -> 	EXECUTE: [['REG', 'CausalPath algorithm'], ['String', 'command line'], ['REG', 'necessary files'], ['REG', 'same directory']] -> results in various formats
		This process involves critical steps such as data preparation, parameter adjustment, algorithm execution, and result visualization, each contributing to the comprehensive analysis of phosphoproteomic data.	ANALYZE: [['REG', None], ['Device', None]] -> comprehensive analysis of phosphoproteomic data	DETERMINE: [['REG', None], ['Device', None], ['REG', None]] -> comprehensive analysis of phosphoproteomic data	Data Analysis: [['Time', None], ['String', 'Training and Testing Data'], ['String', 'Model Parameters'], ['String', 'Cross Validation'], ['String', 'Training Model'], ['String', 'Testing Model'], ['String', 'Model Performance'], ['Bool', None], ['String', 'Confusion Matrix'], ['String', 'ROC Curve'], ['String', 'Performance Metrics']] -> Data Analysis Report	Protocol Execution: [['Device', None], ['String', 'phosphoproteomic data'], ['String', 'algorithm parameters']] -> Result visualization step	phosphoproteomic analysis: [['String', 'data preparation'], ['String', 'parameter adjustment'], ['String', 'algorithm execution'], ['String', 'result visualization'], ['String', None]] -> Comprehensive analysis of phosphoproteomic data	comprehensive analysis: [['String', 'phosphoproteomic data'], ['String', 'data preparation'], ['String', 'parameter adjustment'], ['String', 'algorithm execution'], ['String', 'result visualization']] -> detailed analysis report	ANALYSIS: [['String', 'data preparation'], ['String', 'parameter adjustment'], ['String', 'algorithm execution'], ['String', 'result visualization']] -> comprehensive analysis of phosphoproteomic data
