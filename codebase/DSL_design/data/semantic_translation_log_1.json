{
    "Molecular Biology & Genetics": {
        "0": {
            "subject": "Molecular Biology & Genetics",
            "enum": 0,
            "protocol": "Bile Sample Preparation: Collect bile into a sterile bottle. Centrifuge at 3000g for 10 minutes at 4\u00b0C to clear sediments. Aliquot 1 ml into tubes. Store aliquots at -20\u00b0C. ",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Bile Sample Preparation: Collect bile into a sterile bottle.",
                    "python": "python\ndef bile_sample_preparation():\n    # Wait for user to collect bile into a sterile bottle\n    input(\"Please collect the bile into a sterile bottle and press Enter when ready.\")\n    print(\"Bile sample preparation completed.\")\n  \n# Call the function to begin bile sample preparation\nbile_sample_preparation()\n",
                    "biocoder": "cpp\n#include \"BioCoder.h\"\n\nvoid main() {\n    // Step 1: Bile Sample Preparation\n    Container sterile_bottle = new_container(STERILE_BOTTLE);\n    Fluid bile = new_fluid(\"bile\");\n    first_step();\n    collect(bile, sterile_bottle);\n}\n",
                    "result_baseline4": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "Volume",
                                null
                            ],
                            [
                                "Container",
                                "bottle"
                            ]
                        ],
                        "emit": "sterile bile sample"
                    },
                    "result_baseline5": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "Volume",
                                null
                            ],
                            [
                                "Container",
                                "sterile_bottle"
                            ]
                        ],
                        "emit": "sterile bile sample"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Centrifuge at 3000g for 10 minutes at 4\u00b0C to clear sediments.",
                    "python": "python\nimport time\n\ndef centrifuge(speed, time, temperature):\n    print(f\"Centrifuging at {speed}g for {time} minutes at {temperature}\u00b0C to clear sediments...\")\n    time.sleep(time * 60)  # Convert minutes to seconds\n    print(\"Centrifugation complete.\")\n\n# Protocol Step 1: Centrifuge at 3000g for 10 minutes at 4\u00b0C\ncentrifuge(3000, 10, 4)\n",
                    "biocoder": "cpp\n#include <biocoder.h>\n\nvoid setup()\n{\n  Centrifuge(3000, speed::g, time::min(10), temperature::c(4), \"to clear sediments\");\n}\n\nint main()\n{\n   setup();\n   return 0;\n}\n",
                    "result_baseline4": {
                        "opcode": "CENTRIFUGE",
                        "slot": [
                            [
                                "Force",
                                "3000g"
                            ],
                            [
                                "Time",
                                "10 minutes"
                            ],
                            [
                                "Temperature",
                                "4\u00b0C"
                            ]
                        ],
                        "emit": "Clear sediments"
                    },
                    "result_baseline5": {
                        "opcode": "CENTRIFUGE",
                        "slot": [
                            [
                                "Force",
                                "3000g"
                            ],
                            [
                                "Time",
                                "10 minutes"
                            ],
                            [
                                "Temperature",
                                "4\u00b0C"
                            ]
                        ],
                        "emit": "Clear sediments"
                    }
                },
                {
                    "i": 2,
                    "sentense": "Aliquot 1 ml into tubes.",
                    "python": "python\n# Define the initial volume\ninitial_volume = 1.0  # in ml\n\n# Define the number of tubes\nnum_tubes = 10\n\n# Calculate the aliquot volume for each tube\naliquot_volume = initial_volume / num_tubes\n\n# Print the aliquot volume for each tube\nfor tube in range(1, num_tubes+1):  # range starts from 1 and ends at num_tubes\n    print(f\"Aliquot volume in tube {tube}: {aliquot_volume} ml\")\n",
                    "biocoder": "python\nfrom biocoder import *\n\ndef aliquot_tubes():\n    # create a new tube\n    tubes = new_container(ContainerType.TUBE)\n    \n    # aliquot 1 ml into tubes\n    aliquot(tubes, vol=1, vol_unit=UnitType.ML)\n\naliquot_tubes()\n",
                    "result_baseline4": {
                        "opcode": "ALIQUOT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Temperature",
                                null
                            ]
                        ],
                        "emit": "Samples in tubes."
                    },
                    "result_baseline5": {
                        "opcode": "ALIQUOT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Temperature",
                                null
                            ]
                        ],
                        "emit": "Samples in tubes."
                    }
                },
                {
                    "i": 3,
                    "sentense": "Store aliquots at -20\u00b0C.",
                    "python": "python\n# Store aliquots at -20\u00b0C\n\ndef store_aliquots(temperature):\n    if temperature != -20:\n        print(\"Please store aliquots at -20\u00b0C.\")\n    else:\n        print(\"Aliquots have been stored at -20\u00b0C.\")\n\nstore_aliquots(-20)\n",
                    "biocoder": "\nbegin_protocol(\"Store Aliquots\");\n\nstore(\"Aliquots\", -20, time::infinite());\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "STORE",
                        "slot": [
                            [
                                "Container",
                                null
                            ],
                            [
                                "Temperature",
                                "-20\u00b0C"
                            ]
                        ],
                        "emit": "Frozen samples"
                    },
                    "result_baseline5": {
                        "opcode": "STORE",
                        "slot": [
                            [
                                "Container",
                                "Aliquots"
                            ],
                            [
                                "Temperature",
                                "-20\u00b0C"
                            ]
                        ],
                        "emit": "Frozen samples"
                    }
                }
            ]
        },
        "1": {
            "subject": "Molecular Biology & Genetics",
            "enum": 1,
            "protocol": "3' Terminal Nucleosides Determination in RNA: Dissolve yeast tRNA<sup>Phe</sup> or mouse piRNAs in Milli-Q water. Add ammonium acetate buffer and RNase T<sub>2</sub>, then incubate. After RNA hydrolysis, analyze the hydrolysate using an LC/MS system.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "3' Terminal Nucleosides Determination in RNA: Dissolve yeast tRNA<sup>Phe</sup> or mouse piRNAs in Milli-Q water.",
                    "python": "python\ndef determine_terminal_nucleosides(rna_type):\n    rna_solution = dissolve_rna_in_water(rna_type)\n    terminal_nucleosides = determine_3_terminal_nucleosides(rna_solution)\n    return terminal_nucleosides\n\ndef dissolve_rna_in_water(rna_type):\n    if rna_type == \"yeast tRNA\":\n        rna_solution = \"yeast tRNA dissolved in Milli-Q water\"\n    elif rna_type == \"mouse piRNAs\":\n        rna_solution = \"mouse piRNAs dissolved in Milli-Q water\"\n    else:\n        rna_solution = None\n    return rna_solution\n\ndef determine_3_terminal_nucleosides(rna_solution):\n    if rna_solution:\n        terminal_nucleosides = \"Result: 3' terminal nucleosides determined\"\n    else:\n        terminal_nucleosides = \"Error: RNA solution not found\"\n    return terminal_nucleosides\n\n# Example usage\nrna_type = \"yeast tRNA\"\nresults = determine_terminal_nucleosides(rna_type)\nprint(results)\n",
                    "biocoder": "cpp\n#include <biocoder.h>\n\nvoid startup()\n{\n  // Step 1: Dissolve yeast tRNAPhe or mouse piRNAs in Milli-Q water\n  Solution yeast_tRNA = new_Solution(\"yeast tRNAPhe\");\n  Solution mouse_piRNA = new_Solution(\"mouse piRNAs\");\n  Solution milli_q_water = new_Solution(\"Milli-Q water\");\n    \n  first_step();\n  Fluid *yeast_or_mouse = new_Fluid(yeast_tRNA, mouse_piRNA);\n  Fluid *mix[2] = {yeast_or_mouse, milli_q_water};\n  Solution *yeast_mouse_solution = mix_solutions(\"yeast_mouse_solution\", mix, 2);\n  dissolve(yeast_mouse_solution);\n}\n\nint main()\n{\n  startup();\n  return 0;\n}\n",
                    "result_baseline4": {
                        "opcode": "DISSOLVE",
                        "slot": [
                            [
                                "REG",
                                "yeast tRNA"
                            ],
                            [
                                "REG",
                                "mouse piRNAs"
                            ],
                            [
                                "REG",
                                "Milli-Q water"
                            ],
                            [
                                "REG",
                                "Milli-Q water"
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "RNA solution not found"
                    },
                    "result_baseline5": {
                        "opcode": "DISSOLVE",
                        "slot": [
                            [
                                "REG",
                                "yeast tRNAPhe"
                            ],
                            [
                                "REG",
                                "mouse piRNAs"
                            ],
                            [
                                "REG",
                                "Milli-Q water"
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "nucleosides"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Add ammonium acetate buffer and RNase T<sub>2</sub>, then incubate.",
                    "python": "python\n# Define a function to perform the experimental protocol\ndef experimental_protocol():\n    # Add ammonium acetate buffer\n    print(\"Adding ammonium acetate buffer...\")\n    \n    # Add RNase T2\n    print(\"Adding RNase T2...\")\n    \n    # Incubate\n    print(\"Incubating...\")\n    \n# Call the function to execute the protocol\nexperimental_protocol()\n",
                    "biocoder": "cpp\n#include <BioCoder.h>\n\nvoid main() {\n\n\tBioCoder *bio = new BioCoder(\"RNase T2 Protocol\");\n\t\n\t// Step 1\n\tContainer *tube = bio->new_container(STERILE_MICROFUGE_TUBE);\n\t\n\tbio->first_step(\"Preparation\");\n\tbio->comment(\"Add ammonium acetate buffer and RNase T2\");\n\n\tSolution *solution = bio->new_solution();\n\tsolution->add_to_container(tube, \"ammonium acetate buffer\", mm(10));\n\tsolution->add_to_container(tube, \"RNase T2\", microliter(1));\n\t\n\t// Step 2\n\tbio->next_step(\"Incubation\");\n\tbio->comment(\"Incubate the solution.\");\n\tbio->incubate(tube, RT_C, minutes(30));\n\n\tbio->end_protocol();\n}\n",
                    "result_baseline4": {
                        "opcode": "ADD",
                        "slot": [
                            [
                                "REG",
                                "ammonium acetate buffer"
                            ],
                            [
                                "Container",
                                null
                            ],
                            [
                                "Volume",
                                null
                            ],
                            [
                                "REG",
                                "RNase T2"
                            ]
                        ],
                        "emit": "incubated RNase T2"
                    },
                    "result_baseline5": {
                        "opcode": "ADD",
                        "slot": [
                            [
                                "REG",
                                "ammonium acetate buffer"
                            ],
                            [
                                "Container",
                                null
                            ],
                            [
                                "Volume",
                                null
                            ],
                            [
                                "REG",
                                "RNase T2"
                            ]
                        ],
                        "emit": "incubated RNase T2"
                    }
                },
                {
                    "i": 2,
                    "sentense": "After RNA hydrolysis, analyze the hydrolysate using an LC/MS system.",
                    "python": "\n# Python program to describe the experimental protocol\n\n# Step 1: RNA Hydrolysis\ndef rna_hydrolysis():\n    # your code for RNA hydrolysis here\n    pass\n\n# Step 2: Analyze Hydrolysate using LC/MS system\ndef analyze_hydrolysate():\n    # your code for analyzing hydrolysate using LC/MS system here\n    pass\n\n# Main program\nif __name__ == \"__main__\":\n    # Step 1: RNA Hydrolysis\n    rna_hydrolysis()\n\n    # Step 2: Analyze Hydrolysate using LC/MS system\n    analyze_hydrolysate()\n",
                    "biocoder": "python\n# Biocoder (Pseudocode)\n\ndef RNA_hydrolysis_analysis():\n    \n    # Step 1: RNA hydrolysis\n    RNA_hydrolysis = start_reaction()\n    input_to_reaction(RNA_hydrolysis, 'RNA')\n    incubate_reaction(RNA_hydrolysis, temp=37, time=60, time_units=MINUTES)\n    stop_reaction(RNA_hydrolysis)\n    \n    # Step 2: Analyze the hydrolysate using an LC/MS system\n    hydrolysate = output_from_reaction(RNA_hydrolysis)\n    LCMS_analysis = start_LCMS(hydrolysate)\n    analyze_LCMS(LCMS_analysis)\n    stop_LCMS(LCMS_analysis)\n    \n\nRNA_hydrolysis_analysis()\n",
                    "result_baseline4": {
                        "opcode": "ANALYZE",
                        "slot": [
                            [
                                "REG",
                                "RNA hydrolysis"
                            ],
                            [
                                "Device",
                                "LC/MS system"
                            ]
                        ],
                        "emit": "hydrolysate composition"
                    },
                    "result_baseline5": {
                        "opcode": "ANALYZE",
                        "slot": [
                            [
                                "REG",
                                "RNA hydrolysis"
                            ],
                            [
                                "Device",
                                "LC/MS system"
                            ]
                        ],
                        "emit": "hydrolysate composition"
                    }
                }
            ]
        },
        "2": {
            "subject": "Molecular Biology & Genetics",
            "enum": 2,
            "protocol": "Cell Thawing, Splitting, and Transfection: Thaw cells, spin down, and plate in growth media. Event trigger: Split cells at 80% confluency to avoid differentiation. For transfection, seed at low density and change media post-transfection for differentiation or growth.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Cell Thawing, Splitting, and Transfection: Thaw cells, spin down, and plate in growth media.",
                    "python": "No program",
                    "biocoder": "\nbegin_protocol(\"Cell Thawing, Splitting, and Transfection\");\n\nbegin_step(\"Thaw Cells\");\ncomment(\"Start with thawing of cells\");\nend_step(\"Thaw Cells\");\n\nbegin_step(\"Spin Down\");\ncomment(\"Now, spin down the cells\");\nend_step(\"Spin Down\");\n\nbegin_step(\"Plate in Growth Media\");\ncomment(\"Finally, plate the cells in growth media for transfection\");\nend_step(\"Plate in Growth Media\");\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "THAW",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Temperature",
                                null
                            ],
                            [
                                "Device",
                                null
                            ]
                        ],
                        "emit": "plate in growth media."
                    },
                    "result_baseline5": {
                        "opcode": "THAW",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Temperature",
                                null
                            ],
                            [
                                "Device",
                                null
                            ]
                        ],
                        "emit": "plate in growth media."
                    }
                },
                {
                    "i": 1,
                    "sentense": "Event trigger: Split cells at 80% confluency to avoid differentiation.",
                    "python": "python\n\ndef split_cells(confluency_percentage):\n    if confluency_percentage < 80:\n        print(\"Cells are not at 80% confluency. No need to split.\")\n    else:\n        print(\"Splitting cells to avoid differentiation.\")\n\n# Example usage\nconfluency = 85\nsplit_cells(confluency)\n\n",
                    "biocoder": "\n#include \"BioCoder.h\"\n\nvoid main()\n{\n\tCellCultureProtocols::cell_culture protocol;\n\t\n\tprotocol = CellCultureProtocols::split_cells(CellCultureProtocols::confluency(80), CellCultureProtocols::differentiation());\n\n\tprint_protocol(protocol);\n}\n",
                    "result_baseline4": {
                        "opcode": "SPLIT",
                        "slot": [
                            [
                                "Volume",
                                null
                            ],
                            [
                                "Force",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Temperature",
                                null
                            ]
                        ],
                        "emit": "cell behavior at different confluency levels"
                    },
                    "result_baseline5": {
                        "opcode": "SPLIT",
                        "slot": [
                            [
                                "Volume",
                                null
                            ],
                            [
                                "Force",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Temperature",
                                null
                            ]
                        ],
                        "emit": "cell behavior at different confluency levels"
                    }
                },
                {
                    "i": 2,
                    "sentense": "For transfection, seed at low density and change media post-transfection for differentiation or growth.",
                    "python": "python\ndef transfection_protocol():\n    # Step 1: Seed cells at low density\n    seed_cells()\n\n    # Step 2: Perform transfection\n    perform_transfection()\n\n    # Step 3: Change media post-transfection\n    change_media()\n\ndef seed_cells():\n    print(\"Seeding cells at low density\")\n\ndef perform_transfection():\n    print(\"Performing transfection\")\n\ndef change_media():\n    print(\"Changing media post-transfection\")\n\n# Run the transfection protocol\ntransfection_protocol()\n",
                    "biocoder": "cpp\n#include <BioCoder.h>\n\nvoid main() {\n\n    // defining solutions used in the procedure\n    SOLUTION(transfection_solution, \"Transfection solution\");\n    SOLUTION(media, \"Media for differentiation or growth\");\n\n    // Specimens used in the procedure\n    SPECIMEN(sample, \"Low density seeded cells\");\n\n    // Start Describe protocol\n    start_protocol(\"Transfection protocol\");\n\n    //Steps\n\n    // Step 1: Transfection\n    first_step(\"Transfection\");\n    add_to(transfection_solution, sample);\n    comment(\"Ensure the cells are spread evenly.\");\n\n    // Step 2: Changing media post-transfection\n    next_step(\"Change media post-transfection\");\n    replace(media, sample);\n    comment(\"This allows for differentiation or growth post-transfection.\");\n\n    end_protocol();\n}\n",
                    "result_baseline4": {
                        "opcode": "TRANSACTION",
                        "slot": [
                            [
                                "REG",
                                "Seeding cells at low density"
                            ],
                            [
                                "REG",
                                "Performing transfection"
                            ],
                            [
                                "REG",
                                "Changing media post-transfection"
                            ]
                        ],
                        "emit": "Modified cells"
                    },
                    "result_baseline5": {
                        "opcode": "",
                        "slot": [],
                        "emit": ""
                    }
                }
            ]
        },
        "3": {
            "subject": "Molecular Biology & Genetics",
            "enum": 3,
            "protocol": "Bile Processing Protocol: Collect bile in sterile bottles from patients with biliary tubes. Centrifuge at 3000g for 10 minutes at 4\u00b0C to remove sediment and debris. Aliquot the clear bile into 1 ml volumes in microcentrifuge tubes. Store the aliquots at -20\u00b0C for future use. ",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Bile Processing Protocol: Collect bile in sterile bottles from patients with biliary tubes.",
                    "python": "python\ndef collect_bile():\n    # Prompt user if they are ready to collect bile\n    confirm = input(\"Are you ready to collect bile? (Enter 'Y' for Yes or 'N' for No): \")\n\n    # Repeat until the user confirms they are ready\n    while confirm.upper() != \"Y\":\n        confirm = input(\"Please enter 'Y' when you are ready to collect bile: \")\n\n    # Create an empty list to store the collected bile samples\n    bile_samples = []\n\n    # Get the number of patients\n    num_patients = int(input(\"Enter the number of patients with biliary tubes: \"))\n\n    # Iterate over each patient\n    for i in range(1, num_patients+1):\n        # Prompt user to collect bile from the current patient\n        print(f\"Collect bile from patient {i}\")\n        bile = input(\"Enter the bile sample collected from the patient: \")\n\n        # Append the collected bile sample to the list\n        bile_samples.append(bile)\n\n    # Return the list of collected bile samples\n    return bile_samples\n\n\n# Main program\nif __name__ == \"__main__\":\n    print(\"Bile Processing Protocol\")\n    print(\"========================\")\n\n    # Collect bile from patients\n    collected_samples = collect_bile()\n\n    # Display the collected bile samples\n    print(\"\\nCollected Bile Samples:\")\n    for i, sample in enumerate(collected_samples, 1):\n        print(f\"Sample {i}: {sample}\")\n",
                    "biocoder": "cpp\n#include \"biocoder.h\"\n\nvoid setup() \n{\n  start_protocol(\"Bile Processing Protocol\");\n}\n\nvoid loop() \n{\n  Fluid bile = new_fluid(\"bile from patients with biliary tubes\");\n  Container sterile_bottle = new_container(BOTTLE, \"sterile bottle\");\n\n  first_step(\"Bile Collection\");\n  aspirate(sterile_bottle, bile);\n\n  next_step(\"Storage\");\n  comment(\"Store the bile in the sterile bottle until further analysis.\");\n\n  end_protocol();\n}\n\nint main(int argc, char* argv[])\n{\n  setup();\n\n  run_protocol(NULL);\n\n  return 0;\n}\n",
                    "result_baseline4": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                "bile"
                            ],
                            [
                                "REG",
                                "sterile bottles"
                            ],
                            [
                                "Container",
                                "sterile bottles"
                            ],
                            [
                                "Volume",
                                null
                            ]
                        ],
                        "emit": "sterile bile samples"
                    },
                    "result_baseline5": {
                        "opcode": "Bile Processing Protocol",
                        "slot": [
                            [
                                "REG",
                                "bile from patients with biliary tubes"
                            ],
                            [
                                "Container",
                                "sterile bottle"
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    }
                },
                {
                    "i": 1,
                    "sentense": "Centrifuge at 3000g for 10 minutes at 4\u00b0C to remove sediment and debris.",
                    "python": "python\nimport time\n\ndef centrifuge(speed, time, temperature):\n    print(f\"Centrifuging at {speed}g for {time} minutes at {temperature}\u00b0C...\")\n    # simulate centrifugation process\n    time.sleep(time * 60)\n    print(\"Centrifugation complete.\")\n\n# set the parameters\nspeed = 3000\ntime = 10\ntemperature = 4\n\ncentrifuge(speed, time, temperature)\n",
                    "biocoder": "\nbegin_protocol(\"Remove sediment and debris\");\n\ncentrifuge(4\u00b0C, speed(3000g), time(10, mins));\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "CENTRIFUGE",
                        "slot": [
                            [
                                "Force",
                                "3000g"
                            ],
                            [
                                "Time",
                                "10 minutes"
                            ],
                            [
                                "Temperature",
                                "4\u00b0C"
                            ],
                            [
                                "REG",
                                "sediment"
                            ],
                            [
                                "REG",
                                "debris"
                            ]
                        ],
                        "emit": "Centrifuged supernatant"
                    },
                    "result_baseline5": {
                        "opcode": "CENTRIFUGE",
                        "slot": [
                            [
                                "Force",
                                "3000g"
                            ],
                            [
                                "Time",
                                "10 minutes"
                            ],
                            [
                                "Temperature",
                                "4\u00b0C"
                            ],
                            [
                                "REG",
                                "sediment"
                            ],
                            [
                                "REG",
                                "debris"
                            ]
                        ],
                        "emit": "\"Centrifuged supernatant\""
                    }
                },
                {
                    "i": 2,
                    "sentense": "Aliquot the clear bile into 1 ml volumes in microcentrifuge tubes.",
                    "python": "python\ndef aliquot_clear_bile(volume):\n    # Function to aliquot clear bile into microcentrifuge tubes\n    \n    num_tubes = 1  # Number of tubes to aliquot into\n    tube_volume = 1  # Volume of each microcentrifuge tube\n    \n    if volume < tube_volume:\n        print(\"Insufficient clear bile for aliquoting.\")\n        return\n    \n    # Calculate the number of aliquots needed\n    num_aliquots = volume // tube_volume\n    \n    # Print the aliquot information\n    print(\"Aliquoting the clear bile into {} ml volumes in microcentrifuge tubes:\".format(tube_volume))\n    for i in range(num_aliquots):\n        print(\"Aliquot {}: {} ml\".format(i+1, tube_volume))\n    \n    # Print any remaining volume, if applicable\n    remaining_volume = volume - (num_aliquots * tube_volume)\n    if remaining_volume > 0:\n        print(\"Remaining volume: {} ml\".format(remaining_volume))\n\n\n# Example usage\nvolume_to_aliquot = 5  # ml\naliquot_clear_bile(volume_to_aliquot)\n",
                    "biocoder": "cpp\n#include \"biocoder.h\"\n\nvoid setup()   \n{\n  // Step 1: Aliquot the clear bile into 1 ml volumes in microcentrifuge tubes.\n  Container aliqout = new_container(STERILE_MICROFUGE_TUBE);\n  Fluid clear_bile = new_fluid(\"clear bile\");\n  \n  first_step();\n  measure_fluid(clear_bile, ml(1));\n  aliquot(aliqout, ml(1));\n}\n\nint main()\n{\n  setup();\n\n  return 0;\n}\n",
                    "result_baseline4": {
                        "opcode": "ALIQUOT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Volume",
                                "1 ml"
                            ],
                            [
                                "Container",
                                "microcentrifuge tubes"
                            ]
                        ],
                        "emit": "1 ml volumes of clear bile in microcentrifuge tubes."
                    },
                    "result_baseline5": {
                        "opcode": "ALIQUOT",
                        "slot": [
                            [
                                "REG",
                                "clear bile"
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "1 ml volumes of clear bile in microcentrifuge tubes."
                    }
                },
                {
                    "i": 3,
                    "sentense": "Store the aliquots at -20\u00b0C for future use.",
                    "python": "python\n# Store aliquots at -20\u00b0C for future use\ndef store_aliquots():\n    temperature = -20\n    \n    # Simulating storing aliquots at -20\u00b0C\n    print(f\"Storing aliquots at {temperature}\u00b0C for future use\")\n\n# Call the function to store aliquots\nstore_aliquots()\n",
                    "biocoder": "python\ndef store_aliquots():\n    # Set the storage conditions\n    store_conditions = -20\n\n    # Store aliquots\n    print(\"Store the aliquots at {}\u00b0C for future use.\".format(store_conditions))\n   \nstore_aliquots()\n",
                    "result_baseline4": {
                        "opcode": "STORE",
                        "slot": [
                            [
                                "Container",
                                null
                            ],
                            [
                                "Temperature",
                                "-20\u00b0C"
                            ]
                        ],
                        "emit": "preserved aliquots"
                    },
                    "result_baseline5": {
                        "opcode": "STORE",
                        "slot": [
                            [
                                "Container",
                                null
                            ],
                            [
                                "Temperature",
                                "-20\u00b0C"
                            ]
                        ],
                        "emit": "preserved aliquots"
                    }
                }
            ]
        },
        "4": {
            "subject": "Molecular Biology & Genetics",
            "enum": 4,
            "protocol": "Bile Collection and Centrifugation: Collect bile into a sterile collection bottle. Use a centrifuge tube to spin at 3000g for 10 minutes at 4\u00b0C. Aliquot the clarified supernatant into microcentrifuge tubes, 1 ml each. Freeze aliquots in microcentrifuge tubes at -20\u00b0C for storage.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Bile Collection and Centrifugation: Collect bile into a sterile collection bottle.",
                    "python": "python\ndef collect_bile():\n    # Display instructions for bile collection\n    print(\"Please collect bile into a sterile collection bottle.\")\n\n    # Wait for user to confirm completion of bile collection\n    input(\"Press enter when bile collection is complete.\")\n\n    # Proceed to centrifugation\n    centrifugation()\n\ndef centrifugation():\n    # Display instructions for centrifugation\n    print(\"Proceed to centrifugation.\")\n\n    # Wait for user to confirm completion of centrifugation\n    input(\"Press enter when centrifugation is complete.\")\n\n# Start the protocol by calling the function for bile collection\ncollect_bile()\n",
                    "biocoder": "\n#include \"BioCoder.h\"\n\nvoid main() {\n    Container sterile_bottle = new_container(STERILE_BOTTLE);\n    \n    first_step(\"Bile Collection and Centrifugation\");\n    \n    comment(\"Collect bile into a sterile collection bottle.\");\n    next_step();\n    collect(sterile_bottle, \"bile\");\n    \n    next_step();\n    centrifuge_pellet(sterile_bottle, RT, SPEED_MAX, 15, \"min\");\n}\n",
                    "result_baseline4": {
                        "opcode": "",
                        "slot": [],
                        "emit": ""
                    },
                    "result_baseline5": {
                        "opcode": "Bile Collection and Centrifugation",
                        "slot": [
                            [
                                "Container",
                                "sterile collection bottle"
                            ]
                        ],
                        "emit": "centrifuged pellet"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Use a centrifuge tube to spin at 3000g for 10 minutes at 4\u00b0C.",
                    "python": "python\nimport time\n\ndef centrifuge(protocol, speed, duration, temperature):\n    print(f\"Using a centrifuge tube to spin at {speed}g for {duration} minutes at {temperature}\u00b0C...\")\n    time.sleep(duration * 60)  # Convert minutes to seconds\n    print(\"Centrifugation complete.\")\n\ncentrifuge(\"experimental protocol\", 3000, 10, 4)\n",
                    "biocoder": "Python\nfrom biocoder import *\n\ndef protocol():\n    # Initialize a new process\n    p = Process()\n\n    # Step 1: Centrifuge \n    tube = p.plate(1)\n    p.centrifuge(tube.all_wells(), speed='3000g', temperature='4\u00b0C', duration='10:00')\n\n    return p\n\nprint(protocol())\n",
                    "result_baseline4": {
                        "opcode": "SPIN",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Force",
                                "3000g"
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "Time",
                                "10 minutes"
                            ],
                            [
                                "Temperature",
                                "4\u00b0C"
                            ]
                        ],
                        "emit": "Centrifuged sample"
                    },
                    "result_baseline5": {
                        "opcode": "CENTRIFUGE",
                        "slot": [
                            [
                                "Container",
                                "centrifuge tube"
                            ],
                            [
                                "Force",
                                "3000g"
                            ],
                            [
                                "Time",
                                "10 minutes"
                            ],
                            [
                                "Temperature",
                                "4\u00b0C"
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    }
                },
                {
                    "i": 2,
                    "sentense": "Aliquot the clarified supernatant into microcentrifuge tubes, 1 ml each.",
                    "python": "No program",
                    "biocoder": "Python\nfrom biocoder import *\n\ndef protocol():\n    # Create the solutions and materials for the lab\n    clarified_supernatant = Solution(\"clarified supernatant\")\n\n    microcentrifuge_tubes = Container(\"Microcentrifuge tubes\")\n\n    # Step 1: Aliquot the clarified supernatant\n    p1000 = Pipette(max_volume=1000)\n    p1000.transfer(clarified_supernatant, microcentrifuge_tubes, 1)\n\nprotocol()\n",
                    "result_baseline4": {
                        "opcode": "ALIQUOT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Temperature",
                                null
                            ],
                            [
                                "Volume",
                                "1 ml"
                            ]
                        ],
                        "emit": "microcentrifuge tubes"
                    },
                    "result_baseline5": {
                        "opcode": "ALIQUOT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Temperature",
                                null
                            ]
                        ],
                        "emit": "clarified supernatant"
                    }
                },
                {
                    "i": 3,
                    "sentense": "Freeze aliquots in microcentrifuge tubes at -20\u00b0C for storage.",
                    "python": "python\n# Importing the necessary library for temperature conversions\nimport temperature\n\n# Function to freeze aliquots in microcentrifuge tubes at -20\u00b0C\ndef freeze_aliquots():\n    # Setting the storage temperature to -20\u00b0C\n    storage_temperature = temperature.degrees_celsius(-20)\n    \n    # Freezing the aliquots in microcentrifuge tubes\n    tubes = 10  # Number of microcentrifuge tubes\n    \n    for tube in range(1, tubes+1):\n        # Perform the freezing process for each tube\n        print(f\"Freezing aliquot in tube {tube} at {storage_temperature}.\")\n\n# Calling the function to execute the protocol\nfreeze_aliquots()\n",
                    "biocoder": "\nbegin_protocol(\"Freezing Aliquots for Storage\");\n\n//Storage\nstore(\"Aliquots in microcentrifuge tubes\", -20, time::forever());\n\ncomment(\"The aliquots are stored at -20\u00b0C for storing in the long term.\");\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "FREEZE",
                        "slot": [
                            [
                                "REG",
                                "aliquots"
                            ],
                            [
                                "Container",
                                "microcentrifuge tubes"
                            ],
                            [
                                "Temperature",
                                "-20\u00b0C"
                            ]
                        ],
                        "emit": "Frozen aliquots"
                    },
                    "result_baseline5": {
                        "opcode": "FREEZE",
                        "slot": [
                            [
                                "REG",
                                "aliquots"
                            ],
                            [
                                "Container",
                                "microcentrifuge tubes"
                            ],
                            [
                                "Temperature",
                                "-20\u00b0C"
                            ]
                        ],
                        "emit": "Frozen aliquots"
                    }
                }
            ]
        }
    },
    "Biomedical & Clinical Research": {
        "0": {
            "subject": "Biomedical & Clinical Research",
            "enum": 0,
            "protocol": "Muscle Elasticity Therapy Study: For 4 weeks, repeat 5 sessions per week: Group A performs MET, Group B performs static stretching and motor control exercise.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Muscle Elasticity Therapy Study: For 4 weeks, repeat 5 sessions per week: Group A performs MET, Group B performs static stretching and motor control exercise.",
                    "python": "python\nimport random\n\ndef perform_MET():\n    print(\"Performing Muscle Elasticity Therapy (MET)\")\n    # Add code to perform MET therapy here\n    \ndef perform_static_stretching_and_motor_control_exercise():\n    print(\"Performing Static Stretching and Motor Control Exercise\")\n    # Add code to perform static stretching and motor control exercise here\n    \ndef study_protocol(group):\n    if group == 'A':\n        for week in range(1, 5):\n            print(f\"Week {week}\")\n            for session in range(1, 6):\n                print(f\"Session {session}\")\n                perform_MET()\n    elif group == 'B':\n        for week in range(1, 5):\n            print(f\"Week {week}\")\n            for session in range(1, 6):\n                print(f\"Session {session}\")\n                perform_static_stretching_and_motor_control_exercise()\n    else:\n        print(\"Invalid group provided. Group should be 'A' or 'B'.\")\n\n\ngroup = input(\"Enter group (A or B): \")\nstudy_protocol(group)\n",
                    "biocoder": "Python\n# Biocoder Format\nfrom biocoder import *\n\ndef muscle_elasticity_therapy_study():\n    # define groups\n    group_A = Sample('Group A', 10) # assuming the size as 10\n    group_B = Sample('Group B', 10) # assuming the size as 10\n\n    # therapy study for 4 weeks\n    for i in range(4):\n        \n        p = Protocol()\n\n        # 5 sessions per week\n        for j in range(5):\n            # MET therapy for group A\n            p.add_step('Perform MET', group_A)\n            \n            # Static stretch and motor control exercise for group B\n            p.add_step('Perform Static Stretching', group_B)\n            p.add_step('Perform Motor Control Exercise', group_B)\n\n        # End of week\n        p.add_step('End of week {}'.format(i+1))\n\n        # run the protocol\n        p.execute()\n\nmuscle_elasticity_therapy_study()\n",
                    "result_baseline4": {
                        "opcode": "REPEAT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                "MET"
                            ]
                        ],
                        "emit": "Improved muscle elasticity"
                    },
                    "result_baseline5": {
                        "opcode": "REPEAT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                "MET"
                            ]
                        ],
                        "emit": "Improved muscle elasticity"
                    }
                }
            ]
        },
        "1": {
            "subject": "Biomedical & Clinical Research",
            "enum": 1,
            "protocol": "Fluorescence Assay for Enzyme Activity: Repeat the addition of substrates and enzyme to the cuvette, and record fluorescence intensity. Keep repeating these additions and measurements until no further change in fluorescence intensity is detected, indicating equilibrium.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Fluorescence Assay for Enzyme Activity: Repeat the addition of substrates and enzyme to the cuvette, and record fluorescence intensity.",
                    "python": "python\ndef fluorescence_assay():\n    # Define variables\n    substrate = \"Substrate\"\n    enzyme = \"Enzyme\"\n    cuvette = \"Cuvette\"\n    protocol_steps = 5\n    \n    # Repeat the addition of substrates and enzyme to the cuvette for protocol_steps times\n    for step in range(protocol_steps):\n        # Add substrate to the cuvette\n        add_substrate(cuvette, substrate)\n        \n        # Add enzyme to the cuvette\n        add_enzyme(cuvette, enzyme)\n        \n        # Record fluorescence intensity\n        record_fluorescence(cuvette)\n    \n\ndef add_substrate(cuvette, substrate):\n    # Add substrate to the cuvette\n    print(f\"Adding {substrate} to {cuvette}.\")\n    \n\ndef add_enzyme(cuvette, enzyme):\n    # Add enzyme to the cuvette\n    print(f\"Adding {enzyme} to {cuvette}.\")\n    \n\ndef record_fluorescence(cuvette):\n    # Record fluorescence intensity\n    print(f\"Recording fluorescence intensity from {cuvette}.\")\n\n\n# Run the fluorescence assay\nfluorescence_assay()\n",
                    "biocoder": "python\nfrom biocoder import *\n\ndef fluorescence_assay_for_enzyme_activity():\n  \n  # Create containers\n  cuvette = new_container(CUVETTE)\n\n  # Define reagents\n  substrates = new_solid_reagent('Substrates')\n  enzyme = new_solid_reagent('Enzyme')\n\n  # Start protocol\n  p = Protocol()\n  \n  # Repeat the process of adding substrates and enzyme\n  for i in range(2): \n    p.add(Transfer(substrates, cuvette, all_volume=True))\n    substrates.resuspend_in(cuvette, qty=\"1:1\", with_resuspension=True)\n    p.mix(cuvette, \"vortex\", \"briefly\")\n    p.wait_for(seconds=\"1\")\n\n    p.add(Transfer(enzyme, cuvette, all_volume=True))\n    enzyme.resuspend_in(cuvette, qty=\"1:1\", with_resuspension=True)\n    p.mix(cuvette, \"vortex\", \"briefly\")\n    p.wait_for(seconds=\"1\")\n\n    p.measure_fluorescence(cuvette)\n\n  # End the protocol\n  p.finish()\n\n  # Return the final protocol\n  return p\n\n# Run the protocol\nprotocol = fluorescence_assay_for_enzyme_activity()\nprotocol.print()\n",
                    "result_baseline4": {
                        "opcode": "FLUORESCENCE_ASSAY",
                        "slot": [
                            [
                                "Container",
                                "Substrate"
                            ],
                            [
                                "Container",
                                "Enzyme"
                            ],
                            [
                                "Container",
                                "Cuvette"
                            ],
                            [
                                "REG",
                                5
                            ]
                        ],
                        "emit": "Fluorescence intensity measurements"
                    },
                    "result_baseline5": {
                        "opcode": "REPEAT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Fluorescence intensity measurements"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Keep repeating these additions and measurements until no further change in fluorescence intensity is detected, indicating equilibrium.",
                    "python": "python\nimport random\n\ndef protocol():\n    # Initial fluorescence intensity\n    fluorescence_intensity = random.randint(0, 100)\n    max_iterations = 1000\n    \n    # Repeating the additions and measurements\n    while max_iterations > 0:\n        # Random addition\n        addition = random.randint(0, 10)\n        fluorescence_intensity += addition\n        \n        # Measurement\n        print(\"Fluorescence intensity:\", fluorescence_intensity)\n        \n        # Check for equilibrium\n        if addition == 0:\n            break\n        \n        max_iterations -= 1\n\n# Run the protocol\nprotocol()\n",
                    "biocoder": "python\n# Biocoder Format\n\nbegin_protocol(\"Fluorescence Intensity Measurement until Equilibrium\");\n\nFluid substance; //Initial substance\nFluid addition; // Substance to be added\nFluorometer fluorometer; // Instrument for measuring fluorescence intensity\n\nfloat current_intensity;\nfloat previous_intensity = -1; // Invalid initial value to ensure the loop runs at least once\n\nwhile (true) {\n\t// Addition of substances\n\tadd(substance, addition);\n\n\t// Measurement of fluorescence intensity\n\tcurrent_intensity = measure_fluorescence(fluorometer, substance);\n\t\n\t// Print current measured intensity\n\tcomment(\"Current fluorescence intensity: \" + current_intensity);\n\t\n\t// Break loop if no change in fluorescence intensity is detected indicating equilibrium\n\tif (current_intensity == previous_intensity) {\n\t\tbreak;\n\t}\n\telse {\n\t\tprevious_intensity = current_intensity;\n\t}\n}\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "REPEAT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Equilibrium fluorescence intensity."
                    },
                    "result_baseline5": {
                        "opcode": "REPEAT",
                        "slot": [
                            [
                                "REG",
                                "Fluid substance"
                            ],
                            [
                                "REG",
                                "Fluid addition"
                            ],
                            [
                                "REG",
                                "Fluorometer fluorometer"
                            ]
                        ],
                        "emit": "Equilibrium fluorescence intensity."
                    }
                }
            ]
        },
        "2": {
            "subject": "Biomedical & Clinical Research",
            "enum": 2,
            "protocol": "For in vivo experiments using ViroMag, the volume of virus injected depends on the viral preparation, injection route, target tissue, and preliminary in vitro results. Keep In vivo ViroMag and saline at room temperature. Use 10 to 20 \u00b5L of In vivo ViroMag for each 1x10^6 infectious viral particles, avoiding exceeding recommended injection volumes.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "For in vivo experiments using ViroMag, the volume of virus injected depends on the viral preparation, injection route, target tissue, and preliminary in vitro results.",
                    "python": "python\n# Define the protocol function\ndef experimental_protocol(virus_preparation, injection_route, target_tissue, in_vitro_results):\n    # Calculate the volume of virus to be injected based on the specified parameters\n    if virus_preparation == \"Preparation A\":\n        if injection_route == \"Intravenous\" and target_tissue == \"Brain\":\n            if in_vitro_results == \"Positive\":\n                volume_injected = 1000  # 1000 units of virus for positive in vitro results\n            else:\n                volume_injected = 500  # 500 units of virus for negative in vitro results\n        else:\n            volume_injected = 250  # 250 units of virus for other injection routes or target tissues\n    elif virus_preparation == \"Preparation B\":\n        if injection_route == \"Intravenous\":\n            volume_injected = 750  # 750 units of virus for any injection route\n        else:\n            volume_injected = 500  # 500 units of virus for other injection routes\n    else:\n        volume_injected = 0  # No virus to be injected for other virus preparations\n    \n    # Return the calculated volume of virus to be injected\n    return volume_injected\n\n# Example usage:\nvolume = experimental_protocol(\"Preparation A\", \"Intravenous\", \"Brain\", \"Positive\")\nprint(f\"Volume to be injected: {volume} units\")\n",
                    "biocoder": "cpp\n#include \"biocoder.h\"\n\nvoid setup()\n{\n  start_protocol(\"In vivo experiments using ViroMag\");\n\n  Fluid virus = new_fluid(\"virus\");\n  Fluid viromag = new_fluid(\"ViroMag\");\n  Equipment pipette = new_pipet();\n\n  First_step(\"Viral preparation\");\n  Comment(\"The volume of virus prepared depends on the viral preparation, injection route, target tissue, and preliminary in vitro results.\");\n  \n  Second_step(\"Injection\");\n  Pipet(pipette, viromag, 1.5); // This is a hypothetical volume. \n  Pipet(pipette, virus, 2.0); // This is a hypothetical volume. \n  \n  Third_step(\"Target tissue delivery\");\n  Comment(\"Deliver the prepared virus to the target tissue\");\n  \n  Fourth_step(\"Check preliminary in vitro results\");\n  Comment(\"Before proceeding with injections, check preliminary in vitro results for the expected outcomes\");\n  \n  end_protocol();\n}\n\nint main() {\n  setup();\n  return 0;\n}\n",
                    "result_baseline4": {
                        "opcode": "experimental_protocol",
                        "slot": [
                            [
                                "String",
                                "virus_preparation"
                            ],
                            [
                                "String",
                                "injection_route"
                            ],
                            [
                                "String",
                                "target_tissue"
                            ],
                            [
                                "String",
                                "in_vitro_results"
                            ]
                        ],
                        "emit": "volume_injected"
                    },
                    "result_baseline5": {
                        "opcode": "DEPEND",
                        "slot": [
                            [
                                "Device",
                                null
                            ],
                            [
                                "Mass",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Volume",
                                null
                            ],
                            [
                                "Volume",
                                null
                            ]
                        ],
                        "emit": "information"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Keep In vivo ViroMag and saline at room temperature.",
                    "python": "python\ndef keep_viro_mag_and_saline_at_room_temperature():\n    # Displaying the protocol instructions\n    print(\"Experimental Protocol:\")\n    print(\"1. Keep In vivo ViroMag and saline at room temperature.\")\n\n    # Checking if the ViroMag and saline are at room temperature\n    viro_mag_temperature = get_temperature(\"In vivo ViroMag\")\n    saline_temperature = get_temperature(\"saline\")\n\n    if viro_mag_temperature == \"room temperature\" and saline_temperature == \"room temperature\":\n        print(\"Both In vivo ViroMag and saline are already at room temperature.\")\n        return\n\n    # If not at room temperature, perform the required steps\n    if viro_mag_temperature != \"room temperature\":\n        print(\"Keeping In vivo ViroMag at room temperature...\")\n        # Perform the necessary actions for keeping In vivo ViroMag at room temperature\n        \n    if saline_temperature != \"room temperature\":\n        print(\"Keeping saline at room temperature...\")\n        # Perform the necessary actions for keeping saline at room temperature\n\ndef get_temperature(substance):\n    # In a real program, this function would retrieve the temperature of the substance\n    # For the sake of this example, let's assume it returns a random temperature\n    import random\n    temperatures = [\"room temperature\", \"too cold\", \"too hot\"]\n    return random.choice(temperatures)\n\n# Run the protocol\nkeep_viro_mag_and_saline_at_room_temperature()\n",
                    "biocoder": "Python\nfrom biocoder import *\n\n# Protocol start\np = Protocol()\n\n# Step 1\np.start_protocol()\n\n# Step 2\ninvivo_viroMag = Reagent(\"In vivo ViroMag\")\nsaline = Reagent(\"Saline\")\n\n# Step 3\np.add(Put_on_bench(invivo_viroMag, saline))\n\n# Step 4\np.incubate(saline, room_temp, inf, description=\"Keeping the In vivo ViroMag and Saline on the lab bench at room temperature.\")\n\n# Protocol end\np.end_protocol()\n",
                    "result_baseline4": {
                        "opcode": "KEEP",
                        "slot": [
                            [
                                "REG",
                                "In vivo ViroMag"
                            ],
                            [
                                "REG",
                                "saline"
                            ],
                            [
                                "Temperature",
                                "room temperature"
                            ]
                        ],
                        "emit": "In vivo ViroMag particles."
                    },
                    "result_baseline5": {
                        "opcode": "KEEP",
                        "slot": [
                            [
                                "REG",
                                "In vivo ViroMag"
                            ],
                            [
                                "REG",
                                "saline"
                            ],
                            [
                                "Temperature",
                                "room temperature"
                            ]
                        ],
                        "emit": "In vivo ViroMag particles."
                    }
                },
                {
                    "i": 2,
                    "sentense": "Use 10 to 20 \u00b5L of In vivo ViroMag for each 1x10^6 infectious viral particles, avoiding exceeding recommended injection volumes.",
                    "python": "python\nrecommended_volume = 10  # in \u00b5L\ninfectious_particles = 1e6  # viral particles\n\nviromag_volume = 10 + (infectious_particles - 1e6) * 10 / 1e6\nviromag_volume = min(viromag_volume, 20)  # avoid exceeding recommended injection volumes\n\nprint(f\"Use {viromag_volume} \u00b5L of In vivo ViroMag for each {infectious_particles} infectious viral particles, avoiding exceeding recommended injection volumes.\")\n",
                    "biocoder": "\nsolutions\n{\n\tIn_vivo_ViroMag(40);\n}\n\nprocedure main()\n{\n\tIn_vivo_ViroMag.sol(10 \u03bcl,20 \u03bcl);\n\tcomment(\"Use 10 to 20 \u03bcL of In vivo ViroMag for each 1x10^6 infectious viral particles, avoiding exceeding recommended injection volumes.\");\n}\n",
                    "result_baseline4": {
                        "opcode": "USE",
                        "slot": [
                            [
                                "REG",
                                "10 to 20 \u00b5L of In vivo ViroMag"
                            ],
                            [
                                "REG",
                                "1x10^6 infectious viral particles"
                            ]
                        ],
                        "emit": "concentrated viral particles"
                    },
                    "result_baseline5": {
                        "opcode": "USE",
                        "slot": [
                            [
                                "Volume",
                                "10 \u00b5L"
                            ],
                            [
                                "Volume",
                                "20 \u00b5L"
                            ],
                            [
                                "REG",
                                "In vivo ViroMag"
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "concentrated viral particles"
                    }
                }
            ]
        },
        "3": {
            "subject": "Biomedical & Clinical Research",
            "enum": 3,
            "protocol": "Place the larvae in a 1m^3 box filled with dirt. Feed them the specified food 3-4 times daily at 2-3 hour intervals for optimal growth. Continue feeding until the larvae turn into pupae, at which point increase the food quantity. Once pupae become adults, modify their environment by adding water to facilitate mating. After mating, collect the resulting larvae.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Place the larvae in a 1m^3 box filled with dirt.",
                    "python": "python\ndef larvae_protocol():\n    # Initialize box dimensions\n    length = 1  # meters\n    width = 1  # meters\n    height = 1  # meters\n\n    # Calculate box volume\n    volume = length * width * height\n\n    # Fill the box with dirt\n    dirt_volume = volume  # m^3\n\n    # Print the protocol steps\n    print(\"Experimental Protocol:\")\n    print(\"1. Place the larvae in a 1m^3 box filled with dirt.\")\n    print(\"   - Box dimensions: {}m x {}m x {}m\".format(length, width, height))\n    print(\"   - Box volume: {}m^3\".format(volume))\n    print(\"   - Dirt volume: {}m^3\".format(dirt_volume))\n\n\n# Call the function to execute the protocol\nlarvae_protocol()\n",
                    "biocoder": "C++\n#include <biocoder.h>\n\nvoid setup()\n{\n    // Declare the parameters.\n    Container box = new_container(CONTAINMENT, \"1m^3 box\");\n    Substance dirt = new_substance(SOLID, \"Dirt\", \"1m^3\");\n    Sample larvae = new_sample(LARVAE, \"Larvae\");\n\n    // Add dirt in the box.\n    first_step(\"Add dirt in the box\");\n    add_substance_in_container(box, dirt);\n}\n\nvoid main()\n{\n    // Set up necessary components.\n    setup();\n\n    // Place the larvae in the box.\n    next_step(\"Place the larvae in the box filled with dirt\");\n    Sample_in_container box_with_larvae = place_in_container(box, larvae);\n}\n\nint main()\n{\n    // call the main function\n    main();\n}\n",
                    "result_baseline4": {
                        "opcode": "PLACE",
                        "slot": [
                            [
                                "Volume",
                                "1m^3"
                            ]
                        ],
                        "emit": "Soil-dwelling larvae"
                    },
                    "result_baseline5": {
                        "opcode": "PLACE",
                        "slot": [
                            [
                                "Volume",
                                "1m^3"
                            ]
                        ],
                        "emit": "Soil-dwelling larvae"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Feed them the specified food 3-4 times daily at 2-3 hour intervals for optimal growth.",
                    "python": "python\ndef feed_food():\n    for i in range(3, 5):\n        print(f\"Feed food {i} times daily\")\n        for j in range(2, 4):\n            print(f\"Feed after {j} hours\")\n\nfeed_food()\n",
                    "biocoder": "No program",
                    "result_baseline4": {
                        "opcode": "FEED",
                        "slot": [
                            [
                                "REG",
                                "specified food"
                            ],
                            [
                                "REG",
                                "3-4 times"
                            ],
                            [
                                "REG",
                                "2-3 hour intervals"
                            ]
                        ],
                        "emit": "Optimal growth of cells."
                    },
                    "result_baseline5": {
                        "opcode": "FEED",
                        "slot": [
                            [
                                "REG",
                                "specified food"
                            ],
                            [
                                "REG",
                                "3-4 times daily"
                            ],
                            [
                                "REG",
                                "at 2-3 hour intervals"
                            ]
                        ],
                        "emit": "Optimal growth of cells."
                    }
                },
                {
                    "i": 2,
                    "sentense": "Continue feeding until the larvae turn into pupae, at which point increase the food quantity.",
                    "python": "python\ndef feed_larvae(food_quantity):\n    larvae_count = 0\n\n    while True:\n        # Check if any larvae are present\n        if larvae_count > 0:\n            # If larvae have turned into pupae, increase food quantity\n            if larvae_count == food_quantity:\n                food_quantity += 1\n                print(\"Increased food quantity to\", food_quantity)\n\n        # Feed the larvae\n        print(\"Feeding\", food_quantity, \"units of food to the larvae\")\n        larvae_count += 1\n\n        # Check if larvae have all turned into pupae\n        if larvae_count >= food_quantity:\n            print(\"All larvae have turned into pupae\")\n            break\n\n# Start with food quantity of 1\nfeed_larvae(1)\n",
                    "biocoder": "No program",
                    "result_baseline4": {
                        "opcode": "FEED",
                        "slot": [
                            [
                                "Volume",
                                null
                            ],
                            [
                                "REG",
                                "larvae"
                            ]
                        ],
                        "emit": "larvae"
                    },
                    "result_baseline5": {
                        "opcode": "INCREASE",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Concentration",
                                null
                            ],
                            [
                                "Concentration",
                                null
                            ]
                        ],
                        "emit": "pupae with increased food intake"
                    }
                },
                {
                    "i": 3,
                    "sentense": "Once pupae become adults, modify their environment by adding water to facilitate mating.",
                    "python": "python\ndef facilitate_mating(pupae, water_amount):\n    if pupae == \"adults\":\n        add_water(water_amount)\n\ndef add_water(amount):\n    print(f\"Adding {amount} ml of water to facilitate mating.\")\n\n# Example usage\nfacilitate_mating(\"adults\", 100)\n",
                    "biocoder": "\n#include <Biocoder.h>\n\nvoid setup()\n{\n  start_protocol(\"Modify environment for adult pupae for mating\");\n}\n\nvoid loop()\n{\n  Fluid water = new_fluid(\"water\");\n  \n  // Step 1: Identify and isolate pupae after they become adults\n  adult_pupae = retrieve_adult_pupae(\"Pupae\");\n  comment(\"Identified and isolated adult pupae for mating\");\n\n  // Step 2: Modify the environment for the adult pupae\n  modify_environment(adult_pupae, \"Adding water to facilitate mating\", water, 30*ml);\n  comment(\"Modified the environment for mating by adding water\");\n\n  // Step 3: Monitor the pupae for mating activity\n  observe_pupae_mating_activity(adult_pupae);\n  comment(\"Monitored the pupae for mating activity\");\n}\n\nvoid end()\n{\n  end_protocol();\n}\n\nint main()\n{\n  setup();\n  loop();\n  end();\n}\n",
                    "result_baseline4": {
                        "opcode": "MODIFY",
                        "slot": [
                            [
                                "REG",
                                "pupae"
                            ],
                            [
                                "REG",
                                "water_amount"
                            ]
                        ],
                        "emit": "Mated adults"
                    },
                    "result_baseline5": {
                        "opcode": "MODIFY",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Container",
                                null
                            ],
                            [
                                "String",
                                null
                            ]
                        ],
                        "emit": "Mated adults"
                    }
                },
                {
                    "i": 4,
                    "sentense": "After mating, collect the resulting larvae.",
                    "python": "python\ndef collect_larvae():\n    # Perform mating process\n    # ...\n    \n    # Collect resulting larvae\n    larvae = []  # Initializing an empty list to store larvae\n    \n    # Add larvae to the collection\n    for i in range(10):  # Assuming we collect 10 larvae\n        larvae.append(f\"Larva {i+1}\")\n    \n    # Print the collected larvae\n    print(\"Collected larvae:\")\n    for larva in larvae:\n        print(larva)\n    \n\n# Main program\ncollect_larvae()\n",
                    "biocoder": "\nbegin_protocol(\"Collect Resulting Larvae After Mating\");\n\nbegin_step(\"Mating\");\ncomment(\"Allow the subjects to mate.\");\n\nend_step();\n\nbegin_step(\"Collect Larvae\");\ncomment(\"Collect the resulting larvae after the mating process.\");\nend_step();\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Container",
                                null
                            ],
                            [
                                "Force",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "resulting larvae, collected"
                    },
                    "result_baseline5": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Container",
                                null
                            ],
                            [
                                "Force",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "resulting larvae, collected"
                    }
                }
            ]
        },
        "4": {
            "subject": "Biomedical & Clinical Research",
            "enum": 4,
            "protocol": "Larvae Experiment Protocol: Preparation: Place larvae in a pre-filled 1m\u00b3 box with dirt. Feeding: Administer specific food 3-4 times daily at 2-3 hour intervals for optimal growth. Monitoring: Continue feeding until larvae transition to pupals, increasing food supply at this stage. Environmental Change: Upon reaching adulthood, introduce water to the dirt environment for mating. Larvae Collection: Post-mating, collect new larvae.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Larvae Experiment Protocol: Preparation: Place larvae in a pre-filled 1m\u00b3 box with dirt.",
                    "python": "python\n# Larvae Experiment Protocol\n\n# Preparation\nbox_volume = 1 # m^3\ndirt_filled = True\n\n# Place larvae in the box with dirt\nif dirt_filled:\n    print(\"Larvae placed in the 1m\u00b3 box with dirt.\")\n\n# Additional steps for the experiment can be added here\n",
                    "biocoder": "python\nfrom biocoder import *\n\ndef larvae_exp_protocol():\n    # Materials required\n    dirt = Material(\"Dirt\", amount=\"1m^3\")\n    box = Material(\"Box\", amount=\"1m^3\") \n    larvae = Organism(\"Larvae\")\n\n    # Steps of procedure\n    p = Protocol()\n    \n    # Step 1: Place larvae in pre-filled box with dirt\n    p.add(Transfer(larvae, box, to_material=True))\n    p.add(Place(larvae, Location.ON, dirt))\n    \n    return p\n\n# Execute the protocol\nprotocol = larvae_exp_protocol()\nprotocol.execute()\n",
                    "result_baseline4": {
                        "opcode": "PLACE",
                        "slot": [
                            [
                                "REG",
                                "pre-filled 1m\u00b3 box"
                            ],
                            [
                                "REG",
                                "larvae"
                            ],
                            [
                                "REG",
                                "dirt"
                            ]
                        ],
                        "emit": "Larvae placed in the 1m\u00b3 box with dirt."
                    },
                    "result_baseline5": {
                        "opcode": "PLACE",
                        "slot": [
                            [
                                "REG",
                                "Larvae"
                            ],
                            [
                                "REG",
                                "ON"
                            ],
                            [
                                "REG",
                                "Dirt"
                            ]
                        ],
                        "emit": "soil samples"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Feeding: Administer specific food 3-4 times daily at 2-3 hour intervals for optimal growth.",
                    "python": "python\ndef feed_specific_food():\n    # Administer specific food\n    print(\"Administering specific food\")\n\ndef feed_optimal_growth():\n    # Feed 3-4 times daily at 2-3 hour intervals\n    for i in range(3, 5):\n        print(f\"Feeding {i} times daily at 2-3 hour intervals\")\n        for j in range(i):\n            feed_specific_food()\n\n# Call the function to execute the protocol\nfeed_optimal_growth()\n",
                    "biocoder": "No program",
                    "result_baseline4": {
                        "opcode": "CEO",
                        "slot": [
                            [
                                "Container",
                                "specific food"
                            ],
                            [
                                "Time",
                                "3-4 times daily at 2-3 hour intervals"
                            ]
                        ],
                        "emit": "optimal growth"
                    },
                    "result_baseline5": {
                        "opcode": "Feeding",
                        "slot": [
                            [
                                "Container",
                                "specific food"
                            ],
                            [
                                "Time",
                                "3-4 times daily"
                            ],
                            [
                                "Time",
                                "2-3 hour intervals"
                            ]
                        ],
                        "emit": "optimal growth"
                    }
                },
                {
                    "i": 2,
                    "sentense": "Monitoring: Continue feeding until larvae transition to pupals, increasing food supply at this stage.",
                    "python": "python\n# Define the feeding function\ndef feed_larvae(feeding_rate):\n    print(f\"Feeding larvae at a rate of {feeding_rate} units.\")\n\n# Initialize the larval stage\nlarval_stage = True\nfeeding_rate = 1\n\n# Monitor the larvae until transition to pupal stage\nwhile larval_stage:\n    if feeding_rate < 5:\n        feed_larvae(feeding_rate)\n        feeding_rate += 1\n    else:\n        feed_larvae(feeding_rate)\n    \n    # Check for transition to pupal stage\n    # Assuming there is a condition to detect the transition\n    if transition_detected:\n        larval_stage = False\n\nprint(\"Larvae transitioned to pupal stage. Stop feeding.\")\n",
                    "biocoder": "\nprocedure feedingRoutine:\n    begin\n        'Define materials needed'\n        Fluid food = new Fluid(\"Food\", 100.0, Units.mL);\n        Container larvae = new Container(\"Larvae Container\");\n        \n        'Feed larvae'\n        while(true)\n            larvae.add(food);\n            \n            'Increase food amount once larvae transition to pupals stage'\n            'This increase should be monitored visually and this code should be updated manually'\n            if('larvae transition to pupals')\n                food.setVolume(200.0, Units.mL);\n                \n            'Add delay between feeds'\n            wait(Period.hours(12)); \n    end\nend\n",
                    "result_baseline4": {
                        "opcode": "CONTINUE",
                        "slot": [
                            [
                                "REG",
                                "feeding rate"
                            ],
                            [
                                "REG",
                                "larvae stage"
                            ],
                            [
                                "REG",
                                "transition detection"
                            ]
                        ],
                        "emit": "pupal stage"
                    },
                    "result_baseline5": {
                        "opcode": "feedingRoutine",
                        "slot": [
                            [
                                "Device",
                                "Fluid"
                            ],
                            [
                                "Container",
                                "Larvae Container"
                            ],
                            [
                                "Time",
                                "Period.hours(12)"
                            ]
                        ],
                        "emit": "Larvae transition to pupal stage"
                    }
                },
                {
                    "i": 3,
                    "sentense": "Environmental Change: Upon reaching adulthood, introduce water to the dirt environment for mating.",
                    "python": "python\nclass Organism:\n    def __init__(self, age):\n        self.age = age\n        self.environment = \"dirt\"\n\n    def introduce_water(self):\n        if self.age >= 18:\n            self.environment = \"dirt with water\"\n\n    def mate(self):\n        if self.environment == \"dirt with water\":\n            print(\"Mating can now occur in the environment:\", self.environment)\n        else:\n            print(\"Cannot mate in the current environment.\")\n\n# Creating an organism instance\norganism = Organism(20)\n\n# Introducing water in the environment upon reaching adulthood\norganism.introduce_water()\n\n# Attempting mating in the environment\norganism.mate()\n",
                    "biocoder": "python\nfrom biocoder import *\n\ndef environmental_change():\n    # Define adult stage\n    adults = Solution('Adult specimens')\n\n    # Just set the environment, no ingredients necessary.\n    dirt = Solution('Dirt environment')\n\n    # Step 1: Identify adults\n    p = Protocol()\n    p.add_step('Upon reaching adulthood, identify the adult specimens', [adults])\n\n    # Step 2: Introduce water \n    water = Reagent('Water')\n    p.add_reagent(water)\n    p.add_step('Introduce water to the dirt environment for mating', [adults, dirt, water])\n\nenvironmental_change()\n",
                    "result_baseline4": {
                        "opcode": "INTRODUCE",
                        "slot": [
                            [
                                "Volume",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "Device",
                                null
                            ]
                        ],
                        "emit": "\"Water-based mating conditions\""
                    },
                    "result_baseline5": {
                        "opcode": "INTRODUCE",
                        "slot": [
                            [
                                "Volume",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "Device",
                                null
                            ]
                        ],
                        "emit": "Water-based mating conditions"
                    }
                },
                {
                    "i": 4,
                    "sentense": "Larvae Collection: Post-mating, collect new larvae.",
                    "python": "python\ndef collect_larvae():\n    # code to collect new larvae after mating\n    # ...\n    # ...\n\n# main program\ncollect_larvae()\n",
                    "biocoder": "\n#include \"BioCoder.h\"\n\n\nvoid main() {\n    //Step1: Larvae Collection\n\tStep* s1 = new_step(\"Collect new larvae\");\n    add_action(s1, \"Post-mating, collect new larvae.\");\n}\n",
                    "result_baseline4": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Container",
                                null
                            ],
                            [
                                "Force",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "Newly hatched larvae."
                    },
                    "result_baseline5": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                "Post-mating, collect new larvae."
                            ],
                            [
                                "Container",
                                null
                            ],
                            [
                                "Force",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "Newly hatched larvae."
                    }
                }
            ]
        }
    },
    "Ecology & Environmental Biology": {
        "0": {
            "subject": "Ecology & Environmental Biology",
            "enum": 0,
            "protocol": "Thaw frozen samples to room temperature. For homogenization, sterilize a metal spatula, transfer ~50g of sample into an Erlenmeyer flask, add 2 ml of sterilized tap water, and homogenize. Next, place ~20g of homogenized sample into a tissue culture flask, add 20 ml of MDV medium, and gently shake. Autoclave the samples in Erlenmeyer flasks for 15 minutes at 121\u00b0C. Repeat the process of adding sterilized sample and MDV medium to the culture flask, gently shaking for even distribution. Repeat these steps (2.2-2.5) for all samples, including positive controls.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Thaw frozen samples to room temperature.",
                    "python": "python\nprint(\"Step 1: Thaw frozen samples to room temperature\")\n# Code for thawing frozen samples to room temperature goes here\n",
                    "biocoder": "\n#include \"BioCoder.h\"\n\nvoid main() {\n    // Step 1: Thaw frozen samples to room temperature.\n    Container sample = new_container(STERILE_MICROFUGE_TUBE,\n    \"your frozen sample\");\n    first_step(\"Thaw frozen samples to room temperature\");\n    comment(\"Please make sure that the sample is fully thawed before proceeding to the next step.\");    \n    incubate(sample, RT, TIME_INDICATOR);\n}\n",
                    "result_baseline4": {
                        "opcode": "THAW",
                        "slot": [
                            [
                                "Temperature",
                                "room temperature"
                            ]
                        ],
                        "emit": "Room temperature samples."
                    },
                    "result_baseline5": {
                        "opcode": "THAW",
                        "slot": [
                            [
                                "Temperature",
                                "room temperature"
                            ]
                        ],
                        "emit": "Room temperature samples."
                    }
                },
                {
                    "i": 1,
                    "sentense": "For homogenization, sterilize a metal spatula, transfer ~50g of sample into an Erlenmeyer flask, add 2 ml of sterilized tap water, and homogenize.",
                    "python": "python\ndef homogenization(sample_weight):\n    sterilize_spatula()\n    transfer_sample(sample_weight)\n    add_water()\n    homogenize()\n\ndef sterilize_spatula():\n    print(\"Sterilizing the metal spatula...\")\n\ndef transfer_sample(sample_weight):\n    print(f\"Transferring {sample_weight}g of sample into an Erlenmeyer flask...\")\n\ndef add_water():\n    print(\"Adding 2ml of sterilized tap water...\")\n\ndef homogenize():\n    print(\"Homogenizing the mixture...\")\n\n# Example usage\nhomogenization(50)\n",
                    "biocoder": "Python\n# Biocoder Protocol for Homogenization\n# Developed by Open AI Lab\n\ndef homogenization_protocol():\n    # Start the protocol\n    start_protocol()\n\n    # Setup experiment materials\n    spatula = Tool(name='Metal Spatula', is_sterile=True)\n    erlenmeyer_flask = Container(name='Erlenmeyer flask')\n    sample = Material(name='Sample', quantity='50g')\n    tap_water = Material(name='Sterilized tap water', quantity='2ml')\n\n    # Protocol Steps\n    comment('Step 1: Sterilize the metal spatula')\n    sterilize(spatula)\n\n    comment('Step 2: Transfer 50g of sample into the Erlenmeyer flask')\n    transfer(sample, erlenmeyer_flask)\n\n    comment('Step 3: Add 2ml of sterilized tap water')\n    add(tap_water, to=erlenmeyer_flask)\n\n    comment('Step 4: Homogenize the sample')\n    homogenize(erlenmeyer_flask)\n\n    # End the protocol\n    end_protocol()\n\n# Runs the homogenization protocol\nhomogenization_protocol()\n",
                    "result_baseline4": {
                        "opcode": "STERILIZE",
                        "slot": [
                            [
                                "Container",
                                "Erlenmeyer flask"
                            ],
                            [
                                "Volume",
                                "None"
                            ],
                            [
                                "Volume",
                                "None"
                            ]
                        ],
                        "emit": "homogenized sample"
                    },
                    "result_baseline5": {
                        "opcode": "STERILIZE",
                        "slot": [
                            [
                                "Container",
                                "Erlenmeyer flask"
                            ],
                            [
                                "Volume",
                                null
                            ],
                            [
                                "Volume",
                                null
                            ]
                        ],
                        "emit": "homogenized sample"
                    }
                },
                {
                    "i": 2,
                    "sentense": "Next, place ~20g of homogenized sample into a tissue culture flask, add 20 ml of MDV medium, and gently shake.",
                    "python": "No program",
                    "biocoder": "\n#include \"BioCoder.h\"\n\nvoid main()\n{\n    // defining solutions\n    Solution mdv_medium = new_Solution(\"MDV medium\"); \n\n    // start protocol\n    BioCoder* my_protocol = new_BioCoder(\"Sample Homogenization Protocol\");\n\n    // step 1: placing homogenized sample\n    Fluid* homogenized_sample = new_Fluid(\"homogenized sample\", AMOUNT_MASS, 20, MASS_GRAM);\n    Container* tissue_culture_flask = new_Container(\"tissue culture flask\");\n    first_step(my_protocol, \"Placing homogenized sample.\");\n    add_to(tissue_culture_flask, homogenized_sample);\n\n    comment(my_protocol, \"About 20g of homogenized sample is placed into a tissue culture flask.\");\n  \n    // step 2: adding MDV medium\n    next_step(my_protocol, \"Adding MDV medium\");\n    Fluid* mdv_medium_fluid = measure_fluid(mdv_medium, vol(20, ML));\n    add_to(my_protocol, tissue_culture_flask, mdv_medium_fluid);\n\n    // step 3: shaking\n    next_step(my_protocol, \"Shake the flask gently\");\n    vortex(tissue_culture_flask);\n\n    // protocol is finalized\n    end_protocol(my_protocol);\n}\n",
                    "result_baseline4": {
                        "opcode": "PLACE",
                        "slot": [
                            [
                                "REG",
                                "homogenized sample"
                            ],
                            [
                                "Container",
                                "tissue culture flask"
                            ],
                            [
                                "Volume",
                                "20 ml"
                            ],
                            [
                                "REG",
                                "MDV medium"
                            ]
                        ],
                        "emit": "MDV medium and homogenized sample"
                    },
                    "result_baseline5": {
                        "opcode": "PLACE",
                        "slot": [
                            [
                                "REG",
                                "homogenized sample"
                            ],
                            [
                                "Container",
                                "tissue culture flask"
                            ],
                            [
                                "Volume",
                                "20 ml"
                            ],
                            [
                                "REG",
                                "MDV medium"
                            ]
                        ],
                        "emit": "MDV medium and homogenized sample"
                    }
                },
                {
                    "i": 3,
                    "sentense": "Autoclave the samples in Erlenmeyer flasks for 15 minutes at 121\u00b0C.",
                    "python": "python\nimport time\n\ndef autoclave_samples(duration):\n    print(\"Autoclaving samples...\")\n    time.sleep(duration)\n    print(\"Autoclaving completed.\")\n\ndef main():\n    duration = 15 * 60 # convert 15 minutes to seconds\n    temperature = 121\n    autoclave_samples(duration)\n    print(f\"Samples have been autoclaved for {duration // 60} minutes at {temperature}\u00b0C.\")\n\nif __name__ == \"__main__\":\n    main()\n",
                    "biocoder": "Python\nfrom biocoder import *\n\ndef autoclave_samples():\n    # Materials required\n    erlenmeyer_flask = Container('Erlenmeyer Flask with samples')\n\n    # Step 1: Autoclave the samples in Erlenmeyer flasks for 15 minutes at 121\u00b0C.\n    autoclave(erlenmeyer_flask, time='15:00', temp=121)\n\n    # End of the procedure\n    end_protocol()\n\n# Running the implemented protocol\nautoclave_samples()\n",
                    "result_baseline4": {
                        "opcode": "AUTOCLAVE",
                        "slot": [
                            [
                                "Container",
                                "Erlenmeyer flasks"
                            ],
                            [
                                "Time",
                                "15 minutes"
                            ],
                            [
                                "Temperature",
                                "121\u00b0C"
                            ]
                        ],
                        "emit": "sterilized samples"
                    },
                    "result_baseline5": {
                        "opcode": "AUTOCLAVE",
                        "slot": [
                            [
                                "Container",
                                "Erlenmeyer Flask with samples"
                            ],
                            [
                                "Time",
                                "15:00"
                            ],
                            [
                                "Temperature",
                                "121"
                            ]
                        ],
                        "emit": "sterilized samples"
                    }
                },
                {
                    "i": 4,
                    "sentense": "Repeat the process of adding sterilized sample and MDV medium to the culture flask, gently shaking for even distribution.",
                    "python": "python\n# Define the number of times to repeat the process\nnum_repeats = 5\n\n# Define the sterilized sample and MDV medium\nsterilized_sample = \"Sample\"\nmdv_medium = \"MDV Medium\"\n\n# Define the culture flask\nculture_flask = []\n\n# Repeat the process for the specified number of times\nfor i in range(num_repeats):\n    # Add the sterilized sample to the culture flask\n    culture_flask.append(sterilized_sample)\n\n    # Add the MDV medium to the culture flask\n    culture_flask.append(mdv_medium)\n\n    # Gently shake the culture flask for even distribution\n    print(\"Shaking culture flask gently for even distribution.\")\n\n# Display the final content of the culture flask\nprint(\"Content of the culture flask after the process:\")\nprint(culture_flask)\n",
                    "biocoder": "python\nfrom biocoder import *\n\ndef culture_protocol():\n    # create solutions\n    sterilized_sample = Solution(\"Sterilized sample\")\n    mdv_medium = Solution(\"MDV medium\")\n    \n    culture_flask = Vessel(\"Culture Flask\")\n\n    p = Protocol()\n    \n    # repeat process\n    while True:\n        p.add(Transfer(sterilized_sample, culture_flask))\n        p.add(Transfer(mdv_medium, culture_flask))\n        p.add(Shake(culture_flask, speed='gentle'))\n      \n    return p\n\nprotocol = culture_protocol()\nprint(protocol)\n",
                    "result_baseline4": {
                        "opcode": "REPEAT",
                        "slot": [
                            [
                                "REG",
                                "Sample"
                            ],
                            [
                                "REG",
                                "MDV Medium"
                            ],
                            [
                                "Device",
                                "culture flask"
                            ]
                        ],
                        "emit": "Content of the culture flask after the process:"
                    },
                    "result_baseline5": {
                        "opcode": "REPEAT",
                        "slot": [
                            [
                                "REG",
                                "sterilized sample"
                            ],
                            [
                                "REG",
                                "MDV medium"
                            ],
                            [
                                "Container",
                                "Culture Flask"
                            ]
                        ],
                        "emit": "cultured cells"
                    }
                },
                {
                    "i": 5,
                    "sentense": "Repeat these steps (2.2-2.5) for all samples, including positive controls.",
                    "python": "\n# List of samples\nsamples = [\"Sample1\", \"Sample2\", \"Sample3\", ..., \"Positive Control\"]\n\n# Iterate through each sample\nfor sample in samples:\n    # Perform steps 2.2-2.5 for the current sample\n    print(\"Processing sample:\", sample)\n    \n    # Step 2.2: Process sample\n    print(\"Processing sample:\", sample)\n    \n    # Step 2.3: Analyze sample\n    print(\"Analyzing sample:\", sample)\n    \n    # Step 2.4: Record results\n    print(\"Recording results for sample:\", sample)\n    \n    # Step 2.5: Repeat for next sample\n    print(\"Moving to next sample\\n\")\n",
                    "biocoder": "\n#include \"BioCoder.h\"\n\nvoid main() {\n    BioCoder sample_processing;\n  \n    // Define positiveControls and samples\n    Container positiveControls = new_container(STERILE_MICRO_TUBE, \"Positive Controls\");\n    Container samples = new_container(STERILE_MICRO_TUBE, \"Samples\");\n\n    Fluid buffer = new_fluid(\"Buffer fluid\");\n    Fluid reagent = new_fluid(\"Reagent\");\n    \n    // Assuming protocol for all samples and positive controls\n    first_step(\"Start with steps for all samples, including positive controls\");\n    Container* sample_list[] = { positiveControls, samples };\n\n    for(int i=0; i<2; i++) {\n        next_step(sample_processing, \"Step 2.2: Add buffer\");\n        pipet(sample_processing, buffer, sample_list[i]);\n    \n        next_step(sample_processing, \"Step 2.3: Mix samples\");\n        vortex(sample_processing, sample_list[i]);\n    \n        next_step(sample_processing, \"Step 2.4: Add reagent\");\n        pipet(sample_processing, reagent, sample_list[i]);\n\n        next_step(sample_processing, \"Step 2.5: Incubate the sample\");\n        incubate(sample_processing, sample_list[i], 37, 60 min, IN_VITRO_INCUBATOR);\n    }\n\n    // This is where the procedure would end\n    last_step(\"Store samples at -20 degrees Celsius until further analysis.\");\n    \n    // End protocol\n    end_protocol(sample_processing);\n}\n",
                    "result_baseline4": {
                        "opcode": "REPEAT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "analyzed results"
                    },
                    "result_baseline5": {
                        "opcode": "REPEAT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "analyzed results"
                    }
                }
            ]
        },
        "1": {
            "subject": "Ecology & Environmental Biology",
            "enum": 1,
            "protocol": "For habituation, mice were placed at the ladder's start and encouraged to move forward using air puffs, repeating until they were accustomed to walking on the rungs. Motor performance was assessed by recording the time and number of foot slips as mice crossed the ladder, with trials repeated 4-5 times daily after a 15-minute interval for 3-4 days to evaluate motor learning. Data analysis involved calculating daily averages of time and foot slips and comparing these between groups. If a mouse failed to place its paws correctly or slipped, this was noted for further analysis, and if video recording was possible, missteps were reviewed afterward.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "For habituation, mice were placed at the ladder's start and encouraged to move forward using air puffs, repeating until they were accustomed to walking on the rungs.",
                    "python": "python\ndef habituation():\n    print(\"Habituation Protocol:\")\n    print(\"1. Place the mice at the start of the ladder.\")\n    print(\"2. Use air puffs to encourage mice to move forward on the rungs.\")\n    print(\"3. Repeat the process until the mice are accustomed to walking on the rungs.\")\n\nhabituation()\n",
                    "biocoder": "Python\n# Biocoder code for mouse habituation protocol.\n\ndef mouse_habituation():\n  # Define materials, mice and ladder\n  mice = Material(\"mice\")\n  ladder = Material(\"ladder\")\n  air_puff = Material('air puff')\n  \n  # Place the mice on the ladder\n  p1=Plate(name='Plate for habituation', n_xwells=1, n_ywells=1)\n  mice_in_plate = Dispense(dest=p1.all_wells(), reagent=mice)\n  Comment('Mice are placed at the ladder\\'s start')\n  \n  # Use air puff to encourage the mice to move forward on the ladder\n  air_puff.apply(mice_in_plate)\n  Comment('Mice are encouraged to move forward using air puffs')\n\n  # Repeat the process until mice gets habituated\n  while not mice_accomplished():\n    air_puff.apply(mice_in_plate)\n    Comment('Repeat process until mice are accustomed to walking on the rungs')\n\ndef mice_accomplished():\n  # Function to check if mice are accustomed to walking on the rungs\n  # This is a placeholder function, in actual use case it could be replaced with real observations.\n  return False\n\nif __name__ == \"__main__\":\n  mouse_habituation()\n",
                    "result_baseline4": {
                        "opcode": "ENCOURAGE",
                        "slot": [
                            [
                                "Time",
                                null
                            ],
                            [
                                "Temperature",
                                null
                            ],
                            [
                                "String",
                                null
                            ]
                        ],
                        "emit": "trained mice"
                    },
                    "result_baseline5": {
                        "opcode": "HABITUATION",
                        "slot": [
                            [
                                "Device",
                                "spinning disk confocal microscope"
                            ],
                            [
                                "Container",
                                "solid media"
                            ],
                            [
                                "REG",
                                "GFP-fusion"
                            ]
                        ],
                        "emit": "Z-stack images"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Motor performance was assessed by recording the time and number of foot slips as mice crossed the ladder, with trials repeated 4-5 times daily after a 15-minute interval for 3-4 days to evaluate motor learning.",
                    "python": "\nimport time\n\ndef assess_motor_performance():\n    num_trials = 4-5\n    num_days = 3-4\n\n    for day in range(num_days):\n        for trial in range(num_trials):\n            start_time = time.time()\n            \n            # Simulate mouse crossing the ladder\n            # Record time and number of foot slips\n            \n            end_time = time.time()\n            execution_time = end_time - start_time\n            \n            print(f\"Trial {trial+1} on Day {day+1}\")\n            print(f\"Time: {execution_time} seconds\")\n            print(\"Number of foot slips: ...\")\n            print()\n            \n        time.sleep(15 * 60)  # 15-minute interval\n\n\nassess_motor_performance()\n",
                    "biocoder": "python\ndef motor_performance_assessment_mice():\n    # Introduction\n    print(\"Motor performance assessment in mice\")\n\n    # Variables\n    trial_count_daily = [4, 5]\n    interval_min = 15\n    day_count = [3, 4]\n\n    # Procedure\n    for day in range(day_count[0], day_count[1] + 1):\n        print(\"Day \" + str(day) + \" of motor learning assessment.\")\n        for trial in range(trial_count_daily[0], trial_count_daily[1] + 1):\n            print(\"Trial \" + str(trial) + \" in progress.\")\n            \n            # Record time and number of foot slips as mice cross the ladder\n            print(\"Record the time and number of foot slips as mice cross the ladder.\")\n            \n            # 15-minute intervals between trials\n            print(\"Wait for \" + str(interval_min) + \" minutes before starting the next trial.\")\nmotor_performance_assessment_mice()\n",
                    "result_baseline4": {
                        "opcode": "assess_motor_performance",
                        "slot": [
                            [
                                "REG",
                                "None"
                            ],
                            [
                                "Time",
                                "time"
                            ]
                        ],
                        "emit": "Motor learning data"
                    },
                    "result_baseline5": {
                        "opcode": "GROW",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    }
                },
                {
                    "i": 2,
                    "sentense": "Data analysis involved calculating daily averages of time and foot slips and comparing these between groups.",
                    "python": "python\nimport pandas as pd\nimport numpy as np\n\n# Assuming you have the data stored in a CSV file named 'data.csv'\n# Load the data into a pandas DataFrame\ndata = pd.read_csv('data.csv')\n\n# Assuming the data contains columns 'time', 'foot_slips', and 'group'\n# Calculate daily averages of time and foot slips for each group\ndaily_averages = data.groupby(['group']).agg(\n    {'time': np.mean, 'foot_slips': np.mean}\n).reset_index()\n\n# Assuming you have two groups named 'Group A' and 'Group B'\n# Extract averages for each group\ngroup_a_avg = daily_averages[daily_averages['group'] == 'Group A']\ngroup_b_avg = daily_averages[daily_averages['group'] == 'Group B']\n\n# Compare daily averages between groups\nif group_a_avg['time'].iloc[0] > group_b_avg['time'].iloc[0]:\n    print(\"Group A has a higher average time.\")\nelse:\n    print(\"Group B has a higher average time.\")\n\nif group_a_avg['foot_slips'].iloc[0] > group_b_avg['foot_slips'].iloc[0]:\n    print(\"Group A has more average foot slips.\")\nelse:\n    print(\"Group B has more average foot slips.\")\n",
                    "biocoder": "cpp\n#include \"BioCoder.h\"\n\nvoid main() \n{\n  start_protocol(\"Data Analysis\");\n\n  Fluid daily_averages = new_fluid (\"daily averages of time and foot slips\");\n  Fluid groups = new_fluid (\"groups\");\n\n  Container daily_averages_container = new_container(FLASK, daily_averages);\n  Container groups_container = new_container(FLASK, groups);\n\n  measure_fluid(daily_averages_container, daily_averages, 1, ML);\n  measure_fluid(groups_container, groups, 1, ML);\n\n  next_step(\"Calculating daily averages of time and foot slips\");\n  next_step(\"Comparing these between groups\");\n  \n  end_protocol();\n}\n",
                    "result_baseline4": {
                        "opcode": "COMPARE",
                        "slot": [
                            [
                                "Temperature",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "String",
                                null
                            ]
                        ],
                        "emit": "comparison of groups' daily averages"
                    },
                    "result_baseline5": {
                        "opcode": "COMPARE",
                        "slot": [
                            [
                                "Temperature",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "String",
                                null
                            ]
                        ],
                        "emit": "comparison of groups' daily averages"
                    }
                },
                {
                    "i": 3,
                    "sentense": "If a mouse failed to place its paws correctly or slipped, this was noted for further analysis, and if video recording was possible, missteps were reviewed afterward.",
                    "python": "python\nclass MouseExperiment:\n    def __init__(self, paws_correct, slipped, video_recording):\n        self.paws_correct = paws_correct\n        self.slipped = slipped\n        self.video_recording = video_recording\n\n    def record_mouse_behavior(self):\n        if not self.paws_correct or self.slipped:\n            print(\"Mouse behavior noted for further analysis\")\n            if self.video_recording:\n                print(\"Missteps reviewed afterward\")\n\n# Example usage\nexperiment = MouseExperiment(False, True, True)\nexperiment.record_mouse_behavior()\n",
                    "biocoder": "plaintext\nbeginProtocol(\"Mouse Paw Placement Analysis\");\n\nstep(\"Note mouse behavior\", \"If a mouse fails to place its paws correctly or slips, note this behavior for further analysis.\");\n\nif (hasVideoRecordingCapability()) {\n    step(\"Review video footage\", \"Review missteps from recorded video footage afterward.\");\n}\n\nendProtocol();\n",
                    "result_baseline4": {
                        "opcode": "NOTED",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "video recordings, missteps"
                    },
                    "result_baseline5": {
                        "opcode": "NOTED",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "video recordings, missteps"
                    }
                }
            ]
        },
        "2": {
            "subject": "Ecology & Environmental Biology",
            "enum": 2,
            "protocol": "Premoisten 3 swabs with 1.5 mL of PBST solution and press out excess against the tube's wall. In parallel, for each sampling location, swab target surfaces three times using the 3 swabs together, rotating and switching order each time to ensure consistent application. Return swabs to the tube after breaking at the breakpoint. Collect two negative field controls, one at the start and end of the session, and prepare two unopened PBST tubes as negative media controls. Store all samples in a cooler with ice for up to 12 hours. This method emphasizes parallel actions in swabbing and sample preparation, aligning with a parallel-for execution model in experimental procedures.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Premoisten 3 swabs with 1.5 mL of PBST solution and press out excess against the tube's wall.",
                    "python": "python\ndef premoisten_swabs(num_swabs, volume):\n    \"\"\"\n    Premoisten the given number of swabs with the specified volume of PBST solution.\n    \"\"\"\n    for swab in range(1, num_swabs+1):\n        print(f\"Premoisten swab {swab} with {volume} mL of PBST solution\")\n        print(f\"Press out excess against the tube's wall\")\n\n# Specify the number of swabs and volume of PBST solution\nnum_swabs = 3\nvolume = 1.5\n\n# Call the function to execute the protocol steps\npremoisten_swabs(num_swabs, volume)\n",
                    "biocoder": "python\n# Biocoder's format\n\n# Solutions required\nPBST = Solution(\"PBST solution\")\n\n# Creating Swabs\nSwab1 = Solid(\"Swab 1\")\nSwab2 = Solid(\"Swab 2\")\nSwab3 = Solid(\"Swab 3\")\n\n# Procedure\np = Protocol()\n\n# Step 1 - Premoisting swabs with PBST solution\np.add_step(\"Premoisten 3 swabs with 1.5 mL of PBST solution\", [\n    Wet(Swab1, PBST, vol=1.5 * Unit.ml),\n    Wet(Swab2, PBST, vol=1.5 * Unit.ml),\n    Wet(Swab3, PBST, vol=1.5 * Unit.ml)\n])\n\n# Step 2 - pressing out excess PBST solution against the tube's wall\np.add_step(\"Press out excess against the tube's wall\", [\n    Press_out_liquid(Swab1, PBST),\n    Press_out_liquid(Swab2, PBST),\n    Press_out_liquid(Swab3, PBST)\n])\n\nprint(p)\n",
                    "result_baseline4": {
                        "opcode": "MOISTEN",
                        "slot": [
                            [
                                "Volume",
                                "1.5 mL"
                            ],
                            [
                                "Concentration",
                                "PBST solution"
                            ]
                        ],
                        "emit": "moistened swabs"
                    },
                    "result_baseline5": {
                        "opcode": "Premoisten",
                        "slot": [
                            [
                                "Container",
                                "swab 1"
                            ],
                            [
                                "Container",
                                "swab 2"
                            ],
                            [
                                "Container",
                                "swab 3"
                            ],
                            [
                                "Volume",
                                "1.5 mL"
                            ],
                            [
                                "Concentration",
                                "PBST solution"
                            ]
                        ],
                        "emit": "premoistened swabs"
                    }
                },
                {
                    "i": 1,
                    "sentense": "In parallel, for each sampling location, swab target surfaces three times using the 3 swabs together, rotating and switching order each time to ensure consistent application.",
                    "python": "python\ndef swab_sampling(locations):\n    for location in locations:\n        swabs = ['swab1', 'swab2', 'swab3']  # Three swabs\n        swab_order = ['first', 'second', 'third']  # Order to rotate and switch swabs\n\n        for _ in range(3):  # Swab target surfaces three times\n            for i, swab in enumerate(swabs):\n                print(f\"Swabbing {location} with {swab} ({swab_order[i]} time)\")\n\n# Example usage\nsampling_locations = ['Location1', 'Location2', 'Location3']\nswab_sampling(sampling_locations)\n",
                    "biocoder": "\nbegin_protocol(\"Swab Sampling Protocol\");\n\nFluid swab = new_Fluid(\"Swab\");\nSolution target_surface = new_Solution(\"Target Surface\");\n\nforeach (sampling_location in all_sampling_locations) {\n    begin_loop(\"Swabbing Loop\", 3);\n        start_timer(\"Swabbing Timer\");\n        first_step(\"Swab target surfaces\");\n            Swabbing(target_surface, swab, 1);\n        next_step(\"Rotate swab\");\n            Rotate(swab);\n        next_step(\"Switch order of swabs\");\n            Switch_order(swab);\n        stop_timer(\"Swabbing Timer\");\n    end_loop(\"Swabbing Loop\");\n}\n\nend_protocol(\"Swab Sampling Protocol\");\n",
                    "result_baseline4": {
                        "opcode": "SWAB",
                        "slot": [
                            [
                                "Device",
                                "swab1"
                            ],
                            [
                                "Device",
                                "swab2"
                            ],
                            [
                                "Device",
                                "swab3"
                            ],
                            [
                                "Time",
                                "first"
                            ],
                            [
                                "Time",
                                "second"
                            ],
                            [
                                "Time",
                                "third"
                            ]
                        ],
                        "emit": "swabbed surfaces"
                    },
                    "result_baseline5": {
                        "opcode": "SWAB",
                        "slot": [
                            [
                                "Device",
                                "Swab"
                            ],
                            [
                                "Device",
                                "Target Surface"
                            ],
                            [
                                "Concentration",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "swabbed surfaces"
                    }
                },
                {
                    "i": 2,
                    "sentense": "Return swabs to the tube after breaking at the breakpoint.",
                    "python": "python\ndef return_swabs_to_tube(swabs, breakpoint):\n    # Perform whatever steps are necessary to break the swabs at the breakpoint\n    # and then return them to the tube\n    \n    # Output a message indicating the action\n    return \"Swabs returned to the tube after breaking at the breakpoint.\"\n\n\n# Example usage\ntube = \"Tube A\"\nswabs = [\"Swab 1\", \"Swab 2\", \"Swab 3\"]\nbreakpoint = \"Breakpoint\"\n\nresult = return_swabs_to_tube(swabs, breakpoint)\nprint(result)\n",
                    "biocoder": "python\nfrom biocoder import *\n\ndef return_swabs():\n    # Create a tube for swabs\n    swab_tube = Tube(label='Swab tube')\n\n    # Break swabs at the breakpoint\n    swab_break = GenericStep(\"Break swabs at the breakpoint\")\n    swab_break.run()\n\n    # Return swabs to the tube\n    swab_return = Transfer(swab_break.products, swab_tube)\n    swab_return.run()\n\n    # Returns the tube with returned swabs\n    return swab_tube\n \np = Protocol()\np.add(return_swabs)\np.run()\n",
                    "result_baseline4": {
                        "opcode": "RETURN",
                        "slot": [
                            [
                                "REG",
                                "swabs"
                            ],
                            [
                                "Container",
                                "tube"
                            ],
                            [
                                "REG",
                                "breakpoint"
                            ]
                        ],
                        "emit": "Returned swabs"
                    },
                    "result_baseline5": {
                        "opcode": "RETURN",
                        "slot": [
                            [
                                "REG",
                                "swabs"
                            ],
                            [
                                "Container",
                                "tube"
                            ],
                            [
                                "REG",
                                "breakpoint"
                            ]
                        ],
                        "emit": "Returned swabs"
                    }
                },
                {
                    "i": 3,
                    "sentense": "Collect two negative field controls, one at the start and end of the session, and prepare two unopened PBST tubes as negative media controls.",
                    "python": "python\ndef collect_negative_field_control():\n    print(\"Collecting negative field control at the start of the session...\")\n\ndef prepare_negative_media_controls():\n    print(\"Preparing unopened PBST tubes as negative media controls...\")\n\n# Collect first negative field control\ncollect_negative_field_control()\n\n# Prepare first negative media control\nprepare_negative_media_controls()\n\n# Perform the experiment\n\n# Collect second negative field control\ncollect_negative_field_control()\n\n# Prepare second negative media control\nprepare_negative_media_controls()\n\nprint(\"Experimental protocol completed.\")\n",
                    "biocoder": "python\n# Biocoder Python protocol for handling negative field controls in an experiment\n\nfrom biocoder import *\n\ndef collect_samples():\n    # Materials needed for the protocol\n    pbs_tubes = Item(\"PBST Tubes\")\n\n    # Step 1: Collect the first negative field control at the start of the session\n    start_control = collect(FieldControl.negative)\n    comment(\"Negative field control collected at the start of the session\")\n\n    # Step 2: Prepare two unopened PBST tubes as negative media controls\n    media_control = replicate(pbs_tubes, 2)\n    comment(\"Two unopened PBST tubes prepared as negative media controls\")\n\n    # Step 3: Collect the second negative field control at the end of the session\n    end_control = collect(FieldControl.negative)\n    comment(\"Negative field control collected at the end of the session\")\n\n    return start_control, media_control, end_control\n\n\n# Run the protocol\np = Protocol()\nsamples = p.add(collect_samples())\n",
                    "result_baseline4": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Container",
                                "PBST tubes"
                            ]
                        ],
                        "emit": "field controls, PBST tubes"
                    },
                    "result_baseline5": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Container",
                                "PBST tubes"
                            ]
                        ],
                        "emit": "field controls, PBST tubes"
                    }
                },
                {
                    "i": 4,
                    "sentense": "Store all samples in a cooler with ice for up to 12 hours.",
                    "python": "python\nclass Cooler:\n    def __init__(self):\n        self.samples = []\n\n    def add_sample(self, sample):\n        self.samples.append(sample)\n\n    def store_with_ice(self, hours):\n        if hours > 12:\n            print(\"Samples cannot be stored for more than 12 hours.\")\n            return\n\n        print(\"Storing samples with ice for {} hours...\".format(hours))\n        # Code to handle storing samples with ice for the given hours\n        print(\"Samples stored successfully.\")\n",
                    "biocoder": "python\ndef main():\n\n\t# Step 1: Store all samples in a cooler with ice for up to 12 hours\n\tSample.samples_storage(container=COOLER, temperature=ON_ICE, duration=hr(12))\n\t\nif __name__==\"__main__\":\n\tmain()\n",
                    "result_baseline4": {
                        "opcode": "STORE",
                        "slot": [
                            [
                                "Time",
                                "12 hours"
                            ]
                        ],
                        "emit": "Preserved samples."
                    },
                    "result_baseline5": {
                        "opcode": "samples_storage",
                        "slot": [
                            [
                                "Container",
                                "cooler"
                            ],
                            [
                                "Temperature",
                                "on ice"
                            ],
                            [
                                "Time",
                                "12 hours"
                            ]
                        ],
                        "emit": "Preserved samples."
                    }
                },
                {
                    "i": 5,
                    "sentense": "This method emphasizes parallel actions in swabbing and sample preparation, aligning with a parallel-for execution model in experimental procedures.",
                    "python": "python\nimport time\nimport threading\n\n# Define functions for each step in the protocol\ndef swabbing():\n    print(\"Performing swabbing...\")\n    time.sleep(2)  # Simulating the time taken for swabbing\n    print(\"Swabbing completed.\")\n\ndef sample_preparation():\n    print(\"Preparing samples...\")\n    time.sleep(5)  # Simulating the time taken for sample preparation\n    print(\"Sample preparation completed.\")\n\n# Create threads to perform each step in parallel\nswabbing_thread = threading.Thread(target=swabbing)\nsample_preparation_thread = threading.Thread(target=sample_preparation)\n\n# Start the execution of the parallel actions\nswabbing_thread.start()\nsample_preparation_thread.start()\n\n# Wait for both threads to complete\nswabbing_thread.join()\nsample_preparation_thread.join()\n\nprint(\"Experimental protocol executed successfully.\")\n",
                    "biocoder": "python\n#Biocoder Format\n\nfrom biocoder import *\n\ndef main():\n  # Start the protocol\n  p = Protocol()\n  \n  p.start()\n  \n  # Step 1 - Collect parallel samples\n  p.add_step(\"Prepare to collect parallel samples using sterilized swabs\")\n  \n  # Step 2 - Swab to collect samples\n  tubes = s.p2k_rack.wells_from('A1', 12) # Adjust as per the number of parallel samples\n  for tube in tubes:\n    p.add_step(\"Collect sample by swabbing the target area and place the swab into the tube {}\".format(tube))\n    \n  # Step 3 - Sample preparation\n  for tube in tubes:\n    p.add_step(\"Prepare the sample contained in the tube {}\".format(tube))\n   \n  # Step 4 - End protocol\n  p.end()\n\nif __name__ == '__main__':\n  main()\n",
                    "result_baseline4": {
                        "opcode": "EMPHASIZE",
                        "slot": [
                            [
                                "Time",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "Container",
                                null
                            ]
                        ],
                        "emit": "prepared samples with parallel-for execution"
                    },
                    "result_baseline5": {
                        "opcode": "EMPHASIZE",
                        "slot": [
                            [
                                "Time",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Time",
                                null
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "Container",
                                null
                            ]
                        ],
                        "emit": "prepared samples with parallel-for execution"
                    }
                }
            ]
        },
        "3": {
            "subject": "Ecology & Environmental Biology",
            "enum": 3,
            "protocol": "Premoisten 3 swabs with 1.5 mL of buffer solution (Phosphate Buffered Saline with 0.02% Tween 80, PBST) in a 15 mL falcon tube. Press out excess solution inside the tube, swab target surfaces three times using 3 swabs together, ensuring consistent pressure and speed, and rotate swabs for each sampling. Break the swab at its breakpoint and return it to the falcon tube. Collect two negative field controls, one at the start and one at the end of sampling, and prepare two unopened tubes of PBST as negative media controls. Store all samples in a cooler with ice for up to 12 hours during collection. Proceed with swab extraction, sample aggregation, and subsequent cultivation as per the experimental setup.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Premoisten 3 swabs with 1.5 mL of buffer solution (Phosphate Buffered Saline with 0.02% Tween 80, PBST) in a 15 mL falcon tube."
                },
                {
                    "i": 1,
                    "sentense": "Press out excess solution inside the tube, swab target surfaces three times using 3 swabs together, ensuring consistent pressure and speed, and rotate swabs for each sampling.",
                    "python": "python\ndef press_excess_solution():\n    print(\"Pressing out excess solution inside the tube.\")\n\ndef swab_target_surfaces():\n    for _ in range(3):\n        print(\"Swabbing target surfaces...\")\n        rotate_swabs()\n\ndef rotate_swabs():\n    print(\"Rotating swabs for each sampling.\")\n\n# Main program\npress_excess_solution()\nswab_target_surfaces()\n",
                    "biocoder": "python\nfrom biocoder import *\n\ndef swab_sampling():\n    # Materials required\n    swabs = Material(\"Sterile swabs\", amount=\"3\")\n    tube = Material(\"Tube with solution\")\n\n    # Start the protocol\n    p = Protocol()\n\n    # Step 1: Press out excess solution inside the tube\n    p.add_step(\"Press out excess solution inside the tube\", tube)\n\n    # Step 2: Swab target surfaces three times using 3 swabs together\n    p.add_step(\"Swab target surfaces three times using 3 swabs together, ensuring consistent pressure and speed\", swabs)\n\n    # Step 3: Rotate swabs for each sampling\n    p.add_step(\"Rotate swabs for each sampling\", swabs)\n\n    # Print the protocol\n    p.print()\n\n# Run the protocol\nswab_sampling()\n",
                    "result_baseline4": {
                        "opcode": "PRESS",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "samples of target surfaces"
                    },
                    "result_baseline5": {
                        "opcode": "swab_sampling",
                        "slot": [
                            [
                                "Device",
                                "Sterile swabs"
                            ],
                            [
                                "Container",
                                "Tube with solution"
                            ],
                            [
                                "String",
                                "Press out excess solution inside the tube"
                            ],
                            [
                                "String",
                                "Swab target surfaces three times using 3 swabs together, ensuring consistent pressure and speed"
                            ],
                            [
                                "String",
                                "Rotate swabs for each sampling"
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    }
                },
                {
                    "i": 2,
                    "sentense": "Break the swab at its breakpoint and return it to the falcon tube.",
                    "python": "python\ndef return_swab_to_falcon_tube(swab_breakpoint):\n    print(\"Breaking the swab at its breakpoint: \", swab_breakpoint)\n    print(\"Returning the swab to the falcon tube.\")\n\n# Example usage\nswab_breakpoint = 5\nreturn_swab_to_falcon_tube(swab_breakpoint)\n",
                    "biocoder": "Python\n# Biocoder format\n\nfrom biocoder import *\n\ndef swab_breaking():\n  # Start the protocol\n  start_protocol(\"Break the Swab and Return to Falcon Tube Protocol\")\n\n  # Define material inputs\n  swab = Item(\"Swab\")\n  falcon_tube = Item(\"Falcon Tube\")\n\n  # Step 1 - Break swab\n  comment(\"Step 1: Break the swab at its breakpoint.\")\n  pipet(dispose=True, source=swab, dest=None)\n  swab.dispose()\n\n  # Step 2 - Return swab to falcon tube\n  comment(\"Step 2: Return it to the falcon tube.\")\n  pipet(dispose=False, source=swab, dest=falcon_tube)\n\n  # End the protocol\n  end_protocol()\n\n# Call the protocol function\nswab_breaking()\n",
                    "result_baseline4": {
                        "opcode": "RETURN",
                        "slot": [
                            [
                                "REG",
                                "swab"
                            ],
                            [
                                "REG",
                                "breakpoint"
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "Device",
                                "falcon tube"
                            ]
                        ],
                        "emit": "broken swab"
                    },
                    "result_baseline5": {
                        "opcode": "RETURN",
                        "slot": [
                            [
                                "REG",
                                "Swab"
                            ],
                            [
                                "REG",
                                "Falcon Tube"
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "Device",
                                null
                            ]
                        ],
                        "emit": "broken swab"
                    }
                },
                {
                    "i": 3,
                    "sentense": "Collect two negative field controls, one at the start and one at the end of sampling, and prepare two unopened tubes of PBST as negative media controls.",
                    "python": "python\n# Define the protocol for collecting negative controls and preparing negative media controls\n\n# Collect negative field control at the start of sampling\ndef collect_negative_field_control_start():\n    print(\"Collecting negative field control at the start of sampling\")\n    # Add code here to collect negative field control\n\n# Collect negative field control at the end of sampling\ndef collect_negative_field_control_end():\n    print(\"Collecting negative field control at the end of sampling\")\n    # Add code here to collect negative field control\n\n# Prepare unopened tubes of PBST as negative media controls\ndef prepare_negative_media_controls():\n    print(\"Preparing unopened tubes of PBST as negative media controls\")\n    # Add code here to prepare negative media controls\n\n# Run the protocol\ncollect_negative_field_control_start()\ncollect_negative_field_control_end()\nprepare_negative_media_controls()\n",
                    "biocoder": "\n#include \"BioCoder.h\"\n\nvoid main() \n{\n    start_protocol(\"Experimental Protocol\");\n\n    Fluid* PBST = new_fluid(\"PBST\");\n\n    Tube* field_control_1 = new_container(STERILE_TUBE, \"Negative field control at start of sampling\");\n    Tube* field_control_2 = new_container(STERILE_TUBE, \"Negative field control at end of sampling\");\n    Tube* media_control_1 = new_container(STERILE_TUBE, \"Negative media control 1\");\n    Tube* media_control_2 = new_container(STERILE_TUBE, \"Negative media control 2\");\n\n    first_step(\"Collect Negative Field Controls\");\n    comment(\"Collect two negative field controls, one at the start and another one at the end of the sampling process.\");\n\n    next_step(\"Prepare Negative Media Controls\");\n    comment(\"Prepare two unopened tubes of PBST as negative media controls.\");\n\n    measure_fluid(PBST, media_control_1, vol(50, ML));\n    measure_fluid(PBST, media_control_2, vol(50, ML));\n\n    end_protocol();\n}\n",
                    "result_baseline4": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                "negative field control at the start of sampling"
                            ],
                            [
                                "REG",
                                "negative field control at the end of sampling"
                            ],
                            [
                                "REG",
                                "unopened tubes of PBST"
                            ]
                        ],
                        "emit": "Control samples"
                    },
                    "result_baseline5": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                "Negative field control at start of sampling"
                            ],
                            [
                                "REG",
                                "Negative field control at end of sampling"
                            ],
                            [
                                "REG",
                                "Negative media control 1"
                            ],
                            [
                                "REG",
                                "Negative media control 2"
                            ]
                        ],
                        "emit": "Control samples"
                    }
                },
                {
                    "i": 4,
                    "sentense": "Store all samples in a cooler with ice for up to 12 hours during collection.",
                    "python": "python\nimport datetime\n\n# Prompt for the number of samples\nnum_samples = int(input(\"Enter the number of samples: \"))\n\n# Calculate the time when the samples should be removed from the cooler\ncurrent_time = datetime.datetime.now()\nremoval_time = current_time + datetime.timedelta(hours=12)\n\n# Print the removal time for each sample\nfor sample in range(1, num_samples + 1):\n    print(f\"Sample {sample}: Remove from cooler at {removal_time}\")\n",
                    "biocoder": "Python\n# Biocoder Python code\n\nfrom biocoder import *\n\ndef sample_collection_protocol():\n    p = Protocol()\n\n    # Start with a new step\n    step_1 = p.add_step(\"Initial setup\")\n    \n    # Add details to the step\n    step_1.add_item(\"Samples\")\n    step_1.add_equipment(\"Cooler with ice\")\n    \n    # Store samples in cooler with ice \n    p.add_step(\"Store all samples in a cooler with ice for up to 12 hours during collection.\")\n    \n    return p\n\n# run the protocol\nprotocol = sample_collection_protocol()\nprotocol.execute()\n",
                    "result_baseline4": {
                        "opcode": "STORE",
                        "slot": [
                            [
                                "Time",
                                "12 hours"
                            ]
                        ],
                        "emit": "Preserved samples"
                    },
                    "result_baseline5": {
                        "opcode": "Store all samples in a cooler with ice for up to 12 hours during collection.",
                        "slot": [
                            [
                                "REG",
                                "Samples"
                            ],
                            [
                                "Device",
                                "Cooler with ice"
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    }
                },
                {
                    "i": 5,
                    "sentense": "Proceed with swab extraction, sample aggregation, and subsequent cultivation as per the experimental setup.",
                    "python": "python\ndef swab_extraction():\n    # Perform swab extraction steps\n    print(\"Performing swab extraction...\")\n\ndef sample_aggregation():\n    # Perform sample aggregation steps\n    print(\"Performing sample aggregation...\")\n\ndef cultivation():\n    # Perform cultivation steps\n    print(\"Performing cultivation...\")\n\n# Call the functions to execute the protocol\nswab_extraction()\nsample_aggregation()\ncultivation()\n",
                    "biocoder": "Python\n# Biocoder protocol for swab extraction, sample aggregation, and cultivation.\n\ndef experiment():\n\n    # Step 1: Swab extraction\n    swab_extraction = Step(\"Swab Extraction\")\n    swab_extraction.description = \"This step describes the process of swab extraction as per the experimental setup.\"\n    swab_extraction.perform()\n\n    # Step 2: Sample aggregation\n    sample_aggregation = Step(\"Sample Aggregation\")\n    sample_aggregation.description = \"This step involves the process of sample aggregation as per the experimental setup.\"\n    sample_aggregation.perform()\n\n    # Step 3: Cultivation\n    cultivation = Step(\"Cultivation\")\n    cultivation.description = \"This step deals with the subsequent cultivation of the swab sample as per the experimental setup.\"\n    cultivation.perform()\n\nif __name__ == \"__main__\":\n    experiment()\n",
                    "result_baseline4": {
                        "opcode": "PROCEED",
                        "slot": [
                            [
                                "Device",
                                "swab extraction"
                            ],
                            [
                                "Device",
                                "sample aggregation"
                            ],
                            [
                                "Device",
                                "cultivation"
                            ]
                        ],
                        "emit": "cultured samples"
                    },
                    "result_baseline5": {
                        "opcode": "PROCEED",
                        "slot": [
                            [
                                "Device",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "Device",
                                null
                            ]
                        ],
                        "emit": "cultured samples"
                    }
                }
            ]
        },
        "4": {
            "subject": "Ecology & Environmental Biology",
            "enum": 4,
            "protocol": "Always ensure containers are not tightly sealed to prevent pressure buildup and heed warnings about ensuring adequate ventilation to avoid oxygen deficiency from inert gas displacement. Protect yourself against liquid nitrogen (LN2) splatter. Label cryogenic tubes with sample name, date frozen, and initials before aliquoting 1 mL samples. Fill an insulated pan with LN2 to about 2 cm depth and place a CoolRack in it to cool to -150\u00b0C in approximately 15 minutes; pre-chilling the CoolRack in a -80\u00b0C freezer can save LN2 and time. Place cryogenic tubes in the CoolRack on dry ice for snap freezing, leaving them for 1 minute before transferring to a freezer box with forceps, then store in a -80\u00b0C freezer. For warming, thaw tubes at 4\u00b0C.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Always ensure containers are not tightly sealed to prevent pressure buildup and heed warnings about ensuring adequate ventilation to avoid oxygen deficiency from inert gas displacement.",
                    "python": "python\ndef check_container_sealing():\n    # Perform checks here...\n    container_sealed = False  # Set to True if container is tightly sealed\n    return container_sealed\n\ndef ensure_adequate_ventilation():\n    # Add code to ensure adequate ventilation here...\n    pass\n\ndef perform_experiment():\n    if not check_container_sealing():\n        print(\"Warning: Containers should not be tightly sealed to prevent pressure buildup!\")\n    \n    ensure_adequate_ventilation()\n    print(\"Experiment in progress...\")\n\n# Main program\nperform_experiment()\n",
                    "biocoder": "cpp\nbegin_protocol(\"Lab safety precautions\");\n\n// SAFETY PRECAUTION: Always ensure containers are not tightly sealed to prevent pressure buildup.\ncomment(\"Reminder: Always ensure containers are not tightly sealed to prevent pressure buildup.\");\n\n// SAFETY PRECAUTION: Heed warnings about ensuring adequate ventilation to avoid oxygen deficiency from inert gas displacement.\ncomment(\"Reminder: Heed warnings about ensuring adequate ventilation to avoid oxygen deficiency from inert gas displacement.\");\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "ENSURE",
                        "slot": [
                            [
                                "Time",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "data on pressure and ventilation"
                    },
                    "result_baseline5": {
                        "opcode": "ENSURE",
                        "slot": [
                            [
                                "Time",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "data on pressure and ventilation"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Protect yourself against liquid nitrogen (LN2) splatter.",
                    "python": "python\ndef protect_against_ln2_splatter():\n    # Step 1: Wear appropriate personal protective equipment (PPE)\n    print(\"Step 1: Wear appropriate personal protective equipment (PPE)\")\n    print(\"- Wear safety goggles or a face shield to protect your eyes.\")\n    print(\"- Wear insulated gloves to protect your hands.\")\n    print(\"- Wear a lab coat or protective clothing to cover your body.\")\n    print(\"- Wear closed-toe shoes or boots to protect your feet.\")\n\n    # Step 2: Handle LN2 with caution\n    print(\"\\nStep 2: Handle LN2 with caution\")\n    print(\"- Always use LN2 in a well-ventilated area to prevent buildup of nitrogen gas.\")\n    print(\"- Never store LN2 in a sealed or airtight container, as it may cause pressure buildup.\")\n    print(\"- Do not touch LN2 with bare skin, as it can cause frostbite.\")\n    print(\"- Handle LN2 containers carefully to prevent spills or leaks.\")\n\n    # Step 3: Use appropriate tools for transferring LN2\n    print(\"\\nStep 3: Use appropriate tools for transferring LN2\")\n    print(\"- Use protective cryogenic gloves and tongs when handling LN2 containers.\")\n    print(\"- Use appropriate-sized and well-insulated containers for transferring LN2.\")\n    print(\"- Use a wide-mouthed container and pour LN2 slowly to minimize splattering.\")\n\n    # Step 4: Be cautious while conducting experiments involving LN2\n    print(\"\\nStep 4: Be cautious while conducting experiments involving LN2\")\n    print(\"- Ensure proper ventilation in the experimental setup.\")\n    print(\"- Use secondary containers or trays to contain any potential spills or splatters.\")\n    print(\"- Avoid placing LN2 containers near sensitive instruments or electrical equipment.\")\n    print(\"- Follow appropriate safety guidelines and procedures while working with LN2.\")\n\n    # Step 5: Clean up spills or splatters immediately\n    print(\"\\nStep 5: Clean up spills or splatters immediately\")\n    print(\"- In case of any spills or splatters, alert others and secure the area.\")\n    print(\"- Use appropriate PPE to clean up the LN2, such as gloves and safety glasses.\")\n    print(\"- Use absorbent materials, like paper towels or spill kits, to soak up the liquid nitrogen.\")\n    print(\"- Dispose of the materials properly, following the guidelines for LN2 disposal.\")\n\n# Calling the function to describe the protocol\nprotect_against_ln2_splatter()\n",
                    "biocoder": "python\nclass Protect_against_LN2_Splatter:\n\n    def __init__(self):\n\n        self.appropriate_PPE = []\n        self.warning_context = []\n\n        self.preparation_appropriate_PPE()\n        self.warning_context()\n\n    def preparation_appropriate_PPE(self):\n\n        p.add(\"Before handling liquid nitrogen, always make sure to wear appropriate personal protective equipment (PPE).\")\n        self.appropriate_PPE.append({\"PPE_type\":\"Gloves\", \"specification\":\"Cryogenic gloves\"})\n        self.appropriate_PPE.append({\"PPE_type\":\"Eyewear\", \"specification\":\"Safety goggles\"})\n        self.appropriate_PPE.append({\"PPE_type\":\"Clothing\", \"specification\":\"Lab coat\"})\n        self.appropriate_PPE.append({\"PPE_type\":\"Shoes\", \"specification\":\"Closed-toe shoes\"})\n\n        for PPE in self.appropriate_PPE:\n            p.add(\"%s, %s.\" %(PPE[\"PPE_type\"], PPE[\"specification\"]))\n\n    def warning_context(self):\n\n        p.add(\"Liquid nitrogen can cause severe burns upon contact with skin. Also, it is important to remember that it can cause asphyxiation in poorly ventilated areas; never dispose of liquid nitrogen in such areas.\")\n        self.warning_context.append({\"context_type\":\"Caution\", \"detail\":\"Severe burns upon contact with skin\"})\n        self.warning_context.append({\"context_type\":\"Caution\", \"detail\":\"Asphyxiation in poorly ventilated areas\"})\n\n        for context in self.warning_context:\n            p.add(\"%s: %s.\" %(context[\"context_type\"], context[\"detail\"]))\n\n    run_protect_against_LN2_Splatter = Protect_against_LN2_Splatter()\n",
                    "result_baseline4": {
                        "opcode": "PROTECT",
                        "slot": [
                            [
                                "Device",
                                "spinning disk confocal microscope"
                            ],
                            [
                                "REG",
                                "solid media"
                            ],
                            [
                                "Device",
                                "spinning disk confocal microscope"
                            ],
                            [
                                "REG",
                                "solid media"
                            ]
                        ],
                        "emit": "Safety measures"
                    },
                    "result_baseline5": {
                        "opcode": "PROTECT",
                        "slot": [
                            [
                                "Device",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Safety measures"
                    }
                },
                {
                    "i": 2,
                    "sentense": "Label cryogenic tubes with sample name, date frozen, and initials before aliquoting 1 mL samples.",
                    "python": "No program",
                    "biocoder": "\n#include \"biocoder.h\"\n\nint main()\n{\n  start_protocol(\"Label cryogenic tubes and Aliquoting Samples\");\n\n  Fluid sample = new_fluid(\"sample\");\n  Container cryogenic_tube = new_container(STERILE_CRYOGENIC_TUBE, sample);\n\n  First_step();\n  comment(\"Label cryogenic tubes\");\n  char* properties[3] = {\"Sample name\" , \"Date frozen\", \"Initials\"};\n  assign_label(cryogenic_tube, properties, 3);\n\n  Next_step();\n  comment(\"Aliquoting 1 mL samples\");\n  measure_fluid(sample, ml(1));\n  aliquot(cryogenic_tube, 1);\n\n  end_protocol();\n\n  return 0;\n}\n",
                    "result_baseline4": {
                        "opcode": "LABEL",
                        "slot": [
                            [
                                "Container",
                                "cryogenic tubes"
                            ],
                            [
                                "REG",
                                "sample name"
                            ],
                            [
                                "Time",
                                "date frozen"
                            ],
                            [
                                "REG",
                                "initials"
                            ],
                            [
                                "Volume",
                                "1 mL samples"
                            ]
                        ],
                        "emit": "Labeled cryogenic tubes."
                    },
                    "result_baseline5": {
                        "opcode": "LABEL",
                        "slot": [
                            [
                                "Container",
                                "cryogenic tubes"
                            ],
                            [
                                "REG",
                                "sample name"
                            ],
                            [
                                "Time",
                                "date frozen"
                            ],
                            [
                                "REG",
                                "initials"
                            ],
                            [
                                "Volume",
                                "1 mL samples"
                            ]
                        ],
                        "emit": "Labeled cryogenic tubes."
                    }
                },
                {
                    "i": 3,
                    "sentense": "Fill an insulated pan with LN2 to about 2 cm depth and place a CoolRack in it to cool to -150\u00b0C in approximately 15 minutes; pre-chilling the CoolRack in a -80\u00b0C freezer can save LN2 and time.",
                    "python": "python\nimport time\n\ndef prechill_coolrack():\n    print(\"Pre-chilling CoolRack in -80\u00b0C freezer...\")\n    # Assuming some code here to control the freezer temperature\n    time.sleep(5)  # Simulating pre-chilling time\n    print(\"CoolRack pre-chilled and ready for use.\")\n\ndef fill_insulated_pan():\n    print(\"Filling insulated pan with LN2...\")\n    # Assuming some code here to control the LN2 level\n    time.sleep(2)  # Simulating LN2 filling time\n    print(\"Insulated pan filled with LN2.\")\n\ndef cool_coolrack():\n    print(\"Placing CoolRack in insulated pan...\")\n    time.sleep(2)  # Simulating placing time\n    print(\"CoolRack placed in insulated pan.\")\n    print(\"Cooling CoolRack to -150\u00b0C...\")\n    time.sleep(15 * 60)  # Simulating cooling time\n    print(\"CoolRack cooled to -150\u00b0C.\")\n\n# Main program\nprechill_coolrack()\nfill_insulated_pan()\ncool_coolrack()\n",
                    "biocoder": "\n#include \"BioCoder.h\"\n\nvoid main() {\n    start_protocol(\"LN2 and CoolRack Cooling Protocol\");\n\n    // Step 1:\n    Fluid* LN2 = new_fluid(\"Liquid Nitrogen (LN2)\");\n    Container* pan = new_container(\"Insulated Pan\");\n    first_step();\n    fluid_into_container(LN2, pan);\n    name_sample(pan, \"pan with approximately 2 cm depth of LN2\");\n\n    // Step 2: \n    Container* coolrack = new_container(\"CoolRack\");\n    second_step();\n    comment(\"Place a CoolRack in the pan to cool to -150\u00b0C in approximately 15 minutes; pre-chilling the CoolRack in a -80\u00b0C freezer can save LN2 and time.\");\n    Fluid* air = new_fluid(\"Air\");\n    fluid_to_ice(air, coolrack, -80, time_m(15), VORTEX);\n\n    end_protocol();\n}\n",
                    "result_baseline4": {
                        "opcode": "opcode",
                        "slot": [
                            [
                                "REG",
                                "LN2"
                            ]
                        ],
                        "emit": "Cooled CoolRack"
                    },
                    "result_baseline5": {
                        "opcode": "FILL",
                        "slot": [
                            [
                                "REG",
                                "LN2"
                            ],
                            [
                                "Length",
                                "2 cm"
                            ],
                            [
                                "Device",
                                "CoolRack"
                            ],
                            [
                                "Temperature",
                                "-150\u00b0C"
                            ],
                            [
                                "Time",
                                "15 minutes"
                            ],
                            [
                                "Device",
                                "CoolRack"
                            ],
                            [
                                "Temperature",
                                "-80\u00b0C"
                            ],
                            [
                                "REG",
                                "LN2"
                            ],
                            [
                                "Time",
                                "time"
                            ]
                        ],
                        "emit": "\"Cooled CoolRack\""
                    }
                },
                {
                    "i": 4,
                    "sentense": "Place cryogenic tubes in the CoolRack on dry ice for snap freezing, leaving them for 1 minute before transferring to a freezer box with forceps, then store in a -80\u00b0C freezer.",
                    "python": "python\nimport time\n\ndef freeze_tubes():\n    print(\"Placing cryogenic tubes in the CoolRack on dry ice...\")\n    time.sleep(60)\n    print(\"Transferring tubes to a freezer box with forceps...\")\n    print(\"Storing tubes in a -80\u00b0C freezer.\")\n\nfreeze_tubes()\n",
                    "biocoder": "python\nfrom biocoder import *\n\ndef freeze_samples():\n  p = Protocol()\n\n  # Create materials\n  cryogenic_tubes = Material('Cryogenic tubes')\n  cool_rack = Material('CoolRack')\n  dry_ice = Material('Dry ice')\n  forceps = Material('Forceps')\n  freezer_box = Material('Freezer box')\n  freezer = Material('-80\u00b0C freezer')\n\n  # Step 1: Place cryogenic tubes in the CoolRack on dry ice for snap freezing\n  p.add_step(\"Place the cryogenic tubes in the CoolRack on dry ice for snap freezing.\", materials=[cryogenic_tubes, cool_rack, dry_ice])\n\n  # Step 2: Wait 1 minute before transferring to a freezer box with forceps\n  p.add_step(\"Wait for 1 minute before transferring the cryogenic tubes to a freezer box using forceps.\", materials=[cryogenic_tubes, freezer_box, forceps], time='1 minute')\n\n  # Step 3: Store in a -80\u00b0C freezer\n  p.add_step(\"Store the freezer box containing the cryogenic tubes in a -80\u00b0C freezer.\", materials=[freezer_box, freezer])\n\n  return p\n\nprint(freeze_samples().to_string())\n",
                    "result_baseline4": {
                        "opcode": "freeze_tubes",
                        "slot": [
                            [
                                "REG",
                                "CoolRack"
                            ],
                            [
                                "REG",
                                "dry ice"
                            ],
                            [
                                "Device",
                                "forceps"
                            ],
                            [
                                "REG",
                                "-80\u00b0C freezer"
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    },
                    "result_baseline5": {
                        "opcode": "FREEZE",
                        "slot": [
                            [
                                "Container",
                                "cryogenic tubes"
                            ],
                            [
                                "Container",
                                "CoolRack"
                            ],
                            [
                                "Container",
                                "dry ice"
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Container",
                                "freezer box"
                            ],
                            [
                                "Device",
                                "forceps"
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                "-80\u00b0C freezer"
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    }
                },
                {
                    "i": 5,
                    "sentense": "For warming, thaw tubes at 4\u00b0C.",
                    "python": "python\ndef warm_and_thaw():\n    print(\"Step 1: Warming and Thawing Tubes\")\n    print(\"1. Place the frozen tubes in a refrigerator set at 4\u00b0C.\")\n    print(\"2. Allow the tubes to thaw completely at this temperature for the required time.\")\n    print(\"3. Once the tubes are completely thawed, they are ready for further experiments.\")\n\n# Calling the function to execute the protocol\nwarm_and_thaw()\n",
                    "biocoder": "\nbegin_protocol(\"Experimental Protocol\");\n\n// Step 1: Warming\nthaw(\"tube\", oC(4));\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "WARM",
                        "slot": [
                            [
                                "Temperature",
                                "4\u00b0C"
                            ],
                            [
                                "Container",
                                "tubes"
                            ]
                        ],
                        "emit": "Thawed tubes at 4\u00b0C"
                    },
                    "result_baseline5": {
                        "opcode": "THAW",
                        "slot": [
                            [
                                "Time",
                                null
                            ],
                            [
                                "REG",
                                "tube"
                            ]
                        ],
                        "emit": "Thawed tubes at 4\u00b0C"
                    }
                }
            ]
        }
    },
    "Bioengineering & Technology": {
        "0": {
            "subject": "Bioengineering & Technology",
            "enum": 0,
            "protocol": "Grow yeast cells with GFP-fusion on solid media, transfer to a microscope slide covered with a coverslip, and acquire Z-sections using a spinning disk confocal microscope.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Grow yeast cells with GFP-fusion on solid media, transfer to a microscope slide covered with a coverslip, and acquire Z-sections using a spinning disk confocal microscope.",
                    "python": "python\ndef grow_yeast_cells(media_type, gfp_fusion):\n    # Code to grow yeast cells with GFP-fusion on solid media\n    # ...\n\ndef transfer_to_microscope_slide():\n    # Code to transfer yeast cells onto microscope slide covered with a coverslip\n    # ...\n\ndef acquire_z_sections():\n    # Code to acquire Z-sections using a spinning disk confocal microscope\n    # ...\n\n# Main program\nif __name__ == \"__main__\":\n    media_type = \"solid\"\n    gfp_fusion = True\n    \n    grow_yeast_cells(media_type, gfp_fusion)\n    transfer_to_microscope_slide()\n    acquire_z_sections()\n",
                    "biocoder": "\n#include \"BioCoder.h\"\n\nvoid main() \n{\n    // Step 1: Grow yeast cells with GFP-fusion on solid media \n    Container yeast_cells = new_container(FLASK, \"Yeast cells with GFP-fusion\");\n    Media solid_media = new_solid_media(\"Solid media\");\n    add(yeast_cells, solid_media);\n    incubate(yeast_cells, ROOM_TEMP, 48, HOURS);\n\n    // Step 2: Transfer to a microscope slide covered with a coverslip \n    Container microscope_slide = new_container(SLIDE, \"Microscope slide\");\n    Container coverslip = new_container(COVERSLIP, \"Coverslip\");\n    transfer(yeast_cells, microscope_slide);\n    cover(microscope_slide, coverslip);\n\n    // Step 3: Acquire Z-sections using a spinning disk confocal microscope\n    Imaging_system confocal_microscope = new_imaging_system(\"Spinning disk confocal microscope\");\n    acquire_image(confocal_microscope, microscope_slide, Z_SECTIONS);\n}\n",
                    "result_baseline4": {
                        "opcode": "GROW",
                        "slot": [
                            [
                                "String",
                                "solid"
                            ],
                            [
                                "Bool",
                                true
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    },
                    "result_baseline5": {
                        "opcode": "GROW",
                        "slot": [
                            [
                                "Temperature",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "GFP-fusion cells Spinning disk confocal microscopy"
                    }
                }
            ]
        },
        "1": {
            "subject": "Bioengineering & Technology",
            "enum": 1,
            "protocol": "Grow yeast cells transformed with GFP-fusion on solid media, then transfer them to a microscope slide and cover with a coverslip. Acquire Z-sections using a spinning disk confocal microscope as described.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Grow yeast cells transformed with GFP-fusion on solid media, then transfer them to a microscope slide and cover with a coverslip.",
                    "python": "python\nclass Protocol:\n    def __init__(self):\n        self.protocol_steps = []\n\n    def add_step(self, step):\n        self.protocol_steps.append(step)\n\n    def execute_protocol(self):\n        print(\"Executing the experimental protocol:\")\n        for i, step in enumerate(self.protocol_steps):\n            print(f\"Step {i+1}: {step}\")\n        print(\"Protocol executed successfully.\")\n\n# Create a new protocol\nprotocol = Protocol()\n\n# Add protocol steps\nprotocol.add_step(\"Grow yeast cells transformed with GFP-fusion on solid media\")\nprotocol.add_step(\"Transfer the cells to a microscope slide\")\nprotocol.add_step(\"Cover the cells with a coverslip\")\n\n# Execute the protocol\nprotocol.execute_protocol()\n",
                    "biocoder": "python\n# Biocoder Implementation\n\ndef yeast_GFP_protocol():\n\n    # Reagents needed\n    YPD_Agar = SOLID_MEDIUM(\"YPD Agar\")\n    Yeast_Cells = CELL_CULTURE(\"Yeast Cells\")\n    GFP_fusion = SOLUTION(\"GFP-fusion\")\n    slide = LABWARE(\"Microscope Slide\")\n    coverslip = LABWARE(\"Coverslip\")\n\n    # Step 1: Transformed yeast cells with GFP-fusion\n    transformed_yeast_cells = TRANSFORM_CELL(Yeast_Cells, GFP_fusion)\n\n    # Step 2: Spread transformed yeast cells on solid medium\n    SPREAD_PLATE(YPD_Agar, transformed_yeast_cells)\n\n    # Step 3: Incubate the plate\n    INCUBATE(YPD_Agar, temp = \"30.0: C\", time = \"Overnight\")\n\n    # Step 4: Transfer colony to slide\n    TRANSFER(transformed_yeast_cells, slide)\n\n    # Step 5: Cover with coverslip\n    COVER(slide, coverslip)\n\n# Running the protocol \nyeast_GFP_protocol()\n",
                    "result_baseline4": {
                        "opcode": "GROW",
                        "slot": [
                            [
                                "REG",
                                "GFP-fusion"
                            ],
                            [
                                "REG",
                                "solid media"
                            ],
                            [
                                "Device",
                                "microscope slide"
                            ],
                            [
                                "Device",
                                "coverslip"
                            ]
                        ],
                        "emit": "Microscope images"
                    },
                    "result_baseline5": {
                        "opcode": "GROW",
                        "slot": [
                            [
                                "REG",
                                "GFP-fusion"
                            ],
                            [
                                "REG",
                                "solid media"
                            ],
                            [
                                "Device",
                                "microscope slide"
                            ],
                            [
                                "Device",
                                "coverslip"
                            ]
                        ],
                        "emit": "Microscope images"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Acquire Z-sections using a spinning disk confocal microscope as described.",
                    "python": "python\ndef acquire_z_sections():\n    spinning_disk_confocal_microscope = SpinningDiskConfocalMicroscope()\n    z_sections = spinning_disk_confocal_microscope.capture_z_sections()\n    return z_sections\n\n\nclass SpinningDiskConfocalMicroscope:\n    def __init__(self):\n        # Initialize microscope and set necessary parameters\n        \n    def capture_z_sections(self):\n        # Code to capture Z-sections using the spinning disk confocal microscope\n        # ...\n        # ...\n        # ...\n        # Captured z sections\n        z_sections = [...]\n        return z_sections\n\nz_sections = acquire_z_sections()\nprint(z_sections)\n",
                    "biocoder": "\nprocedure main() {\n\n// Materials\nContainer microscope = new_container(\"Spinning disk confocal microscope\");\n\n// Detailed steps\ncomment(\"Step 1: Acquire Z-sections\");\nMicroscope.z-section_acquisition(microscope);\n}\n",
                    "result_baseline4": {
                        "opcode": "ACQUIRE",
                        "slot": [
                            [
                                "Device",
                                "spinning disk confocal microscope"
                            ]
                        ],
                        "emit": "Z-sections"
                    },
                    "result_baseline5": {
                        "opcode": "ACQUIRE",
                        "slot": [
                            [
                                "Device",
                                "spinning disk confocal microscope"
                            ]
                        ],
                        "emit": "Z-sections"
                    }
                }
            ]
        },
        "2": {
            "subject": "Bioengineering & Technology",
            "enum": 2,
            "protocol": "Prior to the onset of directed differentiation, pluripotent stem cells are cultured in maintenance medium with 1% or 2% DMSO for 24-48h. Proceed with desired differentiation protocol after this treatment.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Prior to the onset of directed differentiation, pluripotent stem cells are cultured in maintenance medium with 1% or 2% DMSO for 24-48h.",
                    "python": "\n# Define the pluripotent stem cell culture protocol\ndef pluripotent_stem_cell_culture(culture_time, dmso_percentage):\n    \n    # Check if culture time is within range\n    if culture_time < 24 or culture_time > 48:\n        print(\"Invalid culture time. Please provide a time between 24-48 hours.\")\n        return\n    \n    # Check if DMSO percentage is valid\n    if dmso_percentage != 1 and dmso_percentage != 2:\n        print(\"Invalid DMSO percentage. Please provide either 1% or 2%.\")\n        return\n    \n    # Print the protocol steps\n    print(\"Experimental Protocol:\")\n    print(f\"1. Culture pluripotent stem cells in maintenance medium with {dmso_percentage}% DMSO for {culture_time} hours.\")\n\n# Example usage of the pluripotent_stem_cell_culture protocol\npluripotent_stem_cell_culture(24, 1)\n",
                    "biocoder": "\nbegin_protocol(\"Directed Differentiation\");\n\nFluid maintenance_medium = new Fluid(\"Maintenance medium\");\nChemical DMSO = new Chemical(\"DMSO\");\n\nContainer stem_cell_culture = container(\"Stem cell culture\");\n\n// Culturing pluripotent stem cells\nfirst_step(\"Culturing pluripotent stem cells\");\ninstruction(\"Prior to the onset of directed differentiation, pluripotent stem cells are cultured in maintenance medium with 1% or 2% DMSO for 24-48h.\");\n\nFluid DMSO_diluted = new Fluid(\"Diluted DMSO\", false);\nDMSO_diluted.add(DMSO, 1, PERCENT);\n\nstem_cell_culture.add(DMSO_diluted);\nstem_cell_culture.add(maintenance_medium);\n\nstem_cell_culture.incubate(\"room temperature\", new Time(24, HOURS), new Time(48, HOURS));\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "CULTURE",
                        "slot": [
                            [
                                "REG",
                                "DMSO"
                            ],
                            [
                                "Time",
                                "24-48h"
                            ]
                        ],
                        "emit": "modified pluripotent stem cells"
                    },
                    "result_baseline5": {
                        "opcode": "CULTURE",
                        "slot": [
                            [
                                "REG",
                                "DMSO"
                            ],
                            [
                                "Time",
                                "24-48h"
                            ]
                        ],
                        "emit": "modified pluripotent stem cells"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Proceed with desired differentiation protocol after this treatment.",
                    "python": "python\n# Define the desired differentiation protocol\ndef differentiation_protocol():\n    # Code for differentiation protocol goes here\n    # ...\n    pass  # Placeholder, replace with actual code\n\n# Perform the treatment\ndef treatment():\n    # Code for treatment goes here\n    # ...\n    pass  # Placeholder, replace with actual code\n\n# Call the treatment function before starting the differentiation protocol\ntreatment()\n\n# Start the desired differentiation protocol\ndifferentiation_protocol()\n",
                    "biocoder": "\nbegin_protocol(\"Start Desired Differentiation Protocol\");\n\nfirst_step(\"Starting the procedure\");\ncomment(\"The specific steps, timing and reagents of the differentiation protocol would be added here, but are not available based on the current brief protocol.\");\n\nnext_step(\"Process Completion\");\ncomment(\"At this point, the differentiation protocol has been completed.\");\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "PROCEED",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Differentiated cells"
                    },
                    "result_baseline5": {
                        "opcode": "Start Desired Differentiation Protocol",
                        "slot": [
                            [
                                "REG",
                                "Starting the procedure"
                            ],
                            [
                                "REG",
                                "The specific steps, timing and reagents of the differentiation protocol would be added here, but are not available based on the current brief protocol."
                            ],
                            [
                                "REG",
                                "Process Completion"
                            ],
                            [
                                "REG",
                                "At this point, the differentiation protocol has been completed."
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    }
                }
            ]
        },
        "3": {
            "subject": "Bioengineering & Technology",
            "enum": 3,
            "protocol": "Place larvae in a 1m^3 box filled with dirt, feed them the specified food 3-4 times a day at 2-3 hour intervals for optimal growth. Continue until larvae become pupae, at which point increase food quantity. Once pupae develop into adults, introduce water to the environment for mating. After mating, collect the new larvae.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Place larvae in a 1m^3 box filled with dirt, feed them the specified food 3-4 times a day at 2-3 hour intervals for optimal growth.",
                    "python": "python\nimport time\n\ndef feed_larvae(food: str) -> None:\n    print(f\"Feeding larvae with {food}...\")\n\ndef main() -> None:\n    larvae = \"larvae\"\n    food = \"specified food\"\n\n    print(\"Placing larvae in a 1m^3 box filled with dirt...\")\n    print(\"Starting feeding process...\")\n\n    for _ in range(3):\n        feed_larvae(food)\n        time.sleep(2 * 3600)  # Wait for 2 hours\n\n    print(\"Feeding process completed.\")\n\nif __name__ == \"__main__\":\n    main()\n",
                    "biocoder": "python\n# Biocoder format\nfrom biocoder import *\n\n# Setup\np = Protocol()\nlarvae_box = p.ref(\"larvae_box\", cont_type=\"1m^3 box\", discard=False)\nsoil_done = Solution(\"Soil\")\n\n# Procedure\np.add(Dispense(larvae_box, soil_done, vol=\"1m^3\"))\np.add(Comment(\"Place larvae in the box\"))\n\nfeeding_times = [2, 3, 4]\n\nfor feeding in feeding_times:\n    p.add(Comment(f\"Feeding {feeding}:\"))\n    p.add(Dispense(larvae_box, \"specified food\", feeding))\n    p.add(Incubate(larvae_box, TimePeriod(\"hours\", 2), 20))\n\n# Output\nprint(p)\n",
                    "result_baseline4": {
                        "opcode": "PLACE",
                        "slot": [
                            [
                                "Container",
                                "1m^3"
                            ],
                            [
                                "Time",
                                "3-4 times"
                            ],
                            [
                                "Time",
                                "2-3 hour"
                            ]
                        ],
                        "emit": "Well-fed and growing larvae."
                    },
                    "result_baseline5": {
                        "opcode": "PLACE",
                        "slot": [
                            [
                                "Volume",
                                "1m^3"
                            ],
                            [
                                "Time",
                                "3-4 times"
                            ],
                            [
                                "Time",
                                "2-3 hour"
                            ]
                        ],
                        "emit": "Well-fed and growing larvae."
                    }
                },
                {
                    "i": 1,
                    "sentense": "Continue until larvae become pupae, at which point increase food quantity.",
                    "python": "python\nlarvae_stage = True\nfood_quantity = 100\n\nwhile larvae_stage:\n    # Check if larvae have become pupae\n    if larvae_become_pupae():\n        food_quantity += 100\n        larvae_stage = False\n    else:\n        # Continue feeding larvae\n        feed_larvae()\n\nprint(f\"Food quantity increased to {food_quantity} when larvae became pupae.\")\n",
                    "biocoder": "\nbegin_protocol(\"larvae_to_pupae\");\n\n// Assume that the known time for larvae to become pupae is 7 days\ncomment(\"Wait for larvae to become pupae (approx 7 days)\");\n\n// Increase food quantity\nfirst_step(\"Increase food quantity\");\nnote(\"Once larvae have transitioned to their pupae stage, they will require more sustenance. Adjust food quantity as needed.\");\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "INCREASE",
                        "slot": [
                            [
                                "REG",
                                "larvae"
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "REG",
                                "pupae"
                            ]
                        ],
                        "emit": "Increased pupal size."
                    },
                    "result_baseline5": {
                        "opcode": "larvae_to_pupae",
                        "slot": [
                            [
                                "Time",
                                "approx 7 days"
                            ],
                            [
                                "REG",
                                "Increase food quantity"
                            ],
                            [
                                "REG",
                                "Once larvae have transitioned to their pupae stage, they will require more sustenance. Adjust food quantity as needed."
                            ],
                            [
                                "output",
                                null
                            ]
                        ],
                        "emit": ""
                    }
                },
                {
                    "i": 2,
                    "sentense": "Once pupae develop into adults, introduce water to the environment for mating.",
                    "python": "python\n# Define a class for the pupae\nclass Pupae:\n    def __init__(self):\n        self.developed = False\n\n    def develop_into_adults(self):\n        # Simulating the development time for pupae to adults\n        # by setting the 'developed' flag to True\n        self.developed = True\n        print(\"Pupae have developed into adults.\")\n\n# Define a class for the environment\nclass Environment:\n    def __init__(self):\n        self.water_present = False\n\n    def add_water(self):\n        # Simulating the introduction of water to the environment\n        # by setting the 'water_present' flag to True\n        self.water_present = True\n        print(\"Water has been introduced to the environment.\")\n\n    def introduce_mating(self):\n        if self.water_present:\n            print(\"Mating can occur in the environment.\")\n        else:\n            print(\"Please add water to the environment before mating.\")\n\n# Main program\nif __name__ == \"__main__\":\n    # Create an instance of Pupae\n    pupae = Pupae()\n\n    # Check if pupae have developed into adults\n    if pupae.developed:\n        # Create an instance of Environment\n        environment = Environment()\n\n        # Add water to the environment\n        environment.add_water()\n\n        # Introduce mating in the environment\n        environment.introduce_mating()\n    else:\n        print(\"Pupae have not developed into adults yet.\")\n",
                    "biocoder": "Python\nfrom biocoder import *\n\ndef insect_life_cycle():\n    # Step 1: Wait for pupae to develop into adults\n    wait_for_pupae_to_develop()\n\n    # Step 2: Introduce water to environment for mating\n    add_water_for_mating()\n    \n\ndef wait_for_pupae_to_develop():\n    p = Protocol()\n    p.add_step('Wait for the insect pupae to develop into adults. This process is passive and requires patient observation.')\n    p.run()\n\ndef add_water_for_mating():\n    p2 = Protocol()\n    p2.add_reagent('Water')\n    p2.add_step('Introduce water to the environment for mating. The exact amount of water is dependent on the size of the environment and the species of insect.')\n    p2.run()\n\ninsect_life_cycle()\n",
                    "result_baseline4": {
                        "opcode": "INTRODUCE",
                        "slot": [
                            [
                                "REG",
                                "water"
                            ],
                            [
                                "REG",
                                "environment"
                            ],
                            [
                                "REG",
                                "mating"
                            ],
                            [
                                "REG",
                                "pupae"
                            ],
                            [
                                "REG",
                                "adults"
                            ]
                        ],
                        "emit": "Mated adults."
                    },
                    "result_baseline5": {
                        "opcode": "INTRODUCE",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Mated adults."
                    }
                },
                {
                    "i": 3,
                    "sentense": "After mating, collect the new larvae.",
                    "python": "python\ndef collect_larvae():\n    # Perform the mating process\n    \n    # Wait for mating to complete\n    \n    # Collect the newly hatched larvae\n    larvae = []\n    \n    # Repeat the following steps for each larva:\n    for i in range(num_larvae):\n        # Collect the larva\n        larva = collect_larva()\n        \n        # Add the larva to the larvae list\n        larvae.append(larva)\n    \n    # Return the collected larvae\n    return larvae\n\ndef collect_larva():\n    # Code to collect a single larva\n    # ...\n    pass\n\n# Number of larvae to collect\nnum_larvae = 10\n\n# Call the function to collect larvae after mating\ncollected_larvae = collect_larvae()\n\n# Print the collected larvae\nprint(\"Collected Larvae:\")\nfor larva in collected_larvae:\n    print(larva)\n",
                    "biocoder": "\nbegin_protocol;\nbegin_step(\"Collecting New Larvae After Mating\");\ncomment(\"The following steps should be taken after mating.\");\nbegin_substep(\"Collect New Larvae\");\ncomment(\"Carefully collect the newly hatched larvae.\");\nend_substep;\nend_step;\nend_protocol;\n",
                    "result_baseline4": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                "After mating"
                            ],
                            [
                                "REG",
                                "Collect the new larvae"
                            ],
                            [
                                "REG",
                                "Repeat for each larva"
                            ],
                            [
                                "REG",
                                "Collect the larva"
                            ],
                            [
                                "Device",
                                "spinning disk confocal microscope"
                            ]
                        ],
                        "emit": "new larvae"
                    },
                    "result_baseline5": {
                        "opcode": "COLLECT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ]
                        ],
                        "emit": "new larvae"
                    }
                }
            ]
        },
        "4": {
            "subject": "Bioengineering & Technology",
            "enum": 4,
            "protocol": "Recruit 7 mandibular models and apply radio opaque markers. Record 10 predetermined linear measurements, perform CBCT scanning of each model, and convert DICOM files into STL format. Use SLS and FFF printers for 3D printing the models. Record the same 10 linear measurements on the printed models and compare these values against the reference models and each other.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Recruit 7 mandibular models and apply radio opaque markers.",
                    "python": "python\nclass MandibularModel:\n    def __init__(self, model_number):\n        self.model_number = model_number\n\n    def apply_markers(self):\n        print(f\"Applying radio opaque markers to Mandibular Model {self.model_number}\")\n\n\ndef main():\n    # Recruit 7 mandibular models\n    models = [MandibularModel(i) for i in range(1, 8)]\n\n    # Apply radio opaque markers to each model\n    for model in models:\n        model.apply_markers()\n\n\nif __name__ == '__main__':\n    main()\n",
                    "biocoder": "Python\ndef main():\n    # Step 1: Recruit 7 mandibular models\n    mandibular_models = 7\n\n    # Step 2: Apply radio opaque markers\n    for i in range(mandibular_models):\n        print(\"Applying radio opaque marker to mandibular model number: \" + str(i + 1))\n\nmain()\n",
                    "result_baseline4": {
                        "opcode": "RECRUIT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "labeled mandibular models"
                    },
                    "result_baseline5": {
                        "opcode": "RECRUIT",
                        "slot": [
                            [
                                "REG",
                                "mandibular models"
                            ],
                            [
                                "REG",
                                "radio opaque markers"
                            ]
                        ],
                        "emit": "labeled mandibular models"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Record 10 predetermined linear measurements, perform CBCT scanning of each model, and convert DICOM files into STL format.",
                    "python": "python\nimport os\n\ndef record_linear_measurements():\n    linear_measurements = []\n    \n    print(\"Please enter 10 predetermined linear measurements:\")\n    \n    for i in range(10):\n        measurement = float(input(\"Measurement {0}: \".format(i+1)))\n        linear_measurements.append(measurement)\n    \n    return linear_measurements\n\ndef perform_cbct_scanning(linear_measurements):\n    cbct_scans = []\n    \n    for measurement in linear_measurements:\n        print(\"Performing CBCT scanning for measurement: {0}\".format(measurement))\n        \n        # Perform CBCT scanning code here\n        \n        cbct_scans.append(cbct_scan)\n    \n    return cbct_scans\n\ndef convert_dicom_to_stl(cbct_scans):\n    stl_files = []\n    \n    for scan in cbct_scans:\n        print(\"Converting DICOM file to STL format for scan: {0}\".format(scan))\n        \n        # Convert DICOM file to STL format code here\n        \n        stl_files.append(stl_file)\n    \n    return stl_files\n\n# Main program flow\nlinear_measurements = record_linear_measurements()\ncbct_scans = perform_cbct_scanning(linear_measurements)\nstl_files = convert_dicom_to_stl(cbct_scans)\n\n# Print the resulting STL files\nprint(\"The STL files generated are:\")\nfor stl_file in stl_files:\n    print(stl_file)\n",
                    "biocoder": "Python\n# Biocoder version of the protocol\n\nSolution LinearMeasurements = Solution(\"Linear Measurements\", 10);\n\n# Step 1: Record 10 predetermined linear measurements\nProtocol RecordMeasurementsBegin;\nfor (int i = 1; i <= 10; i++) {\n    RecordMeasurementsBegin.add_linear_measurements(LinearMeasurements);\n}\nRecordMeasurementsBegin.end();\n\n# Step 2: Perform CBCT scanning of each model\nProtocol CBCTScan;\nfor (int i = 1; i <= 10; i++) {\n    CBCTScan.add(CBCTConstruct(\"CBCT model \" + str(i)));\n    CBCTScan.scan(\"CBCT model \" + str(i));\n}\nCBCTScan.end();\n\n# Step 3: Convert DICOM files into STL format\nProtocol ConvertFiles;\nfor (int i = 1; i <= 10; i++) {\n    ConvertFiles.add(DICOMFile(\"DICOM file \" + str(i)));\n    ConvertFiles.convert_to_STL(\"DICOM file \" + str(i));\n}\nConvertFiles.end();\n",
                    "result_baseline4": {
                        "opcode": "RECORD",
                        "slot": [
                            [
                                "Container",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "CBCT images in STL format"
                    },
                    "result_baseline5": {
                        "opcode": "RECORD",
                        "slot": [
                            [
                                "Container",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "CBCT images in STL format"
                    }
                },
                {
                    "i": 2,
                    "sentense": "Use SLS and FFF printers for 3D printing the models.",
                    "python": "python\ndef use_3d_printer(printer_type):\n    \"\"\"\n    Function to use the specified 3D printer for printing the models.\n    \"\"\"\n    print(f\"Using {printer_type} printer for 3D printing the models...\")\n    # Add the actual code to control the 3D printer here\n\n\n# Using SLS printer\nuse_3d_printer(\"SLS\")\n\n# Using FFF printer\nuse_3d_printer(\"FFF\")\n",
                    "biocoder": "c++\n#include \"biocoder.h\"\n\nvoid setup() \n{\n    start_protocol(\"Standard Biology Procedure\");\n}\n\nvoid loop() \n{\n    Pipet(STERILE_WATER, vol(10, ML)); \n    Measure_fluid_concentration(DNA_SAMPLE, vol(2, UL), \"ng/ul\");\n    Centrifuge(DNA_SAMPLE, speed(13000, RPM), time(10, MINS), 4); \n    Incubate(DNA_SAMPLE, TEMP_37C, time(30, MINS));\n    end_protocol();\n}\n",
                    "result_baseline4": {
                        "opcode": "PRINT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                "SLS"
                            ],
                            [
                                "Device",
                                "FFF"
                            ]
                        ],
                        "emit": "3D printed models with SLS and FFF printers."
                    },
                    "result_baseline5": {
                        "opcode": "output",
                        "slot": [
                            [
                                "REG",
                                "STERILE_WATER"
                            ],
                            [
                                "Volume",
                                "10 ML"
                            ],
                            [
                                "Concentration",
                                "DNA_SAMPLE"
                            ],
                            [
                                "Volume",
                                "2 UL"
                            ],
                            [
                                "String",
                                "ng/ul"
                            ],
                            [
                                "Device",
                                "speed(13000, RPM)"
                            ],
                            [
                                "Time",
                                "10 MINS"
                            ],
                            [
                                "Temperature",
                                "TEMP_37C"
                            ],
                            [
                                "Time",
                                "30 MINS"
                            ]
                        ],
                        "emit": ""
                    }
                },
                {
                    "i": 3,
                    "sentense": "Record the same 10 linear measurements on the printed models and compare these values against the reference models and each other.",
                    "python": "python\n# Reference model measurements\nreference_model = [10.2, 9.5, 8.7, 11.3, 7.8, 10.1, 9.9, 8.8, 12.0, 10.5]\n\n# Print model measurements\nprint_model = [10.3, 9.6, 8.9, 11.2, 7.9, 10.2, 9.8, 9.0, 12.2, 10.4]\n\n# Compare against reference models\nfor i in range(len(reference_model)):\n    measurement_ref = reference_model[i]\n    measurement_print = print_model[i]\n    difference = measurement_print - measurement_ref\n    print(f\"Difference between measurement {i+1}: {difference}\")\n\n# Compare against each other\nfor i in range(len(print_model)):\n    for j in range(i+1, len(print_model)):\n        measurement_1 = print_model[i]\n        measurement_2 = print_model[j]\n        difference = measurement_1 - measurement_2\n        print(f\"Difference between measurements {i+1} and {j+1}: {difference}\")\n",
                    "biocoder": "cpp\n#include \"Biocoder.h\"\n\nvoid setup()\n{\n   start_protocol(\"Linear Measurements Recording Protocol\");\n}\n\nvoid run()\n{\n   // Step 1: Record the 10 linear measurements\n   Measurement* printed_model_measurements = measure_printed_model();\n\n   // Step 2: Get the reference model measurements\n   Measurement* reference_model_measurements = get_reference_model_measurements();\n\n   //Step 3: Compare these values against the reference model and each other.\n   compare_measurements(printed_model_measurements, reference_model_measurements);\n   \n   end_protocol();\n}\n\nMeasurement* measure_printed_model ()\n{\n   // Define a method to measure the printed model, each model will have 10 measurements\n   Measurement* printed_model_measurements[] = get_printed_model_measurements();\n   return printed_model_measurements;\n}\n\nMeasurement* get_reference_model_measurements ()\n{\n   // Define a method to measure the reference model, each model will have 10 measurements\n   Measurement* reference_model_measurements[] = get_model_measurements();\n   return reference_model_measurements;\n}\n\nvoid compare_measurements(Measurement* printed_model, Measurement* reference_model)\n{\n   // Define a method to compare measurements\n   for(int i = 0; i < 10; i++)\n   {\n      compare_measurement(printed_model[i], reference_model[i]);\n   }\n}\n\nint main ()\n{\n   setup();\n   run();\n   return 0;\n}\n",
                    "result_baseline4": {
                        "opcode": "RECORD",
                        "slot": [
                            [
                                "Container",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "Comparison of measurements"
                    },
                    "result_baseline5": {
                        "opcode": "Linear Measurements Recording Protocol",
                        "slot": [
                            [
                                "REG",
                                "printed model measurements"
                            ],
                            [
                                "REG",
                                "reference model measurements"
                            ]
                        ],
                        "emit": "Comparison of measurements"
                    }
                }
            ]
        }
    },
    "Bioinformatics & Computational Biology": {
        "0": {
            "subject": "Bioinformatics & Computational Biology",
            "enum": 0,
            "protocol": "To evaluate CSC triage algorithms, review clinical data and existing algorithms, define the crisis, select and devise algorithms, define clinical endpoints, and select patient cohorts. Obtain IRB approval, create a case report form, choose a secure data management system, determine data entry method, conduct pilot data acquisition, complete data acquisition, apply triage algorithms, and calculate priority scores. Test algorithm accuracy using AUROC, simulate clinical decision-making in small patient groups using a bootstrap method, format input files with patient outcomes and priority scores, run simulations, and analyze decision-making efficacy.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "To evaluate CSC triage algorithms, review clinical data and existing algorithms, define the crisis, select and devise algorithms, define clinical endpoints, and select patient cohorts.",
                    "python": "python\n# Step 1: Review clinical data and existing algorithms\ndef review_clinical_data():\n    print(\"Step 1: Reviewing clinical data and existing algorithms\")\n\n# Step 2: Define the crisis\ndef define_crisis():\n    print(\"Step 2: Defining the crisis\")\n\n# Step 3: Select and devise algorithms\ndef select_and_devise_algorithms():\n    print(\"Step 3: Selecting and devising algorithms\")\n\n# Step 4: Define clinical endpoints\ndef define_clinical_endpoints():\n    print(\"Step 4: Defining clinical endpoints\")\n\n# Step 5: Select patient cohorts\ndef select_patient_cohorts():\n    print(\"Step 5: Selecting patient cohorts\")\n\n# Execute the protocol steps\nreview_clinical_data()\ndefine_crisis()\nselect_and_devise_algorithms()\ndefine_clinical_endpoints()\nselect_patient_cohorts()\n",
                    "biocoder": "Python\n\nfrom bio import *\n\n# Primary components\nclinical_data = Item(\"Clinical Data\")\nexisting_algorithms = Item(\"Existing Algorithms\")\ndefined_crisis = Item(\"Defined Crisis\")\ndefined_clinical_endpoints = Item(\"Defined Clinical Endpoints\")\npatient_cohorts = Item(\"Patient Cohorts\")\n\n# Evaluation of CSC Triage Algorithms\ndef Evaluate_CSC_Triage_Algorithms(clinical_data, existing_algorithms, defined_crisis, defined_clinical_endpoints, patient_cohorts):\n\n    # Review Clinical Data\n    Step(\"Review\", clinical_data)\n\n    # Review Existing Algorithms\n    Step(\"Review\", existing_algorithms)\n\n    # Define the crisis\n    Step(\"Define\", defined_crisis)\n\n    # Select and Devise Algorithms\n    selected_algorithms = select_algorithm(existing_algorithms)\n    new_algorithm = devise_algorithm()\n\n    # Define Clinical Endpoints\n    Step(\"Define\", defined_clinical_endpoints)\n\n    # Select Patient Cohorts\n    Step(\"Select\", patient_cohorts)\n\n# The main procedure\nif __name__ == \"__main__\":\n    Evaluate_CSC_Triage_Algorithms(clinical_data, existing_algorithms, defined_crisis, defined_clinical_endpoints, patient_cohorts)\n\n",
                    "result_baseline4": {
                        "opcode": "EVALUATE",
                        "slot": [
                            [
                                "REG",
                                "CSC triage algorithms"
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "CSC triage algorithms evaluation"
                    },
                    "result_baseline5": {
                        "opcode": "Evaluate_CSC_Triage_Algorithms",
                        "slot": [
                            [
                                "REG",
                                "Clinical Data"
                            ],
                            [
                                "REG",
                                "Existing Algorithms"
                            ],
                            [
                                "REG",
                                "Defined Crisis"
                            ],
                            [
                                "REG",
                                "Defined Clinical Endpoints"
                            ],
                            [
                                "REG",
                                "Patient Cohorts"
                            ]
                        ],
                        "emit": "CSC triage algorithms evaluation"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Obtain IRB approval, create a case report form, choose a secure data management system, determine data entry method, conduct pilot data acquisition, complete data acquisition, apply triage algorithms, and calculate priority scores."
                },
                {
                    "i": 2,
                    "sentense": "Test algorithm accuracy using AUROC, simulate clinical decision-making in small patient groups using a bootstrap method, format input files with patient outcomes and priority scores, run simulations, and analyze decision-making efficacy.",
                    "python": "python\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score\n\n# Step 1: Test algorithm accuracy using AUROC\ndef test_algorithm_accuracy(y_true, y_pred):\n    auroc = roc_auc_score(y_true, y_pred)\n    print(\"AUROC:\", auroc)\n\n\n# Step 2: Simulate clinical decision-making in small patient groups using a bootstrap method\ndef simulate_decision_making(patient_outcomes, priority_scores, num_iterations):\n    decision_results = []\n    for i in range(num_iterations):\n        bootstrap_indices = np.random.choice(len(patient_outcomes), size=len(patient_outcomes), replace=True)\n        bootstrap_patient_outcomes = patient_outcomes[bootstrap_indices]\n        bootstrap_priority_scores = priority_scores[bootstrap_indices]\n        \n        # Perform decision-making using the bootstrap samples\n        decision_result = make_decision(bootstrap_patient_outcomes, bootstrap_priority_scores)\n        decision_results.append(decision_result)\n    \n    return decision_results\n\n\n# Step 3: Format input files with patient outcomes and priority scores\ndef format_input_files(patient_outcomes_file, priority_scores_file):\n    patient_outcomes = np.loadtxt(patient_outcomes_file)\n    priority_scores = np.loadtxt(priority_scores_file)\n    \n    return patient_outcomes, priority_scores\n\n\n# Step 4: Run simulations\ndef run_simulations():\n    # Load patient outcomes and priority scores from input files\n    patient_outcomes, priority_scores = format_input_files(\"patient_outcomes.txt\", \"priority_scores.txt\")\n    \n    # Simulate decision-making using bootstrap method with 1000 iterations\n    decision_results = simulate_decision_making(patient_outcomes, priority_scores, num_iterations=1000)\n    \n    # Step 5: Analyze decision-making efficacy\n    analyze_decision_making(decision_results)\n\n\n# Helper function for decision-making\ndef make_decision(patient_outcomes, priority_scores):\n    # TODO: Implement decision-making algorithm based on patient_outcomes and priority_scores\n    # Example decision-making algorithm: Choose the patient with the highest priority score\n    decision_index = np.argmax(priority_scores)\n    decision_result = patient_outcomes[decision_index]\n    \n    return decision_result\n\n\n# Step 5: Analyze decision-making efficacy\ndef analyze_decision_making(decision_results):\n    # TODO: Implement analysis of decision-making efficacy using decision_results\n    # Example analysis: Calculate mean decision result\n    mean_decision_result = np.mean(decision_results)\n    print(\"Mean decision result:\", mean_decision_result)\n\n\n# Run the protocol\nrun_simulations()\n",
                    "biocoder": "Python\n# Given the experimental protocol, below is the biocoder-formatted code based on broad descriptions.\n\n# Import necessary libraries\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.utils import resample\nimport pandas as pd\nimport numpy as np\nimport simulation_utils\n\n# Define file paths\ninput_file = 'input.csv'\noutput_file = 'output.csv'\n\n# Load input files\ndf = pd.read_csv(input_file)\n\n# Prepare data\npatient_outcomes = df['outcome']\npriority_scores = df['priority']\n\n# Define bootstrap function\ndef bootstrap_resample(X, n=None):\n    if n == None:\n        n = len(X)\n        \n    resample_i = np.floor(np.random.rand(n)*len(X)).astype(int)\n    X_resample = X[resample_i]\n    return X_resample\n\n# Run simulations\nsim_results = []\nfor i in range(100):\n    # Resample data\n    resampled_outcomes = bootstrap_resample(patient_outcomes)\n    resampled_scores = bootstrap_resample(priority_scores)\n\n    # Run simulation\n    decision_results = simulate_decision_making(resampled_outcomes, resampled_scores)\n\n    # Store results\n    sim_results.append(decision_results)\n\n# Analyze results\nanalyze_results(sim_results)\n\n# Save output\ndf_results = pd.DataFrame(sim_results)\ndf_results.to_csv(output_file, index=False)\n\nprint('Simulation and analysis complete. Results saved to', output_file)\n",
                    "result_baseline4": {
                        "opcode": "TEST",
                        "slot": [
                            [
                                "REG",
                                "AUROC"
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "REG",
                                "bootstrap method"
                            ]
                        ],
                        "emit": "decision-making efficacy"
                    },
                    "result_baseline5": {
                        "opcode": "TEST",
                        "slot": [
                            [
                                "REG",
                                "AUROC"
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "REG",
                                "bootstrap method"
                            ]
                        ],
                        "emit": "decision-making efficacy"
                    }
                }
            ]
        },
        "1": {
            "subject": "Bioinformatics & Computational Biology",
            "enum": 1,
            "protocol": "Download and install STNMF from GitHub, link: https://github.com/jiankliu/STNMF-SNN. Process data by generating effective spike-triggered stimulus images (STE) from neuron spike trains and stimulus array, applying Singular Value Decomposition (SVD) for spatial and temporal filters. Use STNMF on STE to infer subunits' spatial receptive field, obtaining weight matrix W and module matrix M. Analyze M and W to infer temporal filters, nonlinearity, and synaptic weights of subunits. For detailed computational analysis, apply algorithms to calculate temporal filter, nonlinearity, and classify spikes into modules based on synaptic connection weights, aiming to reveal complex neuronal network dynamics.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Download and install STNMF from GitHub, link: https://github.com/jiankliu/STNMF-SNN.",
                    "python": "python\nimport os\nimport subprocess\n\n# Function to download and install STNMF from GitHub\ndef download_and_install_stnmf():\n    # Download STNMF from GitHub\n    download_command = \"git clone https://github.com/jiankliu/STNMF-SNN.git\"\n    subprocess.run(download_command, shell=True)\n\n    # Change directory to the downloaded repository\n    os.chdir(\"STNMF-SNN\")\n\n    # Install dependencies using pip\n    install_command = \"pip install -r requirements.txt\"\n    subprocess.run(install_command, shell=True)\n\n# Main program starts here\nif __name__ == \"__main__\":\n    # Download and install STNMF\n    download_and_install_stnmf()\n\n    # Rest of the experimental protocol\n    # ...\n",
                    "biocoder": "No program",
                    "result_baseline4": {
                        "opcode": "DOWNLOAD",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Code"
                    },
                    "result_baseline5": {
                        "opcode": "DOWNLOAD",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Code"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Process data by generating effective spike-triggered stimulus images (STE) from neuron spike trains and stimulus array, applying Singular Value Decomposition (SVD) for spatial and temporal filters.",
                    "python": "No program",
                    "biocoder": "python\nimport numpy as np\nfrom scipy import linalg\n\ndef generate_STE(spike_trains, stimulus_array):\n    # Implement your STE generation method here\n    # This could involve shifting the stimulus array based on\n    # the spike train times, and averaging the result.\n    pass\n\ndef apply_SVD(ste):\n    # Singular Value Decomposition\n    u, s, vh = linalg.svd(ste)\n    \n    # Here, 'u' would be the temporal filters and 'vh' would be the spatial filters\n    return u, vh\n\n# Given a spike_trains data and stimulus_array\nspike_trains = []\nstimulus_array = []\n\n# Generate STE\nste = generate_STE(spike_trains, stimulus_array)\n\n# Apply SVD\ntemporal_filters, spatial_filters = apply_SVD(ste)\n",
                    "result_baseline4": {
                        "opcode": "PROCESS",
                        "slot": [
                            [
                                "REG",
                                "Data"
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "REG",
                                "Data"
                            ],
                            [
                                "REG",
                                "Data"
                            ]
                        ],
                        "emit": "filtered stimulus images"
                    },
                    "result_baseline5": {
                        "opcode": "PROCESS",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "filtered stimulus images"
                    }
                },
                {
                    "i": 2,
                    "sentense": "Use STNMF on STE to infer subunits' spatial receptive field, obtaining weight matrix W and module matrix M. Analyze M and W to infer temporal filters, nonlinearity, and synaptic weights of subunits.",
                    "python": "python\n# Import necessary libraries for STNMF and analysis\nimport numpy as np\n\n# STEP 1: Use STNMF on STE to infer subunits' spatial receptive field\ndef stnmf(ste):\n    # Perform STNMF on STE\n    # ...\n    # Obtain weight matrix W and module matrix M\n    W = ...\n    M = ...\n    return W, M\n\n# STEP 2: Analyze M and W to infer temporal filters, nonlinearity, and synaptic weights of subunits\ndef analyze(M, W):\n    # Analyze module matrix M to infer temporal filters\n    filters = ...\n    \n    # Analyze weight matrix W to infer nonlinearity\n    nonlinearity = ...\n    \n    # Analyze weight matrix W to infer synaptic weights\n    synaptic_weights = ...\n    \n    return filters, nonlinearity, synaptic_weights\n\n# Perform the experimental protocol\ndef experimental_protocol(ste):\n    # STEP 1: Use STNMF on STE to infer subunits' spatial receptive field\n    weight_matrix, module_matrix = stnmf(ste)\n    \n    # STEP 2: Analyze M and W to infer temporal filters, nonlinearity, and synaptic weights of subunits\n    filters, nonlinearity, synaptic_weights = analyze(module_matrix, weight_matrix)\n    \n    # Print the inferred results\n    print(\"Inferred Spatial Receptive Field: \", weight_matrix)\n    print(\"Inferred Temporal Filters: \", filters)\n    print(\"Inferred Nonlinearity: \", nonlinearity)\n    print(\"Inferred Synaptic Weights: \", synaptic_weights)\n",
                    "biocoder": "No program",
                    "result_baseline4": {
                        "opcode": "ANALYZE",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Temporal filters, nonlinearity, and synaptic weights of subunits."
                    },
                    "result_baseline5": {
                        "opcode": "ANALYZE",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Temporal filters, nonlinearity, and synaptic weights of subunits."
                    }
                },
                {
                    "i": 3,
                    "sentense": "For detailed computational analysis, apply algorithms to calculate temporal filter, nonlinearity, and classify spikes into modules based on synaptic connection weights, aiming to reveal complex neuronal network dynamics.",
                    "python": "python\n# Step 1: Apply temporal filter algorithm\ndef apply_temporal_filter(signal):\n    # Apply the temporal filter algorithm to the given signal\n    filtered_signal = temporal_filter(signal)\n    return filtered_signal\n\n# Step 2: Apply nonlinearity algorithm\ndef apply_nonlinearity(signal):\n    # Apply the nonlinearity algorithm to the filtered signal\n    nonlinearity_output = nonlinearity(signal)\n    return nonlinearity_output\n\n# Step 3: Classify spikes into modules\ndef classify_spikes(signal, synaptic_weights):\n    # Classify spikes into modules based on synaptic connection weights\n    modules = classify(signal, synaptic_weights)\n    return modules\n\n# Step 4: Main program\ndef main():\n    # Input signal/data for analysis\n    signal = [0.2, 0.5, 0.3, 0.8, 0.9]\n    \n    # Apply temporal filter\n    filtered_signal = apply_temporal_filter(signal)\n    print(\"Filtered Signal:\", filtered_signal)\n    \n    # Apply nonlinearity\n    nonlinearity_output = apply_nonlinearity(filtered_signal)\n    print(\"Nonlinearity Output:\", nonlinearity_output)\n    \n    # Synaptic connection weights\n    synaptic_weights = {1: 0.6, 2: 0.8, 3: 0.4, 4: 0.9}\n    \n    # Classify spikes into modules based on synaptic connection weights\n    modules = classify_spikes(signal, synaptic_weights)\n    print(\"Spikes Classification:\", modules)\n\n# Run the main program\nif __name__ == \"__main__\":\n    main()\n",
                    "biocoder": "python\n# Python-like pseudocode\nfrom algorithms import temporal_filter_calculation, nonlinearity_calculation, spike_classification\n\n# apply algorithms to compute temporal filter\ntemporal_filter_result = temporal_filter_calculation(data)\n\n# calculate nonlinearity\nnonlinearity_result = nonlinearity_calculation(data)\n\n# classify spikes based on synaptic connection weights\nspike_classification_result = spike_classification(data)\n",
                    "result_baseline4": {
                        "opcode": "APPLY",
                        "slot": [
                            [
                                "REG",
                                "temporal filter algorithm"
                            ],
                            [
                                "REG",
                                "nonlinearity algorithm"
                            ],
                            [
                                "REG",
                                "classify spikes"
                            ],
                            [
                                "REG",
                                "synaptic connection weights"
                            ]
                        ],
                        "emit": "modules with synaptic connection weights"
                    },
                    "result_baseline5": {
                        "opcode": "APPLY",
                        "slot": [
                            [
                                "REG",
                                "temporal filter calculation"
                            ],
                            [
                                "REG",
                                "nonlinearity calculation"
                            ],
                            [
                                "REG",
                                "spike classification"
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "modules with synaptic connection weights"
                    }
                }
            ]
        },
        "2": {
            "subject": "Bioinformatics & Computational Biology",
            "enum": 2,
            "protocol": "Access PAD2 for TF colocalization analysis by selecting signal files from the database for targeted analysis within specific genomic regions identified by ChromHMM. Open PAD2 website, navigate to select signals, and choose TFs or histone marks of interest. Optionally, upload personal signal files for analysis. After selection, specify the genomic region of interest for colocalization assessment through Pearson\u2019s correlation of ChIP-seq profiles. Investigate signal correlation within these regions by viewing and downloading heatmap and ranked correlation plots. This streamlined approach involves selecting signal files, determining genomic regions for analysis, and utilizing correlation data to understand protein colocalization, all performed through the PAD2 platform.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Access PAD2 for TF colocalization analysis by selecting signal files from the database for targeted analysis within specific genomic regions identified by ChromHMM.",
                    "python": "python\n# Import required libraries\nimport pandas as pd\n\n# Define function to access PAD2 for TF colocalization analysis\ndef analyze_colocalization(genomic_regions, signal_files):\n    # Load the ChromHMM data\n    chromhmm_data = pd.read_csv(\"chromhmm_data.csv\")\n\n    # Filter the ChromHMM data based on the specified genomic regions\n    filtered_data = chromhmm_data[chromhmm_data[\"genomic_region\"].isin(genomic_regions)]\n\n    # Initialize a list to store the results\n    results = []\n\n    # Iterate over the selected signal files\n    for signal_file in signal_files:\n        # Load the signal file\n        signal_data = pd.read_csv(signal_file)\n\n        # Perform TF colocalization analysis within the specific genomic regions\n        colocalization_result = perform_colocalization_analysis(filtered_data, signal_data)\n\n        # Add the result to the results list\n        results.append(colocalization_result)\n\n    # Return the final results\n    return results\n\n# Define function to perform TF colocalization analysis\ndef perform_colocalization_analysis(chromhmm_data, signal_data):\n    # Perform the TF colocalization analysis and obtain the results\n    colocalization_result = \"This is the result of the TF colocalization analysis.\"\n\n    # Return the result\n    return colocalization_result\n\n\n# Example usage\ngenomic_regions = [\"region1\", \"region2\", \"region3\"]\nsignal_files = [\"file1.csv\", \"file2.csv\", \"file3.csv\"]\n\nresults = analyze_colocalization(genomic_regions, signal_files)\nprint(results)\n",
                    "biocoder": "No program",
                    "result_baseline4": {
                        "opcode": "analyze_colocalization",
                        "slot": [
                            [
                                "Device",
                                "PAD2"
                            ],
                            [
                                "Container",
                                "TF colocalization analysis"
                            ],
                            [
                                "Container",
                                "genomic regions"
                            ],
                            [
                                "Container",
                                "ChromHMM"
                            ],
                            [
                                "Container",
                                "signal files"
                            ]
                        ],
                        "emit": "results"
                    },
                    "result_baseline5": {
                        "opcode": "ACCESS",
                        "slot": [
                            [
                                "REG",
                                "PAD2"
                            ],
                            [
                                "Device",
                                "signal files from the database"
                            ],
                            [
                                "REG",
                                "specific genomic regions identified by ChromHMM"
                            ]
                        ],
                        "emit": "TF colocalization analysis"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Open PAD2 website, navigate to select signals, and choose TFs or histone marks of interest."
                },
                {
                    "i": 2,
                    "sentense": "Optionally, upload personal signal files for analysis.",
                    "python": "python\ndef upload_signal_files():\n    print(\"Step 1: Upload personal signal files for analysis\")\n    \n    # Optional: Check if any files need to be uploaded\n    signal_files = input(\"Enter the path(s) of the personal signal files (separated by commas if multiple files): \")\n    \n    # Perform analysis on the uploaded signal files\n    if signal_files:\n        print(\"Performing analysis on the uploaded signal files: {}\".format(signal_files))\n        # Your code for analysis goes here\n        \n    else:\n        print(\"No signal files uploaded. Proceeding to next step.\")\n    \n    # Proceed to the next step in the protocol\n    \n\n# Main program\nprint(\"Experimental Protocol\")\nprint(\"---------------------\")\n\n# Step 1: Upload personal signal files for analysis\nupload_signal_files()\n\n# Next steps in the protocol...\n# Your code goes here for the subsequent steps\n",
                    "biocoder": "python\ndef upload_signal_files(files):\n    # TODO: Define the function to handle upload of signal files\n    pass\n\nif __name__ == \"__main__\":\n    # optionally upload personal signal files for analysis\n    upload_signal_files(files)\n",
                    "result_baseline4": {
                        "opcode": "UPLOAD",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Analysis results"
                    },
                    "result_baseline5": {
                        "opcode": "UPLOAD",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Analysis results"
                    }
                },
                {
                    "i": 3,
                    "sentense": "After selection, specify the genomic region of interest for colocalization assessment through Pearson\u2019s correlation of ChIP-seq profiles."
                },
                {
                    "i": 4,
                    "sentense": "Investigate signal correlation within these regions by viewing and downloading heatmap and ranked correlation plots."
                },
                {
                    "i": 5,
                    "sentense": "This streamlined approach involves selecting signal files, determining genomic regions for analysis, and utilizing correlation data to understand protein colocalization, all performed through the PAD2 platform."
                }
            ]
        },
        "3": {
            "subject": "Bioinformatics & Computational Biology",
            "enum": 3,
            "protocol": "Install STNMF by downloading from GitHub (https://github.com/jiankliu/STNMF-SNN) and adding to MATLAB path. Preprocess data by generating effective spike-triggered stimulus images from stimulus array and spike trains, using Singular Value Decomposition for spatial and temporal filters, and forming an N\u00d7P matrix STE. Decompose STE with STNMF to obtain weight matrix W and module matrix M, preset subunits number, reshape M for stimulus frame size. Analyze M and W to infer subunits' temporal filter, nonlinearity, and synaptic connection weights by calculating spatial filter and temporal filter convolution, creating generator signal, and visualizing nonlinearity. Obtain synaptic connection weights and spike trains by averaging W matrix columns, determining ON-OFF attribute, and classifying spikes into corresponding modules.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "Install STNMF by downloading from GitHub (https://github.com/jiankliu/STNMF-SNN) and adding to MATLAB path.",
                    "python": "python\nimport os\nimport subprocess\nimport urllib.request\n\ndef install_stnmf():\n    # Step 1: Check if MATLAB is installed\n    try:\n        subprocess.check_output([\"which\", \"matlab\"])\n    except subprocess.CalledProcessError as e:\n        print(\"MATLAB is not installed.\")\n        return\n    \n    # Step 2: Download STNMF from GitHub\n    download_url = \"https://github.com/jiankliu/STNMF-SNN/archive/master.zip\"\n    download_path = \"/path/to/download/location\"  # Replace with desired download location\n    urllib.request.urlretrieve(download_url, download_path)\n    \n    # Step 3: Extract the downloaded zip file\n    unzip_path = \"/path/to/unzip/location\"  # Replace with desired unzip location\n    subprocess.call([\"unzip\", download_path, \"-d\", unzip_path])\n\n    # Step 4: Add STNMF to MATLAB path\n    matlab_path = \"/path/to/matlab/bin\"  # Replace with MATLAB installation path\n    stnmf_folder = os.path.join(unzip_path, \"STNMF-SNN-master\")\n    matlab_script = f\"addpath('{stnmf_folder}'); savepath;\"\n    subprocess.call([\"matlab\", \"-batch\", matlab_script], env={\"PATH\": matlab_path})\n\n# Run the installation\ninstall_stnmf()\n",
                    "biocoder": "\n$ git clone https://github.com/jiankliu/STNMF-SNN.git\n$ cd STNMF-SNN\n$ python setup.py install  \n",
                    "result_baseline4": {
                        "opcode": "INSTALL",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "String",
                                "https://github.com/jiankliu/STNMF-SNN/archive/master.zip"
                            ],
                            [
                                "String",
                                "/path/to/download/location"
                            ],
                            [
                                "String",
                                "/path/to/unzip/location"
                            ]
                        ],
                        "emit": "software tool"
                    },
                    "result_baseline5": {
                        "opcode": "INSTALL",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "String",
                                null
                            ],
                            [
                                "String",
                                null
                            ],
                            [
                                "String",
                                null
                            ]
                        ],
                        "emit": "software tool"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Preprocess data by generating effective spike-triggered stimulus images from stimulus array and spike trains, using Singular Value Decomposition for spatial and temporal filters, and forming an N\u00d7P matrix STE.",
                    "python": "No program",
                    "biocoder": "\n#include \"biocoder.h\"\n\nint main()\n{\n   // Preprocess data by generating effective spike-triggered stimulus images from stimulus array and spike trains\n   \n   Start_protocol(\"Data Preprocess\");\n   \n   // Use Singular Value Decomposition for spatial and temporal filters\n   \n   _add_reagent(\"Singular Value Decomposition\", \"SVD\", 0);\n   Next_step(\"Filter the data spatially and temporally\");\n   Measure_fluid(\"Singular Value Decomposition\", vol(100.0, ML));\n   \n   // Forming an N\u00d7P matrix STE\n   \n   Next_step(\"Forming a matrix\");\n   Image_analysis(\"Creating a N x P matrix STE\", \"Using processed and filtered data\")\n   \n   End_protocol();\n\n   return 0;\n}\n",
                    "result_baseline4": {
                        "opcode": "GENERATE",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Spike-triggered stimulus images."
                    },
                    "result_baseline5": {
                        "opcode": "GENERATE",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "Spike-triggered stimulus images."
                    }
                },
                {
                    "i": 2,
                    "sentense": "Decompose STE with STNMF to obtain weight matrix W and module matrix M, preset subunits number, reshape M for stimulus frame size."
                },
                {
                    "i": 3,
                    "sentense": "Analyze M and W to infer subunits' temporal filter, nonlinearity, and synaptic connection weights by calculating spatial filter and temporal filter convolution, creating generator signal, and visualizing nonlinearity.",
                    "python": "python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef calculate_spatial_filter(M, W):\n    # Implementation to calculate spatial filter\n    spatial_filter = M + W\n    return spatial_filter\n\ndef calculate_temporal_filter(M, W):\n    # Implementation to calculate temporal filter\n    temporal_filter = M * W\n    return temporal_filter\n\ndef calculate_generator_signal(spatial_filter, temporal_filter):\n    # Implementation to create generator signal\n    generator_signal = np.convolve(spatial_filter, temporal_filter, mode='same')\n    return generator_signal\n\ndef visualize_nonlinearity(generator_signal):\n    # Implementation to visualize nonlinearity\n    nonlinearity = np.square(generator_signal)\n    plt.plot(nonlinearity)\n    plt.xlabel('Time')\n    plt.ylabel('Nonlinearity')\n    plt.title('Visualization of Nonlinearity')\n    plt.show()\n\n# Example usage\nM = np.array([1, 2, 3, 4, 5])\nW = np.array([0.1, 0.2, 0.3, 0.2, 0.1])\n\n# Analyze M and W to infer subunits' temporal filter, nonlinearity, and synaptic connection weights\nspatial_filter = calculate_spatial_filter(M, W)\ntemporal_filter = calculate_temporal_filter(M, W)\ngenerator_signal = calculate_generator_signal(spatial_filter, temporal_filter)\nvisualize_nonlinearity(generator_signal)\n",
                    "biocoder": "\nsolutions\n\n# Analyzing M and W to infer subunits' temporal filter, nonlinearity, \n# and synaptic connection weights by calculating spatial.\ndef calculate_spatial_filter(M, W):\nstart_protocol(\"Calculate Spatial Filter\")\n# Add your specific actions here.\n# ...\nend_protocol()\n\n# Filter convolution\ndef calculate_temporal_filter_convolution(M, W):\nstart_protocol(\"Calculate Temporal Filter Convolution\")\n# Add your specific actions here.\n# ...\nend_protocol()\n\n# Creating generator signal\ndef create_generator_signal(M, W):\nstart_protocol(\"Create Generator Signal\")\n# Add your specific actions here.\n# ...\nend_protocol()\n\n# Visualizing nonlinearity\ndef visualize_nonlinearity(M, W):\nstart_protocol(\"Visualize Nonlinearity\")\n# Add your specific actions here.\n# ...\nend_protocol()\n\n# Main function\ndef main():\nM = ... # Define M\nW = ... # Define W\ncalculate_spatial_filter(M, W)\ncalculate_temporal_filter_convolution(M, W)\ncreate_generator_signal(M, W)\nvisualize_nonlinearity(M, W)\n\nmain() # Execute main function\n",
                    "result_baseline4": {
                        "opcode": "ANALYZE",
                        "slot": [
                            [
                                "REG",
                                "M"
                            ],
                            [
                                "REG",
                                "W"
                            ],
                            [
                                "REG",
                                "subunits'"
                            ],
                            [
                                "REG",
                                "temporal filter"
                            ],
                            [
                                "REG",
                                "synaptic connection weights"
                            ],
                            [
                                "REG",
                                "spatial filter"
                            ],
                            [
                                "REG",
                                "temporal filter convolution"
                            ],
                            [
                                "REG",
                                "generator signal"
                            ]
                        ],
                        "emit": "Inference of subunits' temporal filter, nonlinearity, and synaptic connection weights."
                    },
                    "result_baseline5": {
                        "opcode": "ANALYZE",
                        "slot": [
                            [
                                "REG",
                                "M"
                            ],
                            [
                                "REG",
                                "W"
                            ],
                            [
                                "REG",
                                "subunits'"
                            ],
                            [
                                "REG",
                                "temporal filter"
                            ],
                            [
                                "REG",
                                "synaptic connection weights"
                            ],
                            [
                                "REG",
                                "spatial filter"
                            ],
                            [
                                "REG",
                                "temporal filter convolution"
                            ],
                            [
                                "REG",
                                "generator signal"
                            ]
                        ],
                        "emit": "Inference of subunits' temporal filter, nonlinearity, and synaptic connection weights."
                    }
                },
                {
                    "i": 4,
                    "sentense": "Obtain synaptic connection weights and spike trains by averaging W matrix columns, determining ON-OFF attribute, and classifying spikes into corresponding modules.",
                    "python": "python\nimport numpy as np\n\ndef obtain_synaptic_weights(W):\n    # Obtain synaptic connection weights by averaging W matrix columns\n    weights = np.mean(W, axis=0)\n    return weights\n\ndef determine_on_off_attribute(weights):\n    # Determine ON-OFF attribute based on synaptic connection weights\n    on_off = np.where(weights > 0, \"ON\", \"OFF\")\n    return on_off\n\ndef classify_spikes_into_modules(spikes):\n    # Classify spikes into corresponding modules based on their attributes\n    modules = {}\n    for module in np.unique(spikes):\n        module_spikes = np.where(spikes == module)[0]\n        modules[module] = module_spikes\n    return modules\n\n# Example usage\nW = np.array([[0.3, -0.2],\n              [-0.1, 0.4]])\nspikes = np.array([1, 2, 2, 1, 2])\n\nweights = obtain_synaptic_weights(W)\non_off = determine_on_off_attribute(weights)\nmodules = classify_spikes_into_modules(spikes)\n\nprint(\"Synaptic Weights:\", weights)\nprint(\"ON-OFF Attribute:\", on_off)\nprint(\"Modules:\", modules)\n",
                    "biocoder": "python\n# 'Obtain synaptic connection weights and spike trains by averaging W matrix columns'\n\ndef get_synaptic_weights():\n    W_matrix = obtain_W_matrix() # function to obtain / load the W matrix\n    synaptic_weights = calculate_average(W_matrix.columns) # function to calculate the average of the columns\n    return synaptic_weights\n\n# 'determining ON-OFF attribute'\n\ndef get_ON_OFF_attribute(spike_train):\n    # function to determine the ON-OFF attribute. The exact implementation would depend on how the ON-OFF attribute is defined. \n    ON_OFF_attribute = determine_ON_OFF(spike_train) \n    return ON_OFF_attribute\n\n# 'classifying spikes into corresponding modules'\n\ndef classify_spikes():\n    spikes = get_spikes() # function to get / load the spike data\n    modules = determine_modules() # function to determine the modules\n    classified_spikes = classify(spikes, modules) # function to classify the spikes into the appropriate modules\n    return classified_spikes\n\n# Run the entire procedure:\n\ndef run_protocol():\n    synaptic_weights = get_synaptic_weights()\n    ON_OFF_attribute = get_ON_OFF_attribute(synaptic_weights)\n    classified_spikes = classify_spikes()\n    return synaptic_weights, ON_OFF_attribute, classified_spikes\n",
                    "result_baseline4": {
                        "opcode": "OBTAIN",
                        "slot": [
                            [
                                "Container",
                                null
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "synaptic connection weights"
                    },
                    "result_baseline5": {
                        "opcode": "OBTAIN",
                        "slot": [
                            [
                                "Container",
                                null
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "synaptic connection weights"
                    }
                }
            ]
        },
        "4": {
            "subject": "Bioinformatics & Computational Biology",
            "enum": 4,
            "protocol": "To format phosphoproteomic data for CausalPath analysis, first ensure the data is in the required format, potentially using R for reformatting. Adjust parameters in parameters.txt to match your analysis needs, including specifying input files and analysis options. Execute the CausalPath algorithm via command line with the necessary files in the same directory, producing results in various formats for detailed network analysis. Visualization of the phosphoproteomic network can be done through the CausalPath website or alternative tools like Newt or ChiBE, providing insights into causal relationships and network dynamics. This process involves critical steps such as data preparation, parameter adjustment, algorithm execution, and result visualization, each contributing to the comprehensive analysis of phosphoproteomic data.",
            "compile": [
                {
                    "i": 0,
                    "sentense": "To format phosphoproteomic data for CausalPath analysis, first ensure the data is in the required format, potentially using R for reformatting.",
                    "python": "python\nimport subprocess\n\n# Step 1: Ensure the data is in the required format\ndef ensure_data_format(data_file):\n    # Use R to reformat the data\n    try:\n        subprocess.run([\"Rscript\", \"reformat_data.R\", data_file])\n        print(\"Data reformatted successfully!\")\n    except Exception as e:\n        print(\"Error occurred while reformatting data:\", e)\n\n# Step 2: Run CausalPath analysis on the reformatted data\ndef run_causalpath_analysis(reformatted_data_file):\n    # Code to run CausalPath analysis on the reformatted data\n    print(\"CausalPath analysis completed successfully!\")\n\n# Input data file\ndata_file = \"phosphoproteomic_data.txt\"\n\n# Step 1: Ensure data format\nensure_data_format(data_file)\n\n# Step 2: Run CausalPath analysis\nreformatted_data_file = \"reformatted_data.txt\"\nrun_causalpath_analysis(reformatted_data_file)\n",
                    "biocoder": "Python\n# This experiment does not have any experimental steps that could be conducted in a laboratory.\n# Therefore, it does not have a Biocoder equivalent as Biocoder is meant for physical experiments.\n# The protocol provided requires data formatting possibly using programming language R which \n# is not supported by Biocoder as it is not a laboratory procedure.\n",
                    "result_baseline4": {
                        "opcode": "FORMAT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                "phosphoproteomic data"
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "REG",
                                "CausalPath analysis"
                            ]
                        ],
                        "emit": "formatted data, restructured data"
                    },
                    "result_baseline5": {
                        "opcode": "FORMAT",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                "phosphoproteomic data"
                            ],
                            [
                                "Length",
                                null
                            ],
                            [
                                "REG",
                                "CausalPath analysis"
                            ]
                        ],
                        "emit": "formatted data, restructured data"
                    }
                },
                {
                    "i": 1,
                    "sentense": "Adjust parameters in parameters.txt to match your analysis needs, including specifying input files and analysis options.",
                    "python": "python\nimport subprocess\n\n# Function to read parameters from parameters.txt file\ndef read_parameters():\n    with open('parameters.txt', 'r') as file:\n        parameter_data = file.readlines()\n\n    parameters = {}\n    for line in parameter_data:\n        key, value = line.strip().split('=')\n        parameters[key.strip()] = value.strip()\n\n    return parameters\n\n# Function to adjust parameters according to analysis needs\ndef adjust_parameters(parameters):\n    # Modify the parameters dictionary based on analysis needs\n    # For example:\n    # parameters['input_file'] = 'data.csv'\n    # parameters['analysis_option'] = 'true'\n\n    return parameters\n\n# Function to run the analysis using adjusted parameters\ndef run_analysis(parameters):\n    # Perform the analysis based on the parameters\n    # Use subprocess module to execute the analysis command\n    # For example:\n    # subprocess.run(['analyser.py', '--input', parameters['input_file'], '--option', parameters['analysis_option']])\n\n    pass\n\n# Main function to execute the experimental protocol\ndef main():\n    parameters = read_parameters()\n    adjusted_parameters = adjust_parameters(parameters)\n    run_analysis(adjusted_parameters)\n\n# Run the main function\nif __name__ == \"__main__\":\n    main()\n",
                    "biocoder": "\nbegin_protocol(\"Prepare Culture \");\n\nFluid LB(\"LB\", \"g/l\", 25.0);\nFluid Ampicilin(\"Ampicillin water solution\", \"g/l\", 0.1);\nFluid solution(\"Solution\", \"liter\", LB + Ampicilin);\nContainer flask(\"2-liter flask\");\nfirst_step(\"Preparation\");\npipet(40, \"ml\", solution, flask);\nnext_step(\"Incubation\");\nincubate(flask, 37, \"Celsius\", Time(30.0, \"min\"));\nnext_step(\"Ready to use\");\ncomment(\"The culture is now ready to use.\");\n\nend_protocol();\n",
                    "result_baseline4": {
                        "opcode": "ADJUST",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "Container",
                                null
                            ],
                            [
                                "Time",
                                null
                            ]
                        ],
                        "emit": "data analysis results"
                    },
                    "result_baseline5": {
                        "opcode": "Prepare Culture",
                        "slot": [
                            [
                                "Container",
                                "2-liter flask"
                            ],
                            [
                                "String",
                                "Preparation"
                            ],
                            [
                                "REG",
                                "LB"
                            ],
                            [
                                "REG",
                                "Ampicillin water solution"
                            ],
                            [
                                "REG",
                                "Solution"
                            ],
                            [
                                "Volume",
                                40
                            ],
                            [
                                "String",
                                "ml"
                            ],
                            [
                                "Temperature",
                                37
                            ],
                            [
                                "String",
                                "Celsius"
                            ],
                            [
                                "Time",
                                30.0
                            ],
                            [
                                "String",
                                "min"
                            ],
                            [
                                "String",
                                "Incubation"
                            ]
                        ],
                        "emit": "The culture is now ready to use."
                    }
                },
                {
                    "i": 2,
                    "sentense": "Execute the CausalPath algorithm via command line with the necessary files in the same directory, producing results in various formats for detailed network analysis.",
                    "python": "python\nimport subprocess\n\n# Define the necessary files\nalgorithm_file = \"CausalPath.py\"\ninput_file = \"input_data.txt\"\noutput_file = \"output_data.txt\"\n\n# Execute the CausalPath algorithm\ncommand = f\"python {algorithm_file} {input_file} {output_file}\"\nsubprocess.run(command, shell=True)\n\n# Perform detailed network analysis on the results\nanalyze_results(output_file)\n",
                    "biocoder": "bash\n#!/bin/bash\n# Run the CausalPath algorithm\n./CausalPath -input yourInputFile -output yourOutputFile\n",
                    "result_baseline4": {
                        "opcode": "EXECUTE",
                        "slot": [
                            [
                                "String",
                                "CausalPath.py"
                            ],
                            [
                                "String",
                                "input_data.txt"
                            ],
                            [
                                "String",
                                "output_data.txt"
                            ]
                        ],
                        "emit": "results"
                    },
                    "result_baseline5": {
                        "opcode": "EXECUTE",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "results"
                    }
                },
                {
                    "i": 3,
                    "sentense": "Visualization of the phosphoproteomic network can be done through the CausalPath website or alternative tools like Newt or ChiBE, providing insights into causal relationships and network dynamics."
                },
                {
                    "i": 4,
                    "sentense": "This process involves critical steps such as data preparation, parameter adjustment, algorithm execution, and result visualization, each contributing to the comprehensive analysis of phosphoproteomic data.",
                    "python": "python\n# Data preparation\ndef prepare_data():\n    \"\"\"\n    This function performs the data preparation step for phosphoproteomic analysis.\n    \"\"\"\n    # Code for data preparation goes here\n    print(\"Data preparation step completed\")\n\n# Parameter adjustment\ndef adjust_parameters():\n    \"\"\"\n    This function adjusts the parameters for the phosphoproteomic analysis.\n    \"\"\"\n    # Code for parameter adjustment goes here\n    print(\"Parameter adjustment step completed\")\n\n# Algorithm execution\ndef execute_algorithm():\n    \"\"\"\n    This function executes the algorithm for phosphoproteomic analysis.\n    \"\"\"\n    # Code for algorithm execution goes here\n    print(\"Algorithm execution step completed\")\n\n# Result visualization\ndef visualize_results():\n    \"\"\"\n    This function visualizes the results of the phosphoproteomic analysis.\n    \"\"\"\n    # Code for result visualization goes here\n    print(\"Result visualization step completed\")\n\n# Main program\ndef main():\n    \"\"\"\n    This is the main program that performs the comprehensive analysis of phosphoproteomic data.\n    \"\"\"\n    # Call the functions in the desired sequence\n    prepare_data()\n    adjust_parameters()\n    execute_algorithm()\n    visualize_results()\n\n# Run the main program\nmain()\n",
                    "biocoder": "\n#include <BioCoder.h>\n\nvoid main() \n{\n    // Step 1: Data Preparation\n    start_protocol(\"Data Preparation\");\n\n    comment(\"This step involves transforming raw data into an appropriate format for subsequent analysis.\");\n\n    // Here, you can add specific operations, such as reading data from a file, normalization, etc.    \n    // e.g., operation(\"Normalize the data\");\n\n    end_protocol();\n\n\n    // Step 2: Parameter Adjustment\n    start_protocol(\"Parameter Adjustment\");\n\n    comment(\"This step involves tweaking various parameters to optimize the performance of the analysis.\");\n\n    // Here, you can add specific operations, such as setting the parameter values, iterating over \n    // a range of values to find the optimal ones, etc.\n    // e.g., operation(\"Set the parameter values\");\n\n    end_protocol();\n\n\n    // Step 3: Algorithm Execution\n    start_protocol(\"Algorithm Execution\");\n\n    comment(\"This step involves running the analysis algorithm with the prepared data and adjusted parameters.\");\n\n    // Here, you can add specific operations, such as execute the algorithm, logging the outputs, etc.\n    // e.g., operation(\"Run the algorithm\");\n    \n    end_protocol();\n\n\n    // Step 4: Result Visualization\n    start_protocol(\"Result Visualization\");\n\n    comment(\"This step involves visualizing the results of the analysis for easier interpretation and presentation.\");\n\n    // Here, you can add specific operations, such as creating plots, tables, graphs, etc.\n    // e.g., operation(\"Generate the bar plot\");\n\n    end_protocol();\n\n\n    // The entire protocol has been described.\n    // If there are more detailed operations, they should be added to the corresponding steps above.\n}\n",
                    "result_baseline4": {
                        "opcode": "GROW",
                        "slot": [
                            [
                                "REG",
                                "phosphoproteomic"
                            ],
                            [
                                "REG",
                                "parameter adjustment"
                            ],
                            [
                                "Device",
                                "algorithm execution"
                            ]
                        ],
                        "emit": "result visualization"
                    },
                    "result_baseline5": {
                        "opcode": "ANALYZE",
                        "slot": [
                            [
                                "REG",
                                null
                            ],
                            [
                                "Device",
                                null
                            ],
                            [
                                "REG",
                                null
                            ]
                        ],
                        "emit": "comprehensive analysis of phosphoproteomic data"
                    }
                }
            ]
        }
    }
}