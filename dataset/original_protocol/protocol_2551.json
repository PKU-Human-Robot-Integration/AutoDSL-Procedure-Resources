{
  "id": 2696,
  "origin_website": "Cell",
  "title": "Protocol to benchmark gene expression signature scoring techniques for single-cell RNA sequencing data in cancer",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nTiming and details for each step in this protocol are based on one dataset18[href=https://www.wicell.org#bib17] used in Noureen et al.1[href=https://www.wicell.org#bib1] The same steps were followed for the remaining nine datasets used in the study.1[href=https://www.wicell.org#bib1]\nData import, quality control and preprocessing\nTiming: 5–10 min\nThis step is to prepare data, including quality control and preprocessing.\nDownload gene sets (C2, C3 and hallmarks) from MSigDB.\nDownload glioma scRNAseq ‘IDH_A_processed_data_portal.txt’ and phenotype assignments ‘IDH_A_cell_type_assignment_portal_v2.txt’ data,18[href=https://www.wicell.org#bib17] from the Single Cell Portal by Broad Institute.\nLoad R and related packages as mentioned in the key resources table[href=https://www.wicell.org#key-resources-table].\nLoad gene expression and metadata into R.\n> GEdata = read.table('IDH_A_processed_data_portal.txt',sep='\\t', head=T)\n> row.names(GEdata) = GEdata$Gene ## Assigning gene names to rows\n> GEdata = GEdata[,-1] ## Removing first column from data containing gene names\n> saveRDS(GEdata,'IDHAstrocytoma_GE_20210311.RDS') ## Saving data in RDS format\n> Metadata = fread('IDH_A_cell_type_assignment_portal_v2.txt') ## Reading Metadata\n> colnames(Metadata) =c('SampleID','Cluster','SubCluster','TIndex')\nNote: Here we use read.table and fread functions as the data is available in text format. Here other file reading functions like read.csv, read_xlsx or readRDS can be used depending on file formats.\nThe glioma data is already preprocessed, so we used it as is.\nAlternatives: In case of raw data counts, especially for 10× datasets used in Noureen et al.,1[href=https://www.wicell.org#bib1] we preprocessed them by removing non-expressed genes and then applied regularized negative binomial regression implemented in Seurat using SCTransform function as follows.\n> dataset <- CreateSeuratObject(counts = GEdata, project = \"scRNA_Practice\", min.cells = 1) ### Creating Seurat Object\n> dataset <- SCTransform(dataset) ## Binomial Regression function\nCritical: Check quality control measures including mitochondrial content, number of empty cells and duplicates in your scRNAseq data before applying normalization procedure. For details of quality control, refer to Seurat toolkit.19[href=https://www.wicell.org#bib18]\nGene count differences between tumor and normal cells\nTiming: 2–3 min",
    "This step is to calculate differences in gene counts between tumor and normal cells.\nCalculate genes expressed per cell in scRNAseq data using following command. Use the GEdata from step 4.\n> GeneNumber = data.frame(colnames(GEdata),apply(GEdata,2,function(x) length(x[x!=0])))\n> GeneNumber$SampleID = gsub('\\\\.','-',GeneNumber$SampleID)\n> colnames(GeneNumber) = c('SampleID','nGenes')\nCombine metadata from step 4 with gene counts from step 6 using cell type/Sample IDs.\n> GE_Total = merge (Metadata, GeneNumber, by= ‘SampleID’)\n> GE_Total$Cluster = ifelse(GE_Total$Cluster == malignant\",\"malignant\",\"Normal\")\n> write.table(GE_Total, ‘IDHAstrocytoma_Metadata.txt’,sep = ‘\\t’, quote = FALSE, row.names = FALSE)\nAverage the number of expressed genes per phenotype using data from step 7 with the mean function.\n> Mean_Genes_Per_CT = tapply(GE_Total$nGenes,GE_Total$Cluster,mean)\nOptional: Variations in the number of expressed genes among different normal cell populations can be checked based on availability of phenotypic data. In cancer scRNAseq datasets, many cancer-related cells such as cancer-associated macrophages have higher gene counts than other normal cells, an indication that these cells may be co-opted by cancer cells. For details, check Figure S1 of Main Figure 1.1[href=https://www.wicell.org#bib1]\nSignature scoring and tumor/normal comparisons\nTiming: 1 week\nThis step is to score gene expression signatures for scRNAseq datasets. These scores can be used to determine identities and cellular properties of single cells.20[href=https://www.wicell.org#bib19] Because the number of cells and gene signatures are high, we use parallel processing to accelerate the process. The timing of this step is reflected based on the glioma dataset,18[href=https://www.wicell.org#bib17] which comprises around 6,000 cells.\nLoad the following R packages: 1) AUCell, 2) GSA, 3) doParallel, 4) GSVA, 5) effectsize.\nUse doParallel to call parallel processing for calculating signature scores for the five signature scoring tools (AUCell, JASMINE, SCSE, GSVA, ssGSEA; see key resources table[href=https://www.wicell.org#key-resources-table]).",
    "For each tool, first load scRNAseq data into R using readRDS command. The RDS data object is saved in step 4 by removing gene names columns from the raw data.\n> GEdata = readRDS(‘IDHAstrocytoma_GE_20210311.RDS’)\nLoad the gene sets (C2, C3 and hallmarks) into R via GSA.read.gmt function from GSA package.\n> Genesets1 <- GSA.read.gmt('h.all.v7.2.symbols.gmt')\n> GSsize = length(Genesets1$genesets)\n> Genesets2 <- GSA.read.gmt('c2.all.v7.2.symbols.gmt')\n> GSsize = length(Genesets2$genesets)\n> Genesets3 <- GSA.read.gmt('c3.all.v7.2.symbols.gmt')\n> GSsize = length(Genesets3$genesets)\nInitiate multiple threads with the registerDoParallel function and implement parallel processing by using dopar function.\nNote: We used 20 threads in this step for each signature scoring tool, except GSVA for which we used 200 threads. The following codes show users how they can implement parallel processing. They have been implemented in the scripts called in step 14.\n> registerDoParallel(20) ### initiate multiple cores\n> foreach (k=1:GSsize,.combine = rbind,.errorhandling = \"remove\") %dopar%\n{\n  ## This code is implemented in the following files “AUCell.r”, “GSVA.r”, “ssGSEA.r”, “SCSE.r”, and “JASMINE.r”. So, it is recommended to use this code through these files\n}\nCall each tool to calculate and save the signature scores.\nUse AUCell_buildRankings and AUCell_calcAUC functions from the AUCell package for AUCell.\nUse gsva function from the GSVA package to execute ssGSEA and GSVA.\nCall SCSE function from https://github.com/NNoureen/BenchmarkingProtocol[href=https://github.com/NNoureen/BenchmarkingProtocol].2[href=https://www.wicell.org#bib20]\nCall JASMINE function from https://github.com/NNoureen/JASMINE[href=https://github.com/NNoureen/JASMINE].3[href=https://www.wicell.org#bib3]\n> source(‘AUCell.r’)\n> source(‘GSVA.r’)\n> source(‘ssGSEA.r’)\n> source(‘SCSE.r’)\n> source(‘JASMINE.r’)\nNote: We have implemented SCSE function in R based on the formula reported in the paper6[href=https://www.wicell.org#bib5] because the tool was originally provided as a web server.\nCritical: To run each code file using the source function, place all the data files and gene set files in your current working directory, or users need to specify data file paths in the codes.\nCombine signature scores from step 14 using the following code.\n> source(‘CombineScores.r’)",
    "Note: The total size of the gene sets used in step 14 is around 10,000; therefore we divided the scoring for each tool into 3 steps. The results are combined to get one file per tool.\nDivide the signature scores compiled in step 15 into tumor and normal cells using metadata file 'IDHAstrocytoma_Metadata.txt' saved in step 7.\n> Metadata = read.table('IDHAstrocytoma_Metadata.txt',sep='\\t',head=T)\n> TumorCells = Metadata$SampleID[which(Metadata$Clusters == \"malignant\")]\n> NormalCells = Metadata$SampleID[which(Metadata$Clusters == \"Normal\")]\nCalculate effect size (ES) for each gene set using the tumor and normal cells scores from steps 15 and 16.\n> source(‘EScalculation.r’)\nNote: Effect size is used to measure score differences between tumor and normal cells while controlling for score variance. Effect size is calculated using cohens_d function from the effectsize package. The code file used in this step will use combined data scores saved in step 15. The code snippet in step 16 is included in this code file.\nIdentify up regulated (ES   ≥   1) and down regulated (ES   ≤   -1) gene sets from step 17 for each signature scoring tool using the following codes.\nNote: These codes should be repeated for each tool. The file ‘ES_AllMethods.txt’ used to read ES values have been saved in step 17 and is used here for further processing. These cutoffs are arbitrary and thus can be tailored for different datasets.\n> EScheck = read.table('ES_AllMethods.txt',sep='\\t',head=T)\n> EScheck = EScheck[which(EScheck$GSsize > 20),]\n> ES_method_Up = length(which(EScheck$ES >= 1))\n> ES_method_Dn = length(which(EScheck$ES <= -1))\n> ESUp_Percentage = ES_method_Up/nrow(EScheck) ∗ 100\n> ESDn_Percentage = ES_method_Dn/nrow(EScheck) ∗ 100\nAssociate gene set sizes with ES for each tool using cor.test function. We used Spearman method, but Pearson or other methods can be used. For details see Figure 1C from Noureen et al.1[href=https://www.wicell.org#bib1]\n> EScheck = read.table('ES_AllMethods.txt',sep='\\t',head=T)\n> GS_ES_Corr = cor.test(EScheck$ES, EScheck$GSsize, method= “spearman”)",
    "Note: We suggest using gene signatures as separate lists if the number of signatures is high. In this case, we used C2, C3 and hallmarks as 3 lists for all tools except GSVA where we divided them into 10 lists as they contain around 10,000 signatures in total. In our calculation we removed gene sets with less than 20 genes.\nCritical: GSVA is computationally less efficient than other tools used in this protocol. To obtain results within a reasonable time window, use 200 or more threads for big datasets and large lists of gene sets. In our experience, it took 5 days to complete the glioma data even when using 200 threads in parallel.\nDetection sensitivity\nTiming: 47 h\nThis step is to generate gold standard gene sets of various sizes to benchmark detection sensitivity for scRNAseq signature scoring. Gold standard gene sets consist of differentially expressed genes, either up or down, plus non-differentially expressed genes as noises. This step involves parallel processing using 10 threads, but more can be used to further reduce running time. GSVA is dropped from this and subsequent steps because of its low running speed.\nLoad Seurat and MAST packages in R.\nCreate Seurat object of scRNAseq data using CreateSeuratObject function.\nAdd metadata to the Seurat object using AddMetaData function.\nUse FindMarkers function in Seurat specifying test.use =“MAST” to identify the DEGs. Provide tumor and normal groups information to the function.\nNote: Identification of DEGs is required to generate the gold standard up and down regulated gene sets. In this step, we use tumors cells as the first group and normal cells as the second to identify the DEGs.\n> GEdata = readRDS(‘IDHAstrocytoma_GE_20210311.RDS’)\n> Metadata = read.table('IDHAstrocytoma_Metadata.txt',sep='\\t',head=T)\n> mydata <- CreateSeuratObject(GEdata)\n> SampleID = Metadata$SampleID\n> Samples = Metadata$Clusters\n> names(Samples)= SampleID",
    "> mydata <- AddMetaData(object = mydata, metadata = Samples, col.name = \"Samples\")\n> mydata@active.ident = Samples\n> Markers = FindMarkers(mydata, ident.1 = \"malignant\", ident.2 = \"Normal\", test.use = \"MAST\")\n> write.table(Markers, ‘IDHastrocytoma_MAST_DEGS_15March2021.txt’,sep= ‘\\t’, quote=FALSE)\nGenerate gold standard up and downregulated gene sets using the following code files.\n> source(‘RandomGSets_DN.r’) ## generating down regulated gold standard gene sets\n> source(‘RandomGSets_Up.r’) ## generating up regulated gold standard gene sets\nNote: We used logFC>0 for generation of up regulated genes and logFC<0 for down regulated genes. We generated gene sets of 5 sizes (n=50,100,150,200,300). For each size, we set 5 noise levels to 0%, 20%, 40%, 60%, and 80%. For each noise-gene set size combination, we randomly generated 200 gene sets. This in total produced 5000 gene sets per up and down regulated category.\nCalculate and save signature scores for scRNAseq data using gold standard up and down regulated gene sets from step 24. Use the following files to call the signature scoring functions for random gene sets.\n> source(‘AU_RandomGeneSets.r’)\n> source(‘GSVA_RandomGeneSets.r’)\n> source(‘ssGSEA_RandomGeneSets.r’)\n> source(‘SCSE_RandomGeneSets.r’)\n> source(‘JASMINE_RandomGeneSets.r’)\nNote: Users can reuse this code for any other gene signatures, e.g., gold standard gene sets or gene sets of their interest. But for users’ ease we have re-implemented the code with gold standard signatures.\nFollow step 17 to calculate ES for signature scores generated in step 25.\n> source(‘EScalculation.r’)\nNote: To use the R file, users need to change the input file for each tool. Since this is ES calculation of random gene sets, signature scores saved in step 25 are used as input here for ES calculation.\nCalculate the percentage of up and down regulated gene sets at each noise level for all tools using commands illustrated in step 18. The input of this step is the output of step 26.",
    "Note: The percentage represents the recovery rate of up and down regulated gene sets. For details, see Figures 2A and 2B in Noureen et al.1[href=https://www.wicell.org#bib1]\nDetection specificity\nTiming: 1.5 h\nThis step is to down sample scRNAseq data to calculate detection specificity. Down sampling creates nearly identical expression profiles at a lower coverage, thus allowing for specificity tests. In this step we use 100 cells from the scRNAseq dataset. We use 10 threads for parallel computing.\nChoose desired number of cells from a scRNAseq dataset. In this demonstration, we use 100 tumor cells.\nDown sample scRNAseq data using downsampleMatrix function from R package scuttle.\n> mydata = readRDS(‘IDHAstrocytoma_GE_20210311.RDS’)\n> dataDN_Samp = downsampleMatrix(mydata, 0.5, bycol = TRUE)\nNote: Adjust down sampling percentage by the parameter “prop”. We used 50% in this case, but this parameter can be adjusted to simulate different coverage levels.\nScale back the down sampled data to ensure equal coverage as the original data.\n> dataDN_Samp = apply (dataDN_Samp,2, function(x) (x/sum(x)) ∗1000000) ### CPM normalization\nCalculate signature scores for down sampled data set as described in steps 11–15.\nCalculate ES by comparing signature scores of down sampled data from step 31 and original data from step 15 for the 100 cells.\nIdentify up and down gene sets following step 18 using ES calculated in step 32.\nConsensus calling\nTiming: 20 min\nConsensus calling is often used to manage outputs from multiple tools.21[href=https://www.wicell.org#bib21],22[href=https://www.wicell.org#bib22],23[href=https://www.wicell.org#bib23] Here, we use consensus calling to benchmark the signature scoring techniques developed for scRNAseq data. To identify consensus up or down regulated gene sets, we use gene sets identified in step 18. We limit the consensus calling to single cell-based tools because of the performance bias by bulk-based tools.",
    "Identify consensus gene sets that are called by at least two tools in either direction based on the same ES criteria.\n> source(‘ConsensusCalling.r’)\nUse the consensus to identify true positives (TP), false positives (FP), true negatives (TN) and true positives (TP). The total number of signatures is denoted as N. Use the ConsensusSummary.r code file to compute these numbers.\n> source(‘ConsensusSummary.r’)\nCalculate sensitivity, specificity and accuracy of single cell tools using the following equations implemented in Sensitivity_vs_Specificity.r file.\n> Sensitivity = TP/ (TP + FN)\n> Specificity = TN/ (TN + FP)\n> Accuracy = (TN + TP) / N\n> source(“Sensitivity_vs_Specificity.r”)\nNote: For details, see Figure 2D and related Supplement 4 from Noureen et al.1[href=https://www.wicell.org#bib1] Time complexity and memory usage are simple metrics to determine computational efficiency of a tool. In analysis of large datasets like scRNAseq, it is important to design time and space efficient tools.\nImpact of dropouts on single cell scoring\nTiming: 6 h\nDropouts are the main reason for scRNAseq data sparsity.24[href=https://www.wicell.org#bib24] Dropouts arise from a low amount of input materials in sequencing and stochastic transcription. To check the effect of dropouts on scRNAseq signature scoring, we will simulate dropouts by down sampling scRNAseq data at different levels. The difference in signature scores between the down sampled cells and the original cells reflects the impact of dropouts on each tool.\nRun down sampling experiment at different rates using the following code.\n> data = readRDS(‘IDHAstrocytoma_GE_20210311.RDS’)\n> dataDN_Samp20 = downsampleMatrix(data, 0.2, bycol = TRUE)\n> dataDN_Samp40 = downsampleMatrix(data, 0.4, bycol = TRUE)\n> dataDN_Samp60 = downsampleMatrix(data, 0.6, bycol = TRUE)\n> dataDN_Samp80 = downsampleMatrix(data, 0.8, bycol = TRUE)",
    "Note: The down sampling rates can be customized. We use 4 different rates (20%, 40%, 60% and 80%) for this protocol. A lower down sampling rate creates more dropouts.\nCalculate signature scores for the 4 down sampled scRNAseq datasets generated in step 37 using details mentioned in steps 11–15.\nUse signature scores of each down sampled data from step 38 and calculate ES by comparing with scores of the 100 cells derived from the original data from step 15.\nCalculate percentages of up and down gene sets from step 39 for each down sampling rate and scoring tool following step 18.\nNote: These percentages should be negligible regardless of the down sampling rate, because no differentially expressed signatures are expected. For details check Figure 3A and related Figures S1 and S2 from Noureen et al.1[href=https://www.wicell.org#bib1]\nTo evaluate the effect of dropouts on ssGSEA, check the details in Noureen et al.1[href=https://www.wicell.org#bib1] and related code file on our GitHub repository (ssGSEA_scRNAseq_test.R).3[href=https://www.wicell.org#bib3]"
  ],
  "subjectAreas": [
    "Rnaseq",
    "Bioinformatics",
    "Cancer"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Bioinformatics & Computational Biology"
  ]
}