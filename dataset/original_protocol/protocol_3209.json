{
  "id": 3398,
  "origin_website": "Cell",
  "title": "Computational protocol to perform a spatiotemporal reconstruction of an epidemic",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nTracing the temporal evolution of the epidemic\nTiming: 20–30 min\nTo reconstruct the dynamics of an epidemic, it is helpful to start by plotting the number of deaths (or cases) that occurred at a specific time. In this case, we are going to build a time-series plot with two lines, one for deaths unrelated to the disease of interest, i.e., plague, and one for deaths related to plague. This step allows us to depict the temporal progression of the epidemic in the city and to detect any period with missing data or any other anomaly.\nPrepare the workspace directory. Open RStudio and set the working directory path.\n> setwd(\"yourpath\")\nLoad the dataset of cases/deaths and related information and format it as shown in step 5 of “before you begin[href=https://www.wicell.org#before-you-begin]” section.\n> head(tab)\ntable:files/protocols_protocol_2979_1.csv\nCreate a time-series plot that shows the progression of the daily number of deaths for each cause of death (in our case Plague or not plague) (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig1.jpg\nFigure 1. Daily number of deaths per cause of deaths\nThe daily numbers of deaths are represented in separated colors depending on the cause of death: in red deaths related to plague, in gray deaths unrelated to plague.\n> library(ggplot2)\n>library(tidyverse)\n> tab %>%\n  group_by(Date,Death_cause) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = Date, y = count, col = Death_cause)) +\n  geom_line(size = 0.7) +\n  geom_point(size = 2) +\n  theme_bw() +\n  scale_color_manual(values=c(\"grey70\",\"red\")) +\n  theme(axis.text.x = element_text(angle=90, size = 10),\n    axis.title.x = element_text(size = 15),\n    axis.title.y = element_text(size = 15)) +\n  labs(y = 'Number of Deaths')",
    "Note: The plot compares the progression of deaths caused by the disease of interest to deaths related to any other cause: it could show the presence of any kind of seasonality, and the completeness of the dataset. The absence of a signal in the period between 4 and 30 August is due to reasons not related to the analysis.1[href=https://www.wicell.org#bib1]\nClustering of parishes on the basis of their epidemic curves\nTiming: 3–4 h\nIn this step, we are going to group cases/deaths based on the progression of the epidemic. In particular, we are going to analyze the specific cumulative epidemiological curves of each geographical unit. In the example dataset about the 1630 plague epidemic in Milan, the geographical units are the parishes in which the city was divided and where the person died (i.e., territorial entities comparable to modern city neighborhoods). Other geographical units can be streets, houses, villages, districts, etc.\nLoad the R packages in the current RStudio session.\n> library(tidyverse)\n> library(reshape2)\n> library(factoextra)\n> library(ade4)\n> library(vegan)\n> library(RColorBrewer)\n> library(inflection)\n>library(ggpubr)\nLoad the table with one row per case, as shown in step 5 in the “before you begin[href=https://www.wicell.org#before-you-begin]” section (or skip if you have already loaded it in the previous step).\nBuild the cumulative curves of the plague deaths for each parish (or other geographical unit).\nfilter for the cause of death or disease of interest.\n> tab_1630_peste <- droplevels(subset(tab, tab$Death_cause == \"Plague\"))\n> head(tab_1630_peste)\ntable:files/protocols_protocol_2979_2.csv\nbuild a matrix in which each column is a parish (or geographical unit), and each row is a day (or temporal unit).\n> t_1630_peste <- as.matrix(table(tab_1630_peste$Date, tab_1630_peste$Parish))\nAdd to the matrix the days in which there are no recorded plague deaths.\n> days1630 <- seq(from=as.Date(\"1630-01-01\"), to=as.Date(\"1630-12-31\"), by=1)\n> absent_days <- as.Date(setdiff(days1630, as.Date(row.names(t_1630_peste))), origin=\"1970-01-01\")\n> t_1630_peste_absent <- matrix(ncol=ncol(t_1630_peste), nrow=length(absent_days))",
    "> t_1630_peste_absent[is.na(t_1630_peste_absent)] <- 0\n> row.names(t_1630_peste_absent) <- as.character(absent_days)\n> t_1630_peste_all <- rbind(t_1630_peste, t_1630_peste_absent)\nNote: Select your temporal period of interest. In the example dataset, the cases span the year 1630, thus our range is from the 1st of January 1630 to the 31st of December of the same year.\nOrder the table chronologically.\n> t_1630_peste_all_ord <- t_1630_peste_all[order(row.names(t_1630_peste_all)),]\ncreate a cumulative matrix.\n> peste_cum <- matrix(ncol=ncol(t_1630_peste_all_ord), nrow=0)\n> for (i in 2:nrow(t_1630_peste_all_ord)) {\n  tmp <- colSums(t_1630_peste_all_ord[1:i,])\n  peste_cum <- rbind(peste_cum, tmp)\n}\n> peste_cum <- rbind(t_1630_peste_all_ord[1,], peste_cum)\n> row.names(peste_cum) <-row.names(t_1630_peste_all_ord)\nNormalize the number of deaths by dividing the number of daily deaths in each parish by the total number of deaths in that parish (daily parish deaths/ total number of parish deaths in 1630).\n> peste_cum_norm <- apply(peste_cum, 2, function(x) x/max(x))\nPlot the cumulative relative frequency curves of the parishes plague deaths (Figure 2[href=https://www.wicell.org#fig2]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig2.jpg\nFigure 2. Cumulative relative frequency curves of plague deaths for each parish\nEach curve represents the cumulative frequency of plague deaths over time in each selected geographic unit (in this case, the parishes).\n> peste_cum_norm_m <- melt(peste_cum_norm)\n> colnames(peste_cum_norm_m) <- (c(\"Date\", \"Parish\", \"Count\"))\n> peste_cum_norm_m$Date <- as.Date(peste_cum_norm_m$Date)\n> Cumulative_curves <- ggplot(peste_cum_norm_m, aes(x=Date, y=Count∗100, group = Parish)) +\n  geom_line() +\n  theme_bw() +\n  ylab(\"Cumulative relative frequency of plague deaths (%)\")\nNote: Some parishes may not have enough cases to build a reliable cumulative curve on the selected time range. We can choose a threshold under which the parishes will be excluded from the subsequent analyses. For example, we selected only the parishes with more than one plague death every two weeks during the epidemic.\nCalculate the duration of the epidemic. To do so, we have to observe the epidemic curve produced in step 3 to manually determine the starting and ending period of the epidemic.",
    "Note: The epidemic period is not simply the time between the first and last case, in fact, as in our data, there may be some isolated cases before or after the epidemic. Thus, it is important to analyze the epidemic curve. In our data, the epidemic begins around the middle of March and continues throughout 1630.\nCalculate the death threshold. To select parishes with more than 1 death every two weeks, we have to look for parishes with more than 21 deaths (week of the epidemics / 2), as explained in Galli et al., 2023.1[href=https://www.wicell.org#bib1]\n> weeks_of_epidemic <- 42\n> death_count_thr <- weeks_of_epidemic/2\n#21\nRemove parishes with fewer cases than the threshold and plot only the selected cumulative curves (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig3.jpg\nFigure 3. Cumulative relative frequency curves of plague deaths for each parish with at least 21 deaths\n> parr_sel <- peste_cum[nrow(peste_cum),] > death_count_thr\n> peste_cum_norm_sel <- peste_cum_norm[,parr_sel]\n> peste_cum_norm_melt <- melt(peste_cum_norm_sel)\n> colnames(peste_cum_norm_melt) <- c(\"Date\", \"Parish\", \"Count\")\n> peste_cum_norm_melt$Date <- as.Date(peste_cum_norm_melt$Date)\n> cumulative_curves_sel <- ggplot(peste_cum_norm_melt, aes(x=Date, y=Count∗100, group = Parish)) +\n  geom_line() +\n  scale_color_manual(values = c(\"1\" = \"#1B9E77\", \"2\" = \"#D95F02\")) +\n  theme_bw() +\n  ylab(\"Cumulative relative frequency of plague deaths (%)\")\nPerform the clustering analysis on the basis of the cumulative curves.",
    "Note: To cluster the parishes (or geographic units) in two or more groups, we are going to perform a k-means clustering on the result of the Principal Coordinates Analysis (PCoA) performed on the cumulative curves of plague deaths. In particular, we are going to compare the cumulative curves of the different parishes with each other to generate a distance matrix, which will be subjected to PCoA. Performing a PCoA on the dataset allows us to reduce the dimension of our data and to visualize them in two (or three) dimensions. Then we can apply k-means clustering, an unsupervised clustering algorithm that groups a dataset into a specific number of clusters (determined by silhouette analysis). The k-means algorithm will assign each observation (in our case each parish) to a cluster on the basis of their position on the PCoA space.16[href=https://www.wicell.org#bib16],17[href=https://www.wicell.org#bib17]\nCalculate the Euclidean distance matrix between the cumulative curves of the different parishes.\n> dist <- dist(t(peste_cum_norm_sel))\nPerform the Principal Coordinates Analysis (PCoA) and make the scree plot (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig4.jpg\nFigure 4. Eigenvalues of the Principal Coordinates Analysis (PCoA)\n> pcoa <- cmdscale(dist, eig = T)\n> plot(pcoa$eig)\n> pcoa <- cmdscale(dist, 3)\nNote: First, we must determine the best number of axes for the PCoA analysis on the basis of the eigenvalues. The plot shows that the eigenvalues drastically drop down for the first three dimensions.\nDetermine the optimal number of clusters in which the parishes (or geographic units) can be divided (Figure 5[href=https://www.wicell.org#fig5]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig5.jpg\nFigure 5. Optimal number of clusters defined by the silhouette method\n> fviz_nbclust(pcoa, kmeans, method = \"silhouette\", k.max=10)",
    "Note: We determined the optimal number of clusters in the dataset using a popular cluster validation index: the average silhouette width method.18[href=https://www.wicell.org#bib18],19[href=https://www.wicell.org#bib19] In our example, the average silhouette width is maximized at the “number of clusters k” equal to two. Thus, this is the optimal number of clusters estimated by this method.\nClustering\n> f <- kmeans(pcoa, 2)\n> clusters <- as.matrix(f$cluster)\n> clus <- clusters[as.matrix(row.names(pcoa)),1]\nUse the PERMANOVA test to determine if the separation between the clusters is statistically significant.\n> a <- adonis2(pcoa ∼ clus, method='eu')\n> p_value <- a$`Pr(>F)`[1]\n> p_value\n[1] 0.001\nPlot the results of the PCoA and the k-means clustering (Figure 6[href=https://www.wicell.org#fig6]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig6.jpg\nFigure 6. PCoA colored on the basis of the k-means clustering analysis\nPCoA using the Euclidean distance on the plague cumulative relative frequency curves. Each point represents a parish, and the colors represent the clusters: in blue parishes of cluster 1, in red parishes of cluster 2. The p value obtained from the PERMANOVA test is reported at the bottom-left of the figure.\n> plot_pcoa <- s.class(pcoa,\n      as.factor(clus),\n      col = c(\"#42a4cf\",\"#ed4e4e\"),\n      cellipse = 0,\n      sub = paste(\"PCoA Axis1-Axis2 Permanova p-value < \",\n        p_value,\n        sep = \"\"),\n      xlim = c(-3.8, 3))\nAnalyzing the temporal dynamics of the epidemic in each cluster\nTiming: 3–4 h\nThe parishes, and therefore our cases, have been clustered on the basis of the temporal progression of the epidemic. Now we can analyze what are the differences and similarities between the clusters.\nLoad the necessary R packages in the current RStudio session.\n> library(RColorBrewer)\n> library(inflection)\n> library(ggpubr)\nColor the cumulative relative frequency curves of plague deaths for each parish on the basis of their clusters (Figure 7[href=https://www.wicell.org#fig7]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig7.jpg",
    "Figure 7. Cumulative relative frequency curves of plague deaths for each parish with at least 21 deaths colored by cluster\n> peste_cum_norm_melt <- melt(peste_cum_norm_sel)\n> colnames(peste_cum_norm_melt) <- c(\"Date\", \"Parish\", \"Count\")\n> clusters <- as.matrix(f$cluster)\n> peste_cum_norm_melt$Date <- as.Date(peste_cum_norm_melt$Date)\n> peste_cum_norm_melt$Cluster <- as.character(clusters[as.matrix(peste_cum_norm_melt$Parish), 1])\n> Cumulative_curves_sel_clusters <- ggplot(peste_cum_norm_melt, aes(x=Date, y=Count∗100, group = Parish, color = Cluster)) +\n  geom_line() +\n  scale_color_manual(values = c(\"1\" = \"#42a4cf\", \"2\" = \"#ed4e4e\")) +\n  theme_bw() +\n  ylab(\"Cumulative relative frequency of plague deaths (%)\")\nSave a table with the information about the clusters and the corresponding parishes to be used later for further analysis on the clusters.\n> palette <- c(\"#42a4cf\", \"#ed4e4e\")\n> tab_clusters <- data.frame(Parish = row.names(clusters), Cluster = > as.data.frame(clusters)$V1, Color = palette[as.matrix(clusters)])\n> head(tab_clusters)\ntable:files/protocols_protocol_2979_3.csv\n> write.csv(tab_clusters, file = \"Clusters.csv\", row.names = F)\nCompare specific parameters relative to the epidemiological curves of the parishes of the two clusters.\nNote: As an example, we are going to determine: the first plague case for each parish, the inflection points of the cumulative curves, and the date at which the parishes of the two clusters reached 25%, 50%, 75%, and 100% of their total plague deaths.\nCalculate the dates on which the parishes of the two clusters reached the first plague death.\n> peste_cum_norm_melt_first <- peste_cum_norm_melt[peste_cum_norm_melt$Count > 0,]\n> peste_cum_norm_melt_first_nodup <- peste_cum_norm_melt_first[!duplicated(peste_cum_norm_melt_first$Parish),]\n> peste_cum_norm_melt_first_nodup[,3:4] <- NULL\n> colnames(peste_cum_norm_melt_first_nodup) <- c(\"Date_first_death\",\"Parish\")\nCalculate the dates on which the parishes of the two clusters reached 25% of total plague deaths.\n> peste_cum_norm_melt_25 <- peste_cum_norm_melt[peste_cum_norm_melt$Count >= 0.25,]\n> peste_cum_norm_melt_25_nodup <- peste_cum_norm_melt_25[!duplicated(peste_cum_norm_melt_25$Parish),]\n> peste_cum_norm_melt_25_nodup[,3:4] <- NULL\n> colnames(peste_cum_norm_melt_25_nodup) <- c(\"Date_25_death\",\"Parish\")\nCalculate the dates on which the parishes of the two clusters reached 50% of total plague deaths.\n> peste_cum_norm_melt_50 <- peste_cum_norm_melt[peste_cum_norm_melt$Count >= 0.5,]\n> peste_cum_norm_melt_50_nodup <- peste_cum_norm_melt_50[!duplicated(peste_cum_norm_melt_50$Parish),]\n> peste_cum_norm_melt_50_nodup[,3:4] <- NULL\n> colnames(peste_cum_norm_melt_50_nodup) <- c(\"Date_50_death\",\"Parish\")",
    "Calculate the dates on which the parishes of the two clusters reached 75% of total plague deaths.\n> peste_cum_norm_melt_75 <- peste_cum_norm_melt[peste_cum_norm_melt$Count >= 0.75,]\n> peste_cum_norm_melt_75_nodup <- peste_cum_norm_melt_75[!duplicated(peste_cum_norm_melt_75$Parish),]\n> peste_cum_norm_melt_75_nodup[,3:4] <- NULL\n> colnames(peste_cum_norm_melt_75_nodup) <- c(\"Date_75_death\",\"Parish\")\nCalculate the dates on which the parishes of the two clusters reached 100% of total plague deaths.\n> peste_cum_norm_melt_100 <- peste_cum_norm_melt[peste_cum_norm_melt$Count >= 1,]\n> peste_cum_norm_melt_100_nodup <- peste_cum_norm_melt_100[!duplicated(peste_cum_norm_melt_100$Parish),]\n> peste_cum_norm_melt_100_nodup[,3:4] <- NULL\n> colnames(peste_cum_norm_melt_100_nodup) <- c(\"Date_100_death\",\"Parish\")\nCalculate the dates on which the cumulative curves of the parishes of the two clusters change concavity, corresponding to the epidemic peak (also known as the inflection point).\n> infl_date_tab <- matrix(ncol=2, nrow=ncol(peste_cum_norm))\n> colnames(infl_date_tab) <- c(\"Inflection_date\", \"Parish\")\n> for (i in 1:ncol(peste_cum_norm)){\n  col = colnames(peste_cum_norm)[i]\n  infl_date <- as.Date(bede(as.numeric(as.Date(row.names(peste_cum_norm))), peste_cum_norm[,as.matrix(col)],0)$iplast, origin = \"1970-01-01\")\n  infl_date_tab[i, \"Inflection_date\"] <- as.character(infl_date)\n  infl_date_tab[i, \"Parish\"] <- col\n}\nMerge all the data in one table.\n> all_tab_tmp <- merge(clusters, peste_cum_norm_melt_first_nodup, by.x=\"row.names\", by.y=\"Parish\")\n> colnames(all_tab_tmp)[1:2] <- c(\"Parish\", \"Cluster\")\n> all_tab_tmp1 <- merge(all_tab_tmp, peste_cum_norm_melt_25_nodup, by=\"Parish\")\n> all_tab_tmp2 <- merge(all_tab_tmp1, peste_cum_norm_melt_50_nodup, by=\"Parish\")\n> all_tab_tmp3 <- merge(all_tab_tmp2, peste_cum_norm_melt_75_nodup, by=\"Parish\")\n> all_tab_tmp4 <- merge(all_tab_tmp3, peste_cum_norm_melt_100_nodup, by=\"Parish\")\n> all_tab <- merge(all_tab_tmp4, infl_date_tab, by=\"Parish\")\n> head(all_tab)\ntable:files/protocols_protocol_2979_4.csv\n> all_tab$Inflection_date <- as.Date(all_tab$Inflection_date )\n> all_tab2 <- melt(all_tab, id.vars = c(\"Parish\", \"Cluster\"))\nPlot the results as boxplots and determine if the differences between the two clusters are statistically significant (Mann Whitney U test20[href=https://www.wicell.org#bib20] ) (Figure 8[href=https://www.wicell.org#fig8]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig8.jpg\nFigure 8. Comparison between the temporal progression of the epidemic in the two clusters",
    "From left to right, boxplots of the dates in which the parishes of the two clusters experienced the first plague death, 25% of total plague deaths, 50% of total plague deaths, 75% of total plague deaths, 100% of total plague deaths and the inflection point of the curves. In each boxplot, the dates for the two clusters were compared using a Mann-Whitney U test (‘∗’ p value < 0.05; ‘∗∗∗∗’ p value < 0.0001).\n> all_tab2$Cluster <- factor(all_tab2$Cluster, levels = c(\"1\",\"2\"), ordered = TRUE)\n> my_comparisons <- list(c(\"1\",\"2\"))\n> labels <- list(\"First death\", \"25%\", \"50%\", \"75%\",\"100%\", \"Inflection date\")\n#label name of facet\n> labels <- list(\"First_death\" = \"First death\",\n      \"Date_25_death\" = \"25%\",\n      \"Date_50_death\" = \"50%\",\n      \"Date_75_death\" = \"75%\",\n      \"Date_100_death\" = \"100%\",\n      \"Inflection_date\" = \"Inflection date\")\n> facet_labeller <- function(variable,value){\nreturn(labels[value])\n}\n> Clusters_boxplot <- ggboxplot(all_tab2, x = \"Cluster\", y = \"value\", fill = \"Cluster\") +\n  scale_fill_manual(values=as.matrix(palette)) +\n  geom_jitter(alpha=0.5, position = position_jitter(width = 0.3)) +\n  facet_wrap(∼all_tab2$variable, ncol=6, labeller = facet_labeller ) +\n  stat_compare_means(comparisons = my_comparisons, method = \"wilcox.test\", size=4, label = \"p.signif\", hide.ns = TRUE) +\n  theme(legend.position = \"none\") +\n  ylab( \"Date\") +\n  theme(strip.text.x = element_text(size = 8))\nVisualize the epidemiological evolution of the epidemic in the parishes of the two clusters.\nLoad the table with the epidemiological data, the table with the GPS information about the geographic units, in this case, the parishes, and the table with the clusters (see step 12).\n> df <- read.csv(\"TableS1.csv\", na.strings = \"NA\")\n> gps <- read.csv(\"TableS2.csv\", na.strings = \"NA\")\n> clusters <- read.csv(\"Clusters.csv\")\nProduce a summary that integrates all the information for your dataset.\n> df2 <- data.frame(lapply(df, rep, df$count))\n> df3 <- df2 %>% select(-count)\n> tab <- left_join(df2, gps, by = \"Parish\")\n> tab$Date <- as.Date(tab$Date)\n> tab_cluster <- left_join(tab, clusters, by = \"Parish\")\n> tab_cluster_2 <- droplevels(subset(tab_cluster, !is.na(tab_cluster$Cluster)))",
    "#drop rows without cluster total number of cases in the 2 clusters = 7002\nPlot the weekly number of plague deaths for each cluster (Figure 9[href=https://www.wicell.org#fig9]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig9.jpg\nFigure 9. Weekly number of plague deaths for each cluster\n> tab_cluster_2$Weeks <- as.numeric(format(tab_cluster_2$Date, \"%W\"))\n> tab_cluster_2$Cluster <- factor(tab_cluster_2$Cluster, levels=c(1,2))\n> tab_cluster_3 <- tab_cluster_2 %>% filter(Death_cause == \"Plague\")\n> cc_clusters <- tab_cluster_3 %>%\n  group_by(Weeks,Cluster) %>%\n  summarize(count = n()) %>%\n  ggplot(aes(x = Weeks, y = count, col = Cluster)) +\n  geom_line(size = 0.7) +\n  geom_point(size = 2) +\n  theme_bw() +\n  scale_color_manual(values=c(\"#42a4cf\",\"#ed4e4e\")) +\n  theme(axis.title.x = element_text(size = 12),\n    axis.title.y = element_text(size = 12)) +\n  labs(y = 'Number of Deaths')\nNote: The number of color values assigned to the function “scale_fill_manual” must be the same as the number of clusters.\nAnalyzing the spatial dynamics of the epidemic in each cluster\nTiming: 4 h\nGenerate a visualization of the distribution of the parishes of the different clusters on a map using the coordinates and the information about the parishes.\nLoad the R packages in the current RStudio session.\n> library(png)\n> library(grid)\nProduce a summary table that integrates all the information for your dataset (see step 14b).\n> head(tab_cluster)\n# A tibble: 6 x 7\n# Groups: Parish, Cluster, Color, Death_cause, Latitude [6]\ntable:files/protocols_protocol_2979_5.csv\nNote: Latitude and Longitude are the columns used to indicate geographic coordinates.\nFilter the dataset to remove all the parishes without geographic information.\n> df <- tab_cluster %>% filter(!is.na(Latitude))\nCreate a new gray cluster (Cluster “0”) for the unassigned parishes (the parishes in this cluster are the one with less than 21 deaths, see step 6i for details).\n> df$Cluster[is.na(df$Cluster)] <- 0\n> df$Color[is.na(df$Color)] <- \"gray\"\nSummarize the number of cases for each parish, cluster, death cause, and coordinates.\n> df2 <- df %>% group_by(Parish, Cluster,Color, Death_cause, Latitude, Longitude) %>%\nsummarize(Count = n())",
    "> head(df2)\n# A tibble: 6 × 7\n# Groups: Parish, Cluster, Color, Death_cause, Latitude [6]\ntable:files/protocols_protocol_2979_6.csv\nClean the table removing non-plague-related deaths.\n> df2$Cluster <- factor(df2$Cluster, levels = c( \"0\",\"1\",\"2\"),ordered = TRUE)\n> peste_clus_gps <- df2 %>% filter(Death_cause == \"Plague\")\n> peste_clus_gps$Death_cause <- NULL\n> peste_clus_gps <- peste_clus_gps[order(peste_clus_gps$Cluster),]\n> peste_clus_gps$Latitude <- as.numeric(peste_clus_gps$Latitude)\n> peste_clus_gps$Longitude <- as.numeric(peste_clus_gps$Longitude)\n> peste_clus_gps$Count <- as.numeric(peste_clus_gps$Count)\nLoad your map stored as a png image and transform it into a raster image graphical object.\n> map <- readPNG(\"positron_darker_2023.png\")> map_2_plot <- rasterGrob(map, interpolate=TRUE)\nAnnotate the GPS coordinates of the four corners of the map image.\nNote: we can retrieve our base map image from QGIS by cropping the area of interest and annotating the GPS coordinates of the margins of our crop. This is essential to plot the points in their exact location on the map: the map itself needs to be referenced to the real GPS coordinates so that the point can be plotted using the real GPS coordinates available for each parish.\n> gps_map <-data.frame(X = c(9.145413, 9.228967),\n      Y = c(45.43978, 45.49275),\n      fid = c(1,2),\n      crop = c(\"BottomLeft\", \"TopRight\"))\n> xmin <- gps_map[gps_map$crop==\"BottomLeft\",\"X\"] #Bottom Left margin\n> ymin <- gps_map[gps_map$crop==\"BottomLeft\",\"Y\"] #Bottom Right margin\n> xmax <- gps_map[gps_map$crop==\"TopRight\",\"X\"] #Top Right margin\n> ymax <- gps_map[gps_map$crop==\"TopRight\",\"Y\"] #Top Right margin\nFind the aspect ratio of the png image and use the “zoom” variable to scale the output file size.\n> img_width <- ncol(map)\n> img_height <- nrow(map)\n> aspect_ratio <- img_width/img_height\n> zoom <- 15\nNote: With the aspect ratio of the map and a multiplicative factor (zoom variable), it is possible to save the final map image at different sizes maintaining good resolution. The reasonable value of the zoom variable depends greatly on the size (in pixels) and the shape of the initial crop of the map.",
    "Plotting the parishes over the map according to the GPS coordinate. The size of the points is associated to the number of plague deaths and the color represents the cluster of the parishes.\nNote: The aspect ratio of the map must be maintained. To do so, we have to fix the width and height of the final plot file. RStudio may automatically plot the map with an incorrect aspect ratio. We strongly recommend saving the png file using the provided commands instead.\n> p <-ggplot(peste_clus_gps, aes(Latitude,Longitude))+\n  annotation_custom(map_2_plot, xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax)+\n  geom_point(data=peste_clus_gps, aes( size = Count, color = Cluster))+\n  scale_color_manual(values=c(\"grey30\", \"#42a4cf\",\"#ed4e4e\"))+\n  labs(size=\"Plague deaths\", color=\"Cluster\") +\n  xlim(xmin,xmax)+\n  ylim(ymin,ymax)+\n  theme_classic()+\n  theme(axis.line=element_blank(),\n    axis.text.x=element_blank(),\n    axis.text.y=element_blank(),\n    legend.text=element_text(size=zoom/2),\n    legend.title=element_text(size=zoom/2),\n    axis.ticks=element_blank(),\n    axis.title.x=element_blank(),\n    axis.title.y=element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    legend.position = c(.92, .50) )\nSave the final plot as png and scale it using the zoom variable (Figure 10[href=https://www.wicell.org#fig10]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2979-Fig10.jpg\nFigure 10. Geographical distribution of the parishes in the city of Milan\nParishes localization on the map of the city of Milan. In blue, parishes of cluster 1; in red, those of cluster 2; in gray, parishes with less than 21 total plague deaths (not used in the clustering analysis). The size of the points represents the total number of deaths related to the plague experienced by the parish.\n> ggsave(p, filename = \"Map_Clustering_plague_+21_deaths.png\",\n      device=\"png\", units = \"cm\",\n      width = aspect_ratio∗zoom,\n      height = zoom)\nParishes localization on the map of the city of Milan. In blue, parishes of cluster 1; in red, those of cluster 2; in gray, parishes with less than 21 total plague deaths (not used in the clustering analysis). The size of the points represents the total number of deaths related to the plague experienced by the parish."
  ],
  "subjectAreas": [
    "Computer Sciences",
    "Health Sciences",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Bioinformatics & Computational Biology"
  ]
}