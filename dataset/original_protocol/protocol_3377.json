{
  "id": 3574,
  "origin_website": "Cell",
  "title": "Protocol for an agent-based model of recombination in bacteria playing a public goods game",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nSetting model parameters\nTiming: 10 min\nThis step sets the range of model parameters (population size, population viscosity, recombination cost, mutation rate, recombination rate, proportion of the population consisting of recombining cells, proportion of the population consisting of cooperating cells) to be used for subsequent analysis.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3143-Fig1.jpg\nFigure 1. NetLogo model interface\nThe code, when loaded into NetLogo appears as follows. Model parameters can be adjusted using the sliders. The central black area is where the cells will appear when the model is initialized.\nAdjust the model parameters using the sliders.\nNote: The model comes with sliders to select each parameter value from a range of values (Figure 1[href=https://www.wicell.org#fig1]). The sliders themselves can be optionally modified with the following steps.\nRight-click a slider.\nSelect Edit…\nSpecify new minimum, maximum, and increment values.\nAdjust the model space.\nNote: The default model space is a 32 unit by 32 unit two-dimensional torus.\nRight-click the central display area.\nSelect Edit…\nThe size of the world can be changed by editing the max-pxcor and max-pycor values.\nHorizontal and vertical wrapping can be changed using the tick boxes.\nOther visualization settings can also be adjusted.\nSet up the population parameters using the sliders.\nSelect the starting resource values of each cell using the start-energy slider.\nNote: Energy is consumed over time. When this reaches zero, a cell dies. The relative reproduction rates of each type of cell also depend on these values. We used a default initial value of two.\nSelect the population size using the pop-size slider.",
    "Note: When cells die, remaining cells reproduce to keep the population size constant across generations. We set this at 3000, 5000, and 7000 for our study since the model slows down as the population size increases. Reproducing cells are chosen randomly, with the probability of reproduction proportional to the relative fitness.\nSelect the population viscosity value, i.e., the number of generations it takes for an individual cell to disperse, using the stay slider.\nNote: Viscosity is the number of generations each cell will remain in the same location before moving to an adjacent location. We set this at 1, 2, and 3 for our study.\nSelect the constitutive cost of being a recombiner using the rec_cost slider.\nNote: Constitutive cost subtracts from the resources available to each cell every generation. At 0, recombining and non-recombining cells have the same energy expenditure. We set this at 0, 1, and 2 for our study.\nSelect the mutation rate using the mut_rate slider.\nNote: Mutation rate is the rate at which cooperative cells produce cheater offspring and vice versa. At 0, replication is always faithful. We set this at 0.001 for our study.\nSelect the recombination rate using the rec_rate slider.\nNote: Recombination cost is the rate at which recombining cells change the phenotype of other cells in the same location. Cooperative cells make other cells cooperate, and cheater cells make other cells cheat. Converted cells also become recombiners themselves.\nNote: At 0, recombining cells and non-recombining cells exhibit the same behavior. We set this from 0.01 to 0.10 for our study.\nSelect the initial percentage of recombiners using the %_recomb slider.\nNote: We set this at 50 for our study, indicating equal starting percentages of recombining and non-recombining cells.\nSet the initial percentage of cooperating cells using the %_alt slider.",
    "Note: We set this at 0 for our study to model the invasion of cooperation in an established cheating population.\nSelect the fitness benefit to the entire group.\nNote: At each generation, all cells in each location engage in a public goods game.8[href=https://www.wicell.org#bib8]\nSelect the initial fitness value using the contribution slider.\nNote: At the start, all cooperators contribute some amount of fitness to a common pool. We set this value at 1 for our study.\nSelect the benefit of cooperation using the multiplier slider.\nNote: The common pool value is amplified, signifying the benefit of cooperation. The multiplier slider sets the number that the common pool value is multiplied with. At 1, there is no benefit to cooperation. We set this from 1 to 5 for our study.\nRunning a single model in interactive mode\nTiming: 5 min\nThe model will run with the parameters set above. The progress of the population through each generation can be monitored in real time through the interface.\nClick the setup button. This initializes the population according to the parameters selected above.\nThe model speed can be adjusted with the bar above the display.\nClick the go button to start the model. To pause the model, click the go button again.\nView the population on the middle display, with each cell represented by a triangle.\nGreen triangles are non-recombining cooperators.\nBlue triangles are recombining cooperators.\nOrange triangles are non-recombining cheaters.\nYellow triangles are recombining cheaters.\nNote: A video showing the display can be viewed at https://www.cell.com/cms/10.1016/j.isci.2023.107344/attachment/2756d2e1-82e5-4af7-ad57-79e1aa5413ee/mmc3.mp4[href=https://www.cell.com/cms/10.1016/j.isci.2023.107344/attachment/2756d2e1-82e5-4af7-ad57-79e1aa5413ee/mmc3.mp4]\nView the number of each type of cell at each time point on the graph on the left. See Figure 2[href=https://www.wicell.org#fig2] for example.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3143-Fig2.jpg\nFigure 2. Sample population graph\nThe green line shows the number of non-recombining cooperators.\nThe blue line shows the number of recombining cooperators.",
    "The orange line shows the number of non-recombining cheaters.\nThe yellow line shows the number of recombining cheaters.\nStop the model.\nNote: The model will run until stopped. For most parameter sets we tested, the population compositions stabilized after 500 generations.\nUsing BehaviorSpace\nTiming: >1 h\nThis step uses the built-in BehaviorSpace tool in NetLogo to test a model multiple times (replicates).\nClick Tools > BehaviorSpace > New to be able to set up a parameter sweep experiment.\nDefine the variable ranges to test.\nNote: The parameters that can be changed in the model are the same as those defined in Steps 2 and 3.\nSelect the values by listing them in brackets, as shown in the example below.\n[\"pop-size\" 3000 5000 7000]\n[\"%_alt\" 0]\n[\"rec_cost\" 0]\n[\"%_recomb\" 50]\n[\"mut_rate\" 0.001]\n[\"start-energy\" 2]\n[\"stay\" 1]\n[\"contribution\" 1]\nSelect the ranges to be tested in brackets within brackets using the start, increments, and end, as shown in the example below.\n[\"multiplier\" [1 1 5]] [\"rec_rate\" [0.01 0.01 0.1]]\nSpecify the number of repetitions.\nNote: In our study, we used 100 repetitions.\nSpecify the populations of each cell type by listing them as reporters for the runs.\nNote: For example, the following measures count the number of cooperators, cheaters, recombining cooperators, and recombining cheaters.\ncount As\ncount Ss\ncount As with [recomb = 1]\ncount Ss with [recomb = 1]\nClick the box for “Measure runs at every step box” to record the population each generation.\nNote: By default, the populations are recorded at the end of each run.\nSpecify the time limit, i.e., the number of generations the model runs for.\nNote: We set this at 500 for our study.\nOnce the parameters have been defined, click “Ok and Run” to run it.",
    "Note: The output can be saved in different formats, but a table output in csv format is what we ran for further statistical analysis in R.\nView the output table.\nNote: The table output has six header lines describing the batch run, followed by the column names of the data rows, followed by the data.\nNote: For the downstream analysis in the code below, we removed the first six lines of this file. We then removed the columns [run number], %_alt, %_recomb, mut_rate, start-energy, contribution, and step.\nVisualization and statistical analysis\nTiming: 1 h\nThis step generates a visualization of the runs from each set of parameters replicated 100 times.\nGenerate local polynomial regression curves using the stat_smooth function of ggplot2, with the parameters method = \"loess\" and span = 0.2.\nNote: The curves take into account 20% of the total data closest to each point for fitting each location. The bands around the curves indicate the 95% confidence interval, also from the stat_smooth function.\nView the runs from each set of parameters and 100 replicates.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3143-Fig3.jpg\nFigure 3. Sample plot of BehaviorSpace output for different values of cooperation multiplier (range: 1 - 5)\nThe bands show the 95% confidence interval. Figure adapted with permission from Lee et al., 2023.1[href=https://www.wicell.org#bib1]\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3143-Fig4.jpg\nFigure 4. Sample plot of BehaviorSpace output for different values of cooperation multiplier under different parameter sets\nThe bands show the 95% confidence interval. Figure adapted with permission from Lee et al., 2023.1[href=https://www.wicell.org#bib1]\nNote: Sample graphs and the code to generate them given an input file from BehaviorSpace named Compiled_runs.csv are shown in Figures 3[href=https://www.wicell.org#fig3] and 4[href=https://www.wicell.org#fig4].\nNote: Download the processed BehaviorSpace output file we used from Dryad at https://datadryad.org/stash/dataset/doi:10.5061/dryad.9ghx3ffnc[href=https://datadryad.org/stash/dataset/doi:10.5061/dryad.9ghx3ffnc].\nmesa=read.csv(\"Compiled_runs.csv\") # From BehaviorSpace output\ncolnames(mesa) = c(\"pop_size\",\"rec_cost\",\"mult\",\"stay\",\n          \"rec_rate\",\"As\",\"Ss\",\"RAs\",\"RSs\")\nmesa$prop_A = mesa$As / mesa$pop_size\n# For a single plot",
    "library(ggplot2)\nlibrary(pals)\n# Function to draw a ribbon plot given a population size,\n# recombination cost, and population viscosity\ndraw.recr <- function (poop, coost, ste) {\n  grape=ggplot(data = mesa[which(mesa$pop_size==poop & mesa$rec_cost==coost & mesa$stay==ste),],\n        aes(x = rec_rate, y=prop_A, group=mult,\n          color = as.factor(mult), fill = as.factor(mult))) +\n    scale_color_manual(name=\"Multiplier\",values=parula(5)) +\n    scale_fill_manual(name=\"Multiplier\",values=parula(5)) +\n    stat_smooth(se=T, method=\"loess\", span=0.2, geom=\"smooth\",n=100,level=0.95) +\n  #geom_smooth(se=T, method=\"loess\", span=0.2) +\n  #geom_point() +\n  theme_bw(base_size=25) +\n  labs(y=\"Cooperator proportion\", x = \"Recombination rate\")\nreturn(grape)\n}\ndraw.recr(poop=5000,coost=0,ste=1)+ggtitle(\"n=5000, viscosity=1\")+theme_bw(base_size=25)\n# For multiple plots\nlibrary(patchwork)\nploot1=draw.recr(poop=3000,coost=0,ste=1)+ggtitle(\"n=3000, viscosity=1\")+theme_bw(base_size=25)\nploot2=draw.recr(poop=5000,coost=0,ste=1)+ggtitle(\"n=5000, viscosity=1\")+theme_bw(base_size=25)\nploot3=draw.recr(poop=7000,coost=0,ste=1)+ggtitle(\"n=7000, viscosity=1\")+theme_bw(base_size=25)\nploot4=draw.recr(poop=5000,coost=0,ste=2)+ggtitle(\"n=5000, viscosity=2\")+theme_bw(base_size=25)\nploot5=draw.recr(poop=5000,coost=0,ste=3)+ggtitle(\"n=5000, viscosity=3\")+theme_bw(base_size=25)\nploot1+ploot2+ploot3+ploot4+ploot5+guide_area() +\n  plot_layout(guides = 'collect') +\n  plot_annotation(tag_levels=\"A\")"
  ],
  "subjectAreas": [
    "Evolutionary Biology",
    "Microbiology",
    "Systems Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}