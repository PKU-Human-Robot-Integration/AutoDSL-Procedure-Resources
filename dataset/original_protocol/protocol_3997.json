{
  "id": 4201,
  "origin_website": "Cell",
  "title": "Construction of transcriptional regulatory networks using total RNA-seq data",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nRead alignment\nTiming: ∼2 days (depending on the number of samples and computing capacity)\nThis major step results in three sets of read alignments applicable for three types of RNA: mRNA/lncRNA, circRNA, and miRNA.\nTranscriptome read alignment using STAR\nSTAR --runThreadN 20 --runMode alignReads --twopassMode Basic --outSAMattrRGline ID:{sample name} LB:lib1 PL:ILLUMINA PU:unit1 SM:{sample name} –genomeDir Reference/Human/Genecode_GRCh38.p13/STAR_100bp --sjdbGTFfile Reference/Human/Genecode_GRCh38.p13/gencode.v34.primary_assembly.annotation.gtf --sjdbOverhang 99 --readFilesIn {input fasta_1.fq.gz} {input fasta_2.fq.gz} --outFileNamePrefix ./Alignments/$outfile. --quantMode TranscriptomeSAM --outSAMtype BAM SortedByCoordinate\nNote: The alignment parameters for transcriptome alignment are according to the recommendations in the STAR manual.\nChimeric read alignment using STAR (for circRNA detection)\nSTAR --runThreadN 20 --genomeDir Reference/Human/Genecode_GRCh38.p13/STAR_100bp --readFilesIn {input fasta_1.fq.gz} {input fasta_2.fq.gz} --outFileNamePrefix Alignments_chim/{sample name}/ --outReadsUnmapped Fastx --quantMode GeneCounts --chimSegmentMin 15 --chimJunctionOverhangMin 15 --outSAMstrandField intronMotif --readFilesCommand zcat --outSAMtype BAM Unsorted\nNote: the chimeric alignment parameters are according to the recommendations in the STARChip manual (https://starchip.readthedocs.io/en/latest/[href=https://starchip.readthedocs.io/en/latest/]).\nNote: chimeric alignments happen when a read or a pair of reads align to two distinct genomic segments (on different chromosomes, different strands, or far apart) indicative of a structural variation, e.g., a circle. The chimSegmentMin parameter indicates that either of the two segments in the chimeric alignment must be at least 15 bases. The chimJunctionOverhangMin parameter specifies that reads with less than 15 bases overhanging the chimeric junction should not be considered.\nmiRNA read alignment\nSTAR --outSAMattrRGline ID:{sample name} LB:lib1 PL:ILLUMINA PU:unit1 SM:{sample name} --readFilesIn {input fasta.fq.gz} --outFileNamePrefix ./Alignments/{sample name} --runThreadN 20 --genomeDir Reference/Human/Genecode_GRCh38.p13/STAR_sRNA_ENCODE --sjdbGTFfile Reference/Human/Genecode_GRCh38.p13/GENCODE_miRNA_subset.gtf --alignEndsType EndToEnd --outFilterMismatchNmax 1 --outFilterMultimapScoreRange 0 --quantMode TranscriptomeSAM GeneCounts --outReadsUnmapped Fastx --outSAMtype BAM SortedByCoordinate --outFilterMultimapNmax 10 --outSAMunmapped Within --outFilterScoreMinOverLread 0 --outFilterMatchNminOverLread 0 --outFilterMatchNmin 16 --alignSJDBoverhangMin 1000 --alignIntronMax 1 --outWigType wiggle --outWigStrand Stranded --outWigNorm RPM\nNote: The miRNA alignment parameters are according the ENCODE protocol for miRNA-seq read alignment using STAR aligner (https://www.encodeproject.org/documents/b4ec4567-ac4e-4812-b2bd-e1d2df746966/@@download/attachment/ENCODE_miRNA-seq_STAR_parameters_v2.pdf[href=https://www.encodeproject.org/documents/b4ec4567-ac4e-4812-b2bd-e1d2df746966/@@download/attachment/ENCODE_miRNA-seq_STAR_parameters_v2.pdf]).\nFeature read counting\nTiming: 2 days",
    "This major step identifies total read counts for each feature. Since gene read counts will contain a mixture of mRNA and circRNA reads, they should be separated. This major step estimates the circRNA read counts for each detected circRNA and subtracts them from the total RNA counts to estimate mRNA read counts for the corresponding genes.\nRun RSEM to perform initial feature read counting\nrsem-calculate-expression --no-bam-output -p 12 --alignments --paired-end Alignments/{file name}.Aligned.toTranscriptome.out.bam {path to RSEM reference DB} {outfile}\nNote: For miRNA alignments, running RSEM is not necessary. Instead the read counts should be extracted from the ∗.ReadsPerGene.out.tab files generated by STAR.\nEstimate circRNA counts and calculate other feature counts\nRun STARchip with default parameters using the chimeric alignments from step 2.\nNote: Below are the instructions from the manual for our in-house pipeline, also included in the Github repository (https://github.com/pch-code/circ-scripts/[href=https://github.com/pch-code/circ-scripts/]) to estimate the circRNA read counts and to correct the initial read counts by subtracting the circRNA read counts. This correction does not apply to the miRNA read counts.\nCreate a bed file of merged exonic coordinates and flanking introns based on the circRNA isoform coordinates (will use it to get exact GC and length for DESeq).\nMakeExonBedForMerging.pl -i {Main.gtf to create the ∗.exonsByGene.bed file} Using a rat genome example. Convert the main gtf file into a bed file. perl MakeExonBedForMerging.pl -i Rattus_norvegicus.Rnor_6.0.96.gtf -o Rattus_norvegicus.Rnor_6.0.96.exonsByGene.bed The output looks like this:\ntable:files/protocols_protocol_960_1.csv\nMerge using bedops: cut -f4 Rattus_norvegicus.Rnor_6.0.96.exonsByGene.bed | sort | uniq | awk -F'_' '{ system(\"grep \"$1\" Rattus_norvegicus.Rnor_6.0.96.exonsByGene.bed | bedops --merge - \"); print $0; }' > Rattus_norvegicus.Rnor_6.0.96.MergedExonsByGene.txt The output looks like this (coordinates for each exon followed by a line with gene ID and gene symbol):\ntable:files/protocols_protocol_960_2.csv\nMake merged CircRNA.bed file from Rattus_norvegicus.Rnor_6.0.96.MergedExonsByGene.txt perl GetExonsAndFlankingIntronsRegionsPerAnnotatedCircRNA.pl -i Rattus_norvegicus.Rnor_6.0.96.MergedExonsByGene.txt -c circRNA.5reads.1ind.annotated -o circRNAExonicCoords.txt",
    "Note: -i here is the output of step ii.\nThe output looks like this:\ntable:files/protocols_protocol_960_3.csv\nCreate a file with circRNA counts bedtools nuc -fi ∼/Reference/Rat/Rattus_norvegicus.Rnor_6.0.dna.toplevel.fa -bed circRNAExonicCoords.txt > MergedIntervalsGC.txt echo -e \"Gene\\tgc\\tlength\" > CircRNA_GC_Len.txt && awk '{print $4\"\\t\"$6\"\\t\"$13}' MergedIntervalsGC.txt | grep \"ENS\" >> CircRNA_GC_Len.txt perl AddExonLengths_WeightedAvgGC_Annot.pl -i CircRNA_GC_Len.txt -o CollapsedCircRNA_GC_Len.txt # this will also create AnnotatedCircRNA_Counts.txt The output contains circRNA coordinates in the first column and read counts for each sample in the subsequent columns.\nCreate a file with chromosomal coordinates for the identified circRNA perl makeBed.pl -i AnnotatedCircRNA_Counts.txt -o circRNA.bed The output contains circRNA coordinates:\ntable:files/protocols_protocol_960_4.csv\nRun RSEM with the --output-genome-bam and --sampling-for-bam parameters. This will generate a genome-level BAM with each read mapped to a single location (${outfile}.genome.bam)\nfor file in Alignments_transcriptome/{sample name}.Aligned.toTranscriptome.out.bam\ndo\noutfile=${file%%.Aligned.toTranscriptome.out.bam}\noutfile=${outfile##Alignments_transcriptome/}\nrsem-calculate-expression --output-genome-bam --sampling-for-bam -p 12 --alignments --paired-end --strandedness reverse\ndone\nUse the files created in steps d. and e. to generate circRNA coverage files\nfor file in ∗.genome.bam\ndo\noutfile=${file%%.genome.bam}\nbedtools coverage -abam $file -b circRNA.bed > $outfile.cov.txt\ndone\nCalculate median insert size for every sample. Copy all output to a subfolder. It will be used to estimate percentage of circRNA in the next step.\nMedian insert size is will be passed to EstCircCounts_FragCountNormByExonicLen.pl in step h.\nfor file in ∗.genome.bam\ndo\noutfile=${file%%.genome.bam}\njava -jar picard.jar CollectInsertSizeMetrics I=$file\ndone\nEstimate counts and percentages of each circRNA isoform: perl EstCircCounts_FragCountNormByExonicLen.pl -i circRNARegions_TotalRNACov -c AnnotatedCircRNA_Counts.txt -s circs5.1.investigate.consensus –m {average median insert size for PE reads across all samples} –r {read length of PE reads} -o EstCircRNAProportions.txt -i is the directory with the Total coverages -c created in step c. (AnnotatedCircRNA_Counts.txt) -m median insert size is calculated in step g.\nSubtract the estimated circRNA counts from the total RNA counts:\nperl SubtractTheCircCounts.pl -t {TotalRNA counts file}.OrigNames.txt -c EstCircRNAProportions.txt.circCounts.txt -o mRNACounts.txt",
    "Note: The {TotalRNA counts file}.OrigNames.txt, contains total RNA counts (gene level read counts generated by RSEM, in which the first line is a header and the subsequent lines contain Ensembl Gene ID in the first column and read counts for each sample in the following columns).\nThe file can be prepared using:\nperl PrepareCountsForDESeq_FromRSEM.pl -i counts_file_list_in_Group1 -j counts_file_list_in_Group2 -n Group1Name -m Group2Name -o out_for_DESeq.txt\nPrincipal component analysis (PCA) for detection of outlier samples\nTiming: 1 h\nThis major step outlines how to perform PCA to exclude outlier samples whose abnormal expression may indicate overlooked phenotypical features excluding such samples from further analysis.\nNote: Read counts can be a) converted to variance stabilized input values for PCA (step 3) and b) used as input for differential expression analysis (step 4). In our study (Chouvarine et al., 2021[href=https://www.wicell.org#bib6]) we used GC-bias correction as implemented in the EDASeq R package.(Risso et al., 2011[href=https://www.wicell.org#bib15]) This tool can be integrated with DESeq2 as described in the EDASeq manual. In this case, the GC annotation for each gene is downloaded from Ensembl BioMart. An alternative simpler approach would be to use DESeq2 without the GC-bias correction.\nExclude features with the average read count across all samples ≤ 10.\nfilter <- apply(countsTable,1,function(x) mean(x)>10)\ncountsTable = countsTable[filter,]\nRun the DESeq2/EDAseq R packages (as described in the EDASeq manual) applying the withinLaneNormalization function. (optional)\nBriefly, the dataOffset object is created to pass the GC normalized counts to DESeq2:\ndataOffset <- withinLaneNormalization(data,\"GC\", which=\"full\", offset=TRUE)\nNote: the data object was created using the newSeqExpressionSet function on the counts table that also includes a GC column, added by merging an annotation table containing Ensembl Gene ID, GC-content, and other columns of interest (can be obtained from BioMart).\ndds <- DESeqDataSetFromMatrix(countData = counts(dataOffset),\ncolData = pData(dataOffset),\ndesign = ∼ conditions)",
    "normFactors <- exp(-1 ∗ offst(dataOffset))\nnormFactors <- normFactors / exp(rowMeans(log(normFactors)))\nnormalizationFactors(dds) <- normFactors\nAcquire variance stabilized data.\nvsd <- vst(dds, blind=FALSE)\nRun PCA using the FactoMineR and factoextra R packages.(Lê et al., 2008[href=https://www.wicell.org#bib9]) or any other preferred PCA package\npca_Pat = PCA(tvsd_df, scale.unit = F, quali.sup=1:5, graph = TRUE)\nNote: tvsd_df contains transposed matrix with variance stabilized data t(vsd) and additional annotation, e.g., case-control group. In this example, Columns 1 through 5 (specified in quali.sup) contain annotation and are not used for dimensionality reduction.\nDisplay combinations of the first three components using the fviz_pca_ind function (assuming that the factoextra package is used for PCA visualization) to visualize potential outlier samples.\nfviz_pca_ind(pca_Pat, col.ind = tvsd_df$Gr, label=\"ind\", palette = c(\"#00AFBB\", \"#FC4E07\"), addEllipses = TRUE, legend.title = \"Groups\", repel = TRUE, title=\"Individuals by disease - PC1 vs PC2\")\nfviz_pca_ind(pca_Pat, axes=c(1,3), col.ind = tvsd_df$Gr, label=\"ind\", palette = c(\"#00AFBB\", \"#FC4E07\"), addEllipses = TRUE, legend.title = \"Groups\", repel = TRUE, title=\"Individuals by disease - PC1 vs PC3\")\nDifferential expression analysis\nTiming: 2 h\nThis major step should be separately applied to all types of RNA (mRNA, lncRNA, circRNA, and miRNA) to identify their differential expression for the groups in the study.\nRun DESeq2 as described in the previous step, but this time generate differential expression output with FDR-adjusted P-values.\ndds <- DESeq(dds)\nres <- results(dds)\nNote: By default, the DESeq function performs Wald test, which is appropriate in most cases (when two levels of a factor are compared, e.g., case vs. control). Another available method provided by this function is “LRT” (likelihood ratio test), which is appropriate for simultaneous comparison of multiple levels of a factor, e.g., multiple time points.",
    "Note: The results function has an important parameter independentFiltering set to True by default. It applies the gene filtering procedure developed by Bourgon et al.(Bourgon et al., 2010[href=https://www.wicell.org#bib3]) to improve the detection power. We recommend to not change this setting and perform the gene filtering procedure. RNAs with FDR-adjusted P values < 0.05 after filtration will be considered significantly differentially expressed.\nConstruction of circRNA/lncRNA-miRNA-mRNA network\nTiming: 2 days\nThis major step identifies targets of miRNAs and combines them in a regulatory network.\nIdentify gene targets for differentially expressed miRNA using miRDB(Chen and Wang, 2020[href=https://www.wicell.org#bib5]) as the source of gene targets, considering all targets with the miRDB Target Score ≥ 50 as significant.\nThis step can be achieved either using the Target Mining tool provided by the miRDB website or by downloading the entire dataset from the website (http://mirdb.org/download/miRDB_v6.0_prediction_result.txt.gz[href=http://mirdb.org/download/miRDB_v6.0_prediction_result.txt.gz]) and setting up a database query.\nUsing TargetScan 7.1(Agarwal et al., 2015[href=https://www.wicell.org#bib1]), identify lncRNA and circRNA targets based on the number of occurrences of matching 6-mers, 7-mers, and 8-mers. The affinity score is calculated as Score = 0.43∗ N8mer_1a + 0.25∗ N7mer_m8 + 0.19∗ N7mer_1a + 0.07∗ N6mer. Here, 8mer_1a is a site with an exact match to positions 2–8 of the mature miRNA (the seed) followed by an 'A', 7mer_m8 is a site with exact match to positions 2–8 of the mature miRNA (the seed + position 8), 7mer_1a is a site with an exact match to positions 2–7 of the mature miRNA (the seed) followed by an 'A', 6mer is a site with an exact match to positions 2–6 of the mature miRNA (the seed + position 6) followed by an 'A'. All matches with the score ≥ 1 will be considered significant. The scores can also be used to set the line thickness parameter in Cytoscape (see Step 15).",
    "Calculating the scores as specified above can be automated using our script (https://github.com/pch-code/TargetScanScore/blob/main/scoreTargets.pl[href=https://github.com/pch-code/TargetScanScore/blob/main/scoreTargets.pl]) that takes TargetScan output as input:\nperl scoreTargets.pl -i {output from TargetScan} -o out\nSelect the differentially expressed mRNA, lncRNA, and circRNA identified in step 11 that are either on the gene target list (step 12) or the lncRNA/circRNA target list (step 13). The selected interactions will be the basis for competitive endogenous RNA interaction network focusing on differential expression regulation for a particular condition (compared to normal). Optionally, for a more focused view, we can select only those molecules whose differential expression is in the opposite direction compared to differential expression of the miRNAs targeting them.\nUsing the miRNA-target interactions identified in Step 14, create a network in Cytoscape.(Shannon et al., 2003[href=https://www.wicell.org#bib17]) The interactions can be added to a ∗.sif file for creation of the network structure. Each line in a ∗.sif file represents a connection (edge) between two nodes (i.e., miRNA and its target). An exhaustive list of such interactions fully describes the likely competing endogenous RNA interaction network in a form of a graph. Log2(fold change) gene expression values can be used for coloring the nodes (passed to Cytoscape in a separate table). Line thickness can be used to indicate the strength of the interactions based on the corresponding target/affinity scores (passed to Cytoscape in a separate table).\nFunctional annotation of the network\nTiming: 1 day\nThis major step outlines potential sources of annotation for the network created in the previous major step.",
    "Note: Upon creation of the desired network (step 15), functional annotation labels can be added to visualize biological significance of individual nodes or a group of nodes. We recommend using a combination of automated annotation tools, such as Enrichr,(Chen et al., 2013[href=https://www.wicell.org#bib4]) and manual annotation based on literature search and expert knowledge of the scientists involved in the project. In our study, automated annotation was primarily based on pathway and GO overrepresentation analyses of DEGs using the online resource Enrichr with the NCATS BioPlanet pathway annotation (https://ncats.nih.gov/pubs/features/bioplanet[href=https://ncats.nih.gov/pubs/features/bioplanet]).\n(Assuming Enrichr is used) generate a gene list as input. For a particular network, a gene list of selected nodes can be generated in Cytoscape.\nSubmit the gene list to the form on the Enrichr website.\nSelect the Pathways menu and the annotation source, e.g., BioPlanet. Download the results as a table.\nSelect the Ontologies menu and the annotation source, e.g., GO Biological Process. Download the results as a table.\nNote: The overrepresentation analysis obtained in steps 18 and 19 is based on Fisher exact test and correction of the resulting p-values for multiple testing as implemented in Enrichr. Pathways with the adjusted p-value < 0.05 can be considered significantly overrepresented by DEGs.\nAdd the functional labels manually in Cytoscape, using the graphical user interface."
  ],
  "subjectAreas": [
    "Rnaseq",
    "Bioinformatics",
    "Systems Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}