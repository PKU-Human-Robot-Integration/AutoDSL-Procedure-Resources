{
  "id": 3261,
  "origin_website": "Cell",
  "title": "Accurate Silent Synapse Estimation from Simulator-Corrected Electrophysiological Data Using the SilentMLE Python Package",
  "procedures": [
    "Step-By-Step Method Details\nStep-By-Step Method Details\nInstalling SilentMLE\nTiming: 10 min\nThis step downloads the SilentMLE package from GitHub and installs it under your local Python installation. We provide two Variants for installation. Variant 1 is recommended for most users and Variant 2 provides guidelines for advanced users.\nVariant 1: Simple installation of Python and SilentMLE using Anaconda\nDownload and install the Anaconda Python distribution for your operating system using the instructions at https://docs.anaconda.com/anaconda/install/[href=https://docs.anaconda.com/anaconda/install/]\nOpen an Anaconda terminal window using the instructions to “Open Anaconda Prompt” found by scrolling down on the page at https://docs.anaconda.com/anaconda/user-guide/getting-started/[href=https://docs.anaconda.com/anaconda/user-guide/getting-started/].\nIn the terminal window, run the following commands, pressing Enter/Return after each line to execute:\nconda install -y git\npip install git+https://github.com/micllynn/SilentMLE\npython\nVerify the installation proceeded correctly\nRun the following code from the running Python instance:\nimport silentmle as sil\nThe import should run correctly. If not, see the CRITICAL section below.\nVariant 2: Installation of SilentMLE for experienced users\nExperienced users are encouraged to initialize a separate virtual environment before installation:\nconda create -n silentmle\nconda activate silentmle\nExperienced users can install the package however best fits with their workflow. A setup.py file is provided for this purpose. The following installation command should be executed from the command line with the appropriate installation of Python:\npython setup.py install\nExperienced users can also use their preferred text editor or IDE in place of Spyder (eg Emacs, vim, Atom, etc.), replacing the relevant sections below.\nCritical: It is important to install SilentMLE using the correct Python installation, or else the package will not be importable. See Troubleshooting[href=https://www.wicell.org#troubleshooting] if the installation verification does not proceed correctly.\nInitializing an Estimator from Constrained Experimental Simulations\nTiming: 5–20 min",
    "In this step, we import the package and run the set of constrained experimental simulations which generate the mapping between the ground-truth fraction silent in some population, and the biased measurement returned by electrical stimulation experiments. Two variants are provided: Variant 1 describes how to initialize a simple estimator when synaptic release probabilities are unknown (assumes a null case of a uniform distribution); Variant 2 describes how to initialize a more complex estimator with a known distribution of release probabilities.\nVariant 1: Initializing a simple estimator with no strong prior of synaptic release probability distribution.\nTo launch the Spyder IDE, open Anaconda Navigator, in the “Home” tab navigate to “Spyder,” and click Launch. Instructions for using Spyder can be found at https://docs.spyder-ide.org/current/quickstart.html[href=https://docs.spyder-ide.org/current/quickstart.html].\nIn Spyder, execute the following code to import the package.\nimport silentmle as sil\nTo prepare the correct parameters, retrieve information from the slice physiology experiments on:\nThe number of sweeps of electrical stimulation each cell was subjected to in each voltage-clamp condition (hyperpolarized or depolarized potentials) (num_trials). For example, in a case of 50 depolarized sweeps and 50 hyperpolarized sweeps, num_trials=50.\nThe lower and upper bounds of acceptable failure-rate fractions, decided upon before running experiments (failrate_low and failrate_high). For example, a range of 20% failures to 80% failures would be represented as failrate_low=0.2, failrate_high=0.8.\nIf using previously calculated silent fraction estimates, whether any negative silent fraction estimates were set to zero (zeroing=True) or not (zeroing=False).",
    "SilentMLE takes an object-oriented approach to the estimation process. An estimator object must be initialized first (which runs a set of simulations across the range of possible silent fractions), and once initialized it can be used to perform maximum-likelihood estimation on data. To initialize the estimator, run the following code to initialize an estimator object, replacing the appropriate parameters with those specified in step 3c. (Note that n_likelihood_points refers to the number of silent fractions to simulate; lower values will result in more rapid estimator initialization at the expense of estimate precision.)\nestimator = sil.Estimator(n_likelihood_points=250, num_trials=50,\nVariant 2: Initializing a more complex estimator with an experimentally supported synaptic release probability distribution.\nTo launch the Spyder IDE, open Anaconda Navigator, navigate to “Spyder,” and click Launch. Instructions for using Spyder can be found at https://docs.spyder-ide.org/current/quickstart.html[href=https://docs.spyder-ide.org/current/quickstart.html].\nIn Spyder, execute the following code to import the package.\nimport silentmle as sil\nTo prepare the correct parameters, retrieve information from the slice physiology experiments on:\nThe number of sweeps of electrical stimulation each cell was subjected to in each voltage-clamp condition (hyperpolarized or depolarized potentials) (num_trials). For example, in a case of 50 depolarized sweeps and 50 hyperpolarized sweeps, num_trials=50.\nThe lower and upper bounds of acceptable failure-rate fractions, decided upon before running experiments (failrate_low and failrate_high). For example, a range of 20% failures to 80% failures would be represented as failrate_low=0.2, failrate_high=0.8.\nIf using previously calculated silent fraction estimates, whether any negative silent fraction estimates were set to zero (zeroing=True) or not (zeroing=False).\nA statistical distribution, with parameters, of synaptic release probabilities.\nCreate a class instance representing the synapse release probability distribution retrieved in step 4civ. Note that any distribution from scipy.stats is acceptable, and specified parameters for these distributions are required in the dictionary args.\nimport scipy.stats as sp_stats\npr_dist = sil.PrDist(dist=sp_stats.gamma,",
    "args={'a':1, 'scale':0.3})\nSilentMLE takes an object-oriented approach to the estimation process. An estimator object must be initialized first (which runs a set of simulations across the range of possible silent fractions), and once initialized, the estimator object can then be used to perform maximum-likelihood estimation on data. To initialize the estimator, run the following code to initialize an estimator object, replacing the appropriate parameters with those specified in step 4c. (Note that n_likelihood_points refers to the number of silent fractions to simulate; lower values will result in more rapid estimator initialization at the expense of estimate precision.)\nestimator = sil.Estimator(n_likelihood_points=250,\nnum_trials=50, failrate_low=0.2,\nfailrate_high=0.8, zeroing=False,\npr_dist_sil=pr_dist, pr_dist_nonsil=pr_dist)\nCritical: It is important to support the assertion of a particular synaptic release probability distribution with data and/or references from the literature. Otherwise, we recommend assuming the null hypothesis of uniformly distributed synaptic release probabilities (Soares et al., 2017[href=https://www.wicell.org#bib14]).\nNote: help(sil.Estimator) provides comprehensive documentation of each input and its expected type for this class. Many parameters controlling the experimental simulations can be fine-tuned according to the information here.\nNote: All specified simulation and experimental parameters are stored in the class instance as estimator.params for easy access. The observation space and hypothesis space employed are stored as estimator.obs and estimator.hyp respectively. The numerically simulated likelihood function is stored as estimator.likelihood.\nPerforming Maximum-Likelihood Estimation on Collected Data\nTiming: 5 min\nIn this step, we perform maximum-likelihood estimation using the initialized estimator. This can either be done using raw failure rates for each neuron (Variant 1), or using existing datasets consisting of silent synapse estimates from the failure-rate analysis equation (Variant 2). See Before You Begin[href=https://www.wicell.org#before-you-begin], section on calculating the failure rates, for more information on the two variants of processing data.\nVariant 1: Data in raw failure-rate form",
    "Create a variable representing the data. Note that we create a list with each cell’s failure rates expressed in the format. Replace the values here with your own data. Lists can be of arbitrary length.\ndata = [[0.2, 0.18], [0.4, 0.36], [0.38, 0.48], [0.58, 0.6], [0.46, 0.31],]\nPerform maximum-likelihood estimation using the initialized data variable and the existing estimator variable. Ensure that the correct datatype (dtype) is set.\nlikelihood = estimator.estimate(data, dtype='failrate')\nMaximum-likelihood estimation should be relatively rapid; wait for the estimation to complete.\nExamine the joint likelihood plot that was generated (see Figure 1[href=https://www.wicell.org#fig1] for examples). This depicts the likelihood of each hypothetical silent fraction being the correct value, given the data provided. One can conveniently read the maximally likely estimate (MLE) for silent fraction indicated in red.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/285-Fig1.jpg\nFigure 1. Maximum-Likelihood Estimation on Two Datasets with Synthetic Data\nTwo example plots depicting the joint likelihood function returned by SilentMLE.\n(A) An example likelihood plot for n = 2 artificial data points. Note the broad likelihood distribution.\n(B) An example likelihood plot for n = 20 artificial data points. Note the narrower likelihood distribution despite the same maximum-likelihood estimate. The code to generate (B) is available on the project’s GitHub site at: https://github.com/micllynn/SilentMLE#example-of-full-estimation-procedure-and-output[href=https://github.com/micllynn/SilentMLE#example-of-full-estimation-procedure-and-output].\nThe normalized joint likelihood function (shown on the y-axis of the returned plot) is stored in likelihood for further processing and analysis. The corresponding hypothesis space of silent synapse fractions (shown on the x-axis of the returned plot) is stored in estimator.hyp.\nVariant 2: Data in processed silent synapse estimate form\nCreate a variable representing the data (estimates of fraction silent synapses). Note that we create a list comprised of each cell’s estimated silent synapse fraction. Replace the values here with your own data. Lists can be of arbitrary length.",
    "data = [0.42, 0.32, 0.54, 0.43, 1.0, 1.0, -0.06, -0.18, 1, 0.42, 0.16]\nPerform maximum-likelihood estimation using the initialized data variable and the existing estimator variable. Ensure that the correct datatype (dtype) is set.\nlikelihood = estimator.estimate(data, dtype='est')\nMaximum-likelihood estimation should be relatively rapid; wait for the estimation to complete.\nExamine the joint likelihood plot that was generated (see Figure 1[href=https://www.wicell.org#fig1] for examples). This depicts the likelihood of each hypothetical silent fraction being the correct value, given the data provided. One can conveniently read the maximally likely estimate (MLE) for silent fraction indicated in red.\nThe normalized joint likelihood function (shown on the y-axis of the returned plot) is stored in likelihood for further processing and analysis. The corresponding hypothesis space of silent synapse fractions (shown on the x-axis of the returned plot) is stored in estimator.hyp.\nNote: help(estimator.estimate) provides comprehensive documentation of the expected type and format of the data, the parameters used for estimation, and the type and format of the returned likelihood vector.\nCritical: If previously obtained silent fraction estimates have been “zeroed” (ie all negative values have been set to 0), the Estimator must have been initialized in steps 3 and 4 with the parameter zeroing=True."
  ],
  "subjectAreas": [
    "Neuroscience",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Bioinformatics & Computational Biology"
  ]
}