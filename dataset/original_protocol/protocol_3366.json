{
  "id": 3562,
  "origin_website": "Cell",
  "title": "Protocol for dissecting cascade computational components in neural networks of a visual system",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nInstall STNMF\nTiming: 10 min\nDownload the code package.\nDownload the code package from https://github.com/jiankliu/STNMF-SNN[href=https://github.com/jiankliu/STNMF-SNN] (GitHub: https://doi.org/10.5281/zenodo.10049958[href=https://doi.org/10.5281/zenodo.10049958]) or directly clone the GitHub repository, and then add the extracted folder to the MATLAB search path.\nData preprocess\nTiming: 1 min\nAfter obtaining the stimulus array and spike trains of the neurons, the data need to be processed into a form suitable for STNMF. The following steps use simulated V1 simple cell data as input.\nAccording to the CB and the spike sequence to generate the effective spike-triggered stimulus images (STE).\nBased on the spikes of the recorded neuron to find the response time (tsp) of each spike in turn.\nFind the stimulus sequence within each time period [tsp-nt+1, tsp] in turn. For the i-th spike, the corresponding 20-frame stimulus sequence is [   s  i  − 19     , …   s  i  − 1    ,  s i   ].\nApply Singular Value Decomposition on STA of neurons to obtain spatial receptive fields (spSVD) and temporal filters (tmSVD).\nBased on tmSVD, average the stimulus sequence [   s  i  − 19     , …   s  i  − 1    ,  s i   ] corresponding to the i-th spike, and reshape it into a row to obtain     s  ( τ )   i   . Form the     s  ( τ )   i    of all spikes into an N×P matrix STE.\n>load('Data.mat');\n>pretreatment_snn(CB,spike,nt,nx,ny);\n>load('Datapre.mat');\n>STE=getSTE_snn(SS,spklist,tmSVD,nt,nx,ny);\nNote: The nt is generally set to 20, representing 20 stimulus frames. STA is the spike-triggered average method,6[href=https://www.wicell.org#bib6] which calculates the receptive field of neurons based on stimuli and spikes. The generated simulation data or user data is stored in Data.mat. The available data format for STNMF is obtained by pretreatment_snn. The effective spike-triggered stimulus images are then generated using get_STE_snn.\nOptional: MATLAB runtime version, Data_Preprocessing.exe.",
    "Decompose STE based on STNMF to obtain W and M\nTiming: 5 min\nIn this step, the STNMF is used to infer the spatial receptive field of the subunits.\nPerform the STNMF on the STE to obtain the weight matrix W and the module matrix M.\nPreset the number of subunits k.\nRun the algorithm to get a N×K weight matrix W and a K×P module matrix M.\nReshape each row in the module matrix M to the size of the stimulus frame.\n> load('STE.mat');\n> k=8;\n> STNMFanalysis_snn('STE.mat','subunit.mat',k,20,1);\nNote: Remove the noise-like frames in the background, and all preceding frames have clear receptive fields, thus obtaining the spatial receptive field of the subunit. Run STNMFanalysis_SNN obtains spatial receptive fields for inferred subunits.\nOptional: MATLAB runtime version, STNMF_WM.exe.\nAnalyses of the M and W for more computational components\nTiming: 15 min (for steps 5 and 6)\nTiming: 25 s (for steps 7–9)\nIn this step, the temporal filter, nonlinearity, and synaptic connection weights of the subunits are inferred by analyzing the module matrix.\nObtain the temporal filter for the subunit.\nCalculate the nonlinearity based on the obtained spatial filter and temporal filter for each subunit.\nFirstly, convolve the spatial and temporal filters of the stimulus with the subunits to obtain the generator signal.\nThen divide it into 40 bins of equal size, ensuring that each bin contains an equal number of data points.\nFinally, visualize the nonlinearity by plotting the mean generator signal against the mean spike rate in each bin as a histogram mean.\n> calculatTF_subSP_snn('Datapre.mat', 'subunit.mat', 'subTemporalKernel.mat', k,k ,nt,nx,ny);\n> CalculateOutputGainandDrawNL_snn('Data.mat', 'Datapre.mat', 'subunit.mat', 'subTemporalKernel.mat', 'gainNL.mat');",
    "Note: By utilizing the spatial receptive field of this subunit to filter all stimulus sequences and subsequently averaging them, we can obtain the temporal filter for that specific subunit. Run calculatTF_subSP_snn to obtain the time filter for the inferred subunits. Run CalculateOutputGainandDrawNL_snn to obtain gain and nonlinearity.\nOptional: MATLAB runtime version, temporalfilter.exe, GainandNL.exe.\nIn this part, by analyzing the weight matrix to infer the synaptic connection weights and spike trains of the subunits.\nAverage each column of the weight matrix to get the connection weight    W j    for each subunit.\nSum each column of the weight matrix W to obtain the ON-OFF attribute of the.\nIf the subunit is of type OFF, take the minimum of each row in the weight matrix W. Then classify the spike into the module corresponding to the minimum.\n>get_module_weight_snn('STE.mat','subunit.mat','module_weight.mat');\n>load('module_weight.mat','W_matrix');\n>load('subunit.mat','unit','Ngood');\n>spklist_sub=get_subSTA_min_snn(Ngood,spklist,W_matrix,STE,nx,ny);\n>subunit_sp=get_subunit_spike_train_snn(Ngood,spike,spklist_sub);\n>save('subunit_sp.mat','subunit_sp');\nNote: If the sum of the weights of the subunits is greater than 0, it is an ON property, and if the sum is negative, it is an OFF property. Run get_module_weight_snn, get_subunit_spike_train_snn to obtain the synaptic weights and spike subsets.\nOptional: MATLAB runtime version, module_weight.exe, subunit_spike_train.exe."
  ],
  "subjectAreas": [
    "Computer Sciences",
    "Neuroscience",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Bioinformatics & Computational Biology"
  ]
}