{
  "id": 2051,
  "origin_website": "Cell",
  "title": "Integrated bioinformatic pipeline using whole-exome and RNAseq data to identify germline variants correlated with cancer",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nA typical workflow to call germline variants from the wxs-normal samples, wxs-tumor samples, and rnaseq-tumor samples (the three ‘data types’ in this protocol) requires six parts. The first part is variant calling using VarDictJava. The second part is the preprocessing of VCFs and extraction of genotype status of each variant for each sample. We then perform union of all the unique variants from all three data types. The third part is to calculate the sequencing coverage of the union of unique variants. The fourth part is to merge genotype status file and sequencing coverage file of each sample to determine the status of each variant after correction for low sequence coverage. The variant status at positions with fewer than ten reads for a given sample is changed to unknown. The fifth part is to combine variant status file from each sample to create a large multi-sample VCF file. Finally, in the sixth part, at positions at which variant status is listed as unknown in the wxs-normal samples (because of low sequence coverage) we will insert variant calls made from the corresponding wxs-tumor samples. If the variant status is still unknown in a normal sample but is called in the corresponding rnaseq-tumor sample, then the rnaseq-derived variant is inserted to create the final combined wxs-rnaseq variant call set.\nNote: Run parts 1-5 separately for wxs-normal samples, wxs-tumor samples, and rnaseq-tumor samples.\nPart 1: Variant calling using VarDictJava\nTiming: 2 h (computational time scales with number of samples and available resources)",
    "Variant calling on wxs-normal BAMs, wxs-tumor BAMs, and rnaseq-tumor BAMs using VarDictJava. The settings were set as default except for requiring mapping quality greater than 30, base quality greater than 25, a minimum of 3 reads supporting a variant, minimum allele frequency of 5%, no structural variant calling, and the removal of duplicate reads.\nNavigate to ‘scripts’ directory and open VariantCallingFrom_VarDict.sh script in your favorite text editor.\n>nano VariantCallingFrom_VarDict.sh\nAs the script in this protocol follows SLURM based schema. The structure of the job script is described below.\n>#SBATCH-N 1 ##number of nodes\n>#SBATCH--cpus-per-task=5 ##number of cpus per task\n>#SBATCH-mem=100Gb ##memory requested per node in GB\n>#SBATCH-t 02:00:00 ##time limit hrs:min:sec\n>#SBATCH-p partition ##partition requested in the cluster\n>#SBATCH-A account ## account to be charged\n>#SBATCH-e slurm-%j.err ##standard error\n>#SBATCH-output slurm-%j.out ##standard output\n>#SBATCH-array=1-5 ##number of array jobs is from 1 to 5\nNote: Set the number of nodes, number of cpus, requested memory, and time in the job script according to the number of samples to be processed and resources available on the user online Linux cluster. The numbers designating the array jobs correspond to the numbers of the jobs in the input list.\nAs different data types are processed, set the path in the script to the input list that corresponds to the data type (See Figure 1[href=https://www.wicell.org#fig1]). For example, to set path of input.list for wxs-normal BAMs\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1534-Fig1.jpg\nFigure 1. Example showing the structure of the VariantCallingFrom_VarDict.sh bash script\nThe highlighted text in yellow demonstrates resources requested for the job, where to set path to read input.list, and path to output VCF files. To open and edit bash script use any text editor like nano.\n>input_list=\"$protocol_dir/STAR_protocols_GV_calling/data/BAM/wxs\n        -normal/wxs-normal_input.list\"\nThe default output for this step is stored in the following directory.\n>cd STAR_protocols_GV_calling/analysis/VCFs_from_VarDict/",
    "User should create directory ‘wxs-normal’, ‘wxs-tumor’, and ‘rnaseq-tumor’ in the ‘VCFs_from_VarDict’ directory to store VCFs for respective data types.\n>mkdir wxs-normal\n>mkdir wxs-tumor\n>mkdir rnaseq-tumor\nSet output path in the script accordingly (See Figure 1[href=https://www.wicell.org#fig1]). For example, output path for VCFs for wxs-normal samples can be set as shown below\n>out_VCF=\"$protocol_dir/STAR_protocols_GV_calling/analysis/VCFs_fr\n        om_VarDict/wxs-normal\"\nRun script using the following command\n>sbatch\n$protocol_dir/STAR_protocols_GV_calling/scripts/VariantCallingFrom\n_VarDict.sh\nIf the user online Linux cluster supports Terascale Open-source Resource and QUEue Manager (TORQUE) system,\nChange the structure of the job script in the VariantCallingFrom_VarDict.sh as described below\n>#PBS -k o ##keep the job output\n>#PBS -N JobName ## name of the job\n>#PBS -l nodes=1 ##number of nodes\n>#PBS -l ncpus=5 ## number of cpus\n>#PBS -l mem=100Gb ## memory requested per node in Gb\n>#PBS -l walltime=02:00:00 ## time limit hrs:min:sec\n>#PBS -q queue ##partition requested in the cluster\n>#PBS -e torque-%j.err ##standard error\n>#PBS -o torque-%j.out ##standard output\n>#PBS -t 1-5 ##number of array jobs is from 1 to 5\nRun script using the following command\n>qsub\n$protocol_dir/STAR_protocols_GV_calling/scripts/VariantCallingFrom\n_VarDict.sh\nPart 2: Preprocessing of VCF files\nTiming: 30 min\nIndex VCF file and extract variants that received a PASS (shown in the “filter” column) in the indexed VCF file.\nThe default output for this step is stored in the following directory.\n>cd STAR_protocols_GV_calling/analysis/PASS_variants/\nUser should create directory for each data type in the ‘PASS_variants’ directory to store outputs for respective data type.\n>mkdir wxs-normal\n>mkdir wxs-tumor\n>mkdir rnaseq-tumor\nSet output path in the extract_pass_variants.sh script for each data type accordingly. For example, let’s set the output path to store indexed passed variants for wxs-normal samples\n>nano extract_pass_variants.sh\n>out_VCF=\"$protocol_dir/STAR_protocols_GV_calling/analysis/PASS_va\n        riants/wxs-normal\"\nRun the script from the directory where VCFs from VarDictJava are located.\n>$protocol_dir/STAR_protocols_GV_calling/scripts/extract_pass_varia\nnts.sh",
    "Remove header section from VCFs. Run the script from the directory where indexed pass variants are located.\n>$protocol_dir/STAR_protocols_GV_calling/scripts/remove_header_VCF\n.sh\nExtract unique variants from all the passed variants VCF files. Run script from the directory where VCF files without header are located. This script will output allVCF_variants.txt file (total variants from all the passed variants VCFs), and unique_variants.txt file (unique variants from all the passed variants VCFs). User may rename the unique_variants.txt for each data type accordingly.\n>$protocol_dir/STAR_protocols_GV_calling/scripts/extract_uniqueVar\niants.sh\nNote: This bash script extract_uniqueVariants.sh includes R script extract_uniqueVariants.R. See ‘Potential problem 3[href=https://www.wicell.org#sec6.5]’ to solve issue with cannot find the R script.\nExtract genotype status for each variant from each sample. Here, we extract chromosome, position, reference allele, observed alternate allele, mutation status, total depth, and variant depth of each variant from each VCF file.\nThe default output for this step is in the following directory.\n>cd STAR_protocols_GV_calling/analysis/genotype_status/\nUser should create separate directory in the ‘genotype_status’ directory to store outputs for each data types.\n>mkdir wxs-normal\n>mkdir wxs-tumor\n>mkdir rnaseq-tumor\nSet output path in the extract_genotype_from_passedVariants.sh script for each data type. For example, set output path for wxs-normal samples\n>nano extract_genotype_from_passedVariants.sh\n>out_VCF=\"$protocol_dir/STAR_protocols_GV_calling/analysis/genotyp\n        e_status/wxs-normal\"\nRun script from the indexed passed variants VCFs directory\n>$protocol_dir/STAR_protocols_GV_calling/scripts/extract_genotype_\nfrom_passedVariants.sh\nMerge unique variants obtained from the wxs-normal, wxs-tumor and rnaseq-tumor data type by chromosome, position, reference allele and observed alternate allele. Here, we will keep the union of unique variants obtained from all the three data types and save them as union_wxs_rnaseq_variants.bed file. User can use R to merge the unique variants obtained from the three data types\nLoad required R package\n>library (data.table)\nLoad data in R\n>wxs_normal=fread(\"/STAR_protocols_GV_calling/analysis/PASS_varian\n    ts/wxs-normal/unique_variants.txt\",sep=\"∖t\",\n    check.names=FALSE, header=TRUE)\n>wxs_tumor=fread(\"/STAR_protocols_GV_calling/analysis/PASS_variant\n    s/wxs-tumor/unique_variants.txt\",sep=\"∖t\",\n    check.names=FALSE, header=TRUE)\n>rnaseq_tumor=fread(\"/STAR_protocols_GV_calling/analysis/PASS_vari\n    ants/rnaseq-tumor/unique_variants.txt\",sep=\"∖t\",\n    check.names=FALSE, header=TRUE)\nConvert data.table to data.frame\n>wxs_normal <- setDF (wxs_normal)\n>wxs_tumor <- setDF (wxs_tumor)\n>rnaseq_tumor <- setDF (rnaseq_tumor)",
    "Convert into list\n>variant_list = list(wxs_normal, wxs_tumor, rnaseq_tumor)\nMerge list based on chromosome, position, reference allele, and alternate allele\n>union_variants= Reduce(function(x,y) merge(x, y, by.x = c(\"CHROM\",\n    \"POS\", \"REF\", \"ALT\"), by.y = c(\"CHROM\", \"POS\",\n    \"REF\", \"ALT\"), all.x=TRUE, all.y=TRUE),\n    variant_list)\nDrop unwanted columns\n>drop <- c(\"REF\", \"ALT\")\n>union_variants<-union_variants[,!colnames(union_variants) %in%\n          drop]\nSave union variants in the analysis directory\n>fwrite(union_variants,\"/STAR_protocols_GV_calling/analysis/union_\nwxs_rnaseq_variants.txt\",col.names=FALSE,quote=FALSE,row.names=FAL\nSE,sep=\"∖t\")\nTerminate the current R session. User will be prompted to save the workspace. Please type ‘no’ if you wish not to save the workspace.\n>quit()\nNow we are outside R. Convert the union_wxs_rnaseq_variants.txt file into .bed file in the Linux command line\n>mv union_wxs_rnaseq_variants.txt union_wxs_rnaseq_variants.bed\nPart 3: Calculate sequencing coverage of union variants\nTiming: 2 h\nIn this step, we will calculate the sequencing coverage of union variants (listed in the union_wxs_rnaseq_variants.bed file) on all BAMs requiring mapping quality greater than 30.\nThe default output for this step is in the following directory.\n>cd STAR_protocols_GV_calling/analysis/variant_coverage\nUser should create separate directory for each data type in the ‘variant_coverage’ directory to store output for each data type.\n>mkdir wxs-normal\n>mkdir wxs-tumor\n>mkdir rnaseq-tumor\nSet output path in the script accordingly. For example, set output path for wxs-normal samples\n>nano UnionVariantCoverageFrom_Samtools_depth.sh\n>out_depth=\"$protocol_dir/STAR_protocols_GV_calling/analysis/varia\n    nt_coverage/wxs-normal\"\nRun the script using the following command\n>sbatch\n$protocol_dir/STAR_protocols_GV_calling/scripts/UnionVariantCovera\ngeFrom_Samtools_depth.sh\nCritical: union_wxs_rnaseq_variants.bed file and input.list that contain the location of the BAM files are required as input files. Set path of input files in the script. Set array jobs with number of jobs in the input list.\nPart 4: Determine status of each variant in each patient for each data type\nTiming: 5 min",
    "Determine status of each variant using the genotype status and sequencing coverage of each variant in each sample. The variant status at positions fewer than ten reads for a given patient is changed to unknown. If the sequencing coverage of the variant is more than ten reads and no alternate allele is reported for that variant, then the status of that given variant is changed to Homozygous reference.\nInput files: prepare a tab separated input_genotype_samdepth.txt file as shown in Figure 2[href=https://www.wicell.org#fig2] with three columns that describe ‘genotype_file’ (the location of the genotype status file with filename), ‘samdepth_file’ (the location of the union variants sequencing coverage file with filename), and ‘out_filename’ (the location of the output file with filename) for each sample. For the output file filename add _GT_samdepth_merged suffix at the end of the filename.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1534-Fig2.jpg\nFigure 2. Example showing how to prepare the input_genotype_samdepth.txt file\nThe first column is the path where the genotype status of each sample is located, the second column is the path of sequencing coverage of each sample is located, and the third column describes the path where to save the variant status file.\nThe default output for this step is in the following directory.\n>cd STAR_protocols_GV_calling/analysis/variant_status\nUser should create separate directory for each data type in the ‘variant_status’ directory to save output for each data type.\n>mkdir wxs-normal\n>mkdir wxs-tumor\n>mkdir rnaseq-tumor\nSet path in the out_filename column in the input_genotype_samdepth.txt file to save results for each data type. For example, set output path for wxs-normal samples\n>STAR_protocols_GV_calling/analysis/variant_status/wxs-normal/\nPlace the input_genotype_samdepth.txt file in the analysis directory.\nRun the script using the following commands from the analysis folder.\n>sbatch\n$protocol_dir/STAR_protocols_GV_calling/scripts/determineVariantSt\natus.sh\nNote: The bash script determineVariantStatus.sh includes R script determineVariantStatus.R. Set array jobs with number of jobs in the input list.",
    "Part 5: Creating multi-sampled variant status file\nTiming: 1 h\nCombine variant status file of each sample to create a multi-sample VCF which stores the variant status from all the samples.\nThe default output for this step is in the following directory.\n>cd STAR_protocols_GV_calling/analysis/combined_variant_status\nUser should create a separate directory in the ‘combined_variant_status’ to save output for each data type.\n>mkdir wxs-normal\n>mkdir wxs-tumor\n>mkdir rnaseq-tumor\nRun the script using the following commands\n>sbatch\n$protocol_dir/STAR_protocols_GV_calling/scripts/combineAllSamplesV\nariantStatus.sh\nCritical: The bash script combineAllSamplesVariantStatus.sh includes the R script combineAllSamplesVariantStatus.R. In the R script set full path for input files (i.e., variant status file obtained from the previous step) and the output path where combined variants from all samples to be saved. The memory and time may vary based on the number of samples to be processed.\nThe script above outputs a large table which contains variant status from all the samples. However, we need to do a bit of legwork to get our data into reasonable shape. First, the combined variants status file contains millions of variants, and it will take too much of memory and time for data pre-processing. Therefore, we will first split the large-combined variant status file into chunks of small files keeping the same number of columns but split based on fixed number of rows. In this file, each line corresponds to one variant.\n>file=combinedVariantStatusFromAllSamples.txt\n>head -1 $file > header.txt\n>sed '1d' $file > combined_variants_without_header.txt\n>split -d -l 50000 combined_variants_without_header.txt -a 4 –\nadditional-suffix=.txt segment_\nWith the above commands we did the following:\n-d #add numeric suffix to split file\n-l #number of lines in each of the smaller files\n-a #suffix length\n--additional-suffix\nsegment_ #split file prefix\nPrepare input list for pre-processing\n>find $(pwd) -type f -name \"segment∗\" > input.txt\n>sort -V input.txt > input.list",
    "The pre-processing step takes each split file from the input.list and first removes the unwanted columns. Then for each variant it extracts the chromosome, base-position, the reference allele, the observed alternate allele and the variant status for each sample. From the fifth column onwards, the column names change to the respective sample names from TCGA. Modify the script if you have different sample names.\nInput files: input.list and header.txt file\nOutput files: processed combined variant status file for each split file\nRun script from the folder where input.list and header.txt is stored\n>sbatch\n$protocol_dir/STAR_protocols_GV_calling/scripts/processCombinedVar\niants.sh\nNote: The bash script processCombinedVariants.sh includes R script processCombinedVariants.R. Set array jobs with number of jobs in the input list.\nOnce preprocessing of each split file is finished, the next step is to merge them. Run the command below from the command line interface\n>awk 'NR == 1 || FNR > 1' processed_CombinedVariants_∗.txt >\nprocessed_CombinedVariantsFromAllSamples.txt\nRemove variants which are either unknown or Homozygous reference across all samples from the processed_CombinedVariantsFromAllSamples.txt file. Run the script below from the directory where the processed_CombinedVariantsFromAllSamples.txt file is located. The script will output the processed_CombinedPotentialSNPs.txt file.\n>Rscript\n$protocol_dir/STAR_protocols_GV_calling/scripts/extractPotentialSN\nPsFromCombinedVariants.R\nPart 6: Insert variant call for unknown variant status in normal samples\nTiming: 40 min\nThe goal of this step is to insert variant status at positions listed as unknown in the wxs-normal sample from the corresponding tumor sample. If the variant status is still unknown in the normal sample, then we will insert variant status of the rnaseq-derived variant from the corresponding rnaseq-tumor sample. This step will allow us to create a final combined wxs-rnaseq variant call set.\nInput files:\nprocessed_CombinedPotentialSNPs.txt file obtained for wxs-normal, wxs-tumor and rnaseq-tumor data types.",
    "Patient list with Case_ID and Sample_Barcode. If a matched tumor /normal sample have whole exome sequencing and associated RNA sequencing file, then the different datasets from the patient will have the same Case_ID. Prepare separate patient list for wxs-normal, wxs-tumor and rnaseq tumor samples. Set the column names of each file as suggested:           wxs-normal: Case_ID and normal           wxs-tumor: Case_ID and tumor           rnaseq-tumor: Case_ID and rnaseq\nPatient list for this protocol is provided in the sample directory and can be accessed by the following command\n>cd STAR_protocols_GV_calling/data/samples\nRun the script using the following command. Run the script from the analysis folder.\n>sbatch\n$protocol_dir/STAR_protocols_GV_calling/scripts/fillUnknownVariant\nsInNormalSamples.sh\nCritical: The bash script fillUnknownVariantInNormalSamples.sh includes R script fillUnknownVariantInNormalSamples.R. Set full path for the patient files and the processed_CombinedPotentialSNPs.txt file in the script.\nThe output from step six includes four files\ncombined_normal_unknown_filled.txt\ncombined_normal_unknown_filled_arranged.txt\nfinal_merged_wxs_rnaseq_variants.txt (stores the combined set of variant calls from the wxs-normal, wxs-tumor and rnaseq-tumor samples)\nfinal_variantsForAnnovar.txt (combined set of variant call formatted as input file for variant annotation using Annovar)\nPart 7: Examples of downstream analyses\nIn the previous steps, we have identified germline variants from the whole-exome sequences and rna-sequences in the TCGA-LGG cohort. Several downstream analyses can be performed to evaluate the quality and clinical relevance of the identified germline variants.\nUse Annovar software to perform functional annotation of germline variants such as in which gene the variant is located, whether variant is in the exonic, intronic, UTR, promoter, or splicing region of a gene or is in the intergenic region.\nUse Annovar to determine the allele frequencies of germline variants in whole-genome sequencing data from various ethnic populations such as listed in the GnomAD database.\nCalculate the allele frequency of the germline variant in this study using the following formula:",
    "A l l e l e  f r e q u e n c y =    (  2 ∗ # H A  )  + # H T    (  2 ∗ # H R  )  +  (  2 ∗ # H A  )  +  (  2 ∗ # H T  )     \nwhere #HR is the total number of patients with Homozygous reference allele, #HT is the total number of patients with Heterozygous allele, and #HA is the total number of patients with Homozygous alternate allele.\nCalculate the correlation of the allele frequencies in the four variant call sets (final merged variant call set, wxs-normal, wxs-tumor, rnaseq-tumor datasets) with each other and with the allele frequency from GnomAD using GGally R package. In our study, the allele frequencies in the combined data set from ∼500 patients gave a correlation coefficient of >0.9 with the allele frequencies in GnomAD.\nDetermine whether the germline variant calls separate patients based on self-reported race using the PLINK software.\nDetermine the genetic linkage between germline variants at different loci by performing Linkage Disequilibrium analysis.\nDetermine for a given germline variant whether there is a significant difference in survival outcome in the minor allele compared to the reference major allele (Chatrath et al., 2019; Chatrath et al., 2020). Here, we have compared the overall survival outcome between LGG patients (n=507) with different rs1131397 (Chr1-154965759-G-C) genotypes. See Expected outcomes[href=https://www.wicell.org#expected-outcomes] for the discussion of the obtained results.\nLoad required R package\n>library(survival)\nVariant genotype is encoded as character vector. Model genotype in ordinal scale\nHomozygous_ref: 0\nHeterozygous: 1\nHomozygous_alt: 2\nSave variant genotype (converted in ordinal scale) for each patient\n>labels <- variant_genotype\nDownload the survival data to the working directory (see Key resources table[href=https://www.wicell.org#key-resources-table]) and load it with the following command\n>data <- read.csv(\"survivalData_from_Ceccarelli_LGG.csv\",\n    stringsAsFactors=FALSE, strip.white=TRUE,\n    check.names=FALSE, header=TRUE, fill=TRUE)",
    "Survival analysis\n>Risk_survival= survfit(Surv(OS_months, OS_status)∼ labels,\n      data=data)\n>pvalue_Risk_survival= survdiff(Surv(OS_months, OS_status)∼\n            labels, data=data, rho=0)\n>p.val= 1 - pchisq(pvalue_Risk_survival$chisq,\nlength(pvalue_Risk_survival$n) - 1)\nPlot the Kaplan-Meier curves (Figure 3[href=https://www.wicell.org#fig3])\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1534-Fig3.jpg\nFigure 3. Survival estimates of overall survival in TCGA lower-grade glioma patients\nKaplan-Meier plot shows survival probability of lower grade glioma patients with Homozygous-reference, Heterozygous and Homozygous alternate genotype for variant rs1131397. This variant is located on chromosome 1 at 154965759 genomic locus, where the reference base G is changed to C. The p-value was obtained by log-rank (Mantel-Haenszel) test. Here, P indicates p value.\n>par(mar=c(5,6,3,2), cex.axis=1, cex.lab=1, cex.main=1,\nfont.axis=1, font.lab=1, par(font=1))\n>plot(Risk_survival, lty=c(1,1), col=c(\"blue\", \"orange\", \"red\"),\nmark.time=TRUE, xlab=\"Follow up in months\", ylab=\"Overall\nsurvival\", lwd=1)\n>text(50, 0.05, paste0(\"P =\", \" \", format(p.val, scientific=TRUE,\ndigits=3)))\nMultivariate Cox regression analysis (Figure 4[href=https://www.wicell.org#fig4]): Convert the confounding clinical risk factors into ordinal scale\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1534-Fig4.jpg\nFigure 4. Multivariable Cox regression analysis\nCox regression analysis shows that lower grade glioma patients with minor allele of variant rs1131397 is associated with poor outcome. The significant p-value for the labels variable indicate that minor allele is an independent predictor of overall survival after adjusting for the confounding clinical risk factors. Here, Pr(>|z|) indicates p value.\nAge\nPercent_aneuploidy\nHistology: oligodendroglioma = 1; oligoastrocytoma = 2; astrocytoma = 3\nGrade: G2 = 1; G3 = 2\nIDH_status: Mutant = 1; WT = 2\nMutation_count\nChr1p/19q_codeletion: codel = 1; non-codel = 2\nMGMT_promoter_status: Methylated = 1; Unmethylated = 2\nChr7gain/Chr10loss: No combined CNA = 1; Gain chr 7 & loss chr 10 = 2\nTreatment_site: Other = 1; Duke = 2; Henry Ford Hospital = 3\nPrincipal component 3 (PC3)\n>variant.cox <- coxph(Surv(OS_months, OS_status) ∼ labels + Age +\n          Percent_aneuploidy + Histology + Grade +\n          IDH_status + Mutation_count + Chr7gainORChr10loss\n          + MGMT_promoter_status + Chr1OR19q_codeletion +\n          Treatment_site + PC3, data=data)\n>summary(variant.cox)",
    "The output for multivariate Cox regression analysis includes coefficient, hazard ratio, z-score and p value for each variant. As multiple variants are tested, it is important to correct the p values after Cox regression. In our study, 196,022 variants were tested. False discovery was performed through Bonferroni Correction.\nDetermine whether a given germline variant is predictive of increase or decrease in tumor mutation burden and responsiveness to immune checkpoint chemotherapy (Chatrath et al., 2021a[href=https://www.wicell.org#bib7]).\nFor germline variants that are significantly associated with a phenotype (increase or decrease of survival, tumor mutation burden, responsiveness to specific therapy), determine whether the variant is associated with differences in gene expression of nearby genes by performing expression quantitative trait loci (eQTLs) analysis. For more details on other downstream analyses that can be performed with germline variants, please refer to (Chatrath et al., 2021b[href=https://www.wicell.org#bib8])."
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Bioinformatics",
    "Systems Biology",
    "Cancer",
    "Genetics",
    "Sequencing"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}