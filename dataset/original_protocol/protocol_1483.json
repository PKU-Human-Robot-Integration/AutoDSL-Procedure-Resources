{
  "id": 1588,
  "origin_website": "Cell",
  "title": "Using EuGeneCiD and EuGeneCiM computational tools for synthetic biology",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nGenerating and preparing the necessary input files and file system structure\nTiming: minutes\nThe EuGeneCiD and EuGeneCiM codes have required input files which need to be arranged in the correct manner in the file system from which these codes are to be run. This section details how to create the necessary input files, the requisite file system structure, and other necessary pieces to use the EuGeneCiD and EuGeneCiM tools. This step is separated from running the EuGeneCiDM code to highlight that the preparation to run can be done quickly, whereas the actual running of the code might be slow.\nRetrieve the input conversion code. 27 versions of a Perl script are provided in the associated GitHub repository (located at github.com/ssbio/EuGeneCiDM/inputs) which will convert the unified input file into all the requisite input files for the unified EuGeneCiD/EuGeneCiM workflow. Download a copy of one of the Perl scripts (any one will do). Steps from this point will assume that the selected script is named “convert_input_Cd_nimply_Cu.pl” (though any of the other convert files would work equally well).\nPlace file in the required relationship. The unified input file and the convert script should be placed in the same directory location.\nUpdate the unified input reference in the convert script. The convert script reads a specific unified input file which is distinguished by the synthetic biology concept or database. This reference must be updated to point to your desired unified input. On line 19 of the convert script, replace the text in quotes with whatever “descriptor” was applied to the naming of the unified input in step 3.\nUpdate script name. Update the name of the convert script from “convert_inputs_Cd_nimply_Cu.pl” to “convert_inputs_descriptor.pl” to avoid confusion.",
    "Update comments. If versioning of the code is important to the reader, lines 3 and 4 should be updated to indicate who last edited the convert script and on what date, respectively.\nRun the code to convert the Excel version of the input. The convert code may then be run in one of two ways.\nRun as an executable file. The convert script may be run as an executable (for instance, double-clicking on the file in Windows) which will quickly run the code. The disadvantage to this approach is that the executable window will not remain open, so errors will be hard to identify and debug.\nRun through the command line. In the command prompt (Windows) or terminal (Mac OS or Linux) navigate to the file system that contains both the unified input and convert script, and use the command “perl convert_input_descriptor.pl” to run the script and retain the command line output.\nRun result. In either method, this should run very quickly, and create a directory named “descriptor_inputs” which should contain all 26 input files necessary for the combined EuGeneCiD/EuGeneCiM workflow, as well as a file named “log.txt” which describes certain statistics of the database and logic table of the unified input file. This log file can be useful for debugging later, see the troubleshooting 3[href=https://www.wicell.org#sec6.5]. Figure 5[href=https://www.wicell.org#fig5] shows all 27 filenames and types which result from applying the convert script to the unified input.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1026-Fig5.jpg\nFigure 5. Protocol file system prior to step 17",
    "This figure shows the file system structure necessary to run the GAMS code in step 17. This figure begins by showing the 27 text files that result from applying the convert script to the unified input. Note that all of these files are required, save log.txt which gives run information related to the convert script which is not use by subsequent steps. In the bottom left is three files which may need to be downloaded from GitHub, including the combined EuGeneCiD and EuGeneCiM workflow, the EuGeneCiM stand-alone code (optional), and the submit file (for batch runs). All of these files are to be placed inside the “descriptor” folder, which itself is contained inside the parent folder. Also contained in the parent folder are the required solver options file and the optimal parallel submit script (used in the parallelization section). Shown in bold are names given to the files or folder throughout the protocol, and shown in narrow font are file names as might appear in the user’s file system.\nNote: When running the convert script, multiple warnings will appear on the command line such as “Smartmatch is experimental at <pathway> line <number>”. This is normal and is to be expected. The experimental nature of Smartmatch has not, as of yet, caused any issues in code written by the authors which use this tool.\nDownload additional necessary files from GitHub. Three files need be downloaded from GitHub to perform the combined EuGeneCiD and EuGeneCiM workflow. These files have multiple copies in the GitHub repository, but the files associated with the Cadmium NIMPLY Copper (descriptor of “Cd_nimply_Cu”) conceptualization from Schroeder, Baber, and Saha (2021) will be used here (although any of the other 26 conceptualization will work equally as well). In this example, these files can be found in the “Cd_nimply_Cu” folder.",
    "CPLEX option file. The first file needed is named “cplex.opt” which specifies the options to use for the CPLEX solver.\nGAMS code file. The next file need is the EuGeneCiD and EuGeneCiM combined workflow script file, named “EuGeneCiDM_Cd_nimply_Cu.gms”.\nBatch run file. Required next is the file which allows us to submit the combined workflow in a batch run, named “sub.slurm”. This file may not be strictly necessary depending on the procedure used by the HPC resource available to the user, please consult the documentation of that resource’s documentations for details. These files are shown in the bottom half of Figure 5[href=https://www.wicell.org#fig5].\nCreating the requisite file system structure. The input files generated in step 4 and those downloaded in step 5 should next be moved into the file system where EuGeneCiD and EuGeneCiM will be performed. Figure 5[href=https://www.wicell.org#fig5] provides a visualization of the required file system which will be described here.\nChild and parent directories. All these files (29 in total, 30 if including the log file) should be placed in a single sub-folder where the user has editing permissions for its parent folder (output will be placed in the parent folder, as shown in Figure 6[href=https://www.wicell.org#fig6], and this file system structure facilitates parallelization, see “Parallelizing the EuGeneCiD and EugeneCiM Workflow”). Name the child folder “descriptor” (that is whatever descriptor you used in step 3).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1026-Fig6.jpg\nFigure 6. Protocol file system after step 17",
    "This figure shows the same file system as in Figure 4[href=https://www.wicell.org#fig4], but after step 17 (where the combined EuGeneCiD and EuGeneCiM code is run), highlighting where workflow results might be found. While the descriptor folder remains unchanged, now created will be several output files from the workflow which will appear in the parent director. This includes the simple report, detailed report, designs file, logic table output, circuit states, job out file, job error file, and listing file. As with Figure 3[href=https://www.wicell.org#fig3], shown in bold are names given to the files or folder throughout the protocol, and shown in narrow font are file names as might appear in the user’s file system.\nFile transfer protocols. It is highly recommended that, if using a High Performance Computing (HPC) resource, an FTP or data management system other than nppFTP is used, as nppFTP transfers files singly. Various tools, mentioned in “before you begin[href=https://www.wicell.org#before-you-begin]”, are available for this task, including Cyberduck and the Globus research data management system.\nNote: In future steps, for convenience, the folder in which the files generated in step 12 and downloaded in step 13 are contained will be referred to as the “descriptor folder”, whereas the folder in which it is contained will be referred to as the “parent folder”.\nNote: Depending on the HPC resource used, there may be limits as to from which file system a batch job may be run. Consult the documentation of the resource which you are using and place the parent directory appropriately.\nModify the files from GitHub. The files downloaded in step 5 will have to be modified for the user’s application and conceptualization.",
    "Modify the GAMS code. Several edits to the GAMS code should or can be made to both point to the correct input files and customize restrictions placed on the runs.\nUpdate file name. Begin by renaming the “EuGeneCiDM_Cd_nimply_Cu.gms” file to “EuGeneCiDM_descriptor.gms”.\nUpdate internal reference to other files. In the file renamed in step 7.a.i, edit the reference to the descriptor folder and the input files. This is most easily accomplished by performing a find-and-replace operation for the strings “Cd_nimply_Cu” and replacing all instances with “descriptor” (check, there should be 57 replacements made).\nUpdate internal documentation. If versioning and author tracking is important, please updates lines 22 (code authors) and 24 (date).\nDefine the number of solutions sought. To adjust the maximum number of solutions sought, adjust the value of the parameter “max_solns” defined on line 184 of the file “EuGeneCiDM_descriptor.gms”. The value is currently set to 1000, but as noted in Schroeder, Baber, and Saha (2021), for most applications this value will likely not need to be greater than 100 as the globally optimal solution (that is the solution with the strongest response, irrespective of the circuit size) generally is found within the first 100 solution.",
    "Define the maximum number of repeated parts usages in a single solution. Parameters are defined on lines 199 to 201 of the file “EuGeneCiDM_descriptor.gms” which restrict the maximum number of times are part can be used in a given circuit. These lines restrict the maximum number of times a particular promoter, transcript, or terminator respectively, can appear in any solution. At present, these are set at the default values of 3, 3, and 100, respectively, though the user may define these to whatever meets their design criteria. Note that if the number of allowed repeats is greater than the number of allowed triads in the solution, then there is effectively no limit (as in the case with the default terminator repetition limit, for example).\nDefine the minimum and maximum allowed design sizes. Lines 204 and 205 of “EuGeneCiDM_descriptor.gms” define the minimum and maximum allowed design sizes, respectively. The default values are 1 and 10, respectively. Depending on the complexity of the database and/or conceptualization, these may be adjusted to save time or increase the allowed solution space.\nModify the SLURM batch file. The reference in the SLURM batch file (“sub.slurm”) must be updated to point to the correct file. Line 9 should be rewritten to read “gams descriptor/EuGeneCiDM_descriptor.gms”. This file also defines various settings of the batch run including memory limit (line 4, given in MBs), and time limit (line 5, given in hours:minutes:seconds). Please adjust these lines accordingly for the HPC resource used, expected memory requirements, and for expected runtime. For the latter, example runtimes are provided in Figure 7[href=https://www.wicell.org#fig7] and S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1026-Mmc1.extension], though depending on the resources used, bioparts database, and sought logic, runtime may vary considerably.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1026-Fig7.jpg\nFigure 7. Holistic solution statistics for EuGeneCiD applied to 30 conceptualizations",
    "This three by ten grid reports on the general characteristics of the set of EuGeneCiD results for each of the 30 unique circuit conceptualizations. From the top to bottom of each grid, four items describing the results set are shown. First, is the number of solutions in that set. Second, is the percentage of results which are optimal (if this value is above 20%, green bar) or the percentage of results that are suboptimal (red, if the value of this is above 80%). Third is a number line, which indicates the solution set minimum and maximum sizes (in the number of triads in the design) and the mode size (the number is shaded blue). This number line is extended from zero to ten as ten is the maximum allowed circuit size (though no solution was created of this size). Finally, another number line shows the minimum and maximum solution times (in seconds) on a logarithmic scale. A large black line on the solution time range indicates the mean solution time.\nModify the solver options file. The solver options file (“cplex.opt”) can be adjusted to result in differences in solution accuracy, speed, and feasibility. See GAMS documentation for CPLEX options to learn more about what each specified option does (https://www.gams.com/35/docs/S_CPLEX.html[href=https://www.gams.com/35/docs/S_CPLEX.html]). Due to potential numerical issues, there is a required relationship between the values of one CPLEX option and arbitrary values used in the EuGeneCiD and EuGeneCiM formulations (e.g., our very small and very large values). See troubleshooting 4[href=https://www.wicell.org#sec6.7] for details.",
    "Critical: It should be noted that, due to the use of an arbitrary small number to force some infeasibilities, feasibility threshold options, such as “epint” or “eprhs” should not be increased to that number or greater, as this will result in nonsense solutions and render the EuGeneCiD and EuGeneCiM tools useless. The feasibility thresholds, such as “epint” and “eprhs” are options which allow the solver to use an infeasible solution so long as that infeasibility falls within certain bounds. For “epint”, binary and integer variables are allowed to vary from true binary or integer values by some small amount, whereas “eprhs” allows a constraint equation to be infeasible by some small amount. See troubleshooting 4[href=https://www.wicell.org#sec6.7] for details.\n(If Required) Adjusting EuGeneCiD and EuGeneCiM for other than two input signals\nTiming: minutes to hours\nThe EuGeneCiD and EuGeneCiM codes made available are for two input signals and any number of output signals. Obviously, circuits may be conceptualized which use other than two signals. These conceptualizations can be designed for and modeled by EuGeneCiD and EuGeneCiM so long as the mathematics and GAMS code is carefully updated. Detailed in this section are the steps to generalize the mathematics and code of EuGeneCiD and EuGeneCiM to accommodate fewer or more input signals for a desired conceptualization.",
    "Change the number of ligand set copies. There should be one set of all ligands and one set of desired ligands (the signals to which the circuit will respond) for each element of the desired ligands set. The latter set is defined in the logic table, see before you begin[href=https://www.wicell.org#before-you-begin] step 2. In the example code, the sets of all ligands are labeled “L1” and “L2”, where the sets of desired ligands are labeled “Ld” and “Ld1”. Duplicate (or remove) lines 79 through 82 to achieve the requisite number of set copies with unique handles.\nUpdate references to ligand sets in parameter, variable, and equation argument. For many parameters, variables, and equations, the two-ligands input is hardcoded, and will need to be changed. The following sub steps describe changes to the “EuGeneCiDM_descriptor.gms” code which need be made to change the number of signal inputs for which EuGeneCiD and EuGeneCiM design or model, respectively.\nCritical: Order of arguments is important. When updating references in parameters, variables, or equations, the order of arguments must stay constant. One easy way to ensure this is to use find and replace tools inherent in the user’s text editor of choice.\nParameters to update. Below is a list of parameters (in GAMS, this is the object type which does not change value when solving an optimization problem) whose arguments must be updated to the appropriate number of signals. They are written below as they appear in “EuGeneCiDM_descriptor.gms”. The two-input variation of the arguments is given on the LHS below, followed an example of how these arguments might appear in a three-input system, followed by the number of instances which should be replaced.",
    "Note: Sets with labels beginning with “Ld” (and similar such as Ld1) are the desired ligands set, which itself is a subset of the sets of all ligands (L1, L2, and similar).\nNote: Due to the number of references within the code, and that this procedure will alter line numbers in later steps, an exhaustive list of line numbers to change will not be included. Instead, the number of instances of this particular parameter in “EuGeneCiDM_descriptor.gms” will be listed alongside as square brackets. Also note that the number of instances may change with further versioning of the EuGeneCiD/EuGeneCiM algorithm and combined workflow, but this should help users determine if the find-and-replace tools are operating on approximately the correct number of instances. The specified changes are shown in Table 1[href=https://www.wicell.org#tbl1] below find-and-replace instances.\nVariables to update. Below is a list of variables (in GAMS, this is the object type which changes value when solving and optimization problem) whose arguments must be updated to the appropriate number of signals. They are written below as they appear in “EuGeneCiDM_descriptor.gms”. This section is formatted the same as step 11a.\nNote: When variables are instructed to be written in input files, generally they must be reported using an attribute label. For instance, when the value of “alpha(P,L1,L2)” in a particular solution is to be reported, it is written as “alpha.l(P,L1,L2)”. Thus, for the required changes are shown in Table 2[href=https://www.wicell.org#tbl2] below, along with the number of direct find-and-replace instances (unattributed instances), the number of instances where an attributed variable reference must also be updated is also given (attributed instances).",
    "Equations to update. Below is a list of equations (the GAMS object type which enforces optimization constraints) whose arguments must be updated to the appropriate number of signals. They are written below as they appear in “EuGeneCiDM_descriptor.gms”, followed by how they might be modified in a three-input case and the number of replacement instances. This section is formatted the same as step 9a. Table 3[href=https://www.wicell.org#tbl3] below shows the find-and-replace type changes needed, and the number of instances which need be replaced.\ntable:files/protocols_protocol_1026_1.csv\ntable:files/protocols_protocol_1026_2.csv\ntable:files/protocols_protocol_1026_3.csv\nUpdate nested loops over desired ligand elements. Throughout the “EuGeneCiDM_descriptor.gms” code are several instances where looping occurs over each element of the desired ligands set at each argument position for the desired ligands. When changing the number of ligands then, the number of these nested loops must be appropriately adjusted. The easiest method by which to find these nested loops is to search for the string “LOOP(Ld1” (this will find the innermost nested loop). The number of nested loops should be made equal to the number of elements in the desired ligand sets (e.g., if it is desired to have a three-input responsive circuit, then there should be three controlling loops over the desired ligands set). An example is given below on what the conversion would look like for the nested loops converting from the two-input signal GAMS code to the one-input and three-input versions.\nCode format in the two-input signal GAMS code (original):\n>LOOP(Ld,\n>\n>    LOOP(Ld1,\n>\n>            /∗code∗/\n>\n>    );\n>\n>);\nCode format in the one-input signal GAMS code (modified):\n>LOOP(Ld,\n>\n>    /∗code∗/\n>\n>);\nCode format in the three-input signal GAMS code (modified):\n>LOOP(Ld,\n>\n>    LOOP(Ld1,\n>\n>            LOOP(Ld2,\n>\n>                    /∗code∗/\n>\n>            );\n>\n>    );\n>\n>);",
    "Update mathematics related to ligand interactions. Some equations in EuGeneCiD and EuGeneCiM are written in a way unique to the number of input ligands, and therefore need to be adjusted to apply EuGeneCiD and EuGeneCiM to circuits with other than two inputs. This is done by increasing or decreasing the number of terms which account for the individual effects of ligands upon the activity of a promotor or enzyme in question and which prevent “double counting” of those effects. The number of such terms is dependent upon the number of elements in the desired ligands sets. In an effort to help the reader understand this statement, an example is provided in the note below.\nNote: Below is an example of one such equation which needs to be updated: “findalpha”.\nEquation:\n>findalpha(P,Ld,Ld1)\nGAMS Statement:\n>alpha(P,Ld,Ld1) =e= Z(P) + sum(E, (W(E,Ld,Ld1) ∗ I(P,E) ∗ H(P,E))) + I(P,Ld) ∗ H(P,Ld) + I(P,Ld1) ∗ H(P,Ld1) - (I(P,Ld1) ∗ H(P,Ld1) ∗ sigma(Ld,Ld1))\nMathematical Statement:\n   (Equation 1)       α  p  L d   L  d 1        =  Z p  +  ∑  e ∈ E    [   W  e  L d   L  d 1      I  p e    H  p e    ]  +  I  p  L d     H  p  L d            +  I  p  L  d 1      H  p  L  d 1     −  I  p  L  d 1      H  p  L  d 1      σ   L d   L  d 1          ∀ p ∈ P ;  L d  ,  L  d 1   ∈  L D",
    "Note that the last three terms are specific to the indices or arguments of   α   (both in number and identity thereof) and that necessarily the numbers of these terms will change with the number of ligands. The first two of these three terms add the contribution of each individual ligand upon the activity of the promoter under the given ligand conditions. The final term ensures that the effects of ligands are not “double counted” if the current element of    L d    is the same as that of    L  d 1    . The addition of the effect of each ligand to the RHS of Equation (1)[href=https://www.wicell.org#fd1] and the subtraction of each unique combination of ligands should persist for a EuGeneCiD or EuGeneCiM formulation which is generalized to any number of input ligand signals. For instance, if the circuit was to respond to three input signals, then the equation “findalpha” should be updated to appear as follows:\nEquation:\n>findalpha(P,Ld,Ld1,Ld2)\nGAMS Statement:\n> alpha(P,Ld,Ld1) =e= Z(P) + sum(E, (W(E,Ld,Ld1) ∗ I(P,E) ∗ H(P,E))) + I(P,Ld) ∗ H(P,Ld) + I(P,Ld1) ∗ H(P,Ld1) + I(P,Ld2) ∗ H(P,Ld2) - (I(P,Ld1) ∗ H(P,Ld1) ∗ sigma(Ld,Ld1)) - (I(P,Ld1) ∗ H(P,Ld1) ∗ sigma(Ld1,Ld2)) - (I(P,Ld) ∗ H(P,Ld) ∗ sigma(Ld,Ld2))\nMathematical Statement:",
    "(Equation 2)       α  p  L d   L  d 2        =  Z p  +  ∑  e ∈ E    [   W  e  L d   L  d 1      I  p e    H  p e    ]  +  I  p  L d     H  p  L d            +  I  p  L  d 1      H  p  L  d 1     +  I  p  L  d 2      H  p  L  d 2     −  I  p  L d     H  p  L d     σ   L d   L  d 1             −  I  p  L  d 1      H  p  L  d 1      σ   L  d 1    L  d 2     −  I  p  L d     H  p  L d     σ   L d   L  d 2          ∀ p ∈ P ;  L d  ,  L  d 1   ∈  L D      \nThis same mathematical update should be applied to each of the following equations:\n>findalpha(P,Ld,Ld1,Ld2)\n>findgamma(E,Ld,Ld1,Ld2)\n(Optional) Parallelizing the EuGeneCiD and EuGeneCiM workflow\nTiming: Minutes to Hours\nThe EugeneCiD and EuGeneCiM workflow can be easily parallelized for designing and modeling multiple circuit conceptualizations, particularly if the same bioparts database is to be used. In fact, this is the reason for a handful of oddities in the file structure and instructions, such as those specified in step 6. Detailed in this section are the additional steps which must be taken to run parallel instances of combined EuGeneCiD and EuGeneCiM workflow simultaneously. This procedure was used in Schroeder, Baber, and Saha (2021) to run batches for all 30 circuit conceptualizations in parallel.",
    "Build a new unified input file and file system. Depending on how different the circuit conceptualizations are, there are two different approaches to the first few steps of parallelizing the EuGeneCiD and EuGeneCiM workflow. If the same bioparts library or the same conceptualization is to be used between the two conceptualizations, then great savings in time and effort are possible. Given that “descriptor” has been used up to this point to describe the user’s first conceptualization, “descriptor_1”, “descriptor_2”, etc. will be used for further conceptualizations in an effort to avoid confusion.\nDifferent library and conceptualization. If both the database of bioparts and the conceptualization are different, the protocol must be largely repeated up to this point.\nCreate the new unified input. If the application is to use different bioparts, then before you begin[href=https://www.wicell.org#before-you-begin] steps 1–9 of should be repeated for the new conceptualization and bioparts library.\nCreate the necessary files and file system. Similarly, steps 1–11 should be repeated (as necessary for the optional sections) to create all necessary files and filesystem using “descriptor_1” in place of “descriptor”.\nNote: If both the bioparts library and conceptualization are different, little in the way of time savings will be noticed for the parallelization procedure.\nDifferent conceptualization, same library. If this is the case, follow this modified procedure which assumes all previous steps have been completed:\nMake the new unified input. The unified input for the first conceptualization (“descriptor”) can be copied and renamed to “unified_input_descriptor_1.xlsx”. Update the “Ligands”, “LogicTable”, and “other” file with the new conceptualization.\nMake the new convert code. Copy the convert script (“convert_input_descriptor.pl”) to the file “convert_input_descriptor_1.pl”. Following step 3, edit the file references in the code.\nRun the new convert code. Run the convert script for “descriptor_1” as described in step 4.",
    "Copy the “descriptor folder”. Copy the “descriptor” folder inside the parent folder, and rename the result to “descriptor_1”.\nRemove unnecessary files. Remove all files except the EuGeneCiD/M code, the EuGeneCiD stand-alone code (if present), and the submit file.\nPlace the new input files. Copy and paste the files generated in step 12.b.iii. into “descriptor_1”.\nUpdate file pointers. Following the procedure outlined in step 7, update the file names and references in the EuGeneCiD/M code.\nNote: If “descriptor” and “descriptor_1” have the same number of input signals for the circuit to respond to, then steps 8–11 do not need to be repeated.\nDifferent library, same conceptualization. This instance can follow the same procedure as step 12.b., save for step 12.b.i., which would involve editing the “Promoters”, “Transcripts”, “Enzymes&Protiens”, and “Terminators” sheets of the unified input instead of those related to the conceptualization.\nRepeat step 12 for each parallel instance desired. Repeat step 12 for each parallel instance of the EuGeneCiD and EuGeneCiM combined workflow which the user desires to create for “descriptor_2” through “descriptor_n” (using whichever descriptor text is appropriate).\nGet the parallel submit script file. By this step, the requisite files and file systems should be in place for running parallel instances of the combined EuGeneCiD and EuGeneCiM workflow. From the GitHub (at http://github.com/ssbio/EuGeneCiDM[href=http://github.com/ssbio/EuGeneCiDM]) copy the file “submit_all.pl” into the parent folder (see Figure 5[href=https://www.wicell.org#fig5]).\nUpdate the parallel submit script file. The parallel submit script should be updated to point to each submit file of each parallel EuGeneCiD/EuGeneCiM instance. Begin by deleting all lines from line 8 to the end of the file. Then, write the appropriate lines to submit batch runs for all parallel runs. This can be done by creating two lines for each descriptor (“descriptor_1” is used as an example below):\n>printf ”descriptor_1: ”;\n>system(“sbatch descriptor_1/sub.slurm”);",
    "The first line will print “descriptor_1” to the terminal so that when the system produces a response to the command to submit a batch for that conceptualization, that output is labeled. The second line submits the actual batch run using the SLURM job management system, as used by the authors.\nNote: The parallel submit script may need to be structured or written differently depending on the job management system used by the user’s choice of HPC resource(s).\nRunning the EuGeneCiD and EuGeneCiM combined workflow\nTiming: minutes to days\nThis section specifies how to run the combined EuGeneCiD/EuGeneCiM workflow using a SLURM batch management system as the authors have used for Schroeder, Baber, and Saha (2021).\nRunning from the correct file position. On the command line interface, navigate to the parent folder which contains the subfolder. The batch files will be run from this location, as it helps in parallelization if you wish to design for multiple conceptualizations simultaneously (see “Parallelizing the EuGeneCiD andEuGeneCiM Workflow”).\nSubmit the batch run. The submission procedure for the batch runs of the combined workflow are different for single runs and parallelized runs, as will be discussed in the following sub steps.\nSingle run. Submit the batch run with the command “sbatch descriptor/sub.slurm” (if not parallelizing runs).\nParallelized runs. If parallelizing runs, submit all batch runs with the command “perl submit_all.pl” (copied in step 14 and edited in step 15).",
    "Allow time for the runs to complete. Provided that the batch run (and parallel submit script, if needed) has been set up correctly, results will be available in as little as a few minutes, or as long as several days (the upper limit of the time allowed for the job is defined in step 7b). The speed of solution will depend on several factors including solver options (step 7c), parameterization of the solution space (step 7a), bioparts library (“before you begin[href=https://www.wicell.org#before-you-begin]” section), and power of the HPC resource used. Figures 7[href=https://www.wicell.org#fig7] and S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1026-Mmc1.extension] shows statistics on solution number, speed, size, and optimality for the application of the EuGeneCiD and EuGeneCiM workflow to 30 unique conceptualizations.\nNote: Generally, there will be some method, often command line, which will allow for checking on the status of the run. For this, the authors used the “squeue” command.\n(Optional) Running only EuGeneCiM for a pre-defined circuit design\nTiming: seconds to minutes\nSometimes, a particularly interesting solution will be put forth by EuGeneCiD which the user may wish to model out to a greater number of time points in order to better study its long-term behavior, or perhaps it is desired to model a dynamic circuit which EuGeneCiD could not have designed in the first place. For instance, the section “Adjusting EuGeneCiD and EuGeneCiM for Other than Two Inputs” and this one are combined in Schroeder, Baber, and Saha (2021) to model a repressilator circuit using only EuGeneCiM (which responds to the single ligand “none” which is a placeholder having no interactions with any biopart). Detailed here are the steps to run EuGeneCiM independently to model the behavior of a pre-defined circuit.",
    "Download, place, and rename the stand-alone EuGeneCiM code. Stand-alone EuGeneCiM code can be downloaded from the GitHub repository associated with this work at https://github.com/ssbio/EuGeneCiDM/Cd_nimply_Cu/[href=https://github.com/ssbio/EuGeneCiDM/Cd_nimply_Cu/].\nDownload the file. The filename will be “EuGeneCiM_only_Cd_nimply_Cu.gms” (note that as with other steps, other copies of this code exist in the repository, the “Cd_nimply_Cu” case is chosen for consistency and convenience).\nPlace the file. This file should be placed in the same directory as the “EuGeneCiDM_descriptor.gms”.\nRename the file. The file should be renamed to “EuGeneCiM_only_descriptor.gms” (where “descriptor” is the users description used elsewhere in this protocol).\nModifying the GAMS code for the user’s input files and file system. File references should be updated in this code in the same manner as detailed in step 7a. The only substantive difference is that, in step 7.a.i., instead of 57 replacements, 54 replacements should be made instead.\nProvide the GAMS code with the pre-defined circuit. Since EugeneCiM is a modeling tool, the circuit design must be provided to it in the form of design triads. This involves defining the parameter “M_design(P,J,T)” as 1 for each triad of a promoter, transcript, terminator. An example is provided for a three triad design between lines 240 and 255 of the file which should now be named “EuGeneCiM_only_descriptor.gms”. Another example can be found in the file “EuGeneCiM_rep.gms” at https://github.com/ssbio/EuGeneCiDM/Cd_nimply_Cu/[href=https://github.com/ssbio/EuGeneCiDM/Cd_nimply_Cu/]. Following these examples, define the circuit design to be modeled.\nSet the number of time points to model. If using this part of the protocol, it is often desired to model the given circuit for a longer period of time than done in a previous run of the combined EuGeneCiD and EuGeneCiM workflow. Edit the file “time_set_descriptor.txt” in the subfolder “descriptor” (which should be in the same folder as “EuGeneCiM_only_descriptor.gms”) to reflect the time points desired to be modeled.",
    "Note: The file “time_set_descriptor.txt” will accept any globally unique string as its set elements; however, for automatic plotting of results, these strings should be evenly spaced numbers beginning at time point zero (otherwise the plotting will not work well). Generally, this will be whole numbers (e.g., 0, 1, 2, etc.). Therefore, for instance, for modeling 100 time points, from 0 to 99 in intervals of 1, 100 unique elements must be defined like ‘0’, ‘1’, etc. up to ‘99’.\nRun from the correct file position. On the command line interface, navigate to the parent folder which contains the subfolder. The batch files will be run from this location, as it keeps the workflow consistent with the combined EuGeneCiD/EuGeneCiM workflow.\nRun the stand-alone EuGeneCiM. As a stand-alone tool, EuGeneCiM is very quick to run, and therefore submitting a batch run is unlikely to be necessary; therefore, simply run EuGeneCiM with the command “gams descriptor/EuGeneCiM_only_descriptor.gms”. EuGeneCiM only takes a few seconds to run for as many as 500 time points (note that it will be quick for larger sets of time points as well, this is simply the largest set so far attempted to be modeled by the authors).\nReading results and processing results into more human-readable formats\nTiming: seconds to minutes",
    "The output files which are produced by the combined EuGeneCiD and EuGeneCiM workflow are designed to some extent to be human-readable with the limited text-formatting abilities of GAMS. The first steps of this section (steps 24–26) will detail how to interpret some raw output files. Other files, particularly for hundreds of solutions, become too unwieldy for humans to read or process the amount of data. These files generally either exist for the purposes of troubleshooting or for processing by certain Perl scripts into more human-friendly formats. The latter steps of this section (steps 27 and 28) will focus on the use of Perl scripts which help summarize or convert certain results to make them more human-readable or user friendly.\nRead the circuit design file. The circuit design file is one of several outputs used to report the results of the EuGeneCiD and EuGeneCiM workflow which is focused on reporting the results of EuGeneCiD, and will be named “circuit_designs_file_descriptor.txt”. Two portions of an example circuit design file (results are for a Cadmium NIMPLY Copper circuit) are shown in Figure 8[href=https://www.wicell.org#fig8]A.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1026-Fig8.jpg\nFigure 8. Examples from the circuit design and simple report output files\nShown in this figure are pieces of two example output files (the circuit design and simple report files) of the EuGeneCiD and EuGeneCiM combined output (black text). Feature of note or interest are pointed to by blue open brackets or lines and comments are made about these features in blue text.\n(A) Shows both a successful and unsuccessful solution output to the circuit designs file for a Cadmium NIMPLY Copper circuit conceptualization.\n(B) Shows a portion of the simple report for the zeroth solution to the Cadmium NIMPLY Copper circuit conceptualization.",
    "When no solution is found for a given circuit size. The first portion (the first four lines) show what is written if no further solutions can be found at the given time point. Reported here is the failure (line 1), model status (line 2), solver status (line 3), and time it took for the solver to decide that there was no further solutions (line 4). Model and solver status code meaning can be found in GAMS documentation, though the authors have found the succinct summary at www.gamsworld.org/performance/status_codes.htm[href=http://www.gamsworld.org/performance/status_codes.htm] a useful reference.\nWhen a solution is found for the given circuit size. The remaining lines of output shown in Figure 8[href=https://www.wicell.org#fig8]A are the output to this file when a solution is found. Several solution metrics are reported here including objective value, circuit size, model status, solver status, and time to find the solution. Below this block of text is a table representing the designed circuit, with each row being one triad of the design (promoter, transcript, and terminator grouping).\nRead the simple report. The simple report is another of several outputs used to report the results of the combined EuGeneCiD and EuGeneCiM workflow which is focused on reporting the results of EuGeneCiD, and will be named “a_simple_EUGENECID_report_descriptor.txt”. A portion of a simple report for a single solution is shown in Figure 8[href=https://www.wicell.org#fig8]B.\nCircuit design report. Each simple report begins with a header indicating the solution number, followed by the triads of the circuit design (with each row representing one triad).\nLigand responsiveness report. The design report is followed by a “respondents to ligands” table, which specifies which bioparts respond to the desired ligands (ligands will be reported using their identifiers from the unified input).",
    "Enzyme responsiveness report. Similarly, a table of which enzymes are affected by which other enzymes (as determined through the attribution equations) is made.\nLigand condition reports. Following the three previously described reports, each possible combination of desired ligands is listed with three tables reporting on the EuGeneCiD results.\nTranscript production table. The first table reports transcript production and breaks down production into those that are deliberate and those caused by expression leakiness, in addition to reporting the amount predicted to be degraded.\nProtein production table. The next table lists the total protein production. A report is only made of a protein here if the protein concentration is non-zero.\nProtein expression table. The final table lists all proteins which are expressed and the value of the expression binary variable (   W  E  L d   L  d 1      ). If a protein fails to be expressed (by being inhibited or not meeting the concentration threshold), it will not be reported in this table.\nRead the logic tables output. The logic table file is another of several outputs used to report the results of the EuGeneCiD and EuGeneCiM workflow which is focused on reporting the results of EuGeneCiD, and will be named “circuit_designs_file_descriptor.txt”. Figure 9[href=https://www.wicell.org#fig9] shows an example of the logic table output file for one solution and the first time point when modeling that solution using EuGeneCiM.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1026-Fig9.jpg\nFigure 9. Example from the logic table output file\nShown in this figure is a portion of the logic tables output file of the EuGeneCiD and EuGeneCiM combined output (black text). Feature of note or interest are pointed to by blue open brackets or lines and comments are made about these features in blue text.",
    "Note: Other output files are generally quite large and useful primarily for debugging purposes, and therefore will not be discussed here. Please see the troubleshooting[href=https://www.wicell.org#troubleshooting] section.\nUse the statistics script to get holistic results. As already noted, many of the files are unwieldy too large, or not optimized for human readability. This issue is addressed by two Perl scripts that can help users understand general and specific trends in the solutions. The first is the statistics script, which reports on the general statistics of the set of solutions produced by EuGeneCiD. The following sub steps address how to use this script.\nDownload the statistics script from GitHub. The statistics script is named “get_results_statistics.pl”, and can be found in GitHub at http://github.com/ssbio/EuGeneCiDM/EuGeneCiDM_results_final[href=http://github.com/ssbio/EuGeneCiDM/EuGeneCiDM_results_final].\nCorrectly place the code. The statistics script should be placed in the parent directory.\nUpdate the descriptor reference. On line 12 of the script, replace the string inside the quotation marks with the user’s “descriptor”.\nCritical: If the descriptor does not match that used to name the output files of the combined EuGeneCiD and EuGeneCiM workflow, then the script will throw an error when the user attempts to run it.\nRun the statistics script. From the parent directory, run the statistics script using the command “perl get_results_statistics.pl” as shown in Figure 10[href=https://www.wicell.org#fig10]A.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1026-Fig10.jpg\nFigure 10. Results of two perl scripts created to analyze the results of the combined EuGeneCiD and EuGeneCiM workflow\n(A) Example command line output of Perl scripts to aid in analysis of results (green text). Features of particular interest are pointed to by white lines or brackets with white descriptive text.",
    "(B) Shown here is a portion of the logic tables output file of the EuGeneCiD and EuGeneCiM combined output (black text). Feature of note or interest are pointed to by blue open brackets or lines and comments are made about these features in blue text.\nRead the results of the statistics script. Figure 10[href=https://www.wicell.org#fig10]A shows an example result of running the statistics script for the Cadmium NIMPLY Copper circuit. This reports important metrics about the set of solutions produced by EuGeneCiD including the number of solutions; minimum, maximum, and mean solution times; minimum, maximum, and mode solution sizes (in number of triads); minimum and maximum objective values with the corresponding solution number; a tally of model statuses returned; a tally of solver statuses returned; and whether a fatal error has occurred.\nFatal error. On very rare occasions, a fatal error will occur when attempting to solve the first time point of EuGeneCiM, which will be reported here if one has occurred. These fatal errors are very rare and inconsistent in occurrence, resulting in no clear reason as to why these occur. As they only occur when implementing EuGeneCiM, it is possible to re-create the lost data using the solution design and steps 18–23 for a particular solution.\nUse the plot a solution script to get specific results in Excel format. As the opposite of the statistics script, the plot a solution script reports on the EuGeneCiM results of a single indicated solution. This report takes the form of a Microsoft Excel file with four sheets reporting on transcript production (“Trans_Prod” sheet), transcript level (“Trans_Level” sheet), enzyme production (“Enz_Prod” sheet), and enzyme level (“Enz_Level” sheet). The following sub steps address how to use this script.",
    "Download the statistics script from GitHub. The statistics script is named “plot_a_solution.pl”, and can be found in GitHub at http://github.com/ssbio/EuGeneCiDM/EuGeneCiDM_results_final[href=http://github.com/ssbio/EuGeneCiDM/EuGeneCiDM_results_final].\nCorrectly place the code. The plot a solution script should be placed in the parent directory.\nUpdate the descriptor reference. On line 16 of the script, replace the string inside the quotation marks with the user’s “descriptor” (assigning the string as the value of the “$gate” variable). On line 17 of the script, the numerical value assigned to the variable “$soln_num” should be replaced with the solution number that the user wishes to examine more closely. Note that this value should be less than or equal to the total number of solutions as determined in step 27.\nRun the statistics script. From the parent directory, run the statistics script using the command “perl plot_a_solution.pl”.\nRead the results of the statistics script. Figure 10[href=https://www.wicell.org#fig10]B shows an example result of running the statistics script for the Cadmium NIMPLY Copper circuit. This results in an excel workbook with four distinct sheets and 16 scatterplots showing different aspects of the modeled behavior of the chosen solution.\nEnzyme level results. Shown in Figure 10[href=https://www.wicell.org#fig10]B is an example “Enz_Level” sheet for the zeroth solution of the Cadmium NIMPLY Copper circuit conceptualization. This sheet contains tables for enzyme level at all time points across each of the four unique condition combinations. These values are then plotted in a scatter plot (one set of data per enzyme). Shown here are plots of tetR (red squares) and GFP (blue diamonds). Note that normally the generated graphs are overlapping, and they have been rearranged in this figure to be easier to see and read. Each sheet is similarly formatted, simply reporting different datasets.",
    "Enzyme production results. Similar in layout to the “Enz_Level” sheet, the “Enz_Prod” sheet reports on the rate of enzyme production at each time point under each ligand condition, both in table and scatterplot forms.\nTranscript level results. Similar in layout to the “Enz_Level” sheet, the “Trans_Level” sheet reports on the rate of enzyme production at each time point under each ligand condition, both in table and scatterplot forms.\nTranscript production results. Similar in layout to the “Enz_Level” sheet, the “Trans_Prod” sheet reports on the rate of transcript production at each time point under each ligand condition, both in table and scatterplot forms.\nNote: This code can be applied to the output of running only the EuGeneCiM code as well. The variable “$gate” in step 28.c. should be assigned the value “descriptor_CiM_only”, and the variable “$soln_num” should be set to 0 in this case."
  ],
  "subjectAreas": [
    "Biotechnology And Bioengineering",
    "Systems Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}