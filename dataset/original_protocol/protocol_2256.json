{
  "id": 2376,
  "origin_website": "Cell",
  "title": "Protocol to estimate cell type proportions from bulk RNA-seq using DAISM-DNNXMBD",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nHerein we describe Step-by-step methods for getting transcriptional data and corresponding cell type proportions data for the execution of DAISM-DNN. In this section, we provide detailed data processing steps and implementation of each module of DAISM-DNN.\nGet your transcriptional data\nTiming: 1 day\nFor both calibration samples and test samples, below is a general pipeline for preparation of RNA sequencing data for use with DAISM-DNN.\nRNA is isolated using the RNeasy Mini Kit (QIAGEN) when using PBMC samples according to the manufacturer’s instructions (please refer to https://www.qiagen.com/us/resources/resourcedetail?id=14e7cf6e-521a-4cf7-8cbc-bf9f6f a33e24&lang=en[href=https://www.qiagen.com/us/resources/resourcedetail?id=14e7cf6e-521a-4cf7-8cbc-bf9f6f%20a33e24&lang=en]).\nMeasure the concentration of RNA isolated from PBMC samples using Quantus™ Fluorometer.\nNote: Calibrate the Quantus™ Fluorometer before measurement. If quantitating samples of higher concentration than the standard, dilute the sample to ensure it is within the linear range of the standard (troubleshooting[href=https://www.wicell.org#troubleshooting] problem 2).\nCheck RNA integrity using Agilent 2100 Bioanalyzer.\nNote: RNA integrity is assessed as an additional measure of the sample RNA quality. The Distribution Value 200 (DV200) is the percentage of RNA fragments longer than 200 nucleotides. The lower is the DV200 value, the more degraded is the RNA in the sample. We recommend using samples with DV200 higher than 30% for following steps.\nPrepare 200 ng of total RNA in 5 μL of nuclease-free water for each sample.\nPause point: RNA samples can be stored at −80°C for several months.\nGenerate and sequence cDNA libraries from isolated PBMCs using the Illumina NovaSeq 6000 System or an equivalent platform.\nProcess sequence data\nTiming: 2 h\nFor processing RNA-seq data, quality assessment was carried out using fastp (Chen et al., 2018[href=https://www.wicell.org#bib2]).\nInstall fastp from the following sources: https://github.com/OpenGene/fastp[href=https://github.com/OpenGene/fastp].\nOnce fastp installed, run the following command for paired end data:\n> fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz",
    "Perform sequence alignment to targeted genes from GRCh38 using Salmon (Patro et al., 2017[href=https://www.wicell.org#bib7]) or an equivalent algorithm.\nInstall Salmon according to the tutorial: https://combine-lab.github.io/salmon/getting_started/[href=https://combine-lab.github.io/salmon/getting_started/].\nIn order to quantify transcript-level abundances, Salmon requires a target transcriptome. This transcriptome is given to Salmon in the form of a (possibly compressed) multi-FASTA file, with each entry providing the sequence of a transcript. Download the target transcript from Ensembl: http://asia.ensembl.org/info/data/ftp/index.html[href=http://asia.ensembl.org/info/data/ftp/index.html]. For example, we’ll be analyzing some human data, so we’ll download and index the homo sapiens transcriptome.\n> curl http://ftp.ensembl.org/pub/release-106/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz -o homo.fa.gz[href=http://ftp.ensembl.org/pub/release-106/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz%20-o%20homo.fa.gz]\nExtract a transcript-gene correspondence information file.\n> zgrep \">\" Homo_sapiens.GRCh38.cdna.all.fa.gz | sed 's/>//g' | sed 's/cdna.∗gene_symbol://g' | sed 's/description.∗//g' > gene_map.txt\nNext, we’re going to build an index on our transcriptome.\n> salmon index -t homo.fa.gz -i homo_index\nQuantifying the samples.\n> salmon quant -i homo_index -l A \\\n      -1 out.R1.fq.gz \\\n      -2 out.R2.fq.gz \\\n      -g gene_map.txt \\\n      -p 8 --validateMappings -o salmon_out/${samp}\nThe -i argument tells salmon where to find the index. -l A tells salmon that it should automatically determine the library type of the sequencing reads (stranded vs. unstranded etc.). The -1 and -2 arguments tell salmon where to find the left and right reads for this sample (notice, salmon will accept gzipped FASTQ files directly). -g refers to the correspondence between transcripts and genes. If not specified, the output is quantification of gene expression. Otherwise, the output is the quantification of transcript expression. Finally, the -p 8 argument tells salmon to make use of 8 threads and the -o argument specifies the directory where salmon’s quantification results should be written. You can read about salmon’s many options in the documentation (https://salmon.readthedocs.io/en/latest/[href=https://salmon.readthedocs.io/en/latest/]).",
    "Note: After the salmon commands finish running, you should have a directory named “salmon_out”, which will have a sub-directory for each sample. The main output file is called “quant.sf”.\nGet transcripts per million (TPM) normalization result from salmon output. Merge the quantification results from different samples via R package tximport.\n> library(tximport)\n> sampleList <- c(\"S1\", \"S2\", \"S3\", \"S4\", \"S5\", \"S6\", \"S7\", \"S8\", \"S9\", \"S10\") #replace with your sample list\n> fileList <- file.path(\"salmon_out/\", sampleList, \"quant.sf\")\n> names(fileList) <- sampleList\n> txi <- tximport(fileList, type = \"salmon\", txOut = T)\n> prefixOut <- \"result/salmon\"\n> write.table(txi$abundance, file=paste(prefixOut, \"TPM.txt\", sep=\".\"), sep= \"\\t\",row.names = T, col.names = NA, quote = F)\n> write.table(txi$counts, file=paste(prefixOut, \"readscount.txt\", sep=\".\"), sep=\"\\t\", row.names = T, col.names = NA, quote=F)\nCompute the total reads count for each sample (salmon.readscount.txt). Remove the samples those total reads count is less than 1 million.\nSave the TPM-normalization expression matrix with columns associated to sample ID and rows to genes specified using HUGO symbols as a tab-delimited file “caliexp.txt”.\nObtain paired cell type proportions from flow or mass cytometry\nTiming: 2 h\nEvery sample from calibration transcriptional dataset must have paired cell type proportions data for execution of DAISM-DNN.\nStains the sample with pre-selected antibodies that target surface and intracellular markers according to the manufacturer’s instructions (For mass cytometry, please refer to https://www.fluidigm.com/download/7266[href=https://www.fluidigm.com/download/7266]. For flow cytometry, please refer to https://enquirebio.com/flow-cytometry[href=https://enquirebio.com/flow-cytometry]).\nAcquire data on flow or mass cytometry.\nThe acquired data can be normalized and analyzed with Cytobank (https://community.cytobank.org/[href=https://community.cytobank.org/]) or other commonly used software for data cleaning, doublets, and dead cell removal.\nThe results were then exported as .fcs files for further analysis. Merge your FCS files from all samples using the cytofkit package (Chen et al., 2016[href=https://www.wicell.org#bib3]) in R (v3.6.3). And scale the data with cytofAsinh-transformation.\n>library(cytofkit)",
    ">file_name <- list.files(raw_fcs_dir,pattern='.fcs$', full=TRUE)#replace 'raw_fcs_dir' with your directory\n>combined_data <- cytof_exprsMerge(fcsFiles = file_name, transformMethod = \"cytofAsinh\", mergeMethod =\"all\")\n>combined_data <- as.data.frame(combined_data)\nPerform automated clustering with cytofkit using the FlowSOM algorithm (Van Gassen et al., 2015[href=https://www.wicell.org#bib11]), or an equivalent algorithm, such as Phenograph (Levine et al., 2015[href=https://www.wicell.org#bib4]).\n>cell_clusters <- cytof_cluster(xdata = combined_data[,cluster_marker], method = \"FlowSOM\", FlowSOM_k = 40)\n#if use phonograph alogorithm\n>cell_clusters <- cytof_cluster(xdata = combined_data[,cluster_marker], method = \" Rphenograph\", Rphenograph_k = 1000)\nNote: FlowSOM_k refers to number of clusters for meta clustering in FlowSOM. Rphenograph_k refers to integer number of nearest neighbours to pass to Rphenograph. “cluster_marker” refers to the subset antibodies users selected to identify specific populations in high-dimensional analysis.\nAfter every single cell was assigned to a cluster, manually annotate each cluster based on its marker expression pattern compared with patterns of known immune cell types. Use heatmap to visualize mean values of normalized markers expression in each cluster (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1863-Fig3.jpg\nFigure 3. Heatmap showing mean values of normalized markers expression in each cluster of CyTOF data\n>clustered_cells<-data.frame(combined_data[,cluster_marker], metacluster = cell_clusters)\n#produce Marker-Cluster Heatmap\n> heatmap_data <- clustered_cells %>%\n  group_by_at(c('metacluster')) %>%\n  summarise_if(is.numeric,mean,na.rm=TRUE)%>%\n  data.frame()\n>heatmap_data <- na.omit(heatmap_data)\n>row.names(heatmap_data)<-as.character(heatmap_data[,'metacluster'])\n>library(pheatmap)\n>pheatmap(mat=heatmap_data[,cluster_marker],\n      scale = \"none\",\n      display_numbers =TRUE)\nNote: The name of the cell type annotated to CyTOF data should be consistent with that of augmentation data (troubleshooting[href=https://www.wicell.org#troubleshooting] problem 3).\nCalculate the cell type proportions of each sample according to manual annotation of each cell. The calibration fraction file should be in the format of a matrix composed of columns associated to sample ID and rows to cell type.\n> cell_percentages <- cytof_clusterStat(data = clustered_cells, cluster = \"metacluster\", statMethod = \"percentage\")\n> cell_percentages = as.data.frame(cell_percentages)\n> cell_percentages = cell_percentages/100\n# change the rownames of cell_percentages according to your annotation.\nSave the calibration fraction file as a tab-delimited file.",
    "> write.table(cell_percentages, file=\"califra.txt\",sep=\"\\t\",quote=F)\nCritical: The same cell label should be used for a particular phenotype in both augmentation annotation table and calibration fraction file.\nGenerate dataset-specific training data via simulation modules of DAISM-DNN\nTiming: 5 min\nAfter expression profiles of test and calibration samples as well as corresponding cell type proportions are ready, users can start to run DAISM-DNN to achieve cell type proportion estimation. DAISM-DNN has two training set simulation modules. One is DAISM_simulation which uses DAISM strategy in generating mixtures (Figure 4[href=https://www.wicell.org#fig4]). The other is Generic_simulation which generates training set only using purified cells.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1863-Fig4.jpg\nFigure 4. Schematic of generating pseudo-bulk training datasets using DAISM mixing strategy\nBefore generating the training set, the users can keep a number of hold-out samples from the input calibration dataset so that they can verify the performance of trained DAISM-DNN model on the input dataset. The following command can be used to create the hold-out data:\nNote: In troubleshooting[href=https://www.wicell.org#troubleshooting] problem 4, we evaluated the effect of the size of training data generated from the same number of calibration samples on the deconvolution performance of DAISM-DNN.\n$daism split -caliexp ./example/caliexp.txt -califra ./example/califra.txt -n 6 -seed 777 -outdir ./example/\nThe expression profile and corresponding cell type proportions file of calibration samples were saved to example folder. Where -caliexp defines the expression profile of calibration samples; -califra: the cell type fraction file of calibration samples; -n: the number of hold-out samples from calibration samples; -seed: random seed; -outdir: the folder where the output files are stored. This step will generate four files: the expression profiles and ground truth cell fraction files of hold-out samples (hold_out_exp.txt and hold_out_fra.txt) and the rest of calibration samples (rest_cali_exp.txt and rest_cali_fra.txt).\nGenerate dataset-specific training data populated from a certain amount of calibration samples using DAISM simulation module:",
    "$daism DAISM_simulation -platform S -caliexp ./example/rest_cali_exp.txt -califra ./example/rest_cali_fra.txt -aug ./example/pbmc8k.h5ad -N 16000 -testexp ./example/testexp.txt -outdir ./\nWhere -platform defines the platform of augmentation data (S refers to single cell RNA-seq while R refers to RNA-seq); -aug: purified samples expression h5ad file used as augmentation, here we use pbmc8k.h5ad for example; -N: number of simulation samples, the DAISM package set N to 16,000 as default; -outdir: the folder where the output files are stored. This step will generate two files: an DAISM-generated artificial RNA expression profiles based on calibration samples augmented with the augmentation data (DAISM_mixsam.txt) and their corresponding cell fractions (DAISM_mixfra.txt).\nOptional: DAISM package also includes another simulation module which generates training dataset using only gene expressions of purified cells if the expression profile and corresponding cell type proportions of calibration samples are not available.\n$daism Generic_simulation -platform S -aug ./example/pbmc8k.h5ad -N 16000 -testexp ./example/testexp.txt -outdir ./\nPerform DAISM-DNN training\nTiming: 10 min\nA deep neural network can now be trained on the generated training data.\nUse the DAISM-generated artificial profiles (DAISM_mixsam.txt) and corresponding artificial cell fractions (DAISM_mixfra.txt) to train the neural networks.\n$daism training -trainexp ./output/DAISM_mixsam.txt -trainfra ./output/DAISM_mixfra.txt -outdir ./ -ncuda 0 -p\nWhere -ncuda defines the serial number of GPU; -p: include this option to report the performance of trained model on training and validation set.\nNote: The gene symbol and cell type list as well as the model will be saved in output folder specified.\nNote: If the artificial mixtures generated using only gene expressions of purified cells, it is recommended to use “-sum2one” parameter in training and prediction process (troubleshooting[href=https://www.wicell.org#troubleshooting] problem 5).",
    "Note: During the training process, DAISM-DNN randomly splits the training set and the validation set at a ratio of 8:2. DAISM-DNN will stop the training process when the validation error did not decrease for 10 epochs, and select the model producing the best results on the validation set as the final model for prediction. A “-p” option is provided to report the performance of the final model on the training set and validation set in terms of Pearson correlation between predicted fraction and ground truth in console.\nValidate hold-out samples on trained model\nTiming:  < 1 min\nUsers can validate the trained model on the hold-out samples (generated in step 19) to see if the desired performance can be achieved on test samples of interest.\nPredict cell type proportions of hold-out samples via DAISM prediction module:\n$daism prediction -testexp ./example/hold_out_exp.txt -model ./output/DAISM_model.pkl -celltype ./output/DAISM_model_celltypes.txt -feature ./output/DAISM_model_feature.txt -outdir ./\nRun the following command to evaluate the performance on hold-out samples. The output “metrics.txt” file reports the Pearson correlation, spearman correlation, Lin’s concordance correlation coefficient (CCC) and root-mean-square error (RMSE) between predicted fractions and ground truth.\n$daism metrics -pred ./output/DAISM_result.txt -gt ./example/hold_out_fra.txt -outdir ./\nWhere -pred defines the prediction file; -gt defines the ground truth cell type proportions file.\nEstimate cell type proportions via trained model\nTiming:  < 1 min\nAfter validating the performance of the trained model on hold-out samples, users can perform cell type proportion estimation on the test samples of interest.\nPredict cell type proportions of test data via DAISM prediction module:\n$daism prediction -testexp ./example/testexp.txt -model ./output/DAISM_model.pkl -celltype ./output/DAISM_model_celltypes.txt -feature ./output/DAISM_model_feature.txt -outdir ./\nOptional: DAISM package also provides one-stop DAISM-DNN module which integrates simulation, training and prediction in one command.",
    "$daism DAISM -platform S -caliexp ./example/caliexp.txt -califra ./example/califra.txt -aug ./example/pbmc8k.h5ad -N 16000 -testexp ./example/testexp.txt -outdir ./ -ncuda 0 -write\nWhere -write defines whether to write simulation expression profile and corresponding cell type proportions file to disk. If users choose not to save simulation products, remove -write parameter."
  ],
  "subjectAreas": [
    "Rnaseq",
    "Immunology",
    "Bioinformatics",
    "Flow Cytometry",
    "Mass Cytometry",
    "Cell Biology",
    "Gene Expression"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Bioengineering & Technology",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}