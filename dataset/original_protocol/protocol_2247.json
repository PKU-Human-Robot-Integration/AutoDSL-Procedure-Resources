{
  "id": 2366,
  "origin_website": "Cell",
  "title": "scQUEST: Quantifying tumor ecosystem heterogeneity from mass or flow cytometry data",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nInstall scQUEST and download dataset\nTiming: 15–30 min",
    "scQUEST is a Python package that runs on all operating systems (Windows, Linux, and MAC OSX) with Python (ideally version 3.8) installed. To simplify the installation process, we recommend using Miniconda (key resources table[href=https://www.wicell.org#key-resources-table]), as described below. The minimal hardware requirements to complete this protocol largely depend on the dataset used. As an example, to successfully complete this protocol using the supplied mass cytometry dataset of ∼13.5 million cells, a system with 16 GB of RAM is recommended. A detailed Jupyter Notebook tutorial with step-by-step instructions to reproduce all results and figures of this protocol is supplied (key resources table[href=https://www.wicell.org#key-resources-table]). Although prior knowledge of popular Python libraries (e.g., numpy, matplotlib, pandas) is a plus, it is still possible to follow all steps of the protocol using the supplied code in the Jupyter Notebook. Furthermore, additional detailed tutorials demonstrate how users can customize the analysis to fit their dataset or question or interest (key resources table[href=https://www.wicell.org#key-resources-table]). scQUEST runs on top of AnnData, a Python package for handling annotated single-cell datasets. For users without prior experience with AnnData, we strongly recommend the corresponding paper (Virshup et al., 2021[href=https://www.wicell.org#bib21]) (key resources table[href=https://www.wicell.org#key-resources-table]) to familiarize themselves with the structure of the AnnData object prior to executing this protocol. To simplify the use of this protocol, a pre-uploaded version of the mass cytometry dataset measured with the tumor epithelial cell-centric antibody panel from Wagner et al. (2019)[href=https://www.wicell.org#bib22] is included in scQUEST as an AnnData object. The dataset measured with the immune cell-centric antibody panel from Wagner et al. (2019)[href=https://www.wicell.org#bib22] is not included here and can be found in the original publication (key resources table[href=https://www.wicell.org#key-resources-table]). For users interested in using scQUEST with their own mass or flow cytometry data, we also provide a simple tutorial that illustrates how to load and process .",
    "fcs files, and construct an AnnData object (key resources table[href=https://www.wicell.org#key-resources-table]). We note that in our original paper Wagner et al. (2019)[href=https://www.wicell.org#bib22], our analyses focused on patient samples for which both a tumor epithelial cell-centric and an immune cell-centric measurement was available, resulting in 144 breast tumor and 50 non-tumor tissue samples. Since the original tumor epithelial cell centric-only measurements involved 23 additional tumor samples and nine additional non-tumor samples, we included these in the dataset provided with this protocol (AnnData object), resulting in the final dataset of 226 samples from 163 patients. We next outline all major steps and explain how to tailor the protocol to different datasets or analyses.",
    "Installation:\nIf you are new to Python, install the latest version of Miniconda (key resources table[href=https://www.wicell.org#key-resources-table]) according to your system specifications.\nOnce Miniconda is installed, open up your system terminal/console, create and activate a new virtual environment by typing:\n> conda create -y -n scquest python=3.8\n> conda activate scquest\nInstall scQUEST:\n> pip install ai4scr-scQUEST\nInstall Jupyter Notebook:\n> pip install jupyterlab\nDownload the supplied Jupyter Notebook tutorial (key resources table[href=https://www.wicell.org#key-resources-table]).\n> curl -o scQUEST_tutorial.ipynb https://raw.githubusercontent.com/AI4SCR/scQUEST/master/tutorials/scQUEST_tutorial.ipynb[href=https://raw.githubusercontent.com/AI4SCR/scQUEST/master/tutorials/scQUEST_tutorial.ipynb]\nIn your terminal/console, fire up a Jupyter Notebook by typing:\n> jupyter notebook scQUEST_tutorial.ipynb\nAlternatively, you can run the notebook on a remote host (e.g., an HPC environment). To do that, start the server on the remote:\n> jupyter notebook scQUEST_tutorial.ipynb --no-browser --port=8080\nand setup an SSH tunnel. On your local machine run:\n> ssh -L 8080:localhost:8080 <REMOTE_USER>@<REMOTE_HOST>\nNote: scQUEST automatically installs all dependencies, such as pandas, PyTorch, sklearn, and AnnData.\nExplore example dataset:\nLoad pre-uploaded mass cytometry dataset in an AnnData object by simply typing:\n> ad = scq.dataset.breastCancerAtlasRaw()\nExplore the AnnData object:\n> ad\nNotice that ad contains 13,384,828 single-cell measurements of 68 channels (stored in .X) with channel annotations (stored in .var). Cell-level annotations (stored in .obs) include various patient metadata, such as tissue type of origin or patient ID (patient_number).\nCell type assignment\nTiming: 1–2 h",
    "Identification of cell populations of interest is a common task in cytometry-based single-cell analyses, performed traditionally through gating, or, more recently, using clustering algorithms (e.g., PhenoGraph (Levine et al., 2015[href=https://www.wicell.org#bib15]) or FlowSOM (Van Gassen et al., 2015[href=https://www.wicell.org#bib19])). An emerging challenge is that often, the acquired single-cell measurements are in the order of millions of cells, which prohibits analyzing the whole dataset at once. A common solution is subsampling, which however implies that a large part of data will be discarded. In our previous work (Wagner et al., 2019[href=https://www.wicell.org#bib22]), we were interested in detecting cells of an epithelial phenotype among our ∼13.5 million single-cells dataset stained with 37 different antibodies, and designed an alternative approach to overcome this challenge. The main idea behind our approach was to cluster and annotate a smaller, representative subset of the whole dataset, acquired by a custom down-sampling approach (Figure 1[href=https://www.wicell.org#fig1]A, Tutorial: Downsampling and clustering, key resources table[href=https://www.wicell.org#key-resources-table]). This smaller dataset was clustered using PhenoGraph (Levine et al., 2015[href=https://www.wicell.org#bib15]), resulting in 42 clusters, which were in turn annotated as epithelial based on the expression of one or more of the following epithelial markers: Epithelial cell adhesion molecule (EpCAM), E-Cadherin, cytokeratin 5 (K5), K7, K8, K14, K18, and/or a pan-cytokeratin marker. All clusters negative for all the above markers were labeled as non-epithelial (Figure 1[href=https://www.wicell.org#fig1]B). The single-cell proteomic measurements with their class assignments were used to train a neural network classifier (Figure 1[href=https://www.wicell.org#fig1]C), that, once trained, was used to classify the remaining data into epithelial or non-epithelial (Figure 1[href=https://www.wicell.org#fig1]D). Here, we show how to perform these steps using the same annotated dataset, which is also supplied with scQUEST.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1854-Fig1.jpg\nFigure 1. Workflow for cell type assignment from single-cell mass cytometry data\n(A) Random subsampling step for large datasets.",
    "(B) Clustering of the data, cluster annotation by class based on the respective marker expression profiles, and labeling of each cell according to class.\n(C) Splitting the annotated data and using the training set to train a neural network to achieve an accurate class prediction for each cell. The test set is used to evaluate the model performance.\n(D) Using the trained neural network to assign the remaining cells to their respective class based on the marker expression profile. Some figure elements have been adapted from Wagner et al. (2019)[href=https://www.wicell.org#bib22].\nLoad and explore the annotated dataset, ad_anno:\n> ad_anno = scq.dataset.breastCancerAtlas()\nNotice how ad_anno consists of 687,161 single-cell measurements that have been previously clustered in 42 clusters (cluster label found in .obs['cluster']).\nThe 42 clusters have in turn been annotated as epithelial or non-epithelial based on marker expression. We see that in total, there are 484,279 non-epithelial and 202,882 epithelial cells (information included in .obs[celltype_class]).\nCritical: When working with your own data, you can use your algorithm of choice to cluster and annotate the single-cell measurements. It is critical, however, that the smaller, subsampled dataset that you will annotate is representative of the whole population of cells you want to analyze. See also troubleshooting[href=https://www.wicell.org#troubleshooting] for more information on how to evaluate the quality of your annotated dataset.\nPrepare the dataset for classification:\nFirst, subset the dataset such that it only contains the features/markers relevant for the classification (typically, the ones used for annotating the data).\nCreate a binary integer label with 0: non-epithelial and 1: epithelial:\n> ad_anno.obs['is_epithelial'] = (ad_anno.obs.celltype_class == 'epithelial').astype(int)\nApply the inverse hyperbolic sine (arcsinh) transformation and save the transformed data in a new layer of the AnnData object:\n> X = ad_anno.X.copy()\n> cofactor = 5\n> np.divide(X, cofactor, out=X)\n> np.arcsinh(X, out=X)",
    "> ad_anno.layers['arcsinh'] = X\nNormalize the data from 0 to 1 using a min-max scaler and save the results in a new layer of the AnnData object:\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1854-Fig2.jpg\nFigure 2. Distribution of marker expression per channel for epithelial (orange) and non-epithelial cells (blue) in the annotated training dataset\n> minMax = MinMaxScaler()\n> X = minMax.fit_transform(X)\n> ad_anno.layers['arcsinh_norm'] = X\nNote: Before training the classifier, you can visualize the data distribution per channel for epithelial and non-epithelial cells (Figure 2[href=https://www.wicell.org#fig2]). Notable differences in abundance for multiple marker channels are observed, among which are the epithelial markers (e.g., EpCAM, E-Cadherin), as expected.\nTrain the neural network classifier:\nInitialize the model by setting the dimensions of the input layer equal to the number of markers in the training data. Also set a seed for reproducibility:\n> clf = scq.Classifier(n_in=ad_anno.shape[1], seed=1)\nTrain the classifier:\n> clf.fit(ad_anno, layer='arcsinh_norm', target='is_epithelial', max_epochs=20, seed=1)\nNote: By default, the model architecture consists of 1 hidden layer of 20 neurons with a ReLU activation function and one output layer of two neurons. The dataset is split in a stratified fashion into training (90%) and test (10%) sets. Of the training set, 10% are used to validate the model. The classifier is trained using the Adam optimizer (Kingma and Ba, 2017[href=https://www.wicell.org#bib11]) with a learning rate of 0.001 and a batch size of 256. Its performance is evaluated using a standard cross-entropy loss function. Training is finalized after 20 epochs; we further use an early stopping criterion by terminating training when the model’s performance fails to improve for 10 consecutive runs. In our online documentation (key resources table[href=https://www.wicell.org#key-resources-table]), we provide an example on how to create custom model architectures.",
    "Examine model performance by assessing the performance of the classifier in the test data. Some additional ways to evaluate the model is by observing the evolution of the loss, the percentage of accurately predicted epithelial or non-epithelial cells in the form of a confusion matrix and the ROC curve (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1854-Fig3.jpg\nFigure 3. Assessing the performance of the classifier\n(A) Evolution of the loss during model training, with training loss indicated in blue, validation loss indicated in orange, and test loss indicated in green.\n(B and C) Confusion matrix and (C) receiver operator characteristic (ROC) curve, indicating very high accuracy in predicting epithelial and non-epithelial cells.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1854-Fig4.jpg\nFigure 4. UMAP projection of all single-cell measurements, marked with blue hues for non-epithelial cells (dark blue: annotated, light blue: predicted) and orange hues for epithelial cells (dark orange: annotated, light orange: predicted)\nCritical: If the model fails during training, a number of issues may be the reason. Check troubleshooting[href=https://www.wicell.org#troubleshooting] for possible solutions. It is important to make sure that your model is not overfitting the data. Overfitting occurs when the model fits precisely the training data, but cannot generalize to unseen test data. To learn how to detect and avoid overfitting, check troubleshooting[href=https://www.wicell.org#troubleshooting].\nOnce you are confident about the model performance, you can use the trained classifier to predict all epithelial cells across in the ∼13.5 million cell measurements:\nAgain, prepare the whole dataset for classification by applying an arcsinh transformation and scaling the data, as in step 4c:\n            > ad_pred = ad[:, ad.var.used_in_clf]\n            > X = ad_pred.X.copy()\n            > np.divide(X, cofactor, out=X)\n            > np.arcsinh(X, out=X)\n            > ad_pred.layers['arcsinh'] = X\n> X = minMax.transform(X)\n> ad_pred.layers['arcsinh_norm'] = X",
    "Critical: When scaling the unseen data, it is important to apply the min-max scaler that was fitted on the training data without re-fitting it on the new data (use transform instead of fit_transform).\nFeed the data to the classifier and save the results:\n> clf.predict(ad_pred, layer='arcsinh_norm')\n> ad.obs['is_epithelial'] = ad_pred.obs.clf_is_epithelial.values\nExamining the final classification results, you can see that the model classified the ∼13.5 million cells into ∼3.97 million epithelial cells and ∼9.4 million non-epithelial cells. The classification results can be further examined, for example by generating a dimensionality reduction uniform manifold approximation and projection (UMAP) plot (McInnes et al., 2018[href=https://www.wicell.org#bib25]). The UMAP plot shows the expected separation of epithelial and non-epithelial cells and at the same time, annotated and predicted cells of each respective class are well-mixed (Figure 4[href=https://www.wicell.org#fig4]).\nPhenotypic abnormality score\nTiming: 1–2 h",
    "Tumor cell heterogeneity is believed to be a source of cancer aggressiveness and an obstacle for complete elimination of tumor cells during therapy (Ramos and Bentires-Alj, 2015[href=https://www.wicell.org#bib17]). Molecular phenotypic deviation of breast tumor cells from normal mammary epithelial cells is routinely assessed in the clinic and has prognostic value, e.g., protein levels of estrogen receptor (ER), progesterone receptor (PR), human epidermal growth factor receptor 2 (HER2), and proliferation marker Ki-67 (Amin et al., 2017[href=https://www.wicell.org#bib1]). In our previous work, we showed how a type of unsupervised artificial neural network called an autoencoder (Goodfellow et al., 2016[href=https://www.wicell.org#bib6]; Hinton and Salakhutdinov, 2006[href=https://www.wicell.org#bib8]) could be used to comprehensively describe the phenotypic abnormality of breast tumor cells in relation to non-cancerous mammary epithelial cells. Briefly, we first trained a “reference” autoencoder with epithelial cells derived from juxta-tumoral non-cancerous mammary gland tissue so it could reconstruct their proteomic phenotypes (Figure 5[href=https://www.wicell.org#fig5]A). We then fed the trained autoencoder with a “query” dataset with tumor-derived epithelial cells to determine how much they had deviated from the reference phenotypes. The autoencoder calculated a mean squared error (MSE) of the reconstruction for each tumor cell, which represented the phenotypic abnormality (dissimilarity) of that cell to non-cancerous tissue-derived cells (Figure 5[href=https://www.wicell.org#fig5]B). A tumor-based phenotypic abnormality score was computed as the median score of all epithelial cells of a sample (Figure 5[href=https://www.wicell.org#fig5]C), and a tissue-based phenotypic abnormality score was computed as the median score of all cells of a tissue type (Figure 5[href=https://www.wicell.org#fig5]D). In our previous work, we observed a correlation of tumor phenotypic abnormality with features of abnormal growth conditions within the tumor ecosystem, such as a high number of cells positive for the proliferation marker Ki-67 and cells positive for the hypoxia marker carbonic anhydrase 9 (Wagner et al., 2019[href=https://www.wicell.org#bib22]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1854-Fig5.jpg",
    "Figure 5. Steps to compute the phenotypic abnormality scores per cell, tumor, and tissue type\n(A) Epithelial cells from juxta-tumoral tissue are used to train an autoencoder, which computes a reconstruction error for each cell.\n(B) Tumor-derived epithelial cells are fed to the trained autoencoder and a reconstruction error is computed for each cell.\n(C and D) From this, the median reconstruction error can be calculated per sample (C) and per tissue type (D). Some figure elements have been adapted from Wagner et al. (2019)[href=https://www.wicell.org#bib22].\nHere, we explain how to follow the same approach using as example the epithelial measurements of the supplied data.\nPrepare dataset:\nSelect a list of patient samples (patients) that will serve as reference (optional).\nSimilarly, select a list of markers (markers) as features of the input data.\nSubset the whole ad dataset to include only epithelial cells (ad.obs.is_epithelial == 1) from juxta-tumoral tissue (ad.obs.tissue_type == 'N') of the selected patient samples (ad.obs.patient_number.isin(patients)) and markers (ad.var.used_in_abnormality):\n> ad_train = ad[(ad.obs.patient_number.isin(patients)) & (ad.obs.tissue_type == 'N') & (ad.obs.is_epithelial == 1), ad.var.used_in_abnormality]\nPreprocess the dataset by applying the arcsinh transformation and min-max normalization, as in step 4c.\nTrain the abnormality autoencoder:\nInitialize the model by setting the dimensions of the input/output layer equal to the number of markers in the training data:\n> Abn = scq.Abnormality(n_in=ad_train.shape[1])\nFit the model to the training data:\n> Abn.fit(ad_train, layer='arcsinh_norm', max_epochs=20)\nAs in step 5c, the model performance can be evaluated in terms of the evolution of the loss.\nUse the trained abnormality autoencoder to reconstruct all epithelial cell measurements:\nSelect markers and preprocess the data\nad_pred = ad[ad.obs.is_epithelial == 1, ad.var.used_in_abnormality]\nX = ad_pred.X.copy()\nnp.divide(X, cofactor, out=X)\nnp.arcsinh(X, out=X)\nX = minMax.transform(X)\nad_pred.layers['arcsinh_norm'] = X\nReconstruct the measurements and estimate the mean squared error (MSE):\nAbn.predict(ad_pred, layer='arcsinh_norm')\nmse = (ad_pred.layers['abnormality'] ∗∗ 2).mean(axis=1)",
    "ad_pred.obs['abnormality'] = mse\nExamine the results across all juxta-tumoral tissue, mammoplasty, and tumor-derived epithelial cells by visualizing and comparing the min-max-normalized protein levels of the input data (Figure 6[href=https://www.wicell.org#fig6]A) with the reconstructed data (Figure 6[href=https://www.wicell.org#fig6]B) and the resulting reconstruction errors, called residuals (Figure 6[href=https://www.wicell.org#fig6]C). The autoencoder nicely reconstructs the protein expression patterns observed in cells derived from juxta-tumoral tissue and mammoplasty samples, resulting in close-to-zero reconstruction errors. For tumor-derived epithelial cells, the reconstruction errors are much more pronounced (Figure 6[href=https://www.wicell.org#fig6]C – rows labeled with green).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1854-Fig6.jpg\nFigure 6. Evaluation of the performance of the abnormality autoencoder\n(A) Normalized protein expression levels per epithelial cell and marker of the input data.\n(B) Normalized protein expression levels per epithelial cell and marker after reconstruction.\n(C) Reconstruction error (residuals) per cell and marker, ordered by tissue type mammoplasty (blue), juxta-tumoral (orange) and tumor (green). The order of cells is identical across (A), (B), and (C).\n(D–G) Phenotypic abnormality scores by (D) tissue type, (E) tumor grade, (F) estrogen receptor status, and (G) clinical subtype. M = mammoplasty, JT = juxta-tumoral, T = tumor, G = grade, ER = estrogen receptor.\nNote: The reconstruction errors and phenotypic abnormality score are not zero for juxta-tumoral-derived, non-cancerous epithelial cells of the training set because data reconstruction by the autoencoder is by definition lossy.\nCritical: Before drawing biologically relevant conclusions from the computed score, make sure your data are not confounded by batch effects (troubleshooting[href=https://www.wicell.org#troubleshooting]).\nSample individuality score\nTiming: 30 min",
    "Tumor ecosystems may represent unique compositions of tumor cell molecular phenotypes. To quantify and compare the individuality of tumors, in Wagner et al. (2019)[href=https://www.wicell.org#bib22] we applied a graph-based approach using the epithelial single-cell data from all samples. First, a k-nearest neighbor graph was constructed that placed phenotypically similar epithelial cells close to one another in the high-dimensional space (Figure 7[href=https://www.wicell.org#fig7]A). Then, for each cell, the respective sample origin labels of their k nearest neighboring cells were determined, and a probability distribution was computed based on its neighborhood proportion (Figure 7[href=https://www.wicell.org#fig7]B). For each sample, the median value of the probability distribution of all single cells belonging to that sample was computed, resulting in a sample x sample individuality matrix that quantified whether cells were more similar to cells of the same or to cells of other samples. Last, a sample individuality score was obtained using the diagonal of this matrix (Figure 7[href=https://www.wicell.org#fig7]C). This analysis revealed that tumors had higher individuality scores than non-cancerous tissue. We further observed higher individuality scores for grade 3 aggressive breast cancers compared with grade 1 and grade 2 less aggressive cancers. Here, we show how to apply this analysis using the single-cell epithelial measurements across all samples.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1854-Fig7.jpg\nFigure 7. Workflow for computing the sample individuality score\n(A) A k-nearest neighbor graph is constructed using all epithelial cells.\n(B) For each cell, the neighborhood proportion is computed for a chosen k.\n(C) The median neighborhood proportions for all cells of a sample are determined. Scores on the diagonal represent the sample individuality score. Some figure elements have been adapted from Wagner et al. (2019)[href=https://www.wicell.org#bib22].\nTo compute the sample-level individuality score, follow the steps below:\nPrepare the dataset:",
    "Subset the ad dataset to include only epithelial cells and selected markers (here, the same markers as in step 7b):\n> ad_indiv = ad[ad.obs.is_epithelial == 1, ad.var.used_in_abnormality]\nPreprocess the dataset by applying the arcsinh transformation, as in step 4c.\nSubsample 200 cells per sample (for samples that have less cells, use them all):\nad_indiv.obs['sample_id'] = ad_indiv.obs.groupby(['tissue_type', 'breast', 'patient_number']).ngroup()\ntmp = ad_indiv.obs.groupby(['sample_id']).indices\nn_cells = 200\nindices = []\nfor key, item in tmp.items():\n  size = min(len(item), n_cells)\n  idx = np.random.choice(range(len(item)), size, replace=False)\n  indices.extend(item[idx])\nindices = np.array(indices)\nad_indiv = ad_indiv[indices]\nInitialize the model and compute the individuality score:\n> Indiv = scq.Individuality()\n> Indiv.predict(ad_indiv, ad_indiv.obs.sample_id, layer='arcsinh')\nAssess the results:\nThe observation-level scores, i.e., one vector per single cell, indicating a cell’s similarity to all other samples, are saved in the .obsm attribute of the AnnData object, as a matrix of size n_cells x n_samples:\n> ad_indiv.obsm['individuality']\nThe aggregated sample-level scores (one vector per sample, indicating a sample’s similarity to all other samples) are saved in the .uns attribute of the AnnData object, as a matrix of size n_samples x n_samples:\n> ad_indiv.uns['individuality_agg']\nTo assess a sample’s individuality, we will use the diagonal of that matrix:\n>dat=pd.DataFrame(np.diag(ad_indiv.uns['individuality_agg']), index=dat.index, columns=['individuality'])\nFinally, assess the individuality score with respect to different patient clinical data (Figure 8[href=https://www.wicell.org#fig8]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1854-Fig8.jpg\nFigure 8. Association of individality score with clinical metadata\nSamples individuality scores by (A) tissue type, (B) tumor grade, (C) estrogen receptor status, and (D) clinical subtype. M = mammoplasty, JT = juxta-tumoral, T = tumor, G = grade, ER = estrogen receptor.\nCritical: Ensure your data are not confounded by batch effects (troubleshooting[href=https://www.wicell.org#troubleshooting])."
  ],
  "subjectAreas": [
    "Bioinformatics",
    "Flow Cytometry",
    "Cancer",
    "Mass Cytometry",
    "Single Cell"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Bioengineering & Technology",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}