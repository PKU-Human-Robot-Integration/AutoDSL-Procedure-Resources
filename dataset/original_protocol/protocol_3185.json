{
  "id": 3374,
  "origin_website": "Cell",
  "title": "A protocol to analyze single-cell RNA-seq data from Mycobacterium tuberculosis-infected mice lung",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nProcessing the single-cell RNA-seq data\nTiming: ∼ 4 h\nThese steps help researchers to preprocess the single-cell data and get it ready for downstream analysis once it comes out of the machine.\nQuality Control.\nNote: This section describes the process of quality control and decides on the filtering criteria of the scRNA-seq dataset including the installation of required R packages.\nInstallation and set up: Install all the R packages and set up the directories first and load the dataset in R.\nNote: We use several R packages to generate figures and intermediate data preprocessing, such as Seurat2[href=https://www.wicell.org#bib2] package (v.3.0.0), ggplot2,3[href=https://www.wicell.org#bib3] and biomaRt.4[href=https://www.wicell.org#bib4]\nExplore the data: To decide on the filtering criteria, explore the data and plot the total genes per cell and total mitochondrial genes per cell on a log scale.\nFirst filter and count a gene only if it has non-zero reads mapped. Then plot genes per cell for each sample separately.\nSecond, count the percentage of mitochondrial genes and plot mitochondrial genes per cell for each sample separately.\nThese steps help to decide on the filtering threshold.\n# 1a. Installation and setting up the directories\ninstall.packages('Seurat')\nlibrary(Seurat)\nlibrary(ggplot2)\n#please replace the “/PATH/TO/YOUR/DIRECTORY” with your project directory\nsetwd(/PATH/TO/YOUR/DIRECTORY)\nplots<- \"./output/\"\ncellranger_out<-\"./cellranger_output/\"\n# 1b: Explore the data #Change sample names as needed\nsamples<- c(\"TB1000A1\",\"TB1000A2\",\"TB1000A3\",\"TB1000A4\",\n      \"TB1000A5\",\"TB1000A6\",\"TB1000A7\",\"TB1000A8\")\nfor (i in 1:length(samples)){\n  data <- Read10X(data.dir = paste0(cellranger_out, samples[i]))\ngenes_per_cell <- Matrix::colSums(data>0)\npdf(file=paste0(plots,samples[i],\"_genes_per_cell_ordered.pdf\"),paper=\"USr\",width=11)\n  par(oma=c(0,0,2,0))\n  par(mfrow=c(1,1))\n  plot(sort(genes_per_cell), xlab='cell', log='y', main='genes per cell (ordered)')\n  title(main=paste0(samples[i]),outer=T)\n  dev.off()\n  mito.genes<-grep(pattern=\"ˆmt-\",x = rownames(x=data), value=TRUE)\n  mito_gene_read_counts = Matrix::colSums(data[mito.genes,])\n# compute percentage of mitochondrial genes per cell\n  pct_mito = mito_gene_read_counts / counts_per_cell ∗ 100\npdf(file=paste0(plots,samples[i],\"_mito_gene_per_cell.pdf\"),paper=\"USr\",width=11)\n  par(oma=c(0,0,2,0))\n  par(mfrow=c(1,1))\n  plot(sort(pct_mito))\n  title(main=paste0(samples[i]),outer=T)\n  dev.off()\n}\nCreate Seurat objects.",
    "Read the scRNA-seq dataset and create Seurat objects. Add the percentage of mitochondrial genes in the Seurat metadata and the conditions of the samples: uninfected, infected at d50, and infected at d100.\n## 2: create seurat objects\n# Set up condition 1: uninfected object\nfor (file in c(\"TB1000A1\",\"TB1000A2\")){\n  data <- Read10X(data.dir = paste0(cellranger_out, file))\n  data_obj <- CreateSeuratObject(counts = data, min.features = 200, min.cells = 3, project = file)\nmito.genes <- grep(pattern = \"ˆmt-\", x = rownames(x = data_obj), value = TRUE)\npercent.mito <- Matrix::colSums(x = GetAssayData(object = data_obj, slot = 'counts')[mito.genes, ]) / Matrix::colSums(x = GetAssayData(object = data_obj, slot = 'counts'))\n  data_obj[['percent.mito']] <- percent.mito\n  data_obj[[\"Dataset\"]]<-file\n  data_obj[[\"condition\"]]<-\"uninfected\"\n  assign(file, data_obj)\n}\n# Set up condition 2: infected d50 object\nfor (file in c(\"TB1000A3\",\"TB1000A4\",\"TB1000A5\")){\n  data <- Read10X(data.dir = paste0(cellranger_out, file))\n  data_obj <- CreateSeuratObject(counts = data, min.features = 200, min.cells = 3, project = file)\n  mito.genes <- grep(pattern = \"ˆmt-\", x = rownames(x = data_obj), value = TRUE)\n  percent.mito <- Matrix::colSums(x = GetAssayData(object = data_obj, slot = 'counts')[mito.genes, ]) / Matrix::colSums(x = GetAssayData(object = data_obj, slot = 'counts'))\n  data_obj[['percent.mito']] <- percent.mito\n  data_obj[[\"Dataset\"]]<-file\n  data_obj[[\"condition\"]]<-\"infected_d50\"\n  assign(file, data_obj)\n}\n#Set up condition 3: infected d100 object\nfor (file in c(\"TB1000A6\",\"TB1000A7\",\"TB1000A8\")){\n  data <- Read10X(data.dir = paste0(cellranger_out, file))\n  data_obj <- CreateSeuratObject(counts = data, min.features = 200, min.cells = 3, project = file)\n  mito.genes <- grep(pattern = \"ˆmt-\", x = rownames(x = data_obj), value = TRUE)\n  percent.mito <- Matrix::colSums(x = GetAssayData(object = data_obj, slot = 'counts')[mito.genes, ]) / Matrix::colSums(x = GetAssayData(object = data_obj, slot = 'counts'))\n  data_obj[['percent.mito']] <- percent.mito\n  data_obj[[\"Dataset\"]]<-file\n  data_obj[[\"condition\"]]<-\"infected_d100\"\n  assign(file, data_obj)\n}\nrm(data)\nrm(data_obj)\ngc()\nFilter followed by normalization.\nFilter cells that have unique feature counts over certain threshold. Thresholds are decided based on the plots of step 1bi (genes_per_cell_ordered.pdf) where “sorted genes per cell” is more consistent within the thresholds and sharply falls otherwise.",
    "Note: We filter cells that have unique feature counts over 4,500 or less than 1,100.\nSet threshold for the percentage of mitochondrial genes based on the mitochondrial gene plots of step 1bii for each of the sample (mito_gene_per_cell.pdf). Beyond this threshold, there is a sharp increase in the plot.\nNote: We choose different thresholds for mitochondrial genes because of their distinct distribution in each sample.\nMerge samples with similar conditions.\nNormalize data with default parameters, and detect most variable genes using the FindVariableFeatures function.\nNote: All the samples of this study are sequenced in one batch. So, we merge samples with similar conditions as these are biological replicates. If samples are obtained from different batches, user should check and normalize for batch effects.\n3. Filtering and normalization\nTB1000A1 <- subset(TB1000A1, subset = nFeature_RNA >1100 & nFeature_RNA < 4500 & percent.mito < 8)\nTB1000A2 <- subset(TB1000A2, subset = nFeature_RNA >1100 & nFeature_RNA < 4500 & percent.mito < 5)\n# TB1000A1 and TB1000A2 are uninfected\nTB1000A12 <- merge(x = TB1000A1, y = c(TB1000A2), add.cell.id = (\"TB1000A1\",\"TB1000A2\"))\nTB1000A12 <- NormalizeData(TB1000A12, verbose = FALSE)\nTB1000A12 <- FindVariableFeatures(TB1000A12, selection.method = \"vst\", nfeatures = 2000)\nTB1000A3 <- subset(TB1000A3, subset = nFeature_RNA >1100 & nFeature_RNA < 4500 & percent.mito < 8)\nTB1000A4 <- subset(TB1000A4, subset = nFeature_RNA >1100 & nFeature_RNA < 4500 & percent.mito < 9)\nTB1000A5 <- subset(TB1000A5, subset = nFeature_RNA >1100 & nFeature_RNA < 4500 & percent.mito < 6)\n# TB1000A3, TB1000A4 and TB1000A5 are infected at 50dpi\nTB1000A345 <- merge(x = TB1000A3, y = c(TB1000A4,TB1000A5), add.cell.id = c(\"TB1000A3\",\"TB1000A4\",\"TB1000A5\"))\nTB1000A345 <- NormalizeData(TB1000A345, verbose = FALSE)\nTB1000A345 <- FindVariableFeatures(TB1000A345, selection.method = \"vst\", nfeatures = 2000)\nTB1000A6 <- subset(TB1000A6, subset = nFeature_RNA >1100 & nFeature_RNA < 4500 & percent.mito < 6)\nTB1000A7 <- subset(TB1000A7, subset = nFeature_RNA >1100 & nFeature_RNA < 4500 & percent.mito < 7)",
    "TB1000A8 <- subset(TB1000A8, subset = nFeature_RNA >1100 & nFeature_RNA < 4500 & percent.mito < 8)\n# TB1000A6, TB1000A7 and TB1000A8 are infected at 100dpi\nTB1000A678 <- merge(x = TB1000A6, y = c(TB1000A7,TB1000A8), add.cell.id =c(\"TB1000A6\",\"TB1000A7\",\"TB1000A8\"))\nTB1000A678 <- NormalizeData(TB1000A678, verbose = FALSE)\nTB1000A678 <- FindVariableFeatures(TB1000A678, selection.method = \"vst\", nfeatures = 2000)\nPerform Integration and integrated analysis.\nCombine all samples using Seurat functions, FindIntegrationAnchors and IntegrateData.\nNote: This step integrates samples from different conditions.\nUse ScaleData to regress out a number of UMI’s and mitochondrial content.\nPerform Principal component analysis (PCA) with RunPCA.\nUse ElbowPlot to visualize the standard deviation of each PCA.\nNote: ElbowPlot helps to determine how many PCAs are needed to capture most of the variation in the data. In this study, we found 17 PCAs can capture majority of the variations.\nPerform t-SNE dimensionality reduction on the scaled matrix.\nNote: We use the first 17 PCA for dimensionality reduction.\nThe resolution parameter of the FindClusters function controls the granularity of the clustering, with higher values leading to more clusters.\nNote: There is no universally 'correct' resolution. However, user can try different values within this range and see which one best reflects data's biological variability.\nNext, visualize the clusters (Figure 1[href=https://www.wicell.org#fig1]) and save the integrated Seurat object (“immune.combined”).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2957-Fig1.jpg\nFigure 1. t-Distributed stochastic neighbor embedding (tSNE) visualization of different subsets of cells (all conditions together), colored according to different clusters\n# 4. Perform Integration and integrated analysis\nimmune.anchors <- FindIntegrationAnchors(object.list = list(TB1000A12, TB1000A345, TB1000A678), dims = 1:20)\nimmune.combined <- IntegrateData(anchorset = immune.anchors, dims = 1:20)\n# Run the standard workflow for visualization and clustering\nall.genes <- rownames(immune.combined)\nimmune.combined <- ScaleData(immune.combined, features = all.genes)\n#Perform linear dimensional reduction\nimmune.combined <- RunPCA(immune.combined, npcs = 30,features = VariableFeatures(object = immune.combined))\nDimPlot(immune.combined, reduction = \"pca\") + NoLegend()\n#ElbowPlot which visualizes the standard deviation\nElbowPlot(immune.combined)",
    "# Clustering\nimmune.combined <- FindNeighbors(immune.combined, reduction = \"pca\", dims = 1:17)\nimmune.combined <- FindClusters(immune.combined, resolution = c(0.4))\n# tSNE and UMAP\nimmune.combined <- RunUMAP(immune.combined, reduction = \"pca\", dims = 1:17)\nimmune.combined <- RunTSNE(immune.combined, reduction = \"pca\", dims = 1:17)\n#Figure 1[href=https://www.wicell.org#fig1]\nTSNEPlot(object = immune.combined, label=F)\nsaveRDS(immune.combined, file = \"./immune.combined.rds\")\nCluster analysis and cell type identification\nTiming: ∼ 4 h\nThese steps help researchers to perform cluster analysis and to know the process of identification of cell types.\nIdentify major cell types.\nIdentify the non-immune and major immune cell types using the key genes and top marker genes.\nNote: Since in this study, most of the cells are lymphoid cells due to the prior purification for live cells,1[href=https://www.wicell.org#bib1] we focus on characterizing the lymphoid cell subsets only.\nThe composition of cell types varies across different tissues. For instance, brain tissue is characterized by the presence of neurons, astrocytes, oligodendrocytes, and microglia, whereas blood typically contains lymphocytes, neutrophils, monocytes, among others. Such cellular diversity or heterogeneity has significant implications for the interpretation of scRNA-seq data. Hence, it is crucial to account for these differences during clustering and differential expression analyses.\nFurthermore, tissue samples may be subject to batch effects. These effects could occur if the samples undergo processing at different time points or if they are handled by distinct individuals. Tools like Seurat and Harmony offer features for batch correction, including Integration and Harmony methods, that are invaluable in managing these potential discrepancies.\nIdentify the marker genes in each cluster and focused on the top 10 markers based on p-values.",
    "Note: These are the key genes that help to understand the type of cells within the cluster. If the user uses a specific database to determine the marker genes of any particular cell type, the user should also consider determining if gene signatures in related tissue type as well, since gene expressions can vary based on the type of tissue.\nLook into the expression of known marker genes.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2957-Fig2.jpg\nFigure 2. tSNE plot with the expression of different known cell markers\nThe expressions of these genes help to characterize distinct major cell types.\nNote: Immune cells can be identified as clusters expressing Ptprc, T cells expressing CD3d, Cd4, CD8b1, Natural killer (NK) cells expressing Gzmb, Ncr1, B cells expressing CD79a, etc (Figure 2[href=https://www.wicell.org#fig2]). Known maker genes helps to identify major cell types, and with that top markers of each cluster can enable further clustering of cell sub populations.\nName the clusters by their corresponding major cell types to visualize.1[href=https://www.wicell.org#bib1]\nNote: Identify the major cell types only as we will do re-clustering the lymphoid cells in the next step since majority of the cells in this dataset are lymphoid cells.\n# 5a: Identify top 10 markers of each cluster\nall.markers = FindAllMarkers(immune.combined, min.pct = 0.25, logfc.threshold = 0.25, only.pos = TRUE)\n# sort all the markers by p-value\nall.markers.sortedByPval = all.markers[order(all.markers$p_val),]\ntop10 <- all.markers.sortedByPval %>% group_by(cluster) %>% do(head(., n=10))\nwrite.csv(top10,\"top10_findallMarkers_onlyPos.csv\")\n# 5b: Look into the expression of known markers\nDefaultAssay(immune.combined) <- \"RNA\"\n#Figure 2[href=https://www.wicell.org#fig2]\nFeaturePlot(object = immune.combined, features = c( \"Ptprc\", \"Cd3d\",\n\"Cd4\", \"Cd8b1\", \"Gzmb\",\"Ncr1\",\"Cd79a\", \"Mki67\", \"Cd7\"), cols = c(\"grey\", \"blue\"), reduction = \"tsne\")\n# 5c: tSNE visualization colored by major cell-types\nnew.cluster.ids <-\nc(\"lymphoid\",\"lymphoid\",\"lymphoid\",\"lymphoid\",\"lymphoid\",\"lymphoid\",\"lymphoid\",\"lymphoid\",\"lymphoid\",\"lymphoid\",\"lymphoid\",\n          \"lymphoid\",\"myeloid\",\"myeloid\",\"non-immune\",\"lymphoid\",\"lymphoid\",\"lymphoid\",\"myeloid\",\"myeloid\",\"myeloid\")\nnames(new.cluster.ids) <- levels(immune.combined)\nimmune.combined <- RenameIdents(immune.combined, new.cluster.ids)\nTSNEPlot(object = immune.combined)",
    "Re-cluster the lymphoid cells only and identify the cell subtypes. To identify the cell subtypes of each cluster, subset the lymphoid cells and perform cluster analysis.\nRe-clustering with lymphoid cells only.\nNote: The process is similar to the previous cluster analysis with all cells. To obtain a better resolution of cell subtypes, re-cluster analysis can be performed.\nFind top markers of each lymphoid cluster.\nNote: Top markers help to identify the cell subtypes of each cluster.\nExpression of top marker genes.\nNote: Investigate the expression of interested top marker genes.\nExpression of known marker genes.\nNote: Investigate any known lymphoid marker genes along with top marker genes to know the cell type of a cluster. Using only one method is not enough to get a cell identity.1[href=https://www.wicell.org#bib1]\nPlot the clusters. Plot can be split for each condition (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2957-Fig3.jpg\nFigure 3. tSNE visualization of different subsets of lymphoid cells, colored according to cellular identity, split by conditions\nUninfected, n = 2; infected D50, n = 3; infected D100, n = 3.\nNote: Clusters can also be renamed based on their respective cell identity and then visualized.\n# 6a: Re-clustering with lymphoid cells only\nDefaultAssay(immune.combined) <- \"integrated\"\nlymphoid_cluster <- subset(immune.combined, idents =\nc(0,1,2,3,4,5,6,7,8,9,10,11,15,16,17))\nall.genes <- rownames(lymphoid_cluster)\nlymphoid_cluster <- ScaleData(lymphoid_cluster, features = all.genes)\nlymphoid_cluster <- RunPCA(lymphoid_cluster, npcs = 30,features = VariableFeatures(object = lymphoid_cluster))\nlymphoid_cluster <- RunTSNE(lymphoid_cluster, reduction = \"pca\", dims = 1:20)\nlymphoid_cluster <- FindNeighbors(lymphoid_cluster, reduction = \"pca\", dims = 1:20)\nlymphoid_cluster <- FindClusters(lymphoid_cluster, resolution = c(0.4))\nsaveRDS(lymphoid_cluster, file = \"./lymphoid.combined.rds\")\n# 6b: Find markers of each lymphoid cluster\nall.markers = FindAllMarkers(lymphoid_cluster, min.pct = 0.25, logfc.threshold = 0.25, only.pos = TRUE)\n# sort all the markers by p-value\nall.markers.sortedByPval = all.markers[order(all.markers$p_val),]\ntop10 <- all.markers.sortedByPval %>% group_by(cluster) %>% do(head(., n=10))\nwrite.csv(top10,\"top10_findallMarkers_lymphoid_onlyPos.csv\")\n# 6c: Expression of top genes in different clusters",
    "markers.to.plot <- c(\"Ebf1\",\"Ifi30\",\"Ifit3\",\"Ifi27l2a\",\"Vpreb3\", \"Spib\", Sp140\",\"Rtp4\",\"Fcmr\",\"Ms4a1\",\"Mzb1\",\"Il7r\",\"Tcf7\",\"Lef1\",\"Ctla4\",\"Cxcr3\",\n\"Cxcr6\",\"Icos\",\"Maf\",\"Tnfrsf4\",\"Cd7\",\"Ctla2a\",\"Il2rb\",\"Ccl5\",\"Cx3cr1\",\"Zeb2\",\"Lag3\",\"Cd40lg\",\"Stat1\",\"Igtp\",\"Ifng\",\"Rora\",\"S100a4\",\"Gbp4\",\"Gbp2\",\"Fcer1g\",\"Gzmb\", \"Gzma\",\"Gzmk\",\"Tnfrsf17\", \"Foxp3\")\nDotPlot(lymphoid_cluster, features = rev(markers.to.plot), cols = c(\"blue\", \"red\"), dot.scale = 8) + RotatedAxis()\n# 6d: Expression of known marker genes\nDefaultAssay(lymphoid_cluster) <- \"RNA\"\nFeaturePlot(object = lymphoid_cluster, features = c(\"Ptprc\",\"Cd79a\",\"Ms4a1\",\"Cd3d\",\"Cd3e\",\"Cd4\",\"Cd8b1\",\"Cd8a\",\"Gzmb\",\"Ncr1\", \"Sell\",\"Ccr7\",\"Cd44\",\"Ifng\",\"Rora\",\"Foxp3\"), cols = c(\"grey\", \"blue\"), reduction = \"tsne\")\n#Figure 3[href=https://www.wicell.org#fig3]\nDimPlot(lymphoid_cluster, reduction = \"tsne\",label = TRUE, split.by = \"condition\")\n# 6e: Rename the clusters with respective subtypes\nnew.cluster.ids <- c(\"B naive\",\"CD8+T naive\",\"NK_1\",\"CD4+T naive\",\"CD4+T\nact_1\",\"CD8+T eff\",\"CD4+T IFN+\",\"CD8+T act_1\",\"CD8+T act_2\",\n            \"CD4+T act_2\",\"B act_1\",\"B mem\",\"B/T\ndoublets\",\"NK_2\",\"NK_3\",\"B act_2\",\"Plasma_1\",\"Plasma_2\")\nlymphoid_cluster <- RenameIdents(lymphoid_cluster, new.cluster.ids)\n#To visualize the clusters by labeling the cell sub-types\n#all together\nDimPlot(lymphoid_cluster, reduction = \"tsne\",label = TRUE)\n#split by conditions\nDimPlot(lymphoid_cluster, reduction = \"tsne\",label = TRUE, split.by = \"condition\")\nTranscriptional differences among different conditions\nTiming: ∼ 4 h\nThese steps help researchers to perform differential analysis of samples from different conditions. This section also discusses the process pathway enrichment analysis using PANTHER.5[href=https://www.wicell.org#bib5]\nNote: In this study, we want to identify the transcriptional changes in the mouse lung due to the Mtb infection.\nDifferential analysis.\nUse Findmarkers from Seurat for the differential analysis with default parameters. Change the assay to “RNA” before performing the analysis.\nNote: In this study, we compare infected vs uninfected mice separately for d50 and d100 (infected d50 vs uninfected and infected d50 vs uninfected), and for each cluster at a time point.\n# 7: Differential analysis to compare infected vs uninfected mice\nlymphoid_cluster$condition.DE <- paste(Idents(lymphoid_cluster), lymphoid_cluster$condition, sep = \"_\")\nlymphoid_cluster$condition <- Idents(lymphoid_cluster)\nIdents(lymphoid_cluster) <- \"condition.DE\"\ntotal_clusters<-18\nfor (i in 0:(total_clusters-1)){\n  rm(infected_d50_vs_uninfected)\n  rm(infected_d100_vs_uninfected)\n  infected_d50_vs_uninfected<- FindMarkers(lymphoid_cluster, ident.1 = paste0(i,\"_infec_d50\"), ident.2 = paste0(i,\"_uninfected\"), verbose = FALSE)\n  infected_d100_vs_uninfected<- FindMarkers(lymphoid_cluster, ident.1 = paste0(i,\"_infec_d100\"), ident.2 = paste0(i,\"_uninfected\"), verbose = FALSE)\n  infected_d50_vs_uninfected<- subset(infected_d50_vs_uninfected, p_val_adj<0.05)\n  infected_d100_vs_uninfected<- subset(infected_d100_vs_uninfected, p_val_adj<0.05)\nwrite.csv(infected_d50_vs_uninfected,paste0(\"./DE_cluster_\",i,\"_infected_d50_vs_uninfected.csv\"), row.names = FALSE)\nwrite.csv(infected_d100_vs_uninfected,paste0(\"./DE_cluster_\",i,\"_infected_d100_vs_uninfected.csv\"), row.names = FALSE)\n}\nPathway enrichment analysis.",
    "Perform over-representation test using the PANTHER website.5[href=https://www.wicell.org#bib5] PANTHER is a web-based tool where user can provide the differential gene list, choose the parameters and the software enables the analysis. This need to be done separately for each gene list (differentially expressed genes) and up/down regulated.\nNote: We use the Reactome pathway database with Fisher’s exact test and corrected for multiple tests using a false discovery rate with default parameter settings as calculated by the Benjamini-Hochberg procedure.6[href=https://www.wicell.org#bib6]"
  ],
  "subjectAreas": [
    "Genomics",
    "Immunology",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}