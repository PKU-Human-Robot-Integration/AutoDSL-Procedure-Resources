{
  "id": 19674,
  "origin_website": "Wiley",
  "title": "Protein Structural Modeling for Electron Microscopy Maps Using VESPER and MAINMAST",
  "procedures": [
    "This protocol provides guidance on using the VESPER program to align two experimentally determined cryo-EM maps or to fit an atomic structure either determined by an experimental method or modeled using a computational tool into a cryo-EM map. The input required for this protocol is the reference experimental cryo-EM map and either a simulated cryo-EM map of an atomic structure or an experimental EM map. Transformations of the top 10 or user-specified number of superimpositions along with transformed models are outputted.\nNecessary Resources\nHardware\nAny computer with Linux or macOS operating system, at least i5 processor, and 16 GB RAM\nSoftware\nPython version 3.8.10 or higher (https://www.python.org/downloads/[href=https://www.python.org/downloads/])\nNumpy version 1.21.0 or higher (https://numpy.org/install/[href=https://numpy.org/install/])\nSciPy version 1.7.0 or higher (https://scipy.org/install/[href=https://scipy.org/install/])\nFFTW version 3.3.10 (http://www.fftw.org/download.html[href=http://www.fftw.org/download.html])\nPyMOL version 2.4.1 or higher (optional), which is used for visualization, (https://pymol.org/2/[href=https://pymol.org/2/])\nGCC compiler version 9.4.0 or higher (https://gcc.gnu.org/[href=https://gcc.gnu.org/])\nFiles\nTwo cryo-EM maps in the format of MRC or CCP4\nInstall VESPER program\n1. Download the VESPER code from the VESPER GitHub page by opening the command line window and type:\n         \ngit clone https://github.com/kiharalab/VESPER\n2. In the command line window, change the working directory to the directory containing VESPER code as follows:\n         \ncd /your_path_to_VESPER/VESPER_code/\n3. Compile VESPER source code to generate an executable version of the code called VESPER, then move it to VESPER main directory:\n         \nmake\ncp VESPER ../\nRun VESPER program\n4. Prepare input files by downloading a cryo-EM map from EMDB (https://www.emdataresource.org/[href=https://www.emdataresource.org/]) and a protein structure from PDB (https://www.rcsb.org/[href=https://www.rcsb.org/]).",
    "As an example, we used the structure of the Hsp90/Cdc37/Cdk4 complex, which has EMD-3342 and a fitted PDB entry, 5FWM. EMD-3342 is determined at resolution 8 Å and has the author-recommended contour level of 0.015. To show the ability of VESPER to find the best fitting for PDB entry 5FWM in EMD-3342, we first randomly rotated and shifted the atomic structure, 5FWM.\n5. Generate a simulated cryo-EM map from the atomic structure using the molmap function in Chimera (https://www.cgl.ucsf.edu/chimera/[href=https://www.cgl.ucsf.edu/chimera/]) as shown below, or using any other software.\nOpen Chimera and run the following commands on the Chimera command line:\n         \nopen path_to_PDB_file/file_name.pdb (open PDB structure)\nopen path_to_EM_map_file/map_file.mrc (open the EM map to which the PDB structure is fitted into)\nmolmap #0 [map_resolution] onGrid #1 (generate a simulated map using the experimental map properties)\nvolume #2 save path_to_save_map/file_name.mrc (save the generated EM map)\n6. Open the command-line window to run the VESPER command and specify the different parameters as follows:\nVESPER -a [MAP1.mrc] -b [MAP2.mrc] (other parameters) > [VESPER_output_filename]\n-a: Path to the reference cryo-EM map\n-b: Path to the target cryo-EM map\n-t: Density threshold of the reference map, default = 0.00\n-T: Density threshold of the target map, default = 0.00\n-s: Sampling grid space for resampling the EM maps, default = 7.0 Å\n-A: Sampling angle interval for defining a set of rotations, i.e., 360 ÷ angle interval, default = 30°\n-c: Number of CPU cores used for running VESPER in parallel, default = 2\n-g: Bandwidth of the gaussian filter, default = 16.0, and sigma = 0.5 × (float number)\n-N: Refine top [int] models, default = 10\n-S: Show top models in PDB format, default = false\n-V: Vector product mode, default = true\n-L: Overlap mode, default = false\n-C: Cross-correlation coefficient mode, default = false",
    "-P: Pearson's correlation coefficient mode, default = false\n-F: Laplacian filtering mode, default = false\n-E: Evaluation mode of the current position, default = false\nVESPER output is written to a file named VESPER_output_filename, which includes the top 10 or user-specified number of transformations applied on the target EM map to align it with the reference EM map, along with several scores evaluating the alignments. Also, the output file has the vector information of the top models. Each vector is represented by two atoms, Cα for the start position and Cβ for the end position.\nFor our example, we used 3 Å and 10° for voxel spacing and angle interval, respectively. Regarding density contour level, we used the author-recommended contour level for experimental map EMD-3342 and 0.2 for the simulated EM map of transformed 5FWM. Also, we used 20 CPU cores, which took about 20 min to complete the computation.\n         \ntable:\n﻿0\nVESPER -a emd_3342.map -b molmap_5fwm_transformed.mrc -t 0.015 -T 0.2 -s 3 -A 10 -c 20 -S true > vesper_result_3_10.txt\n7. To transform a target density map according to the rotation and translation of each of the top alignments in VESPER output, run the following command:\npython transform_em_map.py [parameters]\n-i1 or --input1: Name of the reference EM map file\n-i2 or --input2: Name of the target EM map file\n-t: Name of the result file from VESPER\n-odir (optional): Directory to store the generated transformed target EM map files. If not specified, the transformed target maps would be written to the current directory.\ntable:\n﻿0\npython transform_em_map.py -i1 emd_3342.map -i2 molmap_5fwm_transformed.mrc -t vesper_result_3_10.txt\nThe names of output files would have the following format: target_transform_model_#.mrc, in which # specifies the model number starting from 1.\nCalculating normalized Z-score for top models in VESPER output file",
    "8. To calculate the normalized Z-score of the top models in the VESPER output file, run the cluster_score.py script as follows:\npython cluster_score.py -i [VESPER_output_filename] -c [Clustering cutoff] -o [Output_filename]\n-i: Name of the input file\n-c: Clustering cutoff for Z-scores which is used as follows: [Clustering cutoff × (Maximum DOT score – Minimum DOT score)] and it ranges from 0 to 1, default = 0.2\n-o: Output filename (optional): Name of the output file to store the normalized Z-scores of the models. If not specified, the output file would have the same name as the input filename followed by .normzscore\ntable:\n﻿0\npython cluster_score.py -i vesper_result_3_10.txt -o normalized_Z_score_emd3342.txt\nThe output file will contain the Z-score of each model in the input file, one line for each model as shown below:\nVisualizing VESPER results\n \n         \ntable:\n﻿0,1\nNormalized z-score for top 10 models:,Normalized z-score for top 10 models:\n#0,16.768505095477142\n#1,16.7211460976927\n#2,16.677474206555694\n#3,16.49780033833288\n#4,15.465432251303666\n#5,15.44975116092615\n#6,15.382853401143898\n#7,15.26661155761643\n#8,15.138023713287225\n#9,15.070875549608642\n9. To visualize the reference EM map (Fig. 3A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0003]), open PyMOL and run the following commands on the PyMOL command line:\n         \nbg_color white (this command changes the background color from black to white)\nset normalize_ccp4_maps, 0\nload xxxx.mrc (replace xxxx with the EM map file name)\nisosurface xxxx_isosurface, xxxx, reference_contour_level (replace reference_contour_level with the author-recommended contour level of the reference map in EMDB)\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/dc17148c-8007-4d0e-981d-568b039838ca/cpz1494-fig-0003-m.jpg</p>\nFigure 3",
    "Results of the VESPER program on EMD-3342 and simulated map of PDB entry 5FWM. (A) Experimental map EMD-3342, (B) EMD-3342 in gray and the vector representation of the top model by VESPER of protein complex PDB: 5FWM. The top model is shown as a set of spheres of different colors, where blue means that the matched vectors of the two EM maps are aligned well, green means no alignment, and red represents the alignment in opposite directions. (C) EMD-3342 in gray and the top model of VESPER in cyan, which has an RMSD of 3.44 Å.\n10. To visualize the PDB file containing vector representation of top models by VESPER (Fig. 3B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0003]), open PyMOL and run the following commands on the PyMOL command line:\n         \nload xxxx.pdb, discrete =1 (replace xxxx by the file name you chose earlier in step 3)\nset transparency, 0.4\nhide cartoon, xxxx\nshow spheres, xxxx\nspectrum b, rainbow_rev, xxxx\nThe PDB structures of top models will be shown as a set of spheres representing vectors, and spheres are colored based on their DOT score.\n11. To visualize any of the MRC files of the top superimposed models generated in step 4 (Fig. 3C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0003]), open PyMOL and run the following commands in the PyMOL command line:\n         \nload target_transform_model_#.mrc (Replace # with the model number you want to visualize)\nisosurface model#_isosurface, target_transform_model_#, target_contour_level (replace target_contour_level by the contour level used for the target map)",
    "This protocol provides guidance on using the VESPER web server for fitting an atomic model in a cryo-EM map or aligning two cryo-EM maps in a fast manner. Users can align two EM maps in a few steps without the need to download or install any files. Also, users can specify only a few parameter values while the rest of the parameters would have their default values. The Input required for this protocol is two cryo-EM maps or their EMDB IDs. An e-mail of the result files will be sent to the user after the computation is completed.\nNecessary Resources\nHardware\nAny up-to-date computer with internet access\nSoftware\nAn up-to-date web browser such as Google Chrome (https://www.google.com/chrome/[href=https://www.google.com/chrome/]) or Mozilla Firefox (https://www.mozilla.org/en-US/firefox/[href=https://www.mozilla.org/en-US/firefox/])\nPyMOL (optional), which is used for visualization (https://pymol.org/2/[href=https://pymol.org/2/])\nFiles\nBesides using the search boxes to enter specific cryo-EM map IDs from EMDB, users can upload their cryo-EM maps. The density maps to be uploaded are in the format of MRC or CCP4.\nSubmit a job to the VESPER web server\n1. Open the web browser and type the URL https://kiharalab.org/em-surfer/vesper.php[href=https://kiharalab.org/em-surfer/vesper.php]. Figure 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0004] shows the VESPER web page, which contains a brief description of VESPER and how it works, three main boxes for specifying parameters, and the submit and reset buttons.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/00231d16-af1a-4e1a-83f6-43df592d4c6c/cpz1494-fig-0004-m.jpg</p>\nFigure 4\nScreenshot of the main page of the VESPER web server.\n2. In the first box, Step 1 (Search parameters), specify voxel spacing in Angstroms to be applied on density maps. Three voxel spacing options are available, which are 5, 7, and 10 Å. The default voxel spacing is 7 Å. The second parameter to specify is the angular search degree. Choose one of the four angular search intervals, which are 20°, 30°, 60°, and 90° degrees.",
    "For the example in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-prot-0001], the Hsp90/Cdc37/Cdk4 complex which has EMD-3342 and a fitted 5FWM, we used 5 Å and 20° for voxel spacing and angle interval, respectively.\n3. The second box, Step 2 (Query maps), is for specifying cryo-EM maps and their density contour levels. You can either enter the EMDB ID of both reference and target maps or upload your density maps. For each map, specify the contour level to be used for that map.\nHere, we uploaded emd-3342 and the simulated map of transformed 5FWM, as specified in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-prot-0001]. For contour level, we used 0.015 and 0.2 for emd-3342 and the simulated map of randomly transformed 5FWM, respectively.\n4. In the last box, Step 3 (Email), enter a valid e-mail address, to which you want to receive VESPER results.\n5. Once all parameters are entered, click on the submit button, which will show the following message: “Your request has been submitted! Once the result is ready, the result files will be sent to the e-mail specified.” After the computation is completed, you will receive an e-mail from [email protected][href=https://currentprotocols.onlinelibrary.wiley.com/cdn-cgi/l/email-protection] titled “VESPER Calculation Result” with the results attached. The size of density maps along with voxel and angle intervals affect the amount of computation time needed. Small density maps will take a couple of minutes to be processed by VESPER.",
    "6. The VESPER result e-mail will have a link to download archived result files, which include the following: an EM map of the reference structure, one PDB file that contains vectors in the target map, 10 MRC files for each of the top 10 models of the target EM map named target_transform_model_#.mrc, one text file contains normalized Z-scores of the top 10 alignments, and the VESPER_README.pdf file containing descriptions of result files and directions on how to visualize them.\nVisualizing VESPER results\n7. To visualize VESPER output files, follow steps 9, 10, and 11 of Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-prot-0001]. The only difference in the commands is in the file names. Use Reference.mrc for the reference map file in step 9 and customMapResult.pdb for the PDB file containing vector representation of top models in step 10.",
    "This protocol provides guidance on using MAINMAST for building a protein main chain directly from a cryo-EM map of resolution ∼4–5 Å or better. The required input files for this protocol are the reference cryo-EM map, protein chain sequence, and predicted secondary structure from protein sequence. The output is a Cα model of the protein main chain, from which a full-atom model could be constructed then refined.\nNecessary Resources\nHardware\nAny computer with Linux or macOS operating system, at least an i5 processor, and 16 GB RAM\nSoftware\nFortran version 9.4.0 or higher (https://fortran-lang.org/[href=https://fortran-lang.org/])\nMap2map procedure from SITUS package version 3.0 or higher (http://situs.biomachina.org/[href=http://situs.biomachina.org/])\nSPIDER2 (https://github.com/yuedongyang/SPIDER2[href=https://github.com/yuedongyang/SPIDER2])\nPULCHRA version 3.04 or higher (https://www.pirx.com/pulchra/[href=https://www.pirx.com/pulchra/])\nPyMOL version 2.4.1 or higher (optional) for visualization: (https://pymol.org/2/[href=https://pymol.org/2/])\nFiles\nCryo-EM map of up to the size 150×150×150 (in the current setting, can be changed in the code)\nFASTA file which contains protein sequence\nSPD3 file which contains the secondary structure predicted by SPIDER2 (Fig. 5[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0005])\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/aae22dc2-bcfe-4824-9a9a-50b98a69a80d/cpz1494-fig-0005-m.jpg</p>\nFigure 5\nScreenshot of the SPD3 file generated by SPIDER2 for Chain A of PDB: 4CI0.\nInstall MAINMAST program\n1. Download MAINMAST source code from https://kiharalab.org/mainmast/Downloads.html[href=https://kiharalab.org/mainmast/Downloads.html].\n2. Open the command-line window and change the working directory to the directory containing the archived file. Then, unarchive MAINMAST.tgz by typing:\ntar zxvf MAINMAST.tgz\nA new directory named MAINMAST/ will be generated.\n3. Change the directory to MAINMAST by typing:\n         \ncd MAINMAST\n4. Compile the source code of the two main programs of MAINMAST by typing the following commands in the command-line command:\n         \ngfortran MAINMAST.f -O3 -fbounds-check -o MAINMAST -mcmodel = medium\ngfortran ThreadCA.f -O3 -fbounds-check -o ThreadCA -mcmodel = medium\nThese commands will generate two executable programs, named MAINMAST and ThreadCA.\nRun MAINMAST program\n5. Prepare the following input files:",
    "a.If the density map is in MRC format, convert it to SITUS format by running the map2map procedure from SITUS packages as follows:\n               \necho 2|map2map density_map_name.mrc density_map_name.situs\nb.Predict protein secondary structures from protein amino acid sequence using SPIDER2 by running the following command:\n               \nrun_local.sh protein_seq_filename.seq\nAs an example, we used chain A of F420-reducing [NiFe] hydrogenase Frh, which has an EMD-2513 of resolution 3.36 Å and a fitted PDB structure with ID 4CI0. Chain A was manually segmented from the density map using Chimera's “zone tool.”\n6. Run the first part of the MAINMAST program, which is called MAINMAST, to trace the protein main chain from the density map. The MAINMAST command identifies local dense points (LDPs) in the density map, which then are connected by a Minimum Spanning Tree (MST). After that, the MST is refined by a tabu search algorithm. The output is a PDB file representing each LDP in the longest path of the MST as a Cα atom.\n         \nMAINMAST -m [density map file in situs format] (options) > path.pdb\nOptions in version 2.0:\n         \n-Tree: Show MST mode\n-Graph: Show graph mode\nParameters for the mean shift clustering algorithm:\n         \n-gw: Bandwidth of the gaussian filter; default = 2.0, sigma = 0.5 × [float]\n-Dkeep: Keep edge where distance < [float], default = 0.5\n-t: Threshold of density values, default = 0.0\n-allow: Max shift distance < [float], default = 10.0\n-filter: Filter of representative points, default = 0.1\n-merge: After the mean shift clustering, merge if distance < [float], default = 0.5\nParameters in Tabu-search:\n         \n-Nround: Number of iterations, default = 5000\n-Nnb: Number of neighbors, default = 30\n-Ntb: Size of tabu-list, default = 100\n-Rlocal: Radius of Local MST, default = 10",
    "-Const: Constraint of total length of edge, default = 1.01, Total(Tree) < [float] × Total(MST)\nFor our example, we used default parameter values except for density contour level and Dkeep, which determines the edge weight threshold used in the mean shift clustering algorithm, for which we used 0.045 (author-recommended contour level × 0.5), and 1.5, respectively. The output of the first part is shown in Figure 6A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0006], which is a Cα model representing the LDPs on the longest path of the MST. This model is used as an input for the next step.\n \n         \ntable:\n﻿0\nMAINMAST -i zoned_A.mrc -c 20 -t 0.045 -k 1.5 -R 10 > path.pdb\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/8646bc1d-87c6-47b7-a790-baca7dfe1cf8/cpz1494-fig-0006-m.jpg</p>\nFigure 6\nMAINMAST output of EMD-2513, chain A. (A) The longest path of the MST i.e., path.pdb, (B) the LDPs generated by the mean shift clustering algorithm, (C) MST generated using tree mode in MAINMAST, (D) all edges using graph mode in MAINMAST.\n7. Run the second part of the MAINMAST program, which is called ThreadCA, to map the amino acid sequence on the longest path of the MST, as shown below. You can determine the direction of threading the protein amino acid sequence on the longest path in the refined tree graph from MAINMAST. The output of ThreadCA is a Cα model of the predicted protein chain.\n         \nThreadCA -i [output file from MAINMAST] -a [20AA.param] -spd [*.spd3] (options)\nOptions in version 1.0:\n         \n-i: Result file of MAINMAST\n-a: 20AA.param\n-spd: Resulted file of SPIDER2\n-fw: Filter width, default = 1.0\n-Ab: Average length of CA-CA Bond, default = 3.5\n-Wb: Weight of Bond score, default = 0.9\n-r: Reverse mode, reverse protein main chain order",
    "For chain A, we assigned the amino acid sequence in reverse order and used 1.3 and 3.4 for the parameters fw (filter width) and Ab (average length of C-C bonds), respectively. Default values were used for the other parameters. The output of ThreadCA, which is the Cα model of chain A is shown in Figure 7A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0007].\n \n         \ntable:\n﻿0\nThreadCA -i path.pdb -a 20AA.param -spd 4CI0_A.spd3 -fw 1.3 -Ab 3.4 -Wb 0.9 -r >A_CA_reversed.pdb\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/76f0ede3-4511-4b28-8952-4d0366168a63/cpz1494-fig-0007-m.jpg</p>\nFigure 7\nThe modeled protein structure by MAINMAST from EMD-2513, chain A. (A) The native structure of 4CI0, chain A in yellow and the Cα model by MAINMAST in cyan, (B) the refined full-atom modeled protein by MAINMAST in magenta and the native structure in yellow, (C) the native and modeled protein structures fitted to chain A segmented map of EMD-2513.\n8. Run PULCHRA on the output of ThreadCA, Cα model, to generate a full atom model. The full atom model can be then refined using any refinement methods such as Rosetta Relax (https://www.rosettacommons.org/[href=https://www.rosettacommons.org/]) or MDFF (https://www.ks.uiuc.edu/Research/mdff/[href=https://www.ks.uiuc.edu/Research/mdff/]).\nVisualizing MAINMAST results\n9. To visualize a cryo-EM map, open PyMOL and run the following commands in the PyMOL command line:\n         \nbg_color white\nset normalize_ccp4_maps, 0\nload xxxx (replace xxxx with map_file_name)\nisosurface xxxx_isosurface, emd_xxxx, reference_contour_level (replace reference_contour_level by the contour level used for the map)\n10. To visualize the longest path of the MST generated by MAINMAST (Fig. 6A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0006]), run the bondmk.pl script, which takes as input the path PDB file generated in step 6 and outputs a PyMOL session file. Then, open the PyMOL session file of bondtree .pl using PyMOL:\n         \nbondmk.pl path.pdb > path_session.txt\npymol -u path_session.txt\n11. To visualize the LDPs of the MST built in the density map (Fig. 6B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0006]):\n         \nRun MAINMAST in tree mode and save the output to the tree.pdb file",
    "Open PyMOL and run the following commands in the PyMOL command line:\n               \nload tree.pdb\nset transparency, 0.4\nhide cartoon, tree\nshow spheres, tree\nset sphere_scale, 0.4, tree\nspectrum b, selection = SEL, tree (color a molecule based on B-Factors)\n12. To visualize the MST generated by MAINMAST using the tree mode (Fig. 6C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0006]) or to visualize all the possible connections, i.e., edges, on the EM map generated by MAINMAST using the graph mode (Fig. 6D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.494#cpz1494-fig-0006]), run the bondtree.pl script, which takes as input the output PDB file from MAINMAST and generates a PyMOL session file. Then, open the output file of bondtree.pl using PyMOL:\n         \nbondtree.pl mainmast_output.pdb > pymol_session.txt\npymol -u pymol_session.txt"
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}