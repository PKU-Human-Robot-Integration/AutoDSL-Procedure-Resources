{
  "id": 5722,
  "origin_website": "Bio",
  "title": "Detection of Internal Matrix Targeting Signal-like Sequences (iMTS-Ls) in Mitochondrial Precursor Proteins Using the TargetP Prediction Tool",
  "procedures": [
    "Generation of a TargetP profile from a given protein sequenceFor each protein sequence you submit, TargetP will give you only one value indicating whether the N-terminus of the sequence looks like an MTS. In order to analyze the complete length of the protein, you have to repeatedly truncate the sequence N-terminally by one residue after the other and submit all these sequences to TargetP. We describe two ways how this can be done efficiently: On the one hand, we give detailed instructions how to use a standard spreadsheet application and online conversion tools to generate a FASTA file containing all truncations of a given sequence. On the other, we provide short scripts written in R and F#[href=https://os.bio-protocol.org/attached/file/20180531/Supplemental files.rar] which can be used to automatically generate the required FASTA file. The latter is especially useful if you wish to analyze large numbers of sequences, e.g., for genome-wide analyses.Using spreadsheet software such as Microsoft ExcelUsing Microsoft Excel or another common spreadsheet software, this can be simply done by using the following strategy (Figure 1A):Fill the first column of your spreadsheet with numbers 1, 2, 3, …Copy and paste the amino acid sequence into the first line, second column of your spreadsheet (cell B1). In case the stop codon is indicated with an asterisk (*), delete it from the sequence so that the last character is a valid amino acid.imgsrc:https://en-cdn.bio-protocol.org/attached/image/20180830/20180830190944_9644.jpgFigure 1. Overview about the different steps in iMTS-L predictions. A. iMTS-L predictions by use of spreadsheet software such as Microsoft Excel. B. Steps used to generate a FASTA file with truncated sequences.In the second line (cell B2), generate the truncated sequence using the following command: =MID(B1;2;LEN(B1)-1)This creates a substring from B1 having one letter less than B1 and starting at character number 2.",
    "Note that in different versions of Excel (in particular when using a different language setting) and other spreadsheet software, the keywords and syntax of the command might be slightly different.Click on the lower right corner of cell B2 and drag down the formula to repeatedly apply it to the second, third, … truncation until only the last residue remains in the last cell of the column.Highlight both cells A1 and A2 and drag down (or double click) the lower right corner of A2 to fill the first column with numbers 1, 2, 3, … indicating the starting positions of the sequences in the second column.Save this file in “tab delimited format” (file extension will typically be .tab or .txt).Submit the file you generated to a file conversion tool (e.g., HIV sequence database Format Converter[href=https://www.hiv.lanl.gov/content/sequence/FORMAT_CONVERSION/form.html] or Bugaco Sequence Conversion[href=http://sequenceconversion.bugaco.com/converter/biology/sequences/]) to generate a valid FASTA file. Choose the appropriate options, especially the input and output formats (TAB and FASTA).The file you receive should now have the residue numbers 1, 2, 3, … as FASTA headers for the sequentially truncated sequences.Notes: This file can now be submitted to TargetP online (http://www.cbs.dtu.dk/services/TargetP/[href=http://www.cbs.dtu.dk/services/TargetP/]). The output will be displayed in the browser. Copy and paste the output into a plain text editor (not Word, OpenOffice or similar!) and save it as a .txt file. Import the file into your spreadsheet application. In Excel, open a new spreadsheet and select “Data”, “Import from text”. Choose the appropriate options to import the different values into different columns. The mitochondrial localization score is denoted by “mTP”. Note that TargetP limits the size of the input to currently 2,000 sequences with at most 4,000 residues per sequence and 200,000 residues in total. These limits are violated for proteins with a length of more than 631 residues.",
    "If you wish to analyze a protein which has more residues, split the FASTA file into different files with fewer sequences and submit them individually.Using RThe procedure described above is well suited to generate profiles for individual proteins of interest. When larger sets of sequences should be analyzed, it is more convenient to generate the required FASTA files programmatically. In the following paragraphs, we describe how this can be achieved using one of the programming languages R or F#. To use the R function provided, you need the libraries seqinr, signal and Biostrings to read and write FASTA files. To install these, run R with admin privileges and type the following commands into the shell:source(“https://bioconductor.org/biocLite.R[href=https://bioconductor.org/biocLite.R]”)  biocLite(“Biostrings”) biocLite(“seqinr”) biocLite(“signal”)To generate a FASTA file with truncated the following steps (Figure 1B):To make the function available in your own scripts, use:source(“path/to/the/file/truncateSeq.R”)Load the amino acid sequence of interest into a character variable. In case you have stored it as a FASTA file, you might use the readAAStringSet function from the Biostrings package, for example:fastaInput <- readAAStringSet(“input.fasta”) sequence <- paste(fastaInput)In case you have multiple sequences in your fasta file, this will create a list of all sequences.The paste command is used to extract the sequence string from the more complex object created by readAAStringSet.To generate a table with all truncations and write the corresponding FASTA file, use:truncateSeq(sequence, write.fasta=TRUE, filename=\"result.fasta\", split.fasta=0)In case you don’t want to write a FASTA file but only generate the table within your R session, set write.table=FALSE. All other arguments will be ignored in this case.To automatically split the sequences into several FASTA files with n sequences each, set split.fasta=n. This might be necessary for long sequences (more than 631 residues).Submit the FASTA file(s) to TargetP and proceed as described above.We provide two source files. The file truncateSeq.R[href=https://os.bio-protocol.org/attached/file/20180531/Supplemental files.",
    "rar] contains the function to generate the truncated sequences. The file exampleProfile.R[href=https://os.bio-protocol.org/attached/file/20180531/Supplemental files.rar] can be used as a template to use the procedure described above. It also contains commands to plot and smooth the profile (see Procedure B).Using F#F# is a modern strongly typed, cross-platform programming language that due to its functional first approach is very well suited for data analysis tasks. The development environment for every common platform and an introduction on how to get started is available from F# Software Foundation (https://fsharp.org[href=https://fsharp.org/]). The following documented F# code (Figure 2) guides through the generation of a TargetP profile from given amino acid sequence(s):imgsrc:https://en-cdn.bio-protocol.org/attached/image/20180830/20180830191053_7182.jpgFigure 2. Overview of the workflow using F# for the iMTS-L detection. See text for details.Load the external function to read and write FASTA files. (Change *path* accordingly)#load \"*path*/BioFSharp.lite.IMTS_like.fsx\" open BioFSharp.lite.IMTS_likeRead the amino acid sequence(s) of interested from a provided file in the fastA format. (*path/input.fastA* needs to be replaced by the filename and path pointing to your target fastA file)FastA.fromFile id \"*path/input.fastA*\"Generate all suffixes sequence of the given amino acid sequence(s).|> Seq.collect (fun fasta -> IMTSLs.generate fasta.Header fasta.Sequence)Write all suffixes sequence into the output file in fastA format.(Change *path/output.fastA*)|> FastA.write id \"*path/output.fastA*\"The output file can now be submitted to TargetP online. (http://www.cbs.dtu.dk/services/TargetP/[href=http://www.cbs.dtu.dk/services/TargetP/]).Copy and paste the output into a text file as described above.It is convenient for the analysis to plot the TargetP scores (mTP) against the sequence position to obtain the TargetP profile for the protein of interest (Figure 3A). Internal peaks are nicely visible already without further processing. However, to more clearly define the iMTS-Ls and quantitatively analyze them, we recommend a smoothing procedure as described in Procedure B. To enable the full charting capacity of F#, the FSharp.Ploty library is available from Github or as Nuget Package.",
    "For the latter type, load \"dotnet add package FSharp.Stats\" into your command line.Load the FSharp.Plotly library.(Change *path*)#r \"*path*/FSharp.Plotly.dll*\" open FSharp.PlotlyRead the TargetP scores from the text file.(Change *path/ targetP_out.txt *)let rawprofile = parseTargetP \"*path/targetP_out.txt*\"Generate an area chart showing the sequence position versus the raw TargetP scores.Chart.SplineArea(rawprofile |> Seq.mapi (fun i v -> i,v)) |> Chart.withX_AxisStyle \"Amino acid position\" |> Chart.withY_AxisStyle \"TargetP score\" |> Chart.Show The source file BioFSharp.lite.IMTS_like.fsx summarizes the described procedure and also contains the commands to smooth the profile (see Procedure B).Smoothing of the TargetP profile to make the iMTS-Ls better visibleDue to the original design of the TargetP algorithm, it calculates the score as a target sequence likelihood under consideration of the N-terminal sequence properties within a fixed windows size. Consequently, removing each first amino acid residue and moving the window along the given sequence leads to fluctuations in the likelihood. We therefore recommend smoothening the raw score to allow a quantitative measure and improve the accuracy to localize the iMTS-Ls (Figure 3B).While smoothening can be done with many different methods, we can recommend a first order Savitzky-Golay filter (Savitzky and Golay, 1964) with filter length 21 (which is the average length of an MTS).imgsrc:https://en-cdn.bio-protocol.org/attached/image/20180830/20180830191149_2946.jpgFigure 3. TargetP scores of the model protein Atp1 from S. cerevisiae as examples. Shown are the raw targetP profiles before (A) and after smoothing (B). High TargetP values correlate with iMTS-L sequences which are well visible in both cases.Using RThe Savitzky-Golay filtering function is included in the R package signal.Load the signal package library(signal).Read the TargetP scores from your output file.data <- read.csv(“output.fasta”)You will probably need to specify the options of the read.csv command according to the exact format of your output.fasta file (sep, dec, header and so on).Apply the Savitzky-Golay filtering.",
    "The following command adds a column with the smoothed values to the data frame.data$smoothed <- sgolayfilt(data$mTP, p=1, n=21, m=0, ts=0)Using F#The Savitzky–Golay filtering function is available in the FSharp.Stats library available from Github or as Nuget Package (\"dotnet add package FSharp.Stats\").Load the FSharp.Stats library. (Change *path*)#r \"*path*/FSharp.Stats.dll*\" open FSharp.StatsSmooth the raw profile using Savitzky–Golay filtering.let profile = rawprofile |> Signal.Filtering.savitzky_golay 21 1 0 0Generate an area chart showing the sequence position versus the TargetP profile scores.Chart.SplineArea(profile |> Seq.mapi (fun i v -> i,v)) |> Chart.withX_AxisStyle \"Amino acid position\" |> Chart.withY_AxisStyle \"TargetP profile score\" |> Chart.Show"
  ],
  "subjectAreas": [
    "Cell Biology",
    "Biochemistry"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}