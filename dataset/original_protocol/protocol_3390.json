{
  "id": 3588,
  "origin_website": "Cell",
  "title": "TimiGP: An R package to depict the tumor microenvironment from bulk transcriptomics",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\n      Here we describe step-by-step details to apply the TimiGP1[href=https://www.wicell.org#bib1]\n      R package to TCGA metastatic melanoma data (TCGA_SKCM06) using the cell\n      type markers developed by Bindea et al.7[href=https://www.wicell.org#bib7]\n      The code file is available in the\n      example[href=https://github.com/CSkylarL/TimiGP/tree/master/example]\n      folder (example01[href=https://github.com/CSkylarL/TimiGP/blob/master/example/example01_Bindea2013_Cancer.R]). This folder also Includes the step-by-step details to use other\n      cell-type annotations (example02‒05[href=https://github.com/CSkylarL/TimiGP/tree/master/example]).\n    \nStep 1: Data preprocessing\nTiming: <1 s\n      TimiGP requires three inputs: (1) markers representing cell types, (2)\n      transcriptomic profiles, and (3) survival statistics encompassing events\n      (such as death or recurrence) and the corresponding time-to-event within\n      the identical study cohort. We start with a series of systematic steps to\n      prepare input data for TimiGP analysis. The process begins with the\n      loading of input example data of TCGA_SKCM06 samples, including\n      `SKCM06info′ for survival statistics and `SKCM06rna′ for transcriptomic\n      profiles. Next, the `CellType_Bindea2013_cancer` cell type annotation data\n      is loaded as the third input for subsequent analyses.\n    \n      This data preprocessing step involves preparing the clinical and\n      transcriptomic data for TimiGP analysis. These steps ensure that the data\n      is in a suitable format and quality for subsequent analysis. The\n      preprocessing includes two main functions: `TimiCheckEvent()` and\n      `TimiPrePropress()`, both of which are described below.\n    \nClear the workspace and load the TimiGP R package.\nrm(list=ls())\nlibrary(TimiGP)\nNote: Before commencing your analysis, you\n      can use the `setwd()` function to specify a directory path within the\n      parentheses, effectively changing your current working directory in R. As\n      shown below, replacing \" Your/Directory/Path/\" with the actual\n      path will adjust your working directory to the specified location,\n      facilitating smoother file read and write operations from that directory.\n    \nsetwd(\"/Your/Directory/Path/\")\n        Load the survival statistics dataset and transcriptome profile of\n        TCGA_SKCM06 data.\n        \n            The transcriptome profile, labeled as `SKCM06rna′, encompasses a\n            data frame from 20,501 genes (row) collected from a total of 368",
    "metastatic melanoma samples (column). Each row in this dataset\n            corresponds to a specific gene, and each column corresponds to a\n            unique patient identifier (Figure 1[href=https://www.wicell.org#fig1]A).\n            \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3156-Fig1.jpg\n                  Figure 1. The format to input data\n                \n                  (A) The formats of transcriptomic data; (B) the formats of\n                  survival statistics data; (C) the format of cell-type marker\n                  data. The screenshot displays white text on a black background\n                  within the terminal, with additional manual annotations in red\n                  text, arrow, or box.\n                \n            The `SKCM06info′ dataset offers critical clinical information\n            related to survival statistics for a cohort of 368 patients with\n            metastatic melanoma. This dataset is organized in a data frame\n            format, which comprises 368 rows, with each row corresponding to a\n            unique patient identifier. The first column provides the event\n            (indicating patient death) and the second column shows the time\n            (measured in days) to the event (Figure 1[href=https://www.wicell.org#fig1]B).\n          \nNote: Events (e.g., deaths, recurrences,\n      etc.) are encoded as \"1.\" These represent the occurrence of the\n      event of interest within the observation time. Censoring, which occurs\n      when there is incomplete data due to subjects not experiencing the event\n      by the end of the study or being lost to follow-up, is encoded as\n      \"0.\" These represent the cases where the event of interest did\n      not occur within the observation time.\n    \nNote: Considering the statistic power of\n      survival analysis, the minimum advisable cohort size for this analysis is\n      30.\n    \nNote: Please structure your data in a\n      manner similar to the input example provided, ensuring it aligns with the\n      showcased format, which will facilitate seamless further analysis.\n    \ndata(\"SKCM06info\")\ndata(\"SKCM06rna\")\n        Load cell type annotations.\n        \n            The `CellType_Bindea2013_cancer` data provides immune cell types and\n            their associated marker genes, as annotated by Bindea et al. in\n            2013.7[href=https://www.wicell.org#bib7] This data is organized in a",
    "data frame format, comprising 545 rows and 3 columns (Figure 1[href=https://www.wicell.org#fig1]C). Here are the 3 columns:\n            \n                \"CellType\": representing immune and cancer cell types;\n              \n                \"Gene\": denoting the marker gene associated with each\n                cell type;\n              \n                \"Dataset\": indicating the source of the annotation.\n              \nNote: It is flexible to utilize\n      alternative cell type annotations included in the package or create custom\n      cell type annotations in the same standardized format. This allows the\n      user to tailor the analysis to various resolutions or specific research\n      inquiries, adapting the cell type information to suit the unique aspects\n      of your investigation. We recommend 5‒30 markers per cell type,\n      considering the balance between computational efficiency and the\n      robustness of results. Mutually exclusive markers between cell types are\n      preferable but not mandatory.\n    \ndata(\"CellType_Bindea2013_cancer\")\n# The 'geneset' variable will now hold this data,\n# making it accessible for further analysis and exploration.\ngeneset <- CellType_Bindea2013_cancer\n# Extract unique marker genes from the 'geneset' data\n          frame\n# These unique marker genes will be used for subsequent\n          analysis\nmarker <- unique(geneset$Gene)\n        Preprocess the data using functions `TimiCheckEvent()` and\n        `TimiPrePropress()` functions.\n        \n            The `TimiCheckEvent()` function is designed to filter and clean\n            survival statistics for analysis. It takes a data frame containing\n            event and time-to-event information as input. The function performs\n            the following tasks:\n            \n                Removes records with missing events or time-to-event data.\n              \n                Filters out records with abnormal time-to-event values less than\n                or equal to 0.\n              \n                Returns the filtered survival information data frame.\n                This function ensures that the clinical data is free from\n                missing values and inappropriate time-to-event values, which are\n                crucial for accurate survival analysis.\n              \n            The `TimiPrePropress()` function preprocesses transcriptomic profile\n            data for analysis. It takes marker gene list(`marker`),\n            transcriptomic data(`rna`), selected cohort(`cohort`), and two\n            optional normalization parameters as input. The function performs\n            the following tasks:\n            \n                Extracts the transcriptomic data for the selected cohort and",
    "marker genes. Troubleshooting 3[href=https://www.wicell.org#troubleshooting].\n              \n                Removes genes with low expression based on a threshold. The\n                threshold determines the minimum percentage of samples with\n                non-zero expression required for a gene to be considered\n                sufficiently expressed. Genes with expression values above this\n                threshold in at least 50% of the samples are retained, while\n                those falling below this threshold are filtered out due to low\n                expression levels. If no genes meet the threshold, an error\n                message is displayed, and the analysis is halted. Otherwise, it\n                updates the transcriptomic data by keeping only the genes that\n                meet the expression threshold, and a message is printed to\n                inform the user about the number of filtered-out markers with\n                low expressions.\n              \n                Optionally performs log transformation and gene-wise median\n                normalization. If `log = TRUE`, log transformation will be\n                performed; the default value is “TRUE”. If `GMNorm = TRUE`,\n                gene-wise median normalization will be performed; he default\n                value is “TRUE”. The approach of log transformation and\n                gene-wise median normalization is advisable when working with\n                gene expression data that span multiple orders of magnitude, as\n                it can enhance the detection of subtle gene expression\n                differences and mitigate the impact of extreme values.\n                Additionally, enabling gene-wise median normalization (`GMNorm =\n                TRUE`) is recommended when capturing logical relations between\n                marker pairs, while disabling it (`GMNorm = FALSE`) is suitable\n                for more sensitive analyses aimed at capturing continuous\n                relationships between markers. More details regarding marker\n                pair relations can be found in the next step.\n              \n                Returns the preprocessed transcriptomic profile data frame. This\n                function ensures that the transcriptomic data is appropriately\n                filtered, transformed, and normalized, preparing it for\n                subsequent analysis steps.\n                \ninfo <- TimiCheckEvent(SKCM06info)\nrna <- TimiPrePropress(marker = marker, rna =\n                      SKCM06rna, cohort = rownames(info), log = TRUE,\n                      GMNorm=TRUE)\nStep 2: Define and select marker gene pair matrix\nTiming: 5 s",
    "TimiGP is based on the hypothesis that the ratios of expression between\n      Immune Marker Gene Pairs (IMGPs) encapsulate the relative proportions of\n      immune cell infiltration and capture pivotal immune interactions. So\n      first, TimiGP establishes the Marker Pair Score (MPS). This score is\n      formulated by evaluating the expression disparities between IMGPs using\n      the `TimiGenePair()` function.\n    \n        Generate Marker Pair Score (MPS) using the `TimiGenePair()` function.\n        \n            The `TimiGenePair()` function captures and assesses the logical or\n            continuous relationship between pairs of markers (genes) based on\n            transcriptomic profile data (`rna`) preprocessed by the\n            `TimiPrePropress()` function. This function can be used to generate\n            a matrix of Marker Pair Scores, which indicates whether the\n            expression of one gene is greater than or less than the expression\n            of another gene.\n          \n            It offers both logical and continuous analysis options.\n            \n                By default (`cont = FALSE`), it captures the logical\n                relationship between marker pairs and produces a matrix of\n                Marker Pair Scores indicating whether the expression of gene A\n                is greater (1 or “TRUE”) or less (0 or FALSE) than that of gene\n                B (Figure 2[href=https://www.wicell.org#fig2]A).\n                \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3156-Fig2.jpg\n                      Figure 2. TimiGP results comparison between continuous\n                      relation-based analysis (optional), and logical\n                      relation-based analysis (default)\n                    \n                      (A and B) Output screenshots of marker pair scores using\n                      the logical relation-based approach (A) and using the\n                      continuous-relation-based approach (B).\n                    \n                      (C and D) Chord diagram of cell-cell interactions\n                      identified using the logical relation-based approach\n                      (C) and the continuous relation-based approach (D).\n                    \n                      (E and F) Bar plot of the favorability score to prioritize\n                      critical cell type related to favorable (orange) or\n                      unfavorable (blue) prognosis using logical relation-based\n                      approach (E) and using continues-relation-based approach\n                      (F). The default mode represents a more conservative\n                      analysis while the optional feature provides a more\n                      sensitive choice. In the continuous relation-based\n                      analysis, more statistically significant prognostic pairs\n                      (8.56% compared to 1.25% in the logical relation-based",
    "analysis) are selected by the Cox regression. Accordingly,\n                      the identified cell interactions (n = 113) using this\n                      approach almost double compared to the default analysis\n                      (n = 54). However, the original interactions tend to be\n                      the most significant interactions among those identified\n                      by the continuous relation-based approach (C, D). The two\n                      cell-cell interaction networks resulted in very similar\n                      prioritized cell types (cells are sorted according to\n                      their favorability scores calculated based on their\n                      topological features in the network) (E, F). The\n                      screenshot displays white text on a black background\n                      within the terminal, with additional manual annotations in\n                      red text, arrow, or box. Abbreviation of cell types: T,\n                      T cell; Th, helper T cell; Th1, type 1 Th; Th2, type 2 Th;\n                      Tfh, follicular Th; Tcm, central memory T cell; Tem,\n                      effector memory T cell; cytotoxic, cytotoxic cell (common\n                      cytotoxic markers of anti-tumor CD8 T cells, Tγδ, and NK\n                      cells); NK, natural killer cell; DC, dendritic cell; iDC,\n                      immature DC; aDC, activated DC; Mast, mast cell; Tumor,\n                      tumor cell.\n                    \n                Optionally, it can capture the continuous relationship between\n                marker pairs by setting `cont = TRUE`, producing a matrix of\n                Marker Pair Scores representing the difference between the\n                expression levels of gene A and gene B(Figure 2[href=https://www.wicell.org#fig2]B).\n              \nNote: If continuous relation analysis is\n      selected (`cont = TRUE`), the function checks whether gene-wise median\n      normalization has been applied and recommends setting `GMNorm = FALSE` in\n      the `TimiPrePropress()` function and then re-running this function.\n    \nOptional: In this protocol, we focus\n      on the logical relation-based analysis (default, `cont = FALSE`), which\n      represents a more conservative analysis and results in a list of\n      high-confident cell-cell interactions. Enabling the continuous relation\n      option will preserve more gene pairs and have a higher statistical power\n      in the subsequent survival analysis. Therefore, the optional approach is",
    "more sensitive to identifying prognostic gene pairs and cell-cell\n      interactions (Figures 2[href=https://www.wicell.org#fig2]C‒2F). The step-by-step details\n      for this optional approach are available in the\n      example06[href=https://github.com/CSkylarL/TimiGP/blob/master/example/example06_Bindea2013_Cancer_continuous_pair.R], which includes the code to repeat Figures 2[href=https://www.wicell.org#fig2]B, 2D,\n      and 2F.\n    \nmps <- TimiGenePair(rna=rna, cont=FALSE)\n      Step 3: Choose gene pairs associated with a favorable prognosis\n    \nTiming: 2 min\n      The next step of the TimiGP algorithm involves the selection of gene pairs\n      linked to a positive prognosis. TimiGP employs univariate Cox regression\n      to carry out this selection process, that is, the `TimiCOX()` function.\n    \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3156-Fig3.jpg\n          Figure 3. Output screenshots of the `TimiCOX()` function\n        \n          `TimiCOX()` returns a list of two data frames: (A) updated “mps” where\n          gene pair and marker pair score are reversed if the original one (Figure 2[href=https://www.wicell.org#fig2]A) is associated with poor prognosis.\n        \n          (B) “cox_res”: the result of survival analysis. The screenshot\n          displays white text on a black background within the terminal, with\n          additional manual annotations in red text, arrow, or box.\n        \n        Perform univariate Cox regression using the `TimiCOX()` function.\n        \n            Description: The `TimiCOX()` function is designed to identify marker\n            pairs associated with favorable prognosis using univariate Cox\n            regression analysis. This function takes a matrix of Marker Pair\n            Scores (`mps`), a data frame containing event and days-to-event\n            information (`info`), and an optional parameter for adjusting\n            p-values (`p.adj`). It performs Cox regression analysis for each\n            marker pair as a variable and processes the results to identify\n            pairs associated with favorable prognoses.\n          \n            Parameters:\n            \n                `mps`: A matrix of Marker Pair Scores, where each row represents\n                a marker pair and each column corresponds to a sample. This is\n                the output of the `TimiGenePair()` function, which is generated\n                in Step 2.\n              \n                `info`: A data frame with two columns, where the first column\n                represents event status (0 for censored, 1 for event occurrence)\n                and the second column represents time to event. This is the",
    "output of the `TimiCheckEvent()` function.\n              \n                `p.adj`: A string specifying the method for adjusting p-values.\n                Options include \"holm\" (Holm’s step-down procedure),\n                \"hochberg\" (Hochberg’s step-up procedure),\n                \"hommel\" (Hommel’s method), \"bonferroni\"\n                (Bonferroni correction), \"BH\" (Benjamini-Hochberg\n                procedure), \"BY\" (Benjamini-Yekutieli procedure),\n                \"fdr\" (False Discovery Rate control), or\n                \"none\" (No adjustment, p-values are not adjusted). The\n                default is \"BH\".\n              \n                `parallel`: A logical value indicating whether to enable\n                parallel computing. If set to “TRUE”, the function will utilize\n                parallel processing using the ‘foreach’ and ‘doParallel’\n                packages to speed up computations. The default value is “FALSE”,\n                meaning that parallel computing is disabled by default. When\n                enabled, the function will distribute tasks across multiple CPU\n                cores to improve efficiency.\n                \nNote: Depending on the\n                  specific conditions of your analysis, particularly the number\n                  of markers and the choice of CPU cores, the computational time\n                  for this step can vary significantly. If parallel computing is\n                  disabled (default, `parallel = FALSE`), this step typically\n                  takes around 5 minutes to complete. The computation time may\n                  increase if a larger number of cell-type markers are provided.\n                  For instance, if there are more than 1000 markers, the process\n                  could take more than 30 minutes to finish with this default\n                  mode. To expedite the computation, enabling parallel computing\n                  by setting the `parallel = TRUE` and specifying the number of\n                  CPU cores to use can potentially reduce the execution time.\n                  Keep in mind that the effectiveness of parallelization may\n                  vary depending on the task and hardware.\n                \n                `core`: A numeric value specifying the number of CPU cores to\n                use for parallel execution, when parallel computing is enabled\n                (i.e., when `parallel` is set to “TRUE”). The default value is\n                1.\n                \nNote: In this protocol,\n                  `core = 20′ is set for the parallelization of the specified\n                  task. The choice of the number of cores is highly",
    "task-dependent, and it's crucial to consider several\n                  factors when making this decision. These factors include\n                  hardware limitations, such as the number of physical cores\n                  available in the CPU, operating system constraints, the\n                  availability of system resources, and the computational load,\n                  which can vary based on the number of markers included in the\n                  analysis. In many cases, using a more conservative range, such\n                  as 2 to 4 cores, proves to be sufficient for efficient and\n                  balanced performance.\n                \n            Return: The function returns a list with two elements (Figure 3[href=https://www.wicell.org#fig3]):\n            \n                “mps”: The first element is the modified marker pair score\n                matrix, where the values of marker pairs associated with poor\n                prognosis have been reversed, and the pair direction and values\n                of the marker pair score have been changed accordingly. For each\n                marker pair, the mps of 1 is associated with a favorable\n                prognosis in the updated matrix (Figure 3[href=https://www.wicell.org#fig3]A).\n              \n                “cox_res”: The second element is a data frame containing the\n                results of the Cox regression analysis, including three columns:\n                Hazard Ratio (HR), P-Value (PV), and Adjusted P-Value (QV) for\n                each marker pair (row name) (Figure 3[href=https://www.wicell.org#fig3]B).\n                \n# Run the TimiCOX function\nres <- TimiCOX( mps = mps,\ninfo = info,\np.adj = \"BH\",\nparallel = T,\ncore = 20)\n# Extract the 'mps' and 'cox_res' objects\n                      from the 'res' result\nmps <- res$mps\ncox_res <- res$ cox_res\n# Now you can use the 'cox_res' variable for\n                      further analysis\nOptional: The above\n                  intermediate results `cox_res` has been renamed as\n                  `Bindea2013c_COX_MP_SKCM06′ and saved as an example data. The\n                  data can be loaded by the below codes:\n                \ndata(Bindea2013c_COX_MP_SKCM06)\ncox_res <- Bindea2013c_COX_MP_SKCM06\n        Determine the condition and cutoff to select the prognostic pairs.\n      \nNote: By default, the condition is\n      adjusted P value and the cutoff is 0.05. It is influenced by the quality",
    "of the survival information. High-quality survival information, including\n      a large cohort size (e.g., > 200) and a reasonable number of events, is\n      preferred to ensure the statistical power of survival analysis. We\n      recommend the percentage of prognostic gene pair within the range of\n      1%–5%. If you aim for more conservative results, you can choose a stricter\n      cutoff, e.g., adjusted P value < 0.01 by setting `GPcondition <-\n      \"QV”` and`GPcutoff <- 0.01`. Otherwise, if you desire more\n      sensitive outcomes and conservative results, you can choose a lenient\n      cutoff, e.g., P value < 0.05 by setting `GPcondition <-\n      \"PV\"` and `GPcutoff <- 0.05`.\n      Troubleshooting 4[href=https://www.wicell.org#troubleshooting]\n# Count the number of marker pairs with Adjusted P-value (QV) less\n          than 0.05\nsum(cox_res$QV < 0.05) # Returns 2773\n# Calculate the percentage of significant marker pairs relative to\n          the total number of marker pairs\nround(sum(cox_res$QV < 0.05)/ nrow(cox_res) ∗ 100, 2) # Returns\n          2.52\n# Set up a variable to define the condition for selecting marker\n          pairs based on the Adjusted P-value.\nGPcondition <- \"QV\"\n# Set up a variable to define the cutoff value for the Adjusted\n          P-value.\nGPcutoff <- 0.05\n# GP represents Gene Pair\nStep 4: Construct the directed gene-gene network\nTiming: <1 s\n      Utilizing the prognostic significance of IMGPs, TimiGP establishes\n      pairwise associations between each favorable and unfavorable gene (nodes),\n      creating a directed gene-gene network. The direction of the edges captures\n      the connection between gene expression levels and their influence on\n      patient prognosis. To illustrate, an edge from gene x to gene y (x→y)\n      signifies that a higher relative expression of gene x (favorable gene)\n      compared to gene y (unfavorable gene) correlates with a better prognosis.\n    \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3156-Fig4.jpg\n          Figure 4. Output screenshots of the `TimiGeneNetwork()` function\n        \n          TimiGeneNetwork returns a list of three data frames: (A) “network”,",
    "(B) “node”, (C) “edge”. The type of interaction is “TimiGP”\n          representing gene-gene interaction exported by the TimiGP method. The\n          screenshot displays white text on a black background within the\n          terminal, with additional manual annotations in red text, arrow, or\n          box.\n        \n        Construct the directed gene-gene Network and export the files for\n        Cytoscape21[href=https://www.wicell.org#bib21] visualization using the\n        `TimiGeneNetwork()` function.\n        \n            The input data `resdata` of the `TimiGeneNetwork()` function is the\n            cox regression results `cox_res` generated from `TimiCOX()`\n            function.\n          \n            The `TimiGeneNetwork()` function uses three parameters to determine\n            the marker pairs associated with a good prognosis for the gene-gene\n            network.\n            \n                `condition`: A value in one of \"PV\" (P.Value) and\n                \"QV\" (Adjusted P.Value), which is the column name of\n                resdata, which contains information related to statistical\n                significance. The default value is \"QV\".\n              \n                `cutoff`: This parameter refers to a threshold value associated\n                with the 'condition'. It is used as a filter for\n                gene-gene interactions. Gene pairs with a value less than this\n                cutoff will be considered significant and included in the\n                gene-gene network. The default value is 0.05.\n              \n                `select`: This parameter is a character vector that can contain\n                the names of selected gene pairs. These gene pairs are based on\n                the row names in the `resdata` data structure. By default, this\n                parameter is set to \"NULL\", indicating that no\n                specific gene pairs are selected. However, if you manually\n                choose gene pairs using this parameter, the automatic filtering\n                based on the 'cutoff' and 'condition' will be\n                overridden for those selected pairs.\n                Troubleshooting 4[href=https://www.wicell.org#troubleshooting].\n                \nNote: Default selection\n                  includes all gene-gene interactions with an adjusted\n                  p-value < 0.05.\n                \n            The `TimiGeneNetwork()` function returns a list of network-required\n            data that can be further modified within R. There are three elements\n            in the list: 1) “network”, 2) “node”, and 3) “edge” (Figure 4[href=https://www.wicell.org#fig4]). Each element is a data frame. This function can also export",
    "these data by setting `export = TRUE` (default) and generates below\n            three network files that can be imported to Cytoscape for network\n            analysis and visualization. Those files are saved to the specific\n            location provided through the `path` parameter.\n            \n                Network file (gene_network.sif): A simple interaction file\n                exported from “network”, a data frame containing information\n                about the network structure. It has 3 columns: 1) “Source”:\n                Source gene in an interaction (favorable gene); 2)\n                “Interaction”: the type of interaction; 3) “Target”: Target gene\n                in an interaction(unfavorable gene).\n              \n                Node attributes file (gene_node.txt): A file exported from\n                “node”, a data frame containing information about nodes (genes)\n                in the gene network. It is the same as the input cell-type\n                annotation `geneset` (Figure 1[href=https://www.wicell.org#fig1]C), which has\n                three columns: 1) “CellType”: Type of cell associated with the\n                marker gene; 2) “Gene”: The gene itself; 3) “Dataset”: The\n                dataset or source from which the gene information is derived.\n              \n                Edge attributes file (gene_edge.txt): A file exported from\n                “edge”, a data frame containing information about edges\n                (interactions) in the gene network. It has six columns: 1)\n                “Key”: A key that represents a unique identifier for the\n                interaction between genes; 2) “HR” (Hazard Ratio), 3) “PV”\n                (P-value), 4) “QV” (Adjusted P-value): cox regression results of\n                the interaction obtained from the input `resdata` (Figure 3[href=https://www.wicell.org#fig3]B); 5) “Favorable.Gene”: One of the interacting genes (source);\n                6) “Unfavorable.Gene”.0: The other interacting gene (target).\n                \nNote: If `export = TRUE` but\n                  `path = NULL`, those files will be exported to the current\n                  working directory.\n                \n            The `TimiGeneNetwork()` function generates node information based on\n            two parameters.\n            \n                `dataset`: This parameter specifies the dataset to be used for\n                generating the gene network files. It expects a value from a\n                predefined set of options: \"Bindea2013_Cancer,\"\n                \"Immune3,\" \"Newman2015,\"\n                \"Tirosh2016,\" \"Zheng2021,\" or\n                \"Other.\" The first five options are accompanied by",
    "preset configurations linked to internal cell-type annotations\n                utilized for the analysis. Specifically, these options\n                correspond to: `CellType_Bindea2013_cancer`,\n                `CellType_Charoentong2017_Bindea2013_Xu2018_Immune`,\n                `CellType_Newman2015_LM22, CellType_Zheng2021_Tcell`, and\n                `CellType_Tirosh2016_melanoma_TME`, respectively. If you want to\n                use a different dataset or customize node attributes, please\n                choose \"Other\" and then provide `geneset`.\n              \n                `geneset`: This parameter is a data frame that contains\n                information about cell markers. It should have at least three\n                columns: the first column represents cell types, the second\n                column represents marker genes, and the optional third column\n                represents the name of the dataset. The `geneset` parameter is\n                used in conjunction with the dataset parameter. If you choose\n                \"Other\" for the dataset, you need to provide a\n                `geneset` data frame to define the cell markers for node\n                attributes.\n                \nGeneNET <- TimiGeneNetwork( resdata = cox_res,\nselect = NULL,\ndataset = \"Bindea2013_Cancer\",\ngeneset = NULL,\ncondition = GPcondition,\ncutoff = GPcutoff,\nexport = TRUE,\npath = \"./\")\n# Display the first few rows of the 'network'\n                      component in the NET object\nhead(GeneNET$network)\n# Display the first few rows of the 'node'\n                      component in the NET object\nhead(GeneNET$node)\n# Display the first few rows of the 'edge'\n                      component in the NET object\nhead(GeneNET$edge)\n      Step 5: Identify cell-cell interactions by enrichment analysis\n    \nTiming: 3 s\n      TimiGP performs enrichment analysis to statistically determine cell-cell\n      interactions that are more prevalent in the gene-gene network compared to\n      random occurrences. The resulting cell-cell interactions offer an\n      understanding of how the varying abundance of cells in the TIME relates to\n      prognosis. This step operates under the immunological premise that the\n      equilibrium between pro- and anti-tumor cells might dictate the TIME’s\n      efficacy or suppressive nature, influencing prognosis as a result.\n    \n      The `TimiEnrich()` function is designed to perform the enrichment analysis\n      by assessing the significance of inter-interactions within a given gene",
    "pair set and cell pair dataset. This section includes step-by-step details\n      to prepare input of the `TimiEnrich()` function and explain its outputs.\n    \n        Select marker pairs significantly associated with good prognosis.\n        Troubleshooting 4[href=https://www.wicell.org#troubleshooting].\n      \nNote: It selects gene-gene interaction of\n      interest (e.g., x→y) that a higher x-to-y ratio is associated with a\n      positive prognosis, which is thought associated with specific cell-cell\n      interactions. The `GPcondition` and `GPcutoff` are determined previously.\n    \nGP <-\n          rownames(cox_res)[which(cox_res[,GPcondition] < GPcutoff)]\n        Prepare marker pairs background for enrichment analysis using the\n        `TimiBG()` function.\n      \nNote: The `background` would be the entire\n      set of gene pairs available for analysis, which provides context for\n      evaluating whether the gene-gene interaction is more prevalent than what\n      would be expected by chance. Therefore, the background includes both\n      directions of available gene pairs, such as x→y and y→x. Considering\n      previous intermediate results only have one direction (x→y), TimiGP\n      provides an additional function, `TimiBG()`, to prepare the background.\n      The `TimiBG()` function takes a vector of marker pairs connected by\n      underscores as input (e.g., x_y) and produces background gene pairs by\n      generating complementary pairs (x_y and y_x). The resulting background\n      pairs provide a foundation for subsequent analysis.\n    \nbackground <- TimiBG(marker.pair = row.names(cox_res))\n        Generate marker pair annotations of all pairwise cell combinations using\n        the `TimiCellPair()` function.\n        \n            Description: The function `TimiCellPair()` generates a predefined\n            annotation set used by enrichment analysis that includes available\n            pairwise cell combination, potentially as cell-cell interactions,\n            which is denoted by marker pairs. In the annotation, a cell\n            interaction X →Y is defined by a list of marker pairs that point\n            from the markers of cell X (e.g., x1, x2) to the markers of cell Y\n            (e.g., y1, y2) as below:\n            Cell X → Cell Y = {x1 → y1, x1 → y2, x2 → y1, x2 → y2,...};",
    "Cell Y → Cell X = {y1 → x1, y1 → x2, y2 → x1, y2 → x2,...}\n          \n            Parameters:\n            \n                `geneset`: A data frame of cell-type annotation, which is the\n                same one used to generate markers for the `TimiPrePropress()`\n                function. As mentioned previously, in this protocol, its\n                internal cell-type markers `CellType_Bindea2013_cancer` are\n                loaded by the `data()` function.\n              \n                `dataset`: If the `geneset` has a third column representing\n                dataset names, the function handles the case where there are\n                multiple datasets. It allows you to specify a dataset for\n                analysis using this optional parameter. This may be needed when\n                using `CellType_Charoentong2017_Bindea2013_Xu2018_Immune` which\n                contains three different immune cell-type annotations. More\n                details and relevant codes were provided in the\n                example02[href=https://github.com/CSkylarL/TimiGP/blob/master/example/example02_Charoentong2017_Bindea2013_Xu2018_Immune.R].\n              \n                `core`: The function utilizes parallel processing for certain\n                operations using the ‘foreach’ and ‘doParallel’ packages. This\n                parameter is an integer specifying the number of CPU cores used\n                for parallel execution, which can speed up the analysis when\n                dealing with large amounts of cell types. The default value is\n                1.\n              \n            Return: The function returns a data frame where each row contains a\n            cell pair and its associated marker pairs. It has below two columns:\n            (Figure 5[href=https://www.wicell.org#fig5]A).\n            \n                “Cell.Pair”: This column represents the combination of two\n                different cell types that are possibly interacting or being\n                considered together. The cell types are separated by an\n                underscore (\"_\").\n              \n                “Marker.Pair”: This column represents the combination of two\n                marker genes associated with the corresponding cell pair. The\n                marker genes are separated by an underscore (\"_\").\n                \nNote: An underscore separator\n                  \"_\" is used to replace the arrow \"→\" in\n                  the package considering programming readability and\n                  compatibility.\n                \ncell_pair <- TimiCellPair(geneset = geneset, core =\n                      20)\n        Perform enrichment analysis using the `TimiEnrich()` function.\n        \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3156-Fig5.jpg\n              Figure 5. Output example of `TimiCellPair()`, `TimiEnrich()`,\n              `TimiPermFDR()`, and `TimiDotplot()` functions\n            \n              (A) Output screenshots of `TimiCellPair()` function; (B) Output",
    "screenshots of `TimiEnrich()` function; (C) Appended new column\n              \"Permutation.FDR\" by `TimiPermFDR()` function.\n            \n              (D) Dot plot generated by the `TimiDotplot()` function. The\n              screenshot displays white text on a black background within the\n              terminal, with additional manual annotations in red text, arrow,\n              or box.\n            \n            Description: The `TimiEnrich()` function is designed to perform\n            enrichment analysis. It is used to compare the frequency of\n            gene-gene-directed interaction that belongs to a particular\n            cell-cell interaction with what would be expected by chance. If a\n            statistically significantly higher number of gene pairs from the\n            network are found within a cell-cell interaction `geneset` compared\n            to random chance, it suggests that the cell-cell interaction is\n            enriched in the gene-gene network, implying potential prognostic and\n            immunological relevance.\n          \n            Parameters:\n            \n                `gene`: A vector of gene symbols or gene pair for which\n                enrichment analysis will be performed. This parameter specifies\n                the set of gene pairs that you want to analyze for enrichment\n                within the provided gene interactions. It’s selected in the\n                previous step in the section.\n                \nNote: The 'gene'\n                  parameter should be in a consistent gene identifier format\n                  with the transcriptome data and cell type annotation.\n                \n                `background`: A vector of background genes or pairs. This\n                parameter defines the background against which enrichment is\n                assessed. It represents the universe of gene pairs from which\n                the gene-gene interaction is derived. It’s prepared in the\n                previous step in the section.\n              \n                `geneset`: A data frame with two columns: the first column\n                represents cell pairs, and the second column represents gene\n                pairs. This parameter contains the potential interactions or\n                relationships between cell types and genes that you want to\n                analyze for enrichment. It’s generated in the previous step in\n                the section.\n              \n                `p.adj`: A string specifying the method for adjusting p-values.\n                Enrichment analysis often involves multiple hypothesis testing,\n                so p-values need to be adjusted to control the false discovery",
    "rate. Options include \"holm\" (Holm’s step-down\n                procedure), \"hochberg\" (Hochberg’s step-up procedure),\n                \"hommel\" (Hommel’s method), \"bonferroni\"\n                (Bonferroni correction), \"BH\" (Benjamini-Hochberg\n                procedure), \"BY\" (Benjamini-Yekutieli procedure),\n                \"fdr\" (False Discovery Rate control), or\n                \"none\" (No adjustment, p-values are not adjusted). The\n                default value is \"BH\".\n              \n                `core`: An integer that indicates the number of cores for\n                parallel execution. This function enables parallel execution via\n                the ‘foreach’ and ‘doParallel’ packages, which can speed up the\n                analysis when dealing with a large number of cell types. The\n                default value is 1.\n              \n                `pair`: A logical value that controls the type of enrichment\n                analysis conducted by the function. It allows the function to\n                cater to two types of enrichment analyses: one focusing on\n                interactions between cell pairs and the other focusing on\n                enrichment within individual cell types. The default value is\n                “TRUE”, that is, the enrichment analysis will be conducted on\n                cell pairs, which is the TimiGP analysis described in this\n                protocol. The results will provide insights into cell-cell\n                interactions. When the parameter is set to “FALSE”, the function\n                performs traditional enrichment analysis. The results will not\n                distinguish between different cell types and will provide\n                insights into enriched gene sets within individual cell types.\n                For this traditional enrichment analysis, other parameters\n                should be changed accordingly. The `gene` and `background` are\n                gene symbols instead of gene pairs. `geneset` is a data frame\n                representing general cell types(1st column) and their associated\n                marker gene(2nd column), e.g., internal cell-type markers\n                `CellType_Bindea2013_cancer` loaded by `data()` function.\n              \n            Return: The function returns a data frame of enrichment results\n            including below 12 columns (Figure 5[href=https://www.wicell.org#fig5]B).\n            \n                “Index”: The index serves as a unique identifier for each\n                cell-cell interaction in the enrichment analysis results. Unlike\n                the “Rank” (2nd column), which might be shared among\n                interactions with the same p-value, the “Index” is a distinctive",
    "identifier that ensures each interaction is uniquely labeled.\n                This unique index can be used as a reference point to\n                specifically identify and distinguish each cell-cell interaction\n                in subsequent analyses, visualizations, or discussions.\n              \n                “Rank”: The rank of the cell-cell interactions is determined\n                based on their p-values. When multiple interactions have the\n                same p-value, the ties are resolved using the \"min\"\n                method, meaning that the lowest rank among the tied interactions\n                is assigned to all of them. A smaller p-value corresponds to a\n                smaller rank, indicating higher statistical significance. In\n                essence, the rank helps prioritize and order the interactions\n                based on their level of significance.\n              \n                \"Cell.Interaction\", \"Favorable.Cell.Type\",\n                and \"Unfavorable.Cell.Type\": This\n                \"Cell.Interaction\" column represents the interaction\n                or relationship between two cell types (cell pair) that are the\n                subject of the analysis. Each row corresponds to the analysis of\n                a specific cell-cell interaction (e.g., cell X_cell Y),\n                providing statistical insight into the relationship between\n                these two cell types. If the \"cell X_cell Y\" is\n                statistically significantly enriched, it suggests an interaction\n                from cell X to cell Y, indicating that a high X/Y ratio is\n                associated with a favorable prognosis. In this context, the\n                \"Favorable.Cell.Type\" column spotlights Cell X, which\n                is favorably poised to embody an anti-tumor cell character\n                linked with optimistic prognostic outcomes. Conversely, the\n                \"Unfavorable.Cell.Type\" column spotlights Cell Y,\n                indicative of a pro-tumor cell type more inclined toward less\n                favorable clinical outcomes.\n              \n                \"No.Total.IMGP\": The number of immune marker gene\n                pairs (IMGP) associated with the provided cell pair. It reflects\n                the total count of gene interactions that are relevant to the\n                specific cell-cell interaction being analyzed.\n              \n                \"No.Shared.IMGP\": The count of gene-gene interactions\n                that are shared within the provided cell pair. It indicates how\n                many of the gene-gene interactions in the total count are\n                specific to the interaction between the two cell types.",
    "\"Enrichment.Ratio\": This ratio represents the degree\n                of enrichment for the shared gene interactions within the given\n                cell pair. It indicates how much more frequently these shared\n                interactions occur than would be expected by chance.\n              \n                \"P.Value\": The p-value associated with the enrichment\n                analysis. It quantifies the statistical significance of the\n                observed enrichment. A lower p-value suggests stronger evidence\n                against the null hypothesis of no enrichment.\n              \n                \"Adjust.P.Value\": This column provides the adjusted\n                p-value, which takes into consideration the multiple testing\n                issues when analyzing multiple interactions. It’s often used to\n                control the false discovery rate and provides a more stringent\n                assessment of significance.\n              \n                \"Shared.IMGP\" and \"Total.IMGP\": These\n                columns contain concatenated lists of gene interaction pairs\n                that are shared and total, respectively, within the specific\n                cell pair. They provide insight into the representative\n                gene-gene interactions contributing to the cell-cell\n                interaction.\n                \nres <- TimiEnrich( gene = GP,\nbackground = background,\ngeneset = cell_pair,\np.adj = \"BH\",\ncore = 20,\npair=TRUE)\n        Determine the condition and cutoff to define the cell-cell interaction.\n        \nNote: By default, the cell-cell\n          interaction is defined as a pairwise cell-cell combination whose\n          adjusted P value (condition) is less than 0.05 (cutoff). The\n          percentage of cell-cell interaction is usually around 10%.\n          Troubleshooting 5[href=https://www.wicell.org#troubleshooting].\n        \n# Count the number of marker pairs with an Adjusted P-value less\n              than 0.05\nsum(res$Adjust.P.Value < 0.05) # Returns 54\n# Calculate the percentage of cell-cell interaction defined by\n              the above condition and the cutoff\nround(sum(res$Adjust.P.Value < 0.05)/nrow(res) ∗ 100, 2) #\n              Returns 11.69\n# Set up a variable to define the condition for cell-cell\n              interaction based on the Adjusted P-value.\nCIcondition <- \"Adjust.P.Value\"\n# Set up a variable to define the cutoff value for the Adjusted\n              P-value.\nCIcutoff <- 0.05\n# CI represents Cell-cell Interaction\nOptional: Enhancing stringency of\n          conditions through permutation for false discovery rate (FDR)",
    "estimation using the `TimiPermFDR()` function. (Timing: 4 min)\n        \n        The `TimiPermFDR()` function aims to make more cautious selections of\n        cell interactions or when there’s a need to evaluate the robustness of\n        newly identified cell-type annotations. By permuting sets of marker\n        genes associated with different cell types, the function enables the\n        assessment of cell-type marker quality while effectively controlling the\n        False Discovery Rate (FDR). This permutation-driven approach disrupts\n        the intrinsic link between genes and cell types, facilitating an\n        unbiased evaluation of the interactions. The calculated FDR values for\n        each interaction offer a reliable measure of statistical significance,\n        aiding researchers in identifying interactions that exhibit robustness\n        beyond random chance. Whether refining interaction selections or testing\n        the reliability of novel discoveries, the` TimiPermFDR()` function\n        provides an essential avenue for enhancing the accuracy and credibility\n        of cell interaction analyses. `TimiPermFDR()` function takes as input\n        the results of `TimiEnrich()` function (`resdata = res`), marker gene\n        information (`geneset = geneset`), gene-gene interactions (`gene = GP`),\n        background information (`background = background`) and other relevant\n        parameters. Through a certain number of gene set permutations (`niter =\n        100′), the function generates shuffled marker gene sets while\n        maintaining their sizes. It then employs these shuffled sets to analyze\n        cell interactions and compute the FDR for each interaction. As a result,\n        A new column named \"Permutation.FDR\" is added to the data\n        frame of cell-cell interaction statistics generated from the\n        `TimiEnrich()` function (Figure 5[href=https://www.wicell.org#fig5]C). The function\n        also utilizes parallel computing by setting the parameter `core`.\n        \nres <- TimiPermFDR( resdata = res,\ngeneset = geneset,\ngene = GP,\nbackground = background,\nniter = 100,\ncore = 20)\nNote: The intermediate results `res`\n          after this step has been renamed as `Bindea2013c_enrich` and saved as\n          example data, which can be loaded by the below codes:\n        \ndata(Bindea2013c_enrich)\nres <- Bindea2013c_enrich.",
    "Visualize top interactions and enrichment statistics using the\n        `TimiDotplot()` function.\n        \n            Description: The `TimiDotplot()` function is designed to visualize\n            the enrichment results of selected cell-cell interaction. It creates\n            a dot plot (Figure 5[href=https://www.wicell.org#fig5]D) where the x-axis displays\n            chosen cell interactions (The arrow “→” is replaced by an underscore\n            \"_\"), the y-axis represents the Enrichment Ratio, and the color of\n            the dots corresponds to the P-value or FDR determined by the chosen\n            condition column values, ranging from low (green) to high (purple).\n            Additionally, the size of the dots indicates the number of marker\n            pairs shared by query pairs and annotation pairs.\n          \n            Parameters:\n            \n                `resdata` (required): TimiGP enrichment result generated from\n                the` TimiEnrich()` function or modified with TimiPermFDR()\n                function.\n              \n                `select`: A numeric vector representing the selected cell\n                interactions based on the \"Index\" column in `resdata`. The\n                default selection includes the top 5 enrichments.\n              \n                `condition`: A character value specifying the column name in\n                `resdata` for the color representation of the dot plot. It can\n                be one of \"P.Value\", \"Adjust.P.Value\", or \"Permutation.FDR\". The\n                default is \"Adjust.P.Value\".\n              \n                `cutoff`: The maximum value for the color bar. The default is\n                0.05 for \"Adjust.P.Value\", but different values (0.01 for\n                \"P.Value\" and 0.2 for \"Permutation.FDR\") are recommended for\n                other conditions.\n              \n            Return: An enrichment dot plot visualizing the selected cell\n            interactions' enrichment results. It is a ‘ggplot2’ plot since the\n            function requires the ‘ggplot2’ package for plotting. The \"Favorable\n            Outcome\" label is added to the top left corner of the plot, as an\n            indicator that the cell-cell interaction is associated with\n            favorable clinical outcomes.\n          \nTimiDotplot ( resdata = res,\nselect = c(1:10),\ncondition = CIcondition,\ncutoff = CIcutoff)\n      Step 6: Build and analyze the cell-cell interaction network\n    \nTiming: 2 s\n      Connecting all selected cell-cell interactions, TimiGP constructs a\n      directed network linked to a positive prognosis. This network offers a",
    "comprehensive depiction of the association between Tumor Immune\n      Microenvironment (TIME) and clinical outcomes. In this network, each node\n      signifies a specific cell type, while an edge signifies a higher relative\n      abundance between two cell types in the TIME associated with a favorable\n      prognosis. This network demonstrates a hierarchical structure in terms of\n      degrees, referring to the number edges that are linked to each node.\n    \n      Based on the degree information, TimiGP computes a favorability score,\n      which consists of two components, a favorable score and an unfavorable\n      score. A higher favorable score indicates that the corresponding cell type\n      is generally associated with a positive prognosis and primarily functions\n      as anti-tumor cells in the TIME network. Conversely, a higher unfavorable\n      score suggests an adverse prognostic association and pro-tumor functions.\n    \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3156-Fig6.jpg\n          Figure 6. Output screenshots of the `TimiCellNetwork()` function\n        \n          TimiCellNetwork returns a list of three data frames: (A) “network”,\n          (B) “node”, (C) “edge”. The type of interaction is “TimiGP”\n          representing cell-cell interaction exported by the TimiGP method. The\n          screenshot displays white text on a black background within the\n          terminal, with additional manual annotations in red text, arrow, or\n          box.\n        \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3156-Fig7.jpg\n          Figure 7. Output example of TimiGeneChord()` and `TimiFS()` functions\n        \n          (A) Chord diagram of gene-gene interactions representing Cytotoxic →\n          Tumor cell interaction; (B) Output screenshots of `TimiFS()` function.\n          The screenshot displays white text on a black background within the\n          terminal, with additional manual annotations in red text, arrow, or\n          box.\n        \n        Construct the cell-cell network and export the files for ‘Cytoscape’\n        visualization using the `TimiCellNetwork()` function.\n        \nNote: The parameters of the\n          `TimiCellNetwork()` function closely resemble those of the\n          `TimiGeneNetwork()` function, simplifying their usage and making it\n          straightforward to work with both functions.\n        \n            The input data `resdata` of the `TimiCellNetwork()` function is the\n            enrichment results `res` generated from `TimiEnrich()` or modified\n            with `TimiPermFDR()` functions.",
    "The `TimiCellNetwork()` function uses three parameters to define the\n            cell-cell interaction from enrichment statistics.\n            \n                `condition`: A value in one of \"P.Value\",\n                \"Adjust.P.Value\" and \"Permutation.FDR\",\n                which is the column name of `resdata`, which contains\n                information related to statistical significance. The default\n                value is \"Adjust.P.Value\".\n              \n                `cutoff`: This parameter refers to a threshold value associated\n                with the 'condition'. It assists in the definition of\n                cell-cell interactions. Cell pairs with a value less than\n                this cutoff will be cell-cell interaction and included in the\n                network. The default value is 0.05.\n              \n                `select`: This parameter is a numeric vector denoting selected\n                cell interactions based on the \"Index\" column in\n                `resdata`. Default selection encompasses all cell-cell\n                interactions (adjusted p-value < 0.05). By default, this\n                parameter is set to \"NULL\", indicating that no\n                specific cell-cell interactions are selected. However, if you\n                manually choose cell-cell interactions as research of interest\n                for visualization using this parameter, the automatic filtering\n                based on the `cutoff` and `condition` will be overridden for\n                those selected cell-cell interactions.\n                Troubleshooting 5[href=https://www.wicell.org#troubleshooting].\n                \nNote: The default definition\n                  of cell-cell interactions is adjusted p-value\n                  (condition) < 0.05(cutoff).\n                \n            The `TimiCellNetwork()` function returns a list of network-required\n            data that can be further modified within R. There are three elements\n            in the list: 1) \"network\", 2) \"node\", and 3)\n            \"edge\" (Figure 6[href=https://www.wicell.org#fig6]). Each element is a\n            data frame. This function can also export these data by setting\n            `export = TRUE` (default) and generating the below three network\n            files that can be imported to ‘Cytoscape’ for network analysis and\n            visualization. Those files are saved to the specific location\n            provided through the `path` parameter.\n            \n                Network file (cell_network.sif): A simple interaction file\n                exported from “network”, a data frame containing information\n                about the network structure. It has 3 columns: 1) “Source”:\n                Source cell in an interaction (favorable cell); 2)",
    "“Interaction”: the type of interaction; 3) “Target”: Target cell\n                in an interaction(unfavorable cell).\n              \n                Node attributes file (cell_node.txt): A file exported from\n                “node”, a data frame containing information about nodes (cells)\n                in the network. It has three columns: 1) “Key”: This column\n                represents different cell types (nodes); 2) “No.Markers”: This\n                column contains the number of markers associated with each cell\n                type. 3) “Group”: This column seems to specify the group or\n                category to which the cell type belongs.\n              \n                Edge attributes file (cell_edge.txt): A file exported from\n                “edge”, a data frame containing information about edges\n                (interactions) in the cell-cell network. It adds a “Key” column\n                that represents a unique identifier for the interaction between\n                cells to the input `resdata` (Figures 5[href=https://www.wicell.org#fig5]A and\n                5B).\n                \nNote: If `export = TRUE` but\n                  `path = NULL`, those files will be exported to the current\n                  working directory.\n                \n            The `TimiCellNetwork()` function generates node information based on\n            three parameters.\n            \n                `dataset`: This parameter specifies the dataset to be used for\n                generating the cell network files. It expects a value from a\n                predefined set of options: \" “Bindea2013_Cancer\",\n                \"Charoentong2017\", Bindea2013\",\n                \"Xu2018\", \"Newman2015\",\n                \"Zheng2021\", \"Tirosh2016\", or\n                \"Other\". The first seven options are accompanied by\n                preset configurations linked to internal cell-type annotations\n                utilized for the analysis. Specifically, these options\n                correspond to: `CellType_Bindea2013_cancer`,\n                `CellType_Charoentong2017_Bindea2013_Xu2018_Immune` (this\n                includes three cell-type annotations),\n                `CellType_Newman2015_LM22`, `CellType_Zheng2021_Tcell, and\n                CellType_Tirosh2016_melanoma_TME`, respectively. If you want to\n                use a different dataset or customize node attributes, please\n                choose \"Other\" and then provide `geneset`\n              \n                `geneset`: This parameter is a data frame that contains\n                information about cell-type markers. It should have at least\n                three columns: the first column represents cell types, the\n                second column represents marker genes, and the optional third\n                column represents the name of the dataset. The `geneset`\n                parameter is used in conjunction with the dataset parameter. If",
    "you choose \"Other\" for the dataset, you need to\n                provide a `geneset` data frame to define the cell type and its\n                number of markers for node attributes.\n              \n                `group`: This parameter allows the specification of custom\n                cell-type groups when using the \"Other\" `dataset`\n                option, which enables the organization of cell types based on\n                specific research needs. It is a vector of self-defined cell\n                groups, whose names are all favorable and unfavorable cell types\n                in selection.\n                \nCellNET <- TimiCellNetwork( resdata = res,\nselect = NULL,\ndataset = \"Bindea2013_Cancer\",\ngroup = NULL,\ngeneset = NULL,\ncondition = CIcondition,\ncutoff = CIcutoff,\nexport = TRUE,\npath = \"./\")\n# Display the first few rows of the 'network'\n                      component in the CellNET list\nhead(CellNET$network)\n# Display the first few rows of the 'node'\n                      component in the CellNET object\nhead(CellNET$node)\n# Display the first few rows of the 'edge'\n                      component in the NET object\nhead(CellNET$edge)\n        Visualize the cell-cell interaction network with chord using the\n        `TimiCellChord()` function.\n        \nNote: Besides exporting network files\n          using the `TimiCellNetwork()` function and visualizing through\n          external software, for example, ‘Cytoscape’, TimiGP provides another\n          visualization approach, the `TimiCellChord()` function. This function\n          generates a chord diagram to visualize the cell-cell interaction\n          network.\n        \n            The input data `resdata` of the `TimiCellChord()` function is the\n            enrichment results `res` generated from `TimiEnrich()` or modified\n            with `TimiPermFDR()` functions.\n          \n            The `TimiCellChord()` function uses three parameters to define the\n            cell-cell interaction from enrichment statistics.\n            \nNote: The criteria to define the\n              cell-cell interactions of the `TimiCellChord()` function is\n              consistent with the `TimiCellNetwork()` function. So the usage of\n              relevant parameters is the same.\n            \n                `condition`: A value in one of \"P.Value\",\n                \"Adjust.P.Value\" and \"Permutation.FDR\",\n                which is the column name of `resdata`, which contains\n                information related to statistical significance. The default\n                value is \"Adjust.P.Value\".\n              \n                `cutoff`: This parameter refers to a threshold value associated",
    "with the 'condition'. It assists in the definition of\n                cell-cell interactions. Cell pairs with a value less than this\n                cutoff will be cell-cell interaction and included in the\n                network. The default value for the 'cutoff' parameter is\n                0.05.\n              \n                `select`: This parameter is a numeric vector denoting selected\n                cell interactions based on the \"Index\" column in\n                `resdata`. Default selection encompasses all cell-cell\n                interactions (adjusted p-value < 0.05). By default, this\n                parameter is set to “NULL”, indicating that no specific\n                cell-cell interactions are selected. However, if you manually\n                choose cell-cell interactions as research of interest for\n                visualization using this parameter, the automatic filtering\n                based on the `cutoff` and `condition` will be overridden for\n                those selected cell-cell interactions.\n                Troubleshooting 5[href=https://www.wicell.org#troubleshooting].\n                \nNote: The default definition\n                  of cell-cell interactions is adjusted p-value\n                  (condition) < 0.05(cutoff).\n                \n            The `TimiCellChord()` function generates a circular plot of\n            cell-cell interactions through the ‘circlize’ package (Figure 2[href=https://www.wicell.org#fig2]B).\n            \n                Sectors (Nodes): Cell types are represented as sectors along the\n                circumference of the circle. Each sector corresponds to a\n                specific cell type, and the arrangement of these sectors around\n                the circle provides a visual representation of the relationships\n                between different cell types. The color of the outer ring of\n                each sector is consistent with the color used to represent that\n                particular cell type. This color coding makes it easy to\n                identify and associate the color of the outer ring with a\n                specific cell type, allowing viewers to quickly recognize and\n                interpret the plot. The inner ring, which is closer to the\n                center of the circle, is colored to match the unfavorable cell\n                type to which the link points. When there is an interaction\n                between two cell types (e.g., a directional arrow from one\n                favorable cell to an unfavorable cell), the color of the inner\n                ring corresponds to the unfavorable cell type, providing",
    "additional visual information about the interaction or\n                relationship between these cell types. In addition, there is a\n                larger gap that creates more space between different groups of\n                cells.\n              \n            The `TimiCellChord()` function generates node information and\n            enables customized plots based on four parameters.\n            \nNote: The customization of the\n              `TimiCellChord()` function is similar to the `TimiCellNetwork()`\n              function except for the `color` parameter for visualization.\n            \n                `dataset`: This parameter specifies the dataset to be used for\n                generating the cell network files. It expects a value from a\n                predefined set of options: \" “Bindea2013_Cancer\",\n                \"Charoentong2017\", Bindea2013\",\n                \"Xu2018\", \"Newman2015\",\n                \"Zheng2021\", \"Tirosh2016\", or\n                \"Other\". The first seven options are accompanied by\n                preset configurations linked to internal cell-type annotations\n                utilized for the analysis. Specifically, these options\n                correspond to: `CellType_Bindea2013_cancer`,\n                `CellType_Charoentong2017_Bindea2013_Xu2018_Immune` (this\n                includes three cell-type annotations),\n                `CellType_Newman2015_LM22`, `CellType_Zheng2021_Tcell, and\n                CellType_Tirosh2016_melanoma_TME`, respectively. TimiGP package\n                provides internal visualization (group and color) settings for\n                this dataset. If you want to use a different dataset or\n                customize the group and color for each cell type, please choose\n                \"Other\" and then provide `group` and `color`.\n              \n                `group` and `color`: These parameters allow to specify custom\n                cell-type groups and colors when using the \"Other\"\n                “dataset” option, which enables organization and visualization\n                of cell types based on specific research needs. They are vectors\n                of cell groups (e.g., “immune cell”) or colors (e.g., “blue” or\n                “#deebf7”), whose names are all favorable and unfavorable cell\n                types in selection.\n                \nTimiCellChord( resdata = res,\nselect = NULL,\ndataset = \"Bindea2013_Cancer\",\ngroup = NULL,\ncolor = NULL,\ncondition = CIcondition,\ncutoff = CIcutoff)\nOptional: Visualize\n                  representative marker gene-gene interactions of selected\n                  cell-cell interaction using the `TimiGeneChord()` function.\n                \n                This function is designed to create informative chord diagrams\n                that reveal the relationships between genes enriched in\n                favorable and unfavorable cell types in the specific cell-cell\n                interactions (Figure 7[href=https://www.wicell.org#fig7]A). The diagram",
    "elegantly displays directional arrows, pointing from enriched\n                marker genes of one cell type (favorable) to those of another\n                (unfavorable), helping to elucidate gene-gene interaction behind\n                the cell-cell interaction. From the same input `resdata` as the\n                `TimiCellChord()` function, users can specify the cell-cell\n                interaction of interest by setting the `select` parameter\n                according to the \"Index\" column, and visualize the\n                gene-gene interaction with default or customized colors (`color`\n                parameter) to uniquely identify enriched marker genes. The\n                resulting chord diagram provides a clear and intuitive\n                representation of gene-gene interactions within the chosen cell\n                interaction, aiding researchers in understanding the molecular\n                underpinnings of cell-type-specific behaviors and their impact\n                on biological processes.\n                \n# `select` the cell-cell interaction #3 according to the\n                      index\n# Default `color`\nTimiGeneChord(resdata = res,select = 3, color = NULL)\n        Prioritize critical prognostic cell types with favorability scores\n        calculated by the `TimiFS()` function.\n        \n            Description: According to the degree of the cell-cell interaction\n            network, the `TimiFS()` function calculates favorability scores to\n            prioritize the association of cell types with clinical outcomes. For\n            each cell type, the score estimates its association with both\n            favorable clinical outcome (favorable score) and unfavorable\n            prognosis, (unfavorable score). A higher favorable score indicates a\n            positive prognosis and anti-tumor cell function, while a higher\n            unfavorable score indicates an adverse prognosis and pro-tumor\n            function in the TIME network.\n          \n            Parameters: The parameters of the `TimiFS()` function are similar to\n            those of `TimiCellChord()` and `TimiNetwork()` functions.\n            \n                The input data `resdata` is the enrichment results `res`\n                generated from `TimiEnrich()` or modified with `TimiPermFDR()`\n                functions.\n              \n                The criteria to define the cell-cell interactions of `TimiFS()`\n                function is consistent with the `TimiCellChord()` and\n                `TimiCellNetwork()` functions. `condition` is a value in one of\n                \"P.Value\", \"Adjust.P.Value\" and\n                \"Permutation.FDR\", and `cutoff` refers to a threshold\n                value associated with the 'condition'. The default\n                definition of cell-cell interactions is adjusted p-value",
    "(`condition`) < 0.05(`cutoff`).\n              \n            Return: A data frame with information about the favorability scores\n            of various cell types (Figure 7[href=https://www.wicell.org#fig7]B). Each row in\n            the data frame represents a different cell type, and the columns\n            provide the following information:\n            \n                “Index”: An index or identifier for each cell type, used for\n                visualization with the `TimiFSBar()` function.\n              \n                “Rank”: The rank of the cell type based on the difference\n                between its Favorable Score and Unfavorable Score. Cell types\n                with the highest positive differences (indicating Favorable) are\n                ranked higher.\n              \n“Cell.Type”: The name of the cell type.\n                “OutDegree”: The out-degrees of the cell type, which is the\n                number of outgoing edges of the cell type in the cell-cell\n                interaction network.\n              \n                “Favorable.Score”: The favorable score of the cell type\n                calculated from out-degrees, indicating a positive prognosis and\n                anti-tumor cell function.\n              \n                “Indegree”: The in-degree of the cell type, which is the number\n                of ingoing edges of the cell type in the cell-cell interaction\n                network.\n              \n                “Unfavorable.Score”: The unfavorable score of the cell type\n                calculated from the in-degree, indicating a negative prognosis\n                and pro-tumor function.\n              \n                “Difference”: The difference between the Favorable Score and the\n                Unfavorable Score. This value indicates whether the cell type is\n                more favorable (positive value) or more unfavorable (negative\n                value) in terms of prognosis.\n              \n                “Group”: The classification of the cell type based on the\n                Difference value. If the Difference is greater than 0, the cell\n                type is classified as \"F\" (Favorable). If the\n                difference is negative, the cell type is classified as\n                \"U\" (Unfavorable).\n              \nscore <- TimiFS( resdata = res,\ncondition = CIcondition,\ncutoff = CIcutoff)\n        Visualize favorability scores using the `TimiFSBar()` function.\n        \n            Description: The `TimiFSBar()` function generates a bar plot of the\n            favorability score of cell types, allowing for the evaluation of\n            their favorable and unfavorable roles in prognosis and anti-tumor\n            response.\n          \n            Parameters:",
    "`score`: Favorability score calculated using the `TimiFS()`\n                function.\n              \n                `select`: A numeric vector of selected cell types according to\n                the \"Index\" column in `resdata`. The default selection\n                encompasses all cell types.\n              \n            Return: A bar plot illustrating the favorability scores of different\n            cell types, with orange bars indicating favorable scores (positive)\n            and blue bars indicating unfavorable scores (negative). It is a\n            ‘ggplot2’ plot since the function requires the ‘ggplot2’ package for\n            plotting (Figure 2[href=https://www.wicell.org#fig2]C).\n          \n# Visualize favorability scores for selected cell types,\n# including the top 5 and bottom 3 cell types.\nTimiFSBar(score, select = c(1:5, (nrow(score) -\n          2):nrow(score)))"
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Immunology",
    "Bioinformatics",
    "Systems Biology",
    "Cancer",
    "Gene Expression",
    "Single Cell"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}