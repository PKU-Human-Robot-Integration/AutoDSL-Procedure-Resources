{
  "id": 3976,
  "origin_website": "Cell",
  "title": "Sample processing and single cell RNA-sequencing of peripheral blood immune cells from COVID-19 patients",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nFACS sorting\nTiming: 30 min/sample.\nNote: Sorting time can vary considerably depending on the concentration of viable cells recovered after thawing. Clogs may occur which will also lengthen sorting time. Cell clumps can be removed by cell filtering using 70 μm strainers, and if available, multiple sorters can be used simultaneously to decrease the sorting time.\nThis section covers thawing, washing, and sorting live cells from frozen buffy coat.\nCollect frozen buffy coat samples and immediately place them on dry ice until ready for sorting.\nThaw one sample at a time unless multiple sorters are available that can be used simultaneously. Thaw samples by swirling gently in a 37°C water bath, until one or two small ice crystals remain.\nAdd 15 mL of buffy coat wash solution to each sample and centrifuge at 350 rcf at ambient temperature for 5 min. Discard the supernatant, and resuspend the cell pellets in a minimum of 500 μL of buffy coat wash solution.\nAdd 3 μM DAPI and incubate for 5 min at room temperature.\nAfter DAPI staining, proceed immediately to sorting. Sort live (DAPI-negative) singlet cells for scRNA-seq analysis. The gating strategy for FACS sorting is illustrated in Figure 1[href=https://www.wicell.org#fig1].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/695-Fig1.jpg\nFigure 1. Gating strategy for FACS sorting\nSequential gating is utilized to obtain live PBMCs for subsequent scRNA-seq.",
    "Note: Buffy coats will likely have erythrocyte contamination. If blood clots are present, they may decrease cell recovery and filtering sample through a 70 μm cell strainer is recommended. Access to multiple, simultaneous sorting may not be an option without a dedicated core facility. While it may introduce a batch effect, sample preparation may be spread over multiple days if necessary. Viability of thawed buffy coat is lower than viability of PBMCs isolated from fresh blood samples; expect 60%–75% viability. After thawing and sorting, an average cell yield of 200–250,000 cells can be expected.\nMethanol fixation and 10X processing\nTiming: Methanol fixation ∼1 h\nThis part of the protocol is modified based on the 10x Genomics protocol “Methanol Fixation of Cells for Single Cell RNA Sequencing” CG000136 (https://support.10xgenomics.com/single-cell-gene-expression/sample-prep/doc/demonstrated-protocol-methanol-fixation-of-cells-for-single-cell-rna-sequencing[href=https://support.10xgenomics.com/single-cell-gene-expression/sample-prep/doc/demonstrated-protocol-methanol-fixation-of-cells-for-single-cell-rna-sequencing]).\nBuffer preparation before starting:\n3X SSC Buffer: Prepare 3× SSC buffer in nuclease free water using 20× SSC stock solution.\ntable:files/protocols_protocol_695_3.csv\nWash-Resuspension buffer: Prepare wash resuspension buffer with 0.04% BSA, 1 mM DTT, 0.2 U/μL RNase inhibitor in 3× SSC buffer. Wash-Resuspension buffer\ntable:files/protocols_protocol_695_4.csv\nNote: Keep prepared buffers at 4°C. Timing is critical at this stage. Any delay may result in RNA loss. Start with as many cells as possible (ideally, more than a million) because there will be significant cell loss at the rehydration step.\nCollect FACS sorted cells by centrifuging at 500 rcf for 5 min at 4°C.\nNote: generally 300 rcf is suggested, but we recommend 500 rcf for efficient precipitation.\nCarefully remove the supernatant and do not disturb the pellet.\nAdd 1 mL chilled 1× DPBS with a wide-bore pipette tip (e.g., Thermo Scientific™2079G), gently pipette mix, centrifuge at 500 rcf at 4°C for 5 min.\nCarefully remove the supernatant and do not disturb the pellet.",
    "Resuspend the pellet in 200 μL chilled DPBS with a wide-bore pipette tip.\nAdd 800 μL chilled 100% methanol drop by drop to the cell suspension. Gently stir the cell suspension during the process. Scale up the volumes of 1× DPBS and methanol if using more than 1 million cells.\nIncubate at −20°C for 30 min.\nThe fixed cells can be stored at −20°C or −80°C for up to 6 weeks, or immediately proceed to rehydration.\nRehydration ∼10–15 min\nBefore starting the rehydration, prepare the 10X Genomics Single Cell kit for loading into the controller as soon as the cells are rehydrated.\nEquilibrate the methanol-fixed cells on ice for 5 min.\nCentrifuge at 1000 rcf for 5 min at 4°C.\nTransfer the supernatant to a new tube without disrupting the cell pellet (save the supernatant in case not enough cells were pelleted at this step).\nResuspend the cell pellet with an appropriate volume of wash-resuspension buffer based on the starting cell concentration and assuming ∼50% cell loss (refer to the 10X Genomics user manual Cell Suspension Volume Calculator Table for more information). Gently mix with a regular-bore pipette tip.\nFilter the sample through a 40 μm Flowmi Cell Strainer if there are large clumps.\nCount cells using a hemocytometer or automated cell counter to determine cell concentration. Proceed to scRNA-seq with the 10x Genomics Single Cell protocols.\nSingle-cell RNA-seq\nNote: Figure 2[href=https://www.wicell.org#fig2] summarizes the steps in the bioinformatics pipeline detailed below for analysis of the scRNAseq data\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/695-Fig2.jpg\nFigure 2. Overview of scRNA-seq data analysis\nA step-wise approach for systematic data processing, cell type identification, differential gene expression and pathway analysis is shown, as well as recommended software programs for each step.",
    "Capture single cells using a 10X Chromium Controller (10X Genomics) and prepare libraries as described in the Single Cell 3’ Next GEM V3.1 Reagent Kits User Guide (10X Genomics, https://support.10xgenomics.com/single-cell-gene-expression/library-prep/doc/user-guide-chromium-single-cell-3-reagent-kits-user-guide-v31-chemistry[href=https://support.10xgenomics.com/single-cell-gene-expression/library-prep/doc/user-guide-chromium-single-cell-3-reagent-kits-user-guide-v31-chemistry]).\nQuantify the barcoded sequencing libraries by quantitative PCR using the KAPA Library Quantification Kit (KAPA Biosystems, Wilmington, MA).\nSequence the libraries using a Novaseq 6000 (Illumina) with custom sequencing settings of 28 bp and 91 bp for read 1 and 2, respectively, to obtain a sequencing depth of ∼5 × 104 reads per cell.\nAlignment, 10X cell barcode demultiplexing, quality control, and batch correction\nAlignment and cell demultiplexing\nUse CellRanger v3.0.0 software with the default settings for demultiplexing cells according to their 10X cell barcodes and for aligning reads with STAR software to the human GRCh38 transcriptome reference downloaded from https://www.gencodegenes.org/[href=https://www.gencodegenes.org/] (contains all protein-coding and long non-coding RNA genes based on human GENCODE version 33 annotation) and the SARS-Cov2 virus genome MT246667.1, https://www.ncbi.nlm.nih.gov/nuccore/MT246667.1[href=https://www.ncbi.nlm.nih.gov/nuccore/MT246667.1].\nNote: We built a custom reference genome using the CellRanger software mkref function (see GEO: GSE154567).\nQC and filtering\nRemove ambient RNA derived from lysed cells using the SoupX package (Young and Behjati, 2020[href=https://www.wicell.org#bib15]).\nUse the single cell analysis R package Seurat v3.1.5 for data analysis (Stuart et al., 2019[href=https://www.wicell.org#bib12]).\nFor quality control and filtering out low quality cells, select only cells expressing more than 200 genes (defined as genes detected in at least 3 cells), UMI counts more than 500 and fewer than 20% mitochondrial genes. To minimize doublet contamination for each dataset, remove cells with a high number of genes detected using a fit model generated from the suggested “multiplet rate”/ “number of cells recovered” ratio as in the 10X Genomics user manual (Carraro et al., 2020[href=https://www.wicell.org#bib4]).",
    "Note: Figure 3[href=https://www.wicell.org#fig3] shows an example of ambient RNA removal (Figures 3[href=https://www.wicell.org#fig3]A and 3B), and filtering of low-quality cells (Figure 3[href=https://www.wicell.org#fig3]C). In our data, three patient groups were used: moderate COVID-19 (CM), severe COVID-19 (CS), and recovering (CR). Selection of cutoff range for filtering cells with mitochondrial content can vary from 1% to 20%. In our case, despite using a permissive value, very few cells had large mitochondrial gene content. The following codes have been deposited in GitHub using R markdown (https://github.com/ivonyao/Cell-Type-Specific-Immune-Dysregulation-in-Severely-Ill-COVID-19-Patients/tree/main/r%20code%20and%20markdowns[href=https://github.com/ivonyao/Cell-Type-Specific-Immune-Dysregulation-in-Severely-Ill-COVID-19-Patients/tree/main/r%20code%20and%20markdowns]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/695-Fig3.jpg\nFigure 3. Single cell demultiplex, quality control, and batch correction\n(A and B) HBA2 and HBB expression before and after ambient RNA clean up with SoupX.\n(C) Before and after quality control for nFeature_RNA (gene number per cell), nCount_RNA (UMI) and percent.mt (percentage of mitochondrial genes).\nSample code (Please note: assign your own data directory to DataDir):\nlibrary(Seurat)\nlibrary(ggplot2)\nlibrary(SoupX)\nlibrary(DropletUtils)\nlibrary(dplyr)\n### SoupX procedure\nDataDir = c('∼/covid19scRNAseq/CM1_2/outs', '∼/covid19scRNAseq/CM1_2/outs/filtered_feature_bc_matrix')\n#Load 10X Data to SoupX and Seurat\nsc = load10X(DataDir[1])\n## Loading raw count data\n## Loading cell-only count data\n## Loading extra analysis data where available\nseu <- Read10X(DataDir[2])\nseu <- CreateSeuratObject(counts = seu, project = \"CM1_2\")\nseu <- SCTransform(object = seu, verbose = T)\nseu <- RunPCA(object = seu, verbose = T)\nseu <- RunUMAP(object = seu, dims = 1:30,verbose = T)\nseu <- FindNeighbors(object = seu, dims = 1:30, verbose = T)\nseu <- FindClusters(object = seu, resolution = 0.5, verbose = T)\n#Check gene expression to ensure minimal RBC ambient RNA contamination\nFeaturePlot(seu, features=c(\"HBA2\", \"HBB\", \"HBD\"), max.cutoff=\"q90\")\nClusters <- seu$seurat_clusters\nsc = setClusters(sc,Clusters)\nsc = autoEstCont(sc)\nout = adjustCounts(sc)\n#check correction quality\nCM1_2 <- CreateSeuratObject(counts = out, project = \"CM1_2\")\nCM1_2 <- SCTransform(object = CM1_2, verbose = T)\nCM1_2 <- RunPCA(object = CM1_2, verbose = T)",
    "CM1_2 <- RunUMAP(object = CM1_2, dims = 1:30,verbose = T)\nCM1_2 <- FindNeighbors(object = CM1_2, dims = 1:30, verbose = T)\nCM1_2 <- FindClusters(object = CM1_2, resolution = 0.5, verbose = T)\nFeaturePlot(CM1_2, features=c(\"HBA2\", \"HBB\", \"HBD\"), max.cutoff=\"q90\")\nwrite10xCounts('∼/covid19scRNAseq/CM1_2/outs/desoup2', out)\n##QC process\nCM1_2=Read10x(∼/covid19scRNAseq/CM1_2/outs/desoup2')\nCM1_2 <- CreateSeuratObject(counts = CM1_2, project = \"CM1_2\")\nCM1_2[[\"percent.mt\"]] <- PercentageFeatureSet(CM1_2, pattern = \"ˆMT-\")\nVlnPlot(CM1_2, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), ncol = 3)\nncells <- c(500,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000)\nmultiplets <- c(0.4,0.8,1.6,2.3,3.1,3.9,4.6,5.4,6.1,6.9,7.6)\ncurva <- data.frame(multiplets,ncells)\nggplot(curva, aes(multiplets, ncells)) +\ngeom_point() +\ngeom_smooth(method = \"lm\")\nfit <- lm(multiplets ∼ ncells, curva)\nmodel <- function(x){\n0.0007589∗x + 0.0527214\n}\nperc <- model(ncol(CM1_2))\nq = (100 - perc)/100\nfeature_limit <- quantile(CM1_2$nFeature_RNA, q)\nVlnPlot(object=CM1_2,c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), pt.size = 0.1)\nCM1_2 <- subset(CM1_2, subset = nFeature_RNA > 200 & nCount_RNA>500 &nFeature_RNA < feature_limit & percent.mt < 20)\nCM1_2$group=\"Moderate\"\nCM1_2$patient=”CM1_2”\n##QC check\nVlnPlot(CM1_2, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), ncol = 3)\nsave(CM1_2, file=\"CM1_2.rds\")\nBatch correction and identification of major immune cell types\nNormalize the data using default normalization and data scaling from the Seurat package, which is a log normalization and linear model for data scaling.\nThe batch correction package Harmony with Seurat 3 wrapper can be used for data integration due to consideration of computation power (Korsunsky et al., 2019[href=https://www.wicell.org#bib7]). Process the batch correction with PCA (Principal Component Analysis) using the 5000 most variable genes, and use the first 20–30 independent components for downstream unbiased clustering with a resolution of 0.4.\nUse the UMAP (Uniform Manifold Approximation and Projection) method for visualization of unsupervised clustering. Use the Seurat RunUMAP function for UMAP reduction using the first 20 harmonized dimensions for immune cell types and 30 harmonized dimensions for immune cell subsets. Apply default settings embedded in the Seurat RunUMAP function, with min.dist of 0.3 and n_neighbors of 30.",
    "Note: For batch correction, the Harmony package requires less computing power compared to the Seurat Integration vignette. The number of PCs, genes, and resolution used can vary depending on sample quality. Generally, 20–30 PCs and 2000–5000 most variable genes will suffice, but testing with user-specific data is recommended. An estimation of the number of PCs can be calculated using the JackStrawPlot() or ElbowPlot() functions in Seurat, and in our dataset, 20 or 30 were appropriate, however, users should test their data to determine the optimal number. Please see https://satijalab.org/seurat/articles/pbmc3k_tutorial.html#determine-the-dimensionality-of-the-dataset-1[href=https://satijalab.org/seurat/articles/pbmc3k_tutorial.html#determine-the-dimensionality-of-the-dataset-1].\nSample code:\nlibrary(Seurat)\nlibrary(cowplot)\nlibrary(harmony)\nlibrary(dplyr)\nlibrary(ggplot2)\nload(\"CM1_2.rds\")\nload(\"CM3_4.rds\")\nload(\"CM5.rds\")\nload(\"CR13_14.rds\")\nload(\"CR15_16.rds\")\nload(\"CR17_18.rds\")\nload(\"CS7_8.rds\")\nload(\"CS9_10.rds\")\nload(\"CS11_12.rds\")\ncovid=merge(x=CM1_2, y=c(CM3_4, CM5, CR13_14, CR15_16, CR17_18, CS7_8, CS9_10, CS11_12))\ncovid<- covid%>%\nSeurat::NormalizeData(verbose = T) %>%\nFindVariableFeatures(selection.method = \"vst\", nfeatures = 5000) %>%\nScaleData(verbose = T, features = rownames(covid)) %>%\nRunPCA(pc.genes = covid@var.genes , npcs = 20, verbose = T)\ncovid<- covid%>%\nRunHarmony(\"patient\", plot_convergence = TRUE)\ncovid<- covid%>%\nRunUMAP(reduction = \"harmony\", dims = 1:20) %>%\nFindNeighbors(reduction = \"harmony\", dims = 1:20) %>%\nFindClusters(resolution = 0.4) %>%\nidentity()\nDimPlot(covid, reduction=\"umap\", label=T)\nsave(covid, file=\"covidharmony.rds\")\nIdentification of major immune cell types\nIdentify major immune cell types using the key genes presented in Table 1[href=https://www.wicell.org#tbl1] and illustrated in Figure 4[href=https://www.wicell.org#fig4], and verify cluster identification using at least one other method (see also Notes below this step).\ntable:files/protocols_protocol_695_5.csv\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/695-Fig4.jpg\nFigure 4. Identification of major blood cell subsets",
    "UMAP of all cells. (A–E) Major immune cell subsets were identified as: A) CD4 and CD8 T cells (CD3G and either CD4 or CD8B); (B) NK cells (cells expressing TYROBP and FCGR3A that cluster with CD8 T cells), monocytes (cells expressing CD14 and/or FCGR3A that cluster together), and cDCs (express high HLA genes and cluster near monocytes); (C) proliferating lymphocytes (MKI67 clustering with lymphocytes); (D) B cells (MS4A1), plasma cells (express JCHAIN but lack MS4A1 and SERPINF1), and pDCs (JCHAIN and SERPINF1); and E) erythrocytes (HBA2) and platelets (PF4) cells. (F) Identified immune cell subsets are indicated. Undefined and undesired subsets such as erythrocytes and platelets can be excluded from subsequent analysis. UMAPs before and after exclusion are shown. Figure modified from (Yao et al., 2021[href=https://www.wicell.org#bib14]).\nT cells can be identified as clusters expressing CD3G and either CD4 (CD4 T cells) or CD8A and CD8B (CD8 T cells) (Figure 4[href=https://www.wicell.org#fig4]A).\nNK cells cluster close to CD8 T cells due to shared expression of cytotoxic genes, but lack CD3G and express TYROBP and FCGR3A, which encode DAP12 and CD16, respectively (Figure 4[href=https://www.wicell.org#fig4]B). Additional lymphocytes may also be observed, including MKI67-expressing proliferating lymphocytes (Figure 4[href=https://www.wicell.org#fig4]C).\nMonocytes share expression of TYROBP with NK cells, but they cluster separately from NK cells and T cells (Figure 4[href=https://www.wicell.org#fig4]B). They also express CD14 and/or FCGR3A.\nConventional DCs (cDCs) are identified as cells that express high levels of HLA genes and CD74, and lack CD14 and FCGR3A, but cluster with monocytes (Figure 4[href=https://www.wicell.org#fig4]B), in contrast to plasmacytoid DCs (pDCs), which cluster separately and express SERPINF1 (Figure 4[href=https://www.wicell.org#fig4]D) and LILRA4.\nB cells are identified as cells expressing MS4A1 (encodes CD20), although antibody-producing plasma cells lack MS4A1 expression (Figure 4[href=https://www.wicell.org#fig4]D).",
    "Plasma cells express JCHAIN, but they share expression of this and several other genes with plasmacytoid DCs (pDCs) (Figure 4[href=https://www.wicell.org#fig4]D). Unlike pDCs, however, plasma cells do not express SERPINF1 (Figure 4[href=https://www.wicell.org#fig4]D) and LILRA4, so these genes can be used to distinguish them.\nNote: Contaminating erythrocytes (HBA2) and platelets (PF4) can be identified and excluded along with any other undesired or undefined populations (Figures 4[href=https://www.wicell.org#fig4]E and 4F). After major immune cell types have been defined, further dimensionality reduction analyses can be performed to identify subsets of immune cells (see Table 2[href=https://www.wicell.org#tbl2] for key genes). For instance, performing dimensionality reduction of B and plasma cells permits identification of immature, naïve, activated, memory and plasma cells (Figure 5[href=https://www.wicell.org#fig5]), and classical and non-classical monocytes can also be distinguished by dimensionality reduction of monocytes and DCs (Figure 6[href=https://www.wicell.org#fig6]). Investigators should not rely exclusively on the marker genes indicated here but should also check other differentially expressed genes between clusters (e.g., top 10 or top 20) to confirm cell identities. Comparison to Human Cell Atlas (Immune System) or other immune subset RNAseq datasets can be helpful. Cell type identification can also be performed using computational packages such as SingleR, which applies cell identification labels from reference datasets to the test dataset based on gene expression profiles. However, it is important that appropriate reference datasets are used, and the expression of key markers should be verified. Whichever method is used, caution should be exercised to verify that subsets are correctly identified.\ntable:files/protocols_protocol_695_6.csv\naNote that the immune cell subsets are representative examples and are not meant to be comprehensive.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/695-Fig5.jpg\nFigure 5. Identification of B and plasma cell subsets\nUMAP of B and plasma cells only.",
    "(A) B and plasma cell clusters were identified as immature B cells (IL7R), naïve and activated B cells (IGHM, IGHD, IL4R), activated B cells (CD69), plasma cells (CD27, CD38, JCHAIN) and memory B cells (AIM2).\n(B) Identified subsets are indicated.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/695-Fig6.jpg\nFigure 6. Identification of monocyte and DC subsets\nUMAP of monocytes and DCs only.\n(A) Monocyte clusters and pDCs were identified as classical monocytes (CD14), non-classical monocytes (FCGR3A), and pDCs (SERPINF1, LILRA4).\n(B) cDCs are predominantly DC2 cells (HLA-DRB1, CD1C, FCER1A, CLEC10 and low or no monocyte gene expression).\n(C) Identified subsets are indicated.\nStatistical analyses\nDifferential gene expression (DEG)\nOnce major cell types have been identified, up- or downregulated genes in a cell type of interest from COVID-19 patient groups can be determined.\nCalculate differentially expressed genes between groups for each cell type using Mode-based Analysis of Single-cell transcriptomics (MAST) (Finak et al., 2015[href=https://www.wicell.org#bib5]). Comparisons are made between two patient groups at a time, for example CD8 T cells from Severe vs Moderate COVID-19 or Severe vs. Recovering.\nSample code:\nload(\"CD8.rds\")\nlibrary(ggplot2)\nlibrary(Seurat)\nlibrary(cowplot)\nlibrary(dplyr)\nlibrary(ggpubr)\nlibrary(calibrate)\nlibrary(MAST)\nIdents(CD8)=\"group\"\nDimPlot(CD8, label=T, split.by=\"group\")\nlevels(CD8)=c(\"Moderate\", \"Severe\", \"Recovering\")\nCD8$celltype=Idents(CD8)\nCD8_Moderate_vs_Severe=FindMarkers(CD8, ident.1=\"Moderate\", ident.2=\"Severe\", test.use=\"MAST\")\nwrite.csv(CD8_Moderate_vs_Severe, \"CD8_Moderate_vs_Severe.csv\")\nTransfer CSV files to Excel and sort the data into genes that are upregulated or downregulated between groups, with an adjusted P-value (FDR) cutoff of < 0.01 (or other thresholds as deemed appropriate).",
    "Note: Comparisons in gene expression are made based on what is defined as “ident.1” and “ident.2”. If the average log fold change is positive, this indicates gene expression is increased in ident.1 compared to ident.2. If the average log fold change is negative, gene expression is decreased in ident.1 vs ident.2. Because lists of DEGs are loaded into other analysis platforms later, it is important to name DEG lists in such a way that it is clear what comparison is being made based on what is defined as ident.1 and ident.2.\nFunctional enrichment analysis\nUpload gene lists of up- or downregulated DEGs (FDR < 0.01) into Webgestalt (Liao et al., 2019[href=https://www.wicell.org#bib9]) to perform over-representation analysis using the Gene Ontology (GO) database (http://geneontology.org[href=http://geneontology.org]) for non-redundant biological processes in each immune cell type. This allows identification of biological processes that are over-represented from user provided DEGs between severity groups in each cell type. Results are based on the hypergeometric test to evaluate enrichment P-values for GO biological processes which are then adjusted for multiple comparisons (FDR < 0.05). Enriched gene sets provide an overview of altered biological processes in circulating immune cell types between patient groups.\nDownload gene sets for further analysis such as calculation of pathway module scores.\nNote: Many alternative programs for functional enrichment analysis are available, such as DAVID (https://david.ncifcrf.gov/tools.jsp[href=https://david.ncifcrf.gov/tools.jsp]), EnrichR (https://maayanlab.cloud/Enrichr/[href=https://maayanlab.cloud/Enrichr/]), and Gene Set Enrichment Analysis (GSEA, https://www.gsea-msigdb.org/gsea/index.jsp[href=https://www.gsea-msigdb.org/gsea/index.jsp]).\nPathway module analysis\nUse enriched gene sets for biological processes of interest returned from functional enrichment analysis to define pathway modules for each cell type.",
    "Use the union of genes listed in the enriched gene sets in all COVID-19 groups for biological processes of interest to determine pathway modules within each immune compartment. For example, if “response to type I interferon” in CD8 T cells is enriched in Moderate vs Severe groups, and in Severe vs Recovering groups, the union of both gene sets forms the pathway module.\nCalculate pathway module scores using the AddModuleScore function of the Seurat package, which calculates the average expression of each gene signature list subtracted from the aggregated expression of control feature sets. All analyzed features are binned based on averaged expression, and the control features are randomly selected from each bin. Pathway module scores can be calculated for single cells and individual patients within groups.\nSample code for pathway module scores for the biological process “response to type I interferon” in single cells:\nload(\"CD8.rds\")\nlibrary(ggplot2)\nlibrary(Seurat)\nlibrary(cowplot)\nlibrary(dplyr)\nlibrary(future)\nlibrary(ggpubr)\nlibrary(calibrate)\nIdents(CD8)=\"group\"\nlevels(CD8)=c(\"Moderate\", \"Severe\", \"Recovering\")\nCD8$group=Idents(CD8)\nIdents(CD8)=\"subtype\"\n#Define list for module\nresponseT1IFN<-list(c(\"MX1\", \"ISG15\", \"IFI6\", \"IRF7\", \"MX2\", \"STAT1\", \"ISG20\", \"XAF1\", \"IFITM1\", \"BST2\", \"SP100\", \"IFIT3\", \"IFIT1\", \"OAS1\", \"OAS2\", \"IFITM2\", \"IFI35\", \"ADAR\", \"SAMHD1\", \"HSP90AB1\", \"STAT2\", \"IFNAR1\", \"SETD2\", \"OASL\", \"PTPN11\", \"C19orf66\", \"PSMB8\", \"IRF9\", \"EIF2AK2\", \"NDUFA13\", \"PLSCR1\"))\n#Module score and stats\nmy_comparisons <- list(c(\"Moderate\", \"Severe\"), c(\"Moderate\", \"Recovering\"), c(\"Recovering\", \"Severe\"))\nMethod <- \"kruskal.test\"\nTest <- \"wilcox.test\"\nCD8=AddModuleScore(object = CD8, features = responseT1IFN, ctrl = 100, name = \"responseT1IFN1\")\nIdents(CD8)=\"group\"\n#Clean graph, no stats\nVlnPlot(object = CD8, features = c(\"responseT1IFN11\"), pt.size = 0.0000, cols=c(\"#03A0FF\", \"#FF2600\", \"#7E7D7E\")) +\nstat_summary(fun = mean, geom='errorbar',aes(ymax = ..y.., ymin = ..y.., group = factor(\"group\")),\nwidth = 0.75, linetype = \"dashed\", colour=\"black\", size=1.5)+xlab(\"Patient Group\")+\nylab(\"Response to type I interferon\")+\nggtitle(label = element_blank())+theme(axis.text.x = element_text(angle = 30))\n#Use this to plot default meta data, which is cells\nresponseT1IFN.score3=CD8@meta.data\n#Makes dot plot of cells with stats\nggdotplot(responseT1IFN.score3, \"group\", \"responseT1IFN11\", order=c(\"Moderate\", \"Severe\", \"Recovering\"),",
    "color=\"black\", legend=\"none\", xlab=\"Patient Group\",\nylab=\"response to type I IFN\", binwidth=0.03)+stat_compare_means(comparisons=my_comparisons)+\nstat_compare_means(method=Method, paired=FALSE, size=6)+\nstat_summary(fun = mean, geom='errorbar',aes(ymax = ..y.., ymin = ..y.., group = factor(\"group\")),\nwidth = 0.5, linetype = \"dashed\", colour=\"black\", size=.75)+geom_boxplot()\nSample code for pathway module scores for the biological process “response to type I interferon in individual patients:\n#Module score and stats\nmy_comparisons <- list(c(\"Moderate\", \"Severe\"), c(\"Moderate\", \"Recovering\"), c(\"Recovering\", \"Severe\"))\nMethod <- \"kruskal.test\"\nTest <- \"wilcox.test\"\nCD8=AddModuleScore(object = CD8, features = responseT1IFN, ctrl = 100, name = \"responseT1IFN1\")\nIdents(CD8)=\"group\"\nresponseT1IFN.score<-aggregate(CD8$responseT1IFN11, by=list(CD8$patient), FUN=mean)\nresponseT1IFN.dot<-CD8@meta.data\nresponseT1IFN.dot$group<-factor(responseT1IFN.dot$group, levels = c(\"Moderate\", \"Severe\", \"Recovering\"))\nresponseT1IFN.dot1<-responseT1IFN.dot[,c( \"group\", \"patient\", \"responseT1IFN11\")]\nresponseT1IFN.dot2<-aggregate(responseT1IFN.dot1$responseT1IFN 1, by=list(responseT1IFN.dot1$patient), FUN=mean)\ncolnames(responseT1IFN.dot2)<-c(\"patient\", \"responseT1IFN11\")\nresponseT1IFN.dot2<-merge(responseT1IFN.dot2, unique(responseT1IFN.dot1[,c(\"patient\", \"group\")]))\n#Clean graph, no stats\nggdotplot(responseT1IFN.dot2, \"group\", \"responseT1IFN11\", order=c(\"Moderate\", \"Severe\", \"Recovering\"), color=\"black\", fill=c(\"#03A0FF\", \"#03A0FF\", \"#03A0FF\", \"#03A0FF\", \"#03A0FF\", \"#FF2600\", \"#FF2600\", \"#FF2600\", \"#FF2600\", \"#FF2600\", \"#FF2600\",\"#7E7D7E\", \"#7E7D7E\",\"#7E7D7E\",\"#7E7D7E\", \"#7E7D7E\",\"#7E7D7E\"), legend=\"none\", xlab=\"Patient Group\", ylab=\"response to type I interferon\", binwidth=0.03)+stat_summary(fun = mean, geom='errorbar',aes(ymax = ..y.., ymin = ..y.., group = factor(\"group\")), width = 0.5, linetype = \"dashed\", colour=\"black\", size=.75)\n#Dot plot with stats\nggdotplot(responseT1IFN.dot2, \"group\", \" responseT1IFN11\", order=c(\"Moderate\", \"Severe\", \"Recovering\"), color=\"black\", fill=c(\"#03A0FF\", \"#03A0FF\", \"#03A0FF\", \"#03A0FF\", \"#03A0FF\", \"#FF2600\", \"#FF2600\", \"#FF2600\", \"#FF2600\", \"#FF2600\", \"#FF2600\",\"#7E7D7E\", \"#7E7D7E\",\"#7E7D7E\",\"#7E7D7E\", \"#7E7D7E\",\"#7E7D7E\"), legend=\"none\", xlab=\"Patient Group\", ylab=\"response to type I interferon\", binwidth=0.02)+stat_compare_means(comparisons = my_comparisons)+stat_compare_means(method=Method, paired=FALSE, size=6)+\nstat_summary(fun = mean, geom='errorbar',aes(ymax = ..y.., ymin = ..y.., group = factor(\"group\")), width = 0.5, linetype = \"dashed\", colour=\"black\", size=.75)\nNote: Sample code includes plots with and without statistical information; depending on how graphs are formatted it may be preferable to generate graphs in R and add statistical values in a different program better suited for editing.\nCanonical pathway, upstream regulator, and causal network analyses",
    "Ingenuity Pathway Analysis (IPA, Qiagen) is commercial software that provides a number of computational methods for functional enrichment and network analysis of transcriptomics (and other omics) data via a graphical user interface. Alternative, non-commercial options for gene product interaction visualization include STRING (https://string-db.org/[href=https://string-db.org/]) as well as Cytoscape (https://cytoscape.org/[href=https://cytoscape.org/]).\nUse IPA for the following analyses:",
    "Canonical pathway analysis: Most commonly used functional enrichment algorithms (such as DAVID, Webgestalt, GSEA) designate a pathway or process as being “over-represented” or “enriched” based on the same pattern of expression within genes (i.e., up- or down-regulation). However, activation of a pathway may require concurrent up-regulation of key genes as well as down-regulation of others (such as an inhibitor). IPA’s canonical pathway analysis is based on manually curated and highly granular information on over 700 pathways that incorporates the differential expression pattern of member genes when calculating activation scores. Canonical pathway analysis can be performed on all major immune cell types by inputting differentially expressed genes (FDR < 0.01) for each cell type (classical monocytes, NK cells, CD8 T cells, CD4 T cells, and B cells) in pairwise comparisons of patient conditions (Moderate, Severe, Recovering). Note that for each comparison (e.g., Severe vs. Moderate in a specific cell type) differentially up and down-regulated genes (FDR < 0.01) and their log2[fold change] values should be imported into IPA and a core analysis performed. Enrichment of canonical pathways is determined using Fisher’s exact test with Benjamini Hochberg adjusted P-values (FDR). Simultaneously, pathway activation status is assessed to determine whether significantly enriched pathways (FDR < 0.01) were activated or inhibited based on IPA’s knowledgebase of expected expression and phosphorylation patterns of gene products in a given canonical pathway using a z-score statistic: a positive z-score indicating activation and negative z-score indicating inhibition. A summary bubble chart of canonical pathway analysis is shown in Figure 7[href=https://www.wicell.org#fig7].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/695-Fig7.jpg\nFigure 7. Canonical pathway analysis",
    "For each immune cell type, differentially expressed genes between Severe vs. Moderate and Severe vs. Recovering COVID-19 patients were imported into IPA for core analysis. Significantly enriched canonical pathways between disease group comparisons across cell types were identified using FDR < 0.01. The activation/inhibition state of a given pathway was determined using z-scores. The bubble chart depicts a select number of canonical pathways that were significantly enriched in most cell types between patient groups. Figure modified from (Yao et al., 2021[href=https://www.wicell.org#bib14]).\nNote: A larger positive or negative z-score implies more confidence in the activation/inhibition status of a given pathway, but not its enrichment. Not every significantly enriched canonical pathway has a z-score due to insufficient information on the expected pattern of expression among its member genes in IPA’s knowledgebase. Non-commercial methods for building gene regulatory networks such as SCENIC (Van de Sande et al., 2020[href=https://www.wicell.org#bib13]) and NicheNet (Browaeys et al., 2020[href=https://www.wicell.org#bib2]), are alternatives to IPA.\nUpstream regulator/mechanistic network and causal network analyses: These can be performed as part of IPA’s core analysis using differentially expressed genes (FDR < 0.01) for each immune cell type in pairwise comparisons of COVID-19 conditions. The goal of this analysis is to identify regulators whose activation or inhibition is expected to result in gene expression patterns similar to those from the user’s inputted data. The direction of expression of the differentially expressed genes is compared to IPA’s knowledgebase using a statistical model (Kramer et al., 2014[href=https://www.wicell.org#bib8]) to identify key putative regulators and construct a mechanistic regulatory network. An overlap P-value is used to measure enrichment of network-regulated genes in the dataset and an activation z-score is calculated to identify likely regulating molecules based on statistically significant patterns of up- and downregulation as well as the expected activation state (activated or inhibited) of each regulator.",
    "Note: In our experience, interpretation of the results from this analysis can be challenging. For the upstream regulator/mechanistic network analysis, one issue we faced was identification of a very large number of candidate regulators in each comparison (e.g., Severe vs. Moderate in NK cells), which was further compounded by the many different comparisons being performed. To overcome this challenge, we focused on the Severe vs. Moderate COVID-19 comparison and selected one representative upstream regulator, IRF7, to build a mechanistic regulatory network (Figure 8[href=https://www.wicell.org#fig8]). IRF7 was chosen because it was consistently identified as one of the most significantly enriched upstream regulators across cell types (except monocytes). In addition, although a regulator’s own differential expression in the inputted data is not considered when calculating its significance by IPA, IRF7 was highly differentially expressed across immune cell types in our data, further increasing confidence in its selection as a critical coordinator of the host immune response in COVID-19. Similar challenges can be encountered when applying the causal network analysis in IPA. While resembling upstream regulator analysis in some respects, causal network analysis builds relationships based on identifying a “master regulator” that modulates a number of “intermediate regulators” whose downstream targets correspond to the gene expression patterns inputted by the user (Kramer et al., 2014[href=https://www.wicell.org#bib8]). Once again, this analysis yielded many potential master regulators in our dataset given the many cell types and comparison groups. Since a unique feature of this project was inclusion of patients recovering from severe SARS-CoV-2 infection, which provided an opportunity to investigate development of humoral immunity in COVID-19, we focused on B cell transcriptional responses between Recovering vs. acute Severe patients by performing causal network analysis on differentially upregulated genes in Recovering patients.",
    "Furthermore, similar to the upstream analysis, we selected the most significant candidate master regulator that was itself differentially expressed in the scRNA-seq B cell data—SYK. The resulting causal network’s structure was built on SYK as its “root” and was connected to 40 other regulators which in turn modulated 139 DEGs in B cells of Recovering vs. Severe COVID-19 patients (Figure 9[href=https://www.wicell.org#fig9]).",
    "imgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/695-Fig8.jpg\nFigure 8. Upstream regulator analysis\n(A) Differentially expressed gene patterns for immune cells were leveraged to identify IRF7 as a putative master regulator in Severe vs. Moderate COVID-19. The regulatory network, with IRF7 as the key orchestrator, was constructed based on the overlap between the patterns of differential gene expression and IPA’s knowledgebase across cell types as assessed by Fisher's exact test P-value and a z-score, with a positive z-score indicating activation and negative z-score indicating inhibition. Note that each member of this network is itself a regulator of other gene targets in each cell type.\n(B) Heatmap highlighting whether a given member of the regulatory network is expected to be activated or inhibited in each immune cell population in Severe versus Moderate groups. This analysis implies that the IRF7 network is inhibited in monocytes, but activated in other immune cells. Figure modified from (Yao et al., 2021[href=https://www.wicell.org#bib14]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/695-Fig9.jpg\nFigure 9. Causal network analysis\nIPA causal network analysis was applied to B cell transcriptional profiles of Recovering vs. Severe groups to identify putative mechanistic relationships between regulators. One of the most significantly enriched “master regulators” was SYK, which was itself differentially upregulated, and orchestrated a causal network comprised of 40 other regulators. This analysis suggests that activation of SYK-regulated pathways is a key driver of humoral responses in patients recovering from severe SARS-Cov2 infection. Figure modified from (Yao et al., 2021[href=https://www.wicell.org#bib14])."
  ],
  "subjectAreas": [
    "Sequence Analysis",
    "Immunology",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}