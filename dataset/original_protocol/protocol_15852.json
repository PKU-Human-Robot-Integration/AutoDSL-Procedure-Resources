{
  "id": 19678,
  "origin_website": "Wiley",
  "title": "Interactive and Reproducible Workflows for Exploring and Modeling RNA-seq Data with pcaExplorer, Ideal, and GeneTonic",
  "procedures": [
    "pcaExplorer is a Bioconductor package (Marini & Binder, 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0025]) which can be used as a general-purpose interactive companion tool for RNA-seq analyses, developed in the Shiny framework (Chang et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0008]). pcaExplorer is designed to guide the user in exploring the Principal Components (PC) latent space (Jolliffe, 2002[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0018]) of the data under inspection. Besides the Principal Component Analysis (PCA), pcaExplorer also provides tools to detect outlier samples and inspect their impact, identify genes that show particular patterns of interest, and additionally provide a functional interpretation of the principal components for further quality assessment and hypothesis generation on the input data.\nIn this protocol, we describe how to launch an instance of pcaExplorer working with the data of the macrophage dataset (Alasoo et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0002]), which is also distributed as a Bioconductor package (Huber et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0016]).\nNecessary Resources\nHardware\nSee detailed description in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]\nSoftware\nSee detailed description in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]\nFiles\nSee detailed description in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]. Specifically, this Basic Protocol will make use of:\nThe count matrix file, containing the expression values for the macrophage dataset (countmatrix_macrophage.txt)\nThe file containing the information on the experimental covariates (metadata_macrophage.txt)\nThe annotation file (annotation_macrophage.txt), for handling the conversion between ENSEMBL identifiers and gene symbols.\nThe alternative entry points specified in this Basic Protocol also use some processed form of the text files listed above to generate the dds and dst objects (see step 2 below), ensuring that this procedure is fully reproducible (see Fig. 1A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001] for a visual summary).\nNOTE: Before we start with the exploration of the data, the necessary packages and dependencies need to be installed and loaded. The Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004] describes how to install and load the packages.\nExploring the data with pcaExplorer\n1. Prepare the input data for pcaExplorer.",
    "The main pcaExplorer() function requires the count matrix, the metadata, and annotation (Fig. 1A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001], black small boxes labeled BP1) to be loaded into the environment before the main call, or alternatively offers the possibility to load these objects during runtime (which can be common for a first execution). If loading the input files at runtime, the application can be launched with the simple command, leaving all other parameters unspecified.\n         \nlibrary(\"pcaExplorer\")\npcaExplorer()\nTo launch the application, enter the command into the console of RStudio and press the Enter key. This will open a new window with the pcaExplorer application. In this application you should see the Data Upload panel as shown in Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0002], with examples on the file formats expected to be working correctly in the app (see inset in Fig. 2D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0002]).\nIn this case, upload one by one the count matrix file, the sample metadata file, and the annotation file as provided in the ‘Input_file’ folder of the protocols repository (see Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]) – Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0002] reflects the content displayed if launching the application as specified above.\nIf the necessary objects are already loaded in R (e.g., with any function that reads tabular text input), you can launch the Shiny application with the command:\nlibrary(\"pcaExplorer\")\npcaExplorer(countmatrix = countmatrix,\n      coldata = metadata,\n      annotation = annotation)\nIn this call, countmatrix, metadata, and annotation have to be substituted by the names of the respective objects.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/8fe6d9c4-2670-48dd-bd7e-5515dc2f8508/cpz1411-fig-0002-m.jpg</p>\nFigure 2",
    "Overview of the Data Upload panel in pcaExplorer. Upon providing the count matrix and the metadata as specified in step 1, it is possible to generate the internally required objects (A); different transformations can be applied to the expression matrix (B), and all provided objects can be previewed clicking on the buttons below (C). Inset (D): some examples of the accepted formats to upload for the count matrix, the experimental metadata, and the annotation file.\n2. Generate the necessary objects for using pcaExplorer.\nClick the ‘Generate the dds and dst object’ button (Fig. 2A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0002]). The dds object represents a DESeqDataSet dataset object, while the dst is a DESeqTransform object (Love et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0023]).\nBoth objects are needed for the exploration of the data, and can be readily derived from the provided files/objects – alternatively, you can pass the dds and the dst objects (Fig. 1A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001], gray small boxes labeled BP1) directly, in case they are already loaded in the R environment (e.g., while running an analysis from the command line). This is possible with the lines of code reported here:\n         \nlibrary(\"pcaExplorer\")\npcaExplorer(dds = my_dds,\n       dst = my_dst)\nAfter the generation of the two objects, the ‘Select one of the following transformations for your data:’ option with three blue colored buttons underneath should appear in the panel. Click the ‘Compute variance stabilized transformed data from the dds object’ button on the left (Fig. 2B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0002]).\npcaExplorer provides three different options for data transformation. The first option is to compute a variance-stabilized transformed version of the data. The second is a regularized logarithm transformation of the data. A log2 data transformation is also offered. Users are advised to choose the data transformation according to their input data and evaluate the effects of the different transformations on their data.",
    "3. Preview the provided input data.\nScroll to the bottom of the Data Upload panel, where a preview of the input data is provided. You can access each of the data components by clicking on the green colored buttons (see Fig. 2C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0002]) – each of these opens up a separate modal window.\n4. Explore in detail the provided counts table.\nNavigate to the Counts Table panel by clicking on the panel name in the tabs list at the top of the main body of the application (Fig. 3A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0003]). In this panel, the information of the count matrix is shown in a table. A dropdown menu at the beginning of the panel (Fig. 3B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0003]) provides the possibility to change the displayed expression table (including raw counts, normalized counts, regularized logarithm transformed counts, etc.). You can download these different versions of the original counts table through clicking on the green download button below (Fig. 3C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0003]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/14558d2e-dd66-40ba-9897-de143612ca3c/cpz1411-fig-0003-m.jpg</p>\nFigure 3\nOverview of the Counts Table panel in pcaExplorer. The navigation to this panel occurs by clicking on the respective name on the top of the tabs (A). The selection of the displayed expression table is done with the dropdown element (B), and the content of the table can be downloaded by clicking on the download button (C). The correlations between samples can be explored in the section below (D), where additional content can be generated [e.g., a scatter plot matrix and a heatmap, to appear at (E)].\n5. Explore the correlations between samples.",
    "Scroll down until you see the ‘Sample to sample scatter plots’ heading (Fig. 3D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0003]). Choose ‘pearson’ as correlation method from the ‘Correlation method palette’. If you want to reduce the computation and rendering time, check that both options ‘Use log2 values for plot axes and values’ and ‘Use a subset of max 1000 genes (quicker to plot)’ are selected. Click on the ‘Run’ button to generate the scatter plots (appearing below Fig. 3E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0003]) – this includes a scatter plot matrix and a heatmap describing the correlation between all pairwise sample combinations.\nCreating an overview and computing summaries on the provided data\n6. Explore the relationships between the samples.\nNavigate to the Data Overview panel (Fig. 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0004]). The panel shows the input metadata as a table in the upper section of the user interface, with some interactive features to edit its appearance or to search its content (Fig. 4A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0004]). Below the metadata table, a Sample to Sample distance heatmap can be found, representing the distances between the individual samples. The ‘Select the distance method to use’ option (Fig. 4B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0004]) enables you to change the underlying distance method used for the computation. Furthermore, you have the option to download the heatmap via the ‘Download Plot’ button in the lower right corner below the heatmap. In the field ‘Save as…’ you can specify the name of the file to save the heatmap to (Fig. 4C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0004]) – this functionality is provided for any graphical output presented in pcaExplorer.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/25a6139b-1af7-41d6-b709-7ee75c21b80c/cpz1411-fig-0004-m.jpg</p>\nFigure 4",
    "Screenshot of the Data Overview panel in pcaExplorer. The metadata information is presented in the table (A), and a heatmap can be computed based on the selected distance method (B) and displayed. This visual overview can be downloaded by clicking on the button below it (C). The “Group/color by” selector controls the graphical aspect of the output, related to the experimental covariates of interest (D).\n7. Decorate the plots by encoding information on the experimental covariates.\nBelow the heatmap, this panel provides some further information about the input data (Fig. 5A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0005]). Next, color the samples by their originating cell line. To color the samples by this covariate, click on the ‘Group/color by’ field (Fig. 4D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0004]) in the gray side bar at the far left of the screen. Scroll down in the dropdown menu, which opens upon clicking until you find the ‘line’ option – or leverage the autocompletion functionality and start typing the initials. Once any option is selected, scroll down to the ‘Number of million of reads per sample’ plot. This plot should have changed from an all gray plot to a colored plot (Fig. 5A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0005]).\nIn the provided sample data, the ‘line’ parameter indicates the cell line of the respective sample. The Number of million reads per sample plot shown in Figure 5A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0005] can be used to evaluate the uniformity of reads in each sample. Samples with a surprisingly high or low number of reads could later be detected as outliers, because of several different factors associated with the number of reads in a sample. An inspection of the distribution of the overall number of reads in the individual sample can point users to the first source of differences in the samples found in subsequent analyses of the data (e.g., as described in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0002] and 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0003]).",
    "<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/90540e7e-cd1f-453d-bc28-037044721fd9/cpz1411-fig-0005-m.jpg</p>\nFigure 5\nFurther content of the Data Overview panel in pcaExplorer. Some general information is shown in the barplot about the assigned number of reads (A), while filtering options for defining genes as expressed are displayed in the lower section (B).\n8. Change the selected experimental covariates of interest.\nScroll up again until you see the ‘Group/color by’ option (Fig. 4D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0004]), which constitutes an efficient way to explore different experimental covariates of the data and provides context to individual plots and results. Delete the selected option by clicking on the white rectangle and hitting the delete key on your keyboard until the field is empty again. From the dropdown menu of options, select ‘condition’ as next parameter to color by. Instead of selecting ‘condition’ from the dropdown menu directly, you can also select the option by typing it into the white rectangle. This widget controls the appearance of many plots in pcaExplorer, and is used to encode the grouping information (or their combinations).\n9. Compute some summary statistics on the provided data.\nScroll down to the ‘Basic summary for the counts’ heading. Here you will see the total number of uniquely assigned reads per sample, accompanied by some information about the expressed genes in the data, specified via simple thresholds. The first option is provided through setting the ‘Threshold on the row sums of counts’ option. To test this option, enter 10 in the dedicated field and compare the results to the ones shown in Figure 5B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0005]. The second option to analyze the genes in the data is the ‘Threshold on the row means of the normalized counts’ option (generally stricter than the former definition). Enter 10 for this option and compare the results with the ones shown in Figure 5B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0005].",
    "Exploring the Principal Components from the samples point of view\n10. Create a Principal Component plot.\nNavigate to the Samples View panel (Fig. 6[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]). In this panel you will see the PCA of the individual samples of the input data on the left side, with the corresponding scree plot shown on the right side. If any value is selected in the ‘Group/color by‘ field (Fig. 6A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]), you can explore the impact of each covariate by means of the color encoding applied to the graphics. Use the ‘Group/color by‘ option to color the samples by condition – the PCA plot should now display the samples in four colors (Fig. 6C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]). You can also download the PCA plot via the ‘Download plot’ button in the lower right corner; as seen before, you can specify the name of the file to which you want to save the plot. This is also possible for the scree plot on the right side of the panel.",
    "The PCA plot of the sample data indicates that the most variance in the data seems to arise from the condition of the individual samples in this specific data set. When analyzing data, it is important for users to know which experimental variables of their samples have the most influence (i.e., are responsible for the most of the variance). Hence, you should select different options from the ‘Group/color by’ option to discover the covariate with the most influence. This is also important for any downstream analyses, including the differential expression analysis described in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0002]. The scree plot right next to the PCA (Fig. 6D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]) can also help you to evaluate how many principal components should be used to analyze the variance in the data. In the example shown in this protocol, it can be easily observed that the first two components explain nearly 80% of the variance in the data. 80% can be seen as a good cut-off value to select the number of principal components.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/a1e16371-fb14-4148-bbf6-27d49d5e5366/cpz1411-fig-0006-m.jpg</p>\nFigure 6\nOverview of the Samples View panel in pcaExplorer. Upon selection of the experimental covariate of interest (A) and the number of most variable genes to use in the computation (B), the aspect of the PCA plot (C) is expected to change, together with the scree plot on its side (D). Users can zoom in this plot by brushing areas, and this displays a magnified version below (E). For the selected principal components, genes with the highest absolute loadings are also displayed in a barplot (F).\n11. Change the parameters to display different versions of the PCA.",
    "Navigate to the options panel on the far left and search for the ‘Nr. of (most variant) genes' option (Fig. 6B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]), set as default to 300 genes. Change this number to 500 – either using the increase and decrease buttons in the option field (indicated by small arrows) or by typing the value in the box. Inspect the PCA plot and compare it with the plot in Figure 6[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]. The values of the percent of variance explained for the first and second principal component should have changed, and, according to the values, you might observe slight differences in the placement and clustering of the samples (according to how the inclusion of a specific set of genes influences the overall variability).\nThe PCA plot visualizes the variance in the data and the differences between the individual samples. The number of genes selected for the PCA plot can influence the overall structure of the plot. In order to analyze which covariate is responsible for the variance in the data, you should also consider changing the number of genes used for the PCA. This enables you to analyze the robustness of the identified factor.\nYou can also change the principal components that are displayed on either axis: by default, PC1 and PC2 are shown, but this can be changed by the select widgets in the left sidebar. This can be extremely relevant when analyzing large datasets, where it is hard to identify a clean structure – in this Basic Protocol, the dimensions of variability are relatively straightforward to define and associated with experimental covariates.\n12. Zoom in the PCA plot.",
    "The Sample View panel provides the possibility to zoom in on the PCA, using the Shiny brushing mechanism: hover your mouse over the PCA plot until your mouse cursor changes to a little plus sign. Click and hold the left mouse button to draw a little gray rectangle in the main plot (Fig. 6E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]). Move the mouse to the upper left corner of the PCA plot and select all samples belonging to the naive condition (colored in blue in Fig. 6C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]) as explained before. Below the main plot, you can find a zoomed version of the PCA plot, containing the selected samples. This should somewhat look like the plot shown in Figure 6E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]. The zoom functionality is especially helpful in cluttered PCA plots with many samples or particular cluttered regions of the plot.\n13. Identify genes with high loadings on the selected principal components.\nAs a result of the computation of the principal components, the genes have a specific value for the loadings, reflecting the ‘weight’ that each of them has on a particular principal component – this can be thought of as the correlation between the PC and the original variable. For the two selected principal components (by default, PC1 and PC2), the genes with highest loadings (in either direction along the axis of a PC) are displayed as bar chart (Fig. 6F[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0006]), and can later be followed up, e.g., in the Gene Finder tab panel.\n14. Inspect the impact of marking samples as outliers.",
    "Scroll down in the Sample View panel until you see the ‘Outlier identification’ option (Fig. 7A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0007]). The ‘Select which sample(s) to remove - suspected outliers’ option provides the possibility to select and remove individual samples from the PCA. For demonstration purposes, select all samples of the ‘naïve’ condition and remove them from the PCA (the sample ids end in ‘102’, ‘111’, ‘182’, ‘262’, ‘284’, and ‘368’). The options included in the dropdown are the samples still used for the calculation. Select the above-mentioned sample ids until the PCA plot looks like Figure 7A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0007].\nThe sample outlier detection option can help users at identifying individual samples which are highly different from the remaining samples and hence could be possible outliers. Especially for data sets with small sample numbers, the outlier identification option is useful to evaluate the influence of individual samples on the overall PCA of the data.\nAt the bottom of the Sample View panel, you also have the option to select a third principal component to visualize besides the first two (Fig. 7B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0007]). This is especially helpful in data sets where the expression patterns present a more complex variance structure that might be better captured by an increased number of principal components.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/35410609-5b4a-4ba6-9c5c-da333b3a8609/cpz1411-fig-0007-m.jpg</p>\nFigure 7\nFurther content of the Samples View panel in pcaExplorer. Outlier identification can be assisted by selecting the samples to be removed from the computation (A). A third dimension can be added for exploration in the 3D interactive PCA plot (B).\nExploring the Principal Components from the genes point of view\n15. Create the genes biplot.",
    "Navigate to the Genes View panel (Fig. 8[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0008]), where you will see the results of a PCA on the individual genes as a dual view to samples PCA from the previous steps (Fig. 8A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0008]). Again, you can select a section of the plot to zoom which will be shown on the right side in the ‘Zoomed window’ (Fig. 8B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0008], 8C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0008]). Upon selecting a subset of genes in the main plot, these will also be displayed in the profile explorer as scaled expression values - a value needs to be selected in the ‘Group/color by’ selection, and you can continue using the ‘condition’ as in the previous steps (Fig. 8D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0008]). Each line in the profile explorer represents a gene, and the connection between the data points help to follow the relationship across samples.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/8233a090-ca42-45fe-b964-0a7d0f0826f0/cpz1411-fig-0008-m.jpg</p>\nFigure 8\nOverview of the Genes View panel in pcaExplorer. A PCA focused on the gene is shown (A), and upon interaction (brushed area, B) it is magnified in the zoomed section (C). A profile explorer (D) is shown for the selected genes across the samples, and if a gene is clicked upon in the zoomed area, its expression values are plotted (E). Static (F) and interactive (G) heatmaps on the selected subsets are reported in the bottom section.\n16. Inspect single selected genes.\nIn the ‘Zoomed window’, select a gene by clicking on one of the black dots. This will generate a boxplot under the ‘Boxplot of selected gene’ heading (Fig. 8E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0008]), showing the normalized counts for the selected gene, with the conditions defined by the value in the ‘Group/color by’ selector. You can also change the style of the plot to a violin plot. To change the plot, search for the ‘Plot style for gene counts’ option in the option bar on the left.",
    "17. Inspect subsets of selected genes.\nBelow the ‘Profile explorer’ and ‘Boxplot of selected gene’ plot you will find two versions of the heatmap for the selected genes (displayed in the zoomed window) in all the individual samples (Fig. 8D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0008]) - one static (Fig. 8F[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0008]) and one interactive, based on the Plotly framework (Fig. 8G[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0008]). On the bottom, the collapsible element ‘Table export options’ contains the tabular information for the same subset, and offers the possibility to export their content.\n18. Inspect genes of interest in the Gene Finder.\nNavigate to the Gene Finder panel (Fig. 9[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0009]). Enter ‘TSPAN6’ in the ‘Type in the name of the gene to search’ option field (Fig. 9A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0009]). Make sure that ‘condition’ is still selected in the ‘Group/color by’ option; otherwise, select it from the available option. The panel will create a boxplot of the normalized counts of the selected gene (Fig. 9B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0009]) as well as a table with the normalized counts of the gene for each sample (Fig. 9C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0009]). The individual sample names are annotated on the plotted points, and the underlying data is also reported as a compact table.\nThe Gene Finder panel can be helpful in identifying the counts of a specific gene of interest in the individual samples. If the gene of interest is not included in the data, the panel will inform you by displaying the error message ‘Could not find the gene you typed’. The panel will also try detecting if the gene name is misspelled and will suggest a gene name close to the typed one. The search functionality is case sensitive and has no autocomplete option, so it is important to type the gene name correctly.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/f5d1fc94-61e2-4c8d-b4c0-53d5bcb80d91/cpz1411-fig-0009-m.jpg</p>\nFigure 9",
    "Overview of the Gene Finder panel in pcaExplorer. The search field (A) toggles the selection of individual genes, displayed graphically (B) and in tabular format (C).\n19. Generate a functional interpretation for the principal components.\nNavigate to the PCA2GO panel (Fig. 10[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0010]). Click on the ‘Select species for your sample’ option (Fig. 10A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0010]), and from the dropdown menu select ‘Human’ (Fig. 10B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0010]). The ‘Select the input type of your identifiers’ option can remain unaltered, as we are already using ENSEMBL identifiers; if this is not the case in your own data, make sure to check what identifiers are in use, and select them accordingly. Click the blue ‘Compute the PCA2GO object’ button (Fig. 10C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0010]), the application will compute for each PC and for each direction a set of enrichment results - it might take a while to compute the object. Each enrichment table will be displayed on either side of the PCA plot in the middle of the panel (Fig. 10D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0010]), and can be used to pinpoint biological processes and functions that can explain the observed variability on the latent space representation.\nOptionally, to save time and obtain more fine-grained functional categories, you can compute such an object beforehand with methods implemented in the topGO package (Alexa, Rahnenführer, & Lengauer, 2006[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0003]), which are conveniently wrapped by the pca2go() function. We refer to the package vignette where its specific usage is fully documented.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/9d379db3-d9a5-4ae5-82e3-059ef47c9ddb/cpz1411-fig-0010-m.jpg</p>\nFigure 10\nOverview of the PCA2GO panel in pcaExplorer. The species (A) and identifier types (B) can be selected at runtime, to generate the set of tabular results displayed below (C), decorating the respective axes of variation on the PCA plot (D).\nWrapping up the analysis with pcaExplorer\n20. Generate, preview, and export an analysis report.",
    "Navigate to the Report Editor panel (Fig. 11[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0011]). Open the ‘Markdown options’ dropdown menu (Fig. 11A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0011]), and enter as a title for the report ‘Current Protocols pcaExplorer report’ and your name in the ‘Author’ field; you can leave all other options unaltered (Fig. 11B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0011]). Click the ‘Update report’ button, and scroll down in the panel to see a preview of the HTML report in the web application itself. Click on the ‘Generate & Save’ button next to the ‘Update report’ button (Fig. 11C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0011]) to download the report. Save the report specifying a file name and location on your computer – this operation might take a while, as most content is generated from a fresh session, based on the current values for the reactive elements in the app.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/96a7fce0-4198-4852-95b4-4d81bf026622/cpz1411-fig-0011-m.jpg</p>\nFigure 11\nOverview of the Report Editor panel in pcaExplorer. Options for markdown (A) and the editor (B) are shown in the top section. Below, the report is previewed in the page, with the possibility to swap to view and update its source code (C).\n21. Export the analyses components for further downstream exploration.\nYou can open the Tasks menu from the small cogs icon in the top right of the header (Fig. 12A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0012]). From there, it is possible to export the state of the app's reactive elements into a binary .RData workspace, or also store their values directly into an environment - this will close the app as a result; the workspace can also be retrieved in the R session by calling pcaExplorer_env, containing a list of values for the input widgets and the reactive elements.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/ee9a1410-070d-4574-aac0-3fcfae8e084c/cpz1411-fig-0012-m.jpg</p>\nFigure 12",
    "Overview of the Instructions and About panels in pcaExplorer. As from any other panel, it is possible to open the task menu from the small cogs icon (A). In the Instructions panel, the vignettes can be consulted while running the app (B). The About page (C) contains information on the development team and how to cite the package.\n22. Find additional information on pcaExplorer.\nNavigate to the Instructions panel, where two buttons can be clicked to open and inspect the pcaExplorer vignettes (available when installing the package) (Fig. 12B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0012]). These vignettes describe comprehensively the pcaExplorer package, and constitute an excellent complement to this Basic Protocol when searching for additional, up-to-date documentation. A quickstart guide is also displayed if clicking on the ‘Up and running with pcaExplorer’ collapsible element. If you are interested in additional information about the package, the About panel (Fig. 12C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0012]) lists also the developers contact information and a citation entry. For the sake of computational reproducibility, consider adding the output of the ‘Session Information’ section into your electronic notebook documentation, to simplify the compilation of the ‘Materials and Methods’ section for a manuscript where you used pcaExplorer.",
    "ideal (Marini et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0026]) is a Bioconductor package for the interactive analysis of RNA-seq data in the context of differential expression (DE) (Love, Anders, Kim, & Huber, 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0022]). ideal guides the user through the different steps of a DE analysis, starting from the data upload, through the DESeq2 (Love et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0023]) workflow including normalization, filtering, exploration of differentially expressed genes, to functional analysis and gene signature exploration.\nIn this protocol we describe how to launch the ideal web application (also implemented in the Shiny framework (Chang et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0008])), running on the macrophage dataset (Alasoo et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0002]), which is also distributed as a Bioconductor package (Huber et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0016]).\nNecessary Resources\nHardware\nSee detailed description in Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004].\nSoftware\nSee detailed description in Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004].\nFiles\nSee detailed description in Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]. Specifically, this Basic Protocol will make use of:\nThe count matrix file, containing the expression values for the macrophage dataset (countmatrix_macrophage.txt)\nThe file containing the information on the experimental covariates (metadata_macrophage.txt)\nThe annotation file (annotation_macrophage.txt), for handling the conversion between ENSEMBL identifiers and gene symbols\nThe gene signatures file (h.all.v7.4.symbols.gmt), as it is distributed via the MSigDB collections.\nThe alternative entry points defined in this Basic Protocol also use some processed form of the text files listed above to generate the dds_obj and res_obj (described in detail in step 1 below), ensuring that this procedure is fully reproducible (see Fig. 1A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001] for a visual summary).\nNOTE: Before proceeding with the modeling of the RNA-seq data, the necessary packages and dependencies need to be installed and loaded. The Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004] describes how to install and load the packages.\nStarting up with the ideal package\n1. Load the ideal package and start the ideal web application.",
    "The input data can be provided in different ways to the ideal application. Similar to pcaExplorer, it is possible to load the input files at runtime (reading from tab/comma/semicolon-separated text files, to be provided once the app is running) and launch the application with a simple command, leaving all other parameters unspecified:\n         \nlibrary(\"ideal\")\nideal()\nAn alternative option is to provide the data as R objects (already loaded in the global environment) to the function ideal(), as in the following chunk:\nlibrary(\"ideal\")\nideal(countmatrix = countmatrix,\n    expdesign = metadata,\n    annotation_obj = annotation,\n    gene_signatures = genesignatures)\nwhere countmatrix, metadata, and annotation have to be data.frame objects, and genesignatures has to be a list object (as shown in Fig. 1A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001] in the Strategic Planning section, focusing on the black small boxes labeled BP2).\nA third option is to provide the data as a DESeqDataSet object (optionally with a corresponding DESeqResults object, if already computed – Fig. 1A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001], gray small boxes labeled BP2). These classes are the core containers used in the framework of the DESeq2 package (Love et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0023]).\nlibrary(\"ideal\")\nideal(dds_obj = dds,\n    res_obj = res_de)\nAll of these options should open a browser window with the ideal application, which will display the Welcome panel by default.\n2. Explore the user interface of ideal.",
    "When launching the dashboard, the landing page of ideal is the Welcome panel, providing the user information about the application and how to use it. We invite you to read up the material in the ‘Quick start for effective usage’ section, and to familiarize yourself with two of the help mechanisms provided in the app, namely the collapsible elements (containing text-based introductions) and the buttons to start guided tours of the interface (Fig. 13C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0013]). A sidebar is located on the left side of the user interface (Fig. 13A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0013]), and contains several input controls which affect different tab panels. By changing one or more of the input parameters, you can define what is computed by the app, and how these output elements are displayed. Moreover, the sidebar contains a ‘Quick viewer’, showing an overview of the underlying objects, required to perform all of the analyses offered by ideal - a green check icon appears close to each item, when the respective component is either provided or calculated. A compact summary of the main objects is also provided in the value boxes, in the top section of the body of the app (Fig. 13B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0013]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/443e33c5-ab20-4229-88e1-c3c090453c93/cpz1411-fig-0013-m.jpg</p>\nFigure 13\nOverview of the Data Setup panel in ideal. The sidebar (A) contains parameters affecting the behavior of many components, and the value boxes (B) summarize the current status of the analysis. Tours and collapsible elements (C) are available in each tab. The initial upload of the data is taken care in the Step 1 (D), while the statistical model is specified in Step 2 (E).\n3. Setup the data for the analysis in ideal.",
    "Navigate to the Data Setup panel. Inspect or upload interactively the required count matrix, and the experimental design data in the ‘Step 1’ box, marked by the red color (Fig. 13D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0013]). If uploading from text files, click on the respective buttons and select the files where this information is stored – make sure the encoding format is respecting the expected requirements for working in the ideal application.\n4. Specify the experimental design for the analysis.\nIn the ‘Step 2’ box, marked in yellow, you can select the experimental design (Fig. 13E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0013]); specify ‘line’ and ‘condition’ for the macrophage dataset, and click on the green action button (‘Generate the dds object’). This specification will enable you to estimate the effect size of the ‘condition’ variable, while controlling for the cell line of origin, leveraging the flexible generalized linear model framework (Anders et al., 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0005]). If you desire to understand more about more complex model specifications, which might be possible depending on the structure of your data, we recommend to use tools such as ExploreModelMatrix (Soneson et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0038]) for this purpose. Upon generation of the DESeqDataSet object, the respective value box on top turns green, and also the sidebar field for it will get a green check mark.\n5. Add a gene annotation and exclude samples from the analysis if required (optional).",
    "The two light blue boxes that have appeared provide the optional steps for adding the appropriate annotation and discarding unwanted samples (e.g., if your initial data exploration in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0001] revealed the presence of an outlier, Fig. 14A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0014], 14B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0014]). If you did not pass an annotation at application start, select ‘Human’ as species for the macrophage dataset, ‘ENSEMBL’ as the id type (Howe et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0015]), and confirm the selection with the blue button ‘Retrieve the gene symbol annotation for the uploaded data’. Once this is terminated, the value box for the annotation object is displayed in green (Fig. 13B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0013]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/662a1568-8b91-4910-8df0-ad1229301c38/cpz1411-fig-0014-m.jpg</p>\nFigure 14\nFurther content of the Data Setup panel in ideal. An annotation table can be generated (A), and samples can be excluded if deemed as outliers (B)—proper exploration of the data is recommended, as detailed in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0001]. After running the DESeq2 main wrapper (C), users can explore diagnostic plots, contained in a collapsible element (D).\n6. Run the differential expression analysis.\nFinally, run the main function of the DESeq2 framework in step 3 (green box) by clicking on the button ‘Run DESeq’ (Fig. 14C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0014]). If multiple cores are available, you can use the slider input to select the number of CPUs to use for speeding up the computation. Once this is completed, you can inspect the mean-dispersion plot as a diagnostic check by expanding the collapsible element below (Fig. 14D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0014]).\nExploring the count matrix and the differential expression result table\n7. Inspect (and filter) the expression count matrix.",
    "Navigate to the Counts Overview panel, which provides an interactive table, which can display raw, normalized, and log-normalized values for all the genes and samples in the data (Fig. 15A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0015]). A summary for the expressed features is reported below - you can set a threshold for either criterion to filter out the lowly expressed genes (Fig. 15B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0015]). This can also reduce the computation time without impacting the quality of the results. Filter the macrophage data with a threshold of zero on the row sums of the counts by clicking on the ‘Filter the DDS object’ button (Fig. 15C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0015]). Generate and inspect the sample-to-sample scatterplot matrix below (Fig. 15D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0015]) which shows the similarity across all individual samples while regarding the information on the single features - this can be quite useful for detecting unexpected patterns for subsets of genes (Rutter, Moran Lauter, Graham, & Cook, 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0034]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/55ecc4bc-35ea-4756-a390-0fd0e438321a/cpz1411-fig-0015-m.jpg</p>\nFigure 15\nContent of the Counts Overview panel in ideal. The expression table is shown interactively (A), with the possibility to define thresholds for expression (B) and accordingly filter the data before testing (C). A scatterplot matrix can be displayed in the bottom section (D), with functionality shared with pcaExplorer.\n8. Compute the differential expression results.",
    "Navigate to the Extract Results panel to compute and explore the results for the differential expression analysis (Fig. 16[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0016]). Set the alpha level for significance to control the False Discovery Rate in the sidebar; for the macrophage data we can leave the value set to the default (0.05). Then, proceed to define the contrast of interest - this Basic Protocol focuses on the comparison between the interferon-gamma treated cell line (IFNg) versus the untreated one (naive). Therefore, first select ‘condition’ as the experimental factor to build the contrast upon (Fig. 16A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0016]). Then select ‘IFNg’ as the numerator level, and ‘naive’ as the denominator level for the fold change (Fig. 16B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0016]). Further options are provided to refine the results, whereas independent filtering (Bourgon, Gentleman, & Huber, 2010[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0007]) or the Independent Hypothesis Weighting (IHW) can be applied (Ignatiadis, Klaus, Zaugg, & Huber, 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0017]). After clicking on ‘Extract the results’ (Fig. 16C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0016]) you can see that in the macrophage dataset more than 6000 genes have been detected as differentially expressed for the IFNg treatment vs naive contrast (Fig. 16D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0016]).\nAdditionally, the value box for the DE genes is updated and displayed in green. IRF1, IL18BP, and GBP2 are listed in the table below as the top regulated genes, sorted by their adjusted p-values. The interactive table directly links the gene symbols and the ENSEMBL identifiers to external databases for that feature, either Ensembl (https://www.ensembl.org/) or the NCBI Gene Database (https://www.ncbi.nlm.nih.gov/gene) (Fig. 16D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0016]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/0f2a4224-3a0f-42e2-a57e-4b411c2de28c/cpz1411-fig-0016-m.jpg</p>\nFigure 16",
    "Overview of the Extract Results panel in ideal. The contrast can be specified by combining the covariate of interest (A) and the levels to compare (B). Results can be extracted once the respective button is visible (C), and are displayed both as summary and in full tabular format (D). Diagnostic plots on the DE results are included in the bottom section of the page.\n9. Inspect the diagnostic plots for the extracted DE results.\nThe top left and right plots show raw p-value histograms, useful for checking the assumption of uniform distribution under the null hypothesis, also stratified by mean expression value (relevant if one is using the Independent Hypothesis Weighting for adjusting the p-value). The bottom left Schweder-Spjøtvoll plot (Schweder & Spjøtvoll, 1982[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0036]), shows the ranked p-values: this is a graphical method to illustrate the Benjamini-Hochberg multiple testing adjustment procedure (Benjamini & Hochberg, 1995[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0006]), with the intersection point defining the subset of genes for which the False Discovery Rate (FDR) is controlled at the chosen level. The bottom right plot is a histogram of the log2 fold change values, to show its distribution and identify anomalies such as highly skewed tails.\nExploring overviews of the results and single genes of interest\n10. Generate overview visual representations of the DE results.",
    "Navigate to the Summary Plots panel to generate a set of visual summaries of the results (Fig. 17[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0017]). This includes an MA plot, which can be regarded as an application of a Bland-Altman plot for the representation of genomic data – M being the log ratio, and A the mean average. Select in the MA plot (log2FoldChange vs. mean expression values) some of the upregulated genes by brushing on the area that includes them (Fig. 17A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0017]). A zoomed-in version of the MA plot focused on the selected area will appear on the right side, providing labeling by gene symbols if these are defined in the annotation object (Fig. 17B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0017]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/238f3ab4-16e5-4bd1-88af-f0c14656a069/cpz1411-fig-0017-m.jpg</p>\nFigure 17\nOverview of the Summary Plots panel in ideal. The MA plot (A) displays the expression changes against the mean expression values, marking single genes according to the significance level. Labels are added in the zoomed panel (B). Boxplots for individual genes are also provided (C), with extra information from the Entrez database (D). A volcano plot is also presented (E), depicting the direct relationship between expression changes and significance of the genes.\n11. Inspect single genes upon interacting with the MA plot panel.",
    "Click on a gene in the zoomed selection plot. If the ‘Group/color by’ widget in the sidebar has a selection active (defaulting to the experimental factor of interest specified in the contrast), this action will display a boxplot for the expression values in all conditions (Fig. 17C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0017]), and additional info retrieved from the Entrez database (Fig. 17D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0017]). In the middle section, you can view the results as a volcano plot (Fig. 17E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0017]), where the significance is directly plotted against the effect size (and direction). In addition, the subset of genes included in the rectangular selection is also displayed as heatmaps (both static and dynamic). Tabular information on the selected genes can be further exported from the collapsible element at the bottom of the tab panel.\n12. Inspect single genes upon manual selection.\nNavigate to the Gene Finder panel and explore a subset of genes of interest (Fig. 18[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0018]). In this protocol we will define the genes CCL5, IFNGR1, and CXCL11 as genes of interest in the sidebar (Fig. 18A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0018]). The tab panel displays up to four gene expression boxplots for the selected genes (Fig. 18B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0018]), and also displays an MA plot where the shortlisted genes are annotated. The table containing all relevant values for the genes included in the selector widget can be explored in the collapsible element, and downloaded as text file. To avoid manually selecting many genes (from the selectize widget in the sidebar), you can also upload a list as a plain text file, specifying one feature per row; these will be annotated in an alternative version of the MA plot, and the corresponding table is provided below it.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/0d05f4f0-d454-462d-8b2b-ae0edee9243b/cpz1411-fig-0018-m.jpg</p>\nFigure 18",
    "Overview of the Gene Finder panel in ideal. The selection of features is done from the sidebar (A), and the shortlisted genes are displayed in the main panel content (B).\nPerforming functional enrichment analyses on the data and exploring gene signatures\n13. Calculate overrepresented biological processes in the set of differentially expressed genes.\nNavigate to the Functional Analysis panel to perform a gene set enrichment analysis on the differentially expressed genes, with the aim of gaining insight on the affected biological pathways (Fig. 19[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0019]). In the ‘Select the GO category(ies) of interest’ make sure that ‘GO Biological Process’ is included (Fig. 19A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0019]); alternative ontologies comprise ‘GO Molecular Function’ and ‘GO Cellular Component’. The functional enrichment analyses can be performed on different sets of genes: only the upregulated ones (tab panel ‘UPregu’); only the downregulated ones (tab panel ‘DOWNregu’); including both up- and downregulated genes (tab panel ‘UPDOWN’); or any custom list of genes (in the two panels ‘List1’ and ‘List2’). Navigate to the ‘UPDOWN’ tab panel to perform the gene set enrichment analysis on the up- and downregulated features (Fig. 19B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0019]).\nThree methods of overrepresentation analysis (ORA) are implemented in ideal: (1) The standard ORA based on the limma package (Ritchie et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0032]), (2) the goseq ORA, which accounts for the specific length bias intrinsic in RNA-seq assays (longer genes have higher chances of being called DE) (Young, Wakefield, Smyth, & Oshlack, 2010[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0044]), and (3) the topGO ORA, which decorrelates the Gene Ontology graph structure and is particularly valuable for pruning terms that are topologically less meaningful than their specific nodes (Alexa et al., 2006[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0003]). Perform the analysis with topGO, by clicking on the button called ‘Perform gene set enrichment analysis in the up- and downregulated genes – topGO’ (Fig. 19C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0019]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/77df1c0c-16a2-4d12-98eb-62c8b69a5e64/cpz1411-fig-0019-m.jpg</p>\nFigure 19",
    "Overview of the Functional Analysis panel in ideal. The categories can be selected from the dedicated input widget (A), and different subsets of genes, based on the direction of the change in expression, can be used to compute the functional analysis (B). The enrichment algorithms can be started via the buttons below (C). Once the results are available, they are displayed in a table (D); upon interaction with single rows in the results from topGO, heatmaps for the specific signature are displayed, summarizing the expression values for the associated gene set members (E).\n14. Explore the results of the enrichment analysis.\nAs a result of the previous step, an interactive downloadable table appears (Fig. 19D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0019]), listing the relevant GO terms and the enrichment-relevant features, including, e.g., the list of the differentially expressed genes annotated to each of the reported GO terms. Click on the blue button of the GO term GO:0002181 (‘cytoplasmic translation’) to get further information from the AmiGO database (http://amigo.geneontology.org/). If clicking anywhere in the row of the enriched GO term, a heatmap is displayed showing the normalized and transformed expression values for the subset of DE genes assigned to each term, making it easy to inspect the overall regulation of a selected signature (Fig. 19E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0019]). In the bottom section of this page, the subsets of genes that could have been used for computing enrichment results (see step 13) can be provided as input for a simple overlap analysis by means of a Venn diagram and of an upset plot (particularly useful when including large numbers of sets).\n15. Explore the expression profiles of gene signatures.",
    "Navigate to the Signature Explorer panel (Fig. 20[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0020]) and upload the h.all.v7.4.symbols.gmt file (originally retrieved from the MSigDB database; we refer to the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004] for further detail on obtaining the file). The green info box in the middle of the panel will report the number of signatures contained – in this case, the 50 hallmark signatures are present in the uploaded GMT file (Fig. 20A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0020]). Compute the variance-stabilized transformed data by clicking the corresponding button. To match the identifier types of your data with the signatures (Fig. 20B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0020]), select ‘ENSEMBL’ as the ID type in your dds data, ‘SYMBOL’ as the ID type of your signatures, and org.Hs.eg.db as the organism package for performing the match, by means of the ‘Apply id conversion between data and signatures’ button. In the lower section of the panel, select the gene signature of interest, e.g., HALLMARK_INTERFERON_GAMMA_RESPONSE, and condition in the selection widget called ‘Select the colData to decorate’ (Fig. 20C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0020]). Optionally, use the check box below to include only the DE genes of the signature, filtering out the ones detected as nonsignificant. A heatmap appears at the bottom of the panel, and can be further customized with the available checkboxes (Fig. 20D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0020]); mean centering (or even row standardization) is useful to simplify comparison across samples, while clustering options enable the detection of interesting groups of features.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/98adcfc4-c4b7-4a7e-9d5d-3d277bfd2681/cpz1411-fig-0020-m.jpg</p>\nFigure 20\nOverview of the Signature Explorer panel in ideal. After uploading the signatures (A) and performing matching to the data at hand (B), users can specify which experimental covariates to use for the decoration of the signature heatmaps (C), with extra option to customize their appearance (D).\nWrapping up the analysis with ideal\n16. Generate, preview, and export an analysis report.",
    "Navigate to the Report Editor panel to generate and download a report of the analysis containing the current state of the parameters and generated images (Fig. 21[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0021]). This functionality is shared with the pcaExplorer package, and is based on a comprehensive template report provided with the ideal package. After selecting ‘HTML’ as output format (and some general Markdown options), you can preview the report in the lower section of the panel (Fig. 21A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0021], 21B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0021]). Experienced users can edit the RMarkdown source of the report in the ‘Edit report’ tab panel. Once the report is finalized, click on ‘Generate & Save’ to compile the document and store it on your system.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/83c7c128-2303-4dfb-82e5-3e657a725c63/cpz1411-fig-0021-m.jpg</p>\nFigure 21\nOverview of the Report Editor panel in ideal. Options for Markdown (A) and the report editor (B) are included, and can be changed before rendering the document. Functionality for exporting the entire state of the app (C), or as a SummarizedExperiment object (D), is also provided, simplifying the interoperability with other existing software.\n17. Export the analyses components for further downstream exploration.\nOpen the Tasks menu from the small cogs icon at the top right of the header (Fig. 21C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0021]). From there, it is possible to export the state of the app's reactive elements into a binary .RData workspace, or also store their values directly into an environment; this environment can be retrieved in the R session by calling ideal_env, after the app is closed.",
    "Clicking on the ‘Export as serialized SummarizedExperiment’ button (in the Report Editor panel, Fig. 21D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0021]) will create a serialized rds object, where the essential content computed in the dashboard is coerced into a SummarizedExperiment object for further use, e.g., with iSEE (Rue-Albrecht, Marini, Soneson, & Lun, 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0033]) for bespoke visualizations. If enrichment results have been derived with topGO, it is also possible to export the whole set of current data and results as a GeneTonicList, making this object perfectly suitable to explore as described in Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0003].",
    "GeneTonic (Marini et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0027]) is a Bioconductor package for streamlining the interpretation of results from differential expression analysis together with functional enrichment analysis, integrating these components with the original expression data and annotation tables for easy identifier conversion (Love et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0022]). Blending together the existing pieces of transcriptome datasets in a Shiny web application (Chang et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0008]), users can interactively generate insightful observations and hypotheses while still profiting from code reproducibility, guaranteed by the creation of an HTML report and code snippets meta-generated along the outputs.\nIn this protocol, we will describe its usage to analyze in depth the macrophage dataset (Alasoo et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0002]) made available as a Bioconductor package itself (Huber et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0016]). Samples from the macrophage dataset are available from six different donors, in four different conditions – naive, treated with interferon-gamma upon SL1344 (Salmonella enterica) infection, or with a combination of interferon-gamma and SL1344. We will focus our attention on the comparison between interferon-gamma treated samples versus naive samples – these results have been previously generated through the other Basic Protocols.\nNecessary Resources\nHardware\nSee detailed description in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]\nSoftware\nSee detailed description in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]\nFiles\nSee detailed description in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]. Specifically, this Basic Protocol will make use of the dataset delivered in the macrophage software package, from which it is possible to derive all necessary components, once the required dependencies are installed (as described in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]).",
    "Alternatively, we provide a precomputed GeneTonicList object in the manuscript_CPBioinfo_2021 repository (see step 7 below) – the initial steps in this protocol specify the procedure to generate the components of this structured object (dds, res_de, res_enrich, and annotation_obj) (see Fig. 1A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001] for a visual overview). Alternatively, it is also possible to generate the GeneTonicList object with ideal, as described in the final steps of Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0002].\nNOTE: Before using GeneTonic for exploring the full set of results from the differential expression analysis workflow, the necessary packages and dependencies need to be installed and loaded. The Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004] describes how to install and load the packages.\nNOTE: The input data to be provided to GeneTonic can be computed via different workflows, but for simplicity it is easiest when using the framework of DESeq2 – we refer users to the package vignette for alternative methods upstream like limma or edgeR. If starting from this Basic Protocol, please use the following commands to generate the entire set of required files.\nGenerating the required input for running GeneTonic\n1. Generate the DESeqDataSet object.\nWe load the macrophage dataset, specify the design of interest (testing on the condition, while accounting for the cell line of origin), change the identifiers to ENSEMBL (instead of the provided GENCODE ids, that would not match with the annotation packages). Optionally, you can apply some filtering on a minimal detection threshold – in this case, we require to have at least 10 counts, in at least six samples (six being the size of the smallest experimental group).\n         \n# Loading the data\nlibrary(\"macrophage\")\nlibrary(\"DESeq2\")\nlibrary(\"GeneTonic\")\ndata(\"gse\", package = \"macrophage\")\ndds_macrophage <- DESeqDataSet(gse, design = ∼line + condition)\n# Changing the ids, removing the GENCODE-specific suffix\nrownames(dds_macrophage) <- substr(rownames(dds_macrophage), 1, 15)\n# Filtering low expressed features",
    "keep <- rowSums(counts(dds_macrophage) >= 10) >= 6\ndds_macrophage <- dds_macrophage[keep, ]\ndds_macrophage\n## class: DESeqDataSet\n## dim: 17806 24\n## metadata(7): tximetaInfo quantInfo … txdbInfo version\n## assays(3): counts abundance avgTxLength\n## rownames(17806): ENSG00000000003 ENSG00000000419 … ENSG00000285982 ENSG00000285994\n## rowData names(2): gene_id SYMBOL\n## colnames(24): SAMEA103885102 SAMEA103885347 … SAMEA103885308 SAMEA103884949\n## colData names(15): names sample_id … condition line\n2. Generate the differential expression result object.\nRun the DESeq2 pipeline on the provided dataset, specifying the contrast of interest (interferon-gamma treatment vs. naive cells), and an absolute log2 fold change threshold of at least 1 to test against. This is different from the commonly performed post-hoc filtering of subsetting for genes whose absolute expression change is reported as at least 1 – this approach does not guarantee the control of the False Discovery Rate. We add the gene symbol identifier to ease the readability of the table.\n         \n# running DESeq2 and extracting the results\ndds_macrophage <- DESeq(dds_macrophage)\nres_macrophage_IFNg_vs_naive <- results(dds_macrophage,\n                        contrast = c(\"condition\", \"IFNg\", \"naive\"),\n                        lfcThreshold = 1,\n                        alpha = 0.05)\nres_macrophage_IFNg_vs_naive$SYMBOL <- rowData(dds_macrophage)$SYMBOL\n# Alternatively, the result is provided as precomputed object in the GeneTonic package\ndata(\"res_de_macrophage\", package = \"GeneTonic\")\n3. Run the functional enrichment analysis.\nThis step is performed here via the pcaExplorer wrapper topGOtable(), using the topGO method (with the ‘elim’ algorithm). A sensible background is selected, choosing the set of all detected genes in the assay. We identify the overrepresented Biological Processes from the Gene Ontology database, and convert the resulting table into the format expected by GeneTonic. Alternatively, a variety of methods and applications can be used to compute a similar enrichment table; we refer the reader to the GeneTonic vignette, detailing the supported software.\n         \n# Sort the results by FDR\nlibrary(\"AnnotationDbi\")\n# Define the DE subset and the background set",
    "de_symbols_IFNg_vs_naive <- deseqresult2df(res_macrophage_IFNg_vs_naive, FDR = 0.05)$SYMBOL\nbackground_symbols <- rowData(dds_macrophage)$SYMBOL[rowSums(counts(dds_macrophage)) > 0]\n# Compute the enrichment results\nlibrary(\"topGO\")\ntopgoDE_macrophage_IFNg_vs_naive <-\n  pcaExplorer::topGOtable(DEgenes = de_symbols_IFNg_vs_naive,\n                 BGgenes = background_symbols,\n                 ontology = \"BP\",\n                 mapping = \"org.Hs.eg.db\",\n                 geneID = \"symbol\",\n                 topTablerows = 500)\n# Convert for usage in GeneTonic\nres_enrich_macrophage <- shake_topGOtableResult(topgoDE_macrophage_IFNg_vs_naive)\n# Alternatively, the enrichment result is also available as a precomputed object\ndata(\"res_enrich_macrophage\", package = \"GeneTonic\")\n4. Construct the annotation object.\nConstruct a table with at least two mandatory columns, gene_id and gene_name, to handle the conversion between an unambiguous identifier (ENSEMBL, GENCODE, Entrez) into a human-readable format (typically, HGNC gene symbols).\n         \nlibrary(\"org.Hs.eg.db\")\nanno_df <- data.frame(\n  gene_id = rownames(dds_macrophage),\n  gene_name = mapIds(org.Hs.eg.db,\n             keys = rownames(dds_macrophage),\n             column = \"SYMBOL\",\n             keytype = \"ENSEMBL\"),\n  stringsAsFactors = FALSE,\n  row.names = rownames(dds_macrophage)\n)\nAlternatively, if following Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0002] you obtained these objects via ideal, you can use this code chunk – you should replace the right-hand side of the assignment with the name of the objects in the environment in use.\ndds_object <- dds_from_ideal\nres_de_object <- res_from_ideal\nres_enrich_object <- shake_topGOtableResult(res_enrich_from_ideal)\nannotation_object <- annotation_from_ideal\n5. Compute aggregated scores on the enrichment results (optional).\nThe function get_aggrscores() can be called on the ensemble of objects we just generated, to compute two additional columns for the input res_enrich object. The z_score and aggr_score values try to summarize geneset-wise the effect (log2FoldChange) of the differentially expressed genes that are listed as its members, either by simply counting them or applying a function (in the example below, the mean is used, but other functions could be applied such as the median). These are estimates of the “direction” of expression change reflected on higher-level features such as pathways or genesets. We refer to the original publication of GeneTonic for more details on how these scores are computed (Marini et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0027]).\n         \nres_enrich_macrophage <- get_aggrscores(",
    "res_enrich = res_enrich_macrophage,\n  res_de = res_macrophage_IFNg_vs_naive,\n  annotation_obj = anno_df,\n  aggrfun = mean\n)\nPreparing to run the GeneTonic application\n6. Assemble the GeneTonicList object.\nOnce the four components (Fig. 1A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001], black small boxes labeled BP3) have been computed and are loaded in the R environment, load the GeneTonic package and create an instance of a GeneTonicList object. A summary of the elements in the list will be printed out to the console upon creation.\n         \ngtl_macrophage <- GeneTonic_list(\n  dds = dds_macrophage,\n  res_de = res_macrophage_IFNg_vs_naive,\n  res_enrich = res_enrich_macrophage,\n  annotation_obj = anno_df\n)\n7. Start the GeneTonic application.\nOnce the GeneTonicList is generated, GeneTonic can simply be called with one line of code.\n         \nGeneTonic(gtl = gtl_macrophage)\nInterestingly, this can be a common entry point for wet-lab scientists, who might benefit of the expertise of a bioinformatician to perform the steps upstream and receive a single serialized file to be loaded into the R environment. If encoded as a GeneTonicList (Fig. 1A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001], gray small box labeled BP3), this object would contain all the information regarding the experiment and setting of interest, as exemplified in the chunk below – you can also load a precomputed object, provided in the manuscript_CPBioinfo_2021 repository.\ngtl_provided <- readRDS(\"path_to/gtl_object.RDS\")\nGeneTonic(gtl = gtl_provided)\n# using the version provided in the repository:\ngtl_reimported <- readRDS(\"gtl_macrophage_exported.RDS\")\ndescribe_gtl(gtl_reimported)\nGeneTonic(gtl = gtl_reimported)\nFirst steps using GeneTonic\n8. Explore the user interface of GeneTonic.\nGeneTonic’s layout (Fig. 22[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0022]) is built on the Bootstrap 4 components, provided via the bs4Dash package. This includes:\n         \nA header bar, where dropdown menus link to further documentation, and where the ‘Bookmark’ button is located, which is useful for recording features of interest during an interactive session (Fig. 22A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0022])\nA sidebar on the left, as the main way to access the different functionalities provided in the app (Fig. 22B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0022])",
    "A control bar on the right, where one can find most widgets to customize the appearance of the output (plots, tables, graphs, Fig. 22C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0022]). This can be opened and closed by clicking on the cogs icon in the top right corner.\nThe main body of the application, where different tabs are activated by clicking on the respective icons or text in the sidebar (Fig. 22D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0022]). In each of the panels, a context-specific interactive tour can be started by clicking on its respective button in the top right corner. This highlights in series the elements of the app, accompanying this with textual help that invites users to perform basic operations; this learning-by-doing approach is powered by the rintrojs library (Ganz, 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0012]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/23cb3c57-a6ab-497e-9395-b43a98a6f169/cpz1411-fig-0022-m.jpg</p>\nFigure 22\nOverview of the Welcome panel in GeneTonic. The header bar (A) contains links to further documentation, while the sidebar (B) allows the navigation between panels. The control bar (C) contains widgets to customize the aspect and content of the main body of the application (D). Collapsible elements can be expanded by clicking on the plus sign (E), and value boxes (F) provide an overview on the input data.\n9. Explore an overview on the provided input.\nAfter starting the application, you will be in the Welcome panel, marked by the home icon in the sidebar. Open the collapsible elements, ‘Expression Matrix’, ‘DE results’, ‘Functional analysis results’, and ‘Annotation info’, by clicking on the plus sign (Fig. 22E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0022]). Each of them presents a tabular view of the elements of the provided GeneTonicList. The value boxes below give a rapid overview on the dimensions of these objects (Fig. 22F[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0022]). If desired, you can take the introductory tour for this panel, as a way to gain additional familiarity with the user interface.",
    "Constructing an interactive gene-geneset network for functionally enriched biological processes\n10. Create and explore the Gene-Geneset network.\nNavigate to the Gene-Geneset panel (Fig. 23[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]). Use the left sidebar for this purpose – upon selection, a spinning loader will be displayed while the object is computed and rendered in the main body of the app. By default, 15 genesets are displayed; this behavior can be changed by setting a different value in the control bar (right side of the app, Fig. 23A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]). The bipartite graph underlying the Gene-Geneset network contains two sets of entities, and their connections reflect the membership of differentially expressed genes in the subset of genesets selected (Fig. 23B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]). This network can be explored in an interactive manner, avoiding the static “hairball” effect that would arise if a large number of genesets is selected, or if many nodes are present (irrespective of their type). It is possible to zoom in the network by scrolling, pan by clicking and holding the left mouse button, or select by hovering or clicking on a node of interest. Additionally, the ‘Select by id’ dropdown selector allows you to search for specific nodes (here, both genes and genesets) while presenting them as an alphanumerically sorted list (Fig. 23C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]). Every time a node is hovered over with the mouse, some information is directly displayed as a tooltip in the main network frame.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/1eb74291-9178-4337-8b8a-a45e348c0219/cpz1411-fig-0023-m.jpg</p>\nFigure 23",
    "Overview of the Gene-Geneset panel in GeneTonic. Upon specifying the number of included genesets (A), the gene-geneset graph is shown in the main body of the panel (B). The selection of individual nodes can be done by hovering or by using a dropdown menu (C). The aspect of in-depth info boxes can be adjusted by defining covariates of interest (D), and the graph can be saved as static image (E). The content of the Geneset Box (F) and of the Gene Box (G, shown as inset) serves as means to quickly explore specific nodes. Code to reproduce the current content is displayed by clicking on the dedicated button (H), and nodes of interest can be bookmarked for later (re-)inspection (I).\n11. Edit the Gene-Geneset network.\nChange the number of displayed genesets to 25 by entering this value in the control bar field ‘Number of genesets’ (Fig. 23A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]). The graph object is automatically recomputed and displayed. In the ‘Group/color by’ widget (Fig. 23D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]), select ‘condition’, since this will be used as the main grouping of interest, as it was defined in the DE contrast – this will be relevant especially when performing drill-down operations in the following steps. You can move around the nodes by dragging and dropping them, and eventually save a static snapshot of this as a png image (by clicking on the dedicated ‘Save ggs graph’ button, Fig. 23E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]).\n12. Explore in depth the nodes of the network.",
    "Genesets are encoded as rectangular yellow boxes. Click on any geneset in the network (Fig. 23B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]); upon doing this, the Geneset Box on the right side will display a signature heatmap for the pathway of interest, and a volcano plot where the individual genes are annotated (Fig. 23F[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]). Extra information, as retrieved from the GO.db annotation package, is displayed below, with a link to reach the corresponding entry in the AmiGO database. On the other hand, genes are marked as oval-shaped nodes, with a color scale mirroring the expression change in the differential expression comparison (Fig. 23B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]). When clicking on a gene, the normalized expression values are displayed, grouped by the experimental covariates selected (see inset in Fig. 23G[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]). According to the number of data points in each group, a sensible visual encoding is chosen (points, boxplot, violin, or a sina plot) – individual sample labels are also displayed if not cluttering the graphical output. If users intend to reproduce the output of the network in a later session, detached from the execution as a web application, the button with a user-edit icon opens up a modal dialog window, where the code to recreate the content is automatically generated and provided (Fig. 23H[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]); this also serves as a bridge to learn how to assemble all the individual analysis components into a full scripted report.\n13. Bookmark a subset of genes and genesets.",
    "While exploring the network, if a node is selected, it is possible to bookmark it by either clicking on the ‘Bookmark’ button in the header (Fig. 23I[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0023]), or by using the left Ctrl key as a shortcut. Repeat this operation until a number of nodes have been selected, making sure to select entities from both categories. The bookmarks are stored for the duration of the session, and can be previewed in the Bookmarks panel (described in the following steps).\n14. Calculate and explore the backbone of the Gene-Geneset network.\nBelow the main network, you can find the functionality to explore a backbone of this bipartite graph. The backbone, as defined in the work of Domagalski, Neal, & Sagan (2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0010]), can be seen as an unweighted subgraph containing only the most significant edges – de facto being a summary of the full network. You can extract the backbone for both entity types; click first on the ‘Gene-geneset graph summaries’ collapsible element and see the backbone network being seamlessly generated (Fig. 24A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0024]). Click on the ‘features’ option on the respective button to construct the dual graph, focused on the genes. As a complement to this, the table on the right side ranks the genes according to their degree of connectivity (Fig. 24B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0024]); this can be important to identify hub-like genes that might be involved in a multitude of biological processes. Similar to the Gene info box, links to external databases are automatically provided to simplify the further steps of exploration when trying to generate new hypotheses by cross-referencing the own project with published literature.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/d7546837-6451-4a25-86ad-e15f88dceb2e/cpz1411-fig-0024-m.jpg</p>\nFigure 24",
    "Further content of the Gene-Geneset panel in GeneTonic. In addition to the main content, the backbone of the bipartite graph can be rendered (A), and some connectivity information for the main network are presented in the table (B).\nBuilding an interactive enrichment map for the functional enrichment results\n15. Create an interactive enrichment map.\nNavigate to the Enrichment Map panel (Fig. 25[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0025]); again, use the left sidebar for this purpose. The setting you used in the previous steps is kept, so make sure to adjust it to a meaningful value – in this case, select 75 genesets to be simultaneously displayed. After changing the status of the input widgets, the output network is efficiently recomputed, leveraging the reactivity framework of Shiny.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/035d58ee-7e9d-4585-856d-767fd245ff8b/cpz1411-fig-0025-m.jpg</p>\nFigure 25\nOverview of the Enrichment Map panel in GeneTonic. After specifying the number of genesets to include, the enrichment map is generated and can be colored according to the associated geneset information (A). Individual nodes can be selected (B), triggering the generation of content in the info box on the right (C). Additional mining can be done on this graph object (D), applying Markov clustering to detect communities of overarching biological themes (clicking on the “Distill emap” button, E).\n16. Explore the relationships between genesets.",
    "Neighboring nodes in an enrichment map reflect a high degree of similarity between genesets; this can be useful to summarize the overarching biological “themes”, which are sometimes not so clear if the enrichment results include many redundant terms and are presented only in tabular format. By default, the enrichment map colors the node by the geneset p-value resulting from the enrichment test, but this can be changed by selecting another entry from the dropdown menu in the top left corner of the main content (Fig. 25A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0025]). For example, coloring by z score is useful to obtain an overall sense of how the pathway activities are changing (see how the immune response cluster is mostly being activated, while the DNA replication is negatively regulated). Similar to the Gene-Geneset network, you can select genesets in the network, triggering the generation of signature heatmaps, whose functionality behaves consistently throughout the different panels (Fig. 25B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0025]). For example, select, from the ids listed in the dropdown, the geneset ‘response to interferon-gamma’ (GO:0034341); the sample groups are very well separated in all the four subgroups included in the expression dataset (Fig. 25C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0025]). Bookmarking of genesets is encouraged to keep track of the features of interest that will need to be considered in the final report.\n17. Detect clusters of genesets to identify biological themes.",
    "The ‘Geneset distillery’, activated in the collapsible element in the lower half of the page (Fig. 25D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0025]), enables the detection of clusters by applying the Markov clustering algorithm (selected by default) on the graph object returned as enrichment map (clicking on the button in Fig. 25E[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0025]). This represents a more quantitative way to define meta-genesets, also called biological themes, instead of the subjective approach to define such clusters by simple visual inspection. The tabular output reports for each cluster a summary of its components, listing as representative term the pathway with the highest significance (Fig. 25D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0025]). This is complemented by the meta-geneset heatmap, which can provide a more granular view on the union set of genes assigned to at least any of these genesets.\nExploring a set of summary visualizations for the enrichment results\n18. Generate multiple visual representations of the tabular enrichment results.\nWhile a table contains the most detailed information on the enrichment results, it can hamper the summarization of these results – this is where visualization methods excel by providing overviews where information is encoded in primary channels such as cartesian coordinates position, color, size, and shape. Navigate to the Overview panel in the GeneTonic app (Fig. 26[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0026]). The geneset volcano plot displays the significance of each pathway against the z score (as an indicator of the direction of expression change (Fig. 26A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0026])).",
    "Alternative visual overviews can be generated by simply navigating the individual tabs included in this panel (Fig. 26B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0026]). This includes an enhanced table-like plot, displaying the expression change of the members of each geneset; the same summary is provided as an interactive widget based on the Plotly framework, showing additional details as tooltip, so that it becomes easy to iterate further, e.g., on the Gene-Geneset network to highlight and bookmark specific features of interest for the final report.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/a51eeb65-3b33-4306-81d5-c59ef102a658/cpz1411-fig-0026-m.jpg</p>\nFigure 26\nSelected content of the Overview panel in GeneTonic. In this screenshot, a geneset volcano plot is included (A), with the significance plotted against the z score of a geneset, to estimate the direction of change. Additional content can be generated by navigating the individual tabs for this panel (B).\n19. Create additional summary representations of the enrichment results.\nA diverse spectrum of visualization techniques has been adopted for describing at a higher level the functional enrichment results. Navigate to the GSViz panel in the GeneTonic app (Fig. 27[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0027]). This includes, e.g., a scores heatmap, where the geneset activity is summarized at the sample level, and presented in a heatmap (Fig. 27A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0027]) – the other plots detailed in the lines below can be shown by navigating through the different tabs (Fig. 27B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0027]).\nAlluvial plots and a summary heatmap give a quick impression of the many-to-many relationships existing between genes and genesets. A geneset Multi-Dimensional Scaling plot is an alternative to the enrichment maps, whereas the geneset distance (e.g., computed as an overlap coefficient, or as Jaccard Index) is depicted in a 2-dimensional map.",
    "Similarly, the distance can be shown as a dendrogram, with nodes encoding significance and z-value. The Summary Overview and Geneset Radar are two simple visual summaries to show the overall enrichment profile; this can be particularly useful when comparing different enrichment results, and can be performed offline (the app runtime is centered on a single enrichment result). As in the other panels, the output of each panel can be customized by changing the number of included/annotated genesets, located in the control bar on the right side of the web application. Each of these plots can be reproduced with the code displayed by pressing on the button below the graphics (Fig. 27C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0027]) – some examples are displayed in the inset shown in Fig. 27D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0027].\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/b89c3025-fbe3-4ca4-9993-1a6f64ed6cae/cpz1411-fig-0027-m.jpg</p>\nFigure 27\nSample output of the GSViz panel in GeneTonic. A heatmap for the geneset activity (A), summarized for each sample, provides an alternative view to the more common geneset signature heatmap. As in the Overview panel, additional content can be generated by navigating to the other tabs shown in this panel (B). Similar to the other generated content, the code to reproduce these outputs can be easily displayed by clicking on the edit button (C).\nExploring the bookmarked features and generating a summary report\n20. Retrieve the bookmarked features.\nNavigate to the Bookmarks panel (Fig. 28[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0028]). The two tables in the main body are displaying the respective list of genes (Fig. 28A[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0028]) and of genesets (Fig. 28B[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0028]) that you have been selecting in the interactive session, irrespective of from which panel they were shortlisted.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/21151ae1-4d8a-4e38-9973-11880328f8f9/cpz1411-fig-0028-m.jpg</p>\nFigure 28",
    "Overview of the Bookmarks panel in GeneTonic. The main content are the tabular representations of shortlisted genes (A) and genesets (B), with the possibility to generate a SummarizedExperiment object, compatible for exploration with iSEE (C), or a full analysis report focused on the bookmarked elements (D).\n21. Export the data as SummarizedExperiment for further visualizations with iSEE.\nThe majority of the content of a GeneTonicList can be also coerced to a SummarizedExperiment object, whereby the object's slots store the information at the feature level (e.g., the differential expression results as rowData elements). Clicking on the dedicated button (Fig. 28C[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0028]) writes a serialized rds file that can later be imported in an R session and provided as input to the iSEE main function (Rue-Albrecht et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0033]). This framework provides a very flexible interface to generate customizable visualizations, with the possibility to link together different views – for additional information on how to do this, we refer to the online workshop material for the iSEE package (https://isee.github.io/iSEEWorkshop2020/[href=https://isee.github.io/iSEEWorkshop2020/] and https://isee.github.io/iSEEWorkshopEuroBioc2020/[href=https://isee.github.io/iSEEWorkshopEuroBioc2020/]).\n22. Generate a full analysis report centered around the bookmarked features.",
    "Click the ‘Start the happy hour’ button (Fig. 28D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0028]) to initiate the compilation and generation of a RMarkdown report, which is able to pick the current status of the reactive elements of the app. A comprehensive default template Rmd report is provided within the GeneTonic package, and expert users can additionally extend and edit that at will. Once the report has been created, choose a path to store it as HTML document on your machine; this is an ideal means to record the status quo of a typical analysis with GeneTonic. You can open this HTML document with any modern browser application. Notably, the reporting functionality is available also in batch mode, to benefit from the streamlined aspects of a scripted analysis (as it is shown also in Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0005]).",
    "The software presented in the Basic Protocols of this article is open source and freely available as R packages from the Bioconductor project (https://bioconductor.org[href=https://bioconductor.org]). The package landing page of each software tool includes self-contained instructions that can be followed to install the latest stable version (Bioconductor release 3.14 at the time of writing). pcaExplorer, ideal, and GeneTonic share a common set of dependencies, automatically resolved and installed if the procedure illustrated in this Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004] is followed.\nNecessary Resources\nHardware\nA desktop/laptop computer, with standard modern configuration, and an up-to-date operating system. The software packages presented in this article are distributed as R packages within the Bioconductor project, and support all platforms that can run R, including Windows (32-bit, 64-bit), MacOS (32-bit, 64-bit), or Unix/Linux systems.\nRecommended: 8-16 GB RAM\nSoftware\nR version 4.1.0 or higher—latest stable releases are always available at https://cran.r-project.org/[href=https://cran.r-project.org/]\nRStudio (optional) as Integrated Development Environment (IDE), downloadable from https://www.rstudio.com/products/rstudio/download/[href=https://www.rstudio.com/products/rstudio/download/]\nA list of R packages:\n         \nBiocManager (https://cran.r-project.org/package=BiocManager[href=https://cran.r-project.org/package=BiocManager], on CRAN)\npcaExplorer (https://bioconductor.org/packages/pcaExplorer[href=https://bioconductor.org/packages/pcaExplorer], development version at https://github.com/federicomarini/pcaExplorer[href=https://github.com/federicomarini/pcaExplorer])\nideal (https://bioconductor.org/packages/ideal[href=https://bioconductor.org/packages/ideal], development version at https://github.com/federicomarini/ideal[href=https://github.com/federicomarini/ideal])\nGeneTonic (https://bioconductor.org/packages/GeneTonic[href=https://bioconductor.org/packages/GeneTonic], development version at https://github.com/federicomarini/GeneTonic[href=https://github.com/federicomarini/GeneTonic])\nA modern browser supporting JavaScript (Mozilla Firefox, Google Chrome, Opera, Safari, Microsoft Edge) to run the web applications, which otherwise can be launched from inside RStudio\nFiles",
    "Each of the Basic Protocols will operate on the data of the macrophage package available at https://bioconductor.org/packages/macrophage[href=https://bioconductor.org/packages/macrophage]. This package contains data from a bulk RNA-seq analysis of Alasoo et al. (2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0002]) – readers interested in exploring single-cell RNA-seq datasets are encouraged to use the iSEE and i2dash packages for this purpose (Rue-Albrecht et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0033]; Ustjanzew, Preussner, Bentsen, Kuenne, & Looso, 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0040]), as also included in the Suggestions for Further Analysis section. For an easier reproducibility of the results presented in Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0001] to 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0003], we prepared the data to be directly used in the protocols. All the prepared input for each protocol is available in the Input_data subfolder of the manuscript_CPBioinfo_2021 repository. This contains the following files:\n               \nA count matrix (countmatrix_macrophage.txt). The count matrix stores the number of times (i.e., counts) a certain feature (e.g., gene) is found in each sample, as a proxy of its expression. In the count matrix, the samples are stored in the columns, while the rows store the individual features. The individual entries can either be tab-, comma-, or semicolon-separated. The count matrix can be used as direct input to pcaExplorer and ideal, and can be used to obtain the DESeq object needed for GeneTonic (please refer to Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0003] on how to obtain this from the count matrix).\nA metadata file (metadata_macrophage.txt). The metadata file contains for each sample information about the relevant experimental variables. The individual samples represent the rows of the file, while the columns save the different experimental variables. The file can be tab-, comma-, or semicolon-separated, and can be used as direct input to pcaExplorer and ideal (refer to the inset of Fig. 2D[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0002] for the expected formats).",
    "An annotation file (annotation_macrophage.txt). The annotation file is optional for each of the presented applications; however, we highly recommend providing an annotation file to ease the interpretation of the results. The annotation file contains the feature identifiers of the count matrix in the gene_id column (or in the row names) and at least one column called gene_name which contains a more human readable form of the feature ids [e.g., HGNC gene names if the features are gene ids (Tweedie et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0039])]. The annotation file can directly be used as input in all three protocols.\nA list of gene sets (h.all.v7.4.symbols.gmt). The gene set list contains a gene set name in the first column, a description in the second column, and several genes in the remaining columns (one gene per column). The described format is also called Gene Matrix Transposed (GMT) format, which is commonly used by online repositories such as the MSigDB database or the WikiPathways database. The GMT file format is a tab-delimited file format of gene sets, where each row represents a gene set. This file can be used as direct input to ideal.\nFor an overview on how the information of these files is combined together to obtain all the relevant objects discussed in this manuscript, we refer to the workflow illustrated in Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-fig-0001] (Strategic Planning).\n1. Download and install R.\nThe R language and environment for statistical computing is required to install and run pcaExplorer, ideal, and GeneTonic, as well as all their dependencies.\nYou need to download and install the latest stable release of R from https://cran.r-project.org/[href=https://cran.r-project.org/], making sure to select the appropriate version for the operating system in use. At the moment of writing, R version 4.1.1 (‘Kick Things’) is available, released on 2021-08-10.\n2. Download and install RStudio (optional).",
    "The RStudio integrated development environment (IDE) is a set of integrated tools, including a console, a syntax-highlighting editor that supports direct code execution, and a set of tools for plotting, viewing history, debugging, and managing the workspace. While RStudio itself is not strictly necessary to run R and its packages, RStudio requires an installation of R in order to properly function.\nThe latest stable version of RStudio IDE can be downloaded from https://www.rstudio.com/products/rstudio/download/[href=https://www.rstudio.com/products/rstudio/download/], selecting the version corresponding to the operating system. For the installation itself, follow the instructions appearing when opening the .exe/.dmg/.rpm file.\n3. Set up Bioconductor.\nTo download and install Bioconductor packages, BiocManager is a small utility package available on CRAN, able to correctly resolve package dependencies in both the CRAN and Bioconductor repositories, making sure that the correct release version is used.\nOpen R and type this command to install BiocManager (this is required only once per R installation):\n         \ninstall.packages(\"BiocManager\")\nBiocManager::install()\n4. Install the pcaExplorer, ideal, and GeneTonic packages.\nUse BiocManager to install the latest release versions of the packages, matching the installed version of R. To do so, run the following command:\n         \nBiocManager::install(c(\"pcaExplorer\", \"ideal\", \"GeneTonic\"), dependencies = TRUE)\nSetting dependencies to TRUE will also download the packages used when running the vignettes and the examples, and is therefore recommended when getting to know the functionality. This operation is to be completed once per R installation. Installed packages can be updated to their current version with:\n         \nBiocManager::install()\nAnswer ‘yes’ when prompted in the console to download and install a potentially large set of packages.\n5. Verify the installation.\nConfirm that the updated Bioconductor is valid for your version of R, and make sure that all packages are available in their current release.\n         \nBiocManager::valid()",
    "While R and Bioconductor maintain both a stable and a development version at all times, regular users should use the (stable) release version (unless a particular need arises for a functionality in the development branch).\nTo verify the correct installation of the pcaExplorer, ideal, and GeneTonic packages, run this command:\nlibrary(\"pcaExplorer\")\nlibrary(\"ideal\")\nlibrary(\"GeneTonic\")\nIf the R console returns no errors (i.e., if messages about dependencies being loaded, or information on the package versions are not problematic), the installation process is successfully completed.\n6. Download the example data from the dedicated repository (optional).\nNavigate to the GitHub repository https://github.com/AnnekathrinSilvia/manuscript_CPBioinfo_2021/[href=https://github.com/AnnekathrinSilvia/manuscript_CPBioinfo_2021/], which contains reproducible RMarkdown files to replicate the Basic Protocols, together with the macrophage dataset and some derived objects that are expected to be used in the protocol steps. This can be done in two ways:\nCloning the repository from the command line (click on the Code button, and copy the address to checkout)\n# via https\ngit clone https://github.com/AnnekathrinSilvia/manuscript_CPBioinfo_2021.git\n# via ssh\ngit clone [email protected][href=https://currentprotocols.onlinelibrary.wiley.com/cdn-cgi/l/email-protection]:AnnekathrinSilvia/manuscript_CPBioinfo_2021.git\nDownloading a zip archive of the repository by clicking on the Code button, and subsequently on the ‘Download ZIP’ link.\nWhile this step is optional, it is recommended to work in a self-contained project folder, ensuring that the relative paths are working correctly across systems. This is straightforward by double-clicking on the manuscript_CPBioinfo_2021.Rproj file, which opens up an instance of RStudio pointing at the correct working directory.\n7. Download and use a Docker image with all required packages (optional).",
    "In addition to the common installation procedure, we provide a Docker image containing all the R packages and the necessary dependencies, served in an RStudio environment. This enables the user to spin up a fully operational instance and explore the functionality of all three applications along the protocols. Docker is an open platform for developing, shipping, and orchestrating micro services, e.g., software applications. If required, install Docker (https://docs.docker.com/get-docker/[href=https://docs.docker.com/get-docker/]), selecting the version suitable for your operating system.\nThe definition of the Dockerfile is specified in the content of the manuscript_CPBioinfo_2021 repository, and is built on top of the bioconductor_docker:RELEASE_3_14 image. Retrieve the image for federicomarini/pigt_currprotbioinfo:3_14 from the DockerHub (https://hub.docker.com/repository/docker/federicomarini/pigt_currprotbioinfo[href=https://hub.docker.com/repository/docker/federicomarini/pigt_currprotbioinfo]) with:\n         \ndocker pull federicomarini/pigt_currprotbioinfo:RELEASE_3_14\nTo run a container with all packages pre-installed and an instance of RStudio Server, run the command\ndocker run -e PASSWORD=bioc -p 8787:8787\nfedericomarini/pigt_currprotbioinfo:RELEASE_3_14\nOpen your browser at the address localhost:8787, and enter ‘rstudio’ as a username and ‘bioc’ as a password (as specified in the command above), with port 8787 being mapped between the Docker container and your host machine. This will conveniently open RStudio Server in a sandbox-like environment, which also contains the reproducible workflows mentioned in step 6.",
    "Most of the functionality provided by the three packages described in the Basic Protocols can effectively be used throughout the steps that build up the entire RNA-seq analysis workflow (Love et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0022]). This means that the exported functions can easily be called inside simple R scripts, or inserted into dedicated chunks of RMarkdown documents; their usage is documented in the package vignette and manual pages.\nIn this protocol, we will assemble a compact end-to-end analysis for the macrophage dataset, starting from the quantifications provided in the homonymous Bioconductor package (Alasoo et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-bib-0002]). As in Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0003], we will focus on the comparison between interferon-gamma treated samples versus naive samples, including all samples in the Exploratory Data Analysis preliminary to the modeling and statistical testing.\nNecessary Resources\nHardware\nSee detailed description in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004].\nSoftware\nSee detailed description in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004].\nFiles\nSee detailed description in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]. Specifically, this Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0005] will make use of the data starting from the objects provided by the macrophage package, included in the dependencies for the software we are presenting in this work. Since this Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0005] is extensively using the R terminal for executing the different steps, it is oriented toward an audience with some familiarity with command-line interfaces, but we provide enough details for welcoming a broad spectrum of readers.",
    "NOTE: In the following steps, many functions from the presented packages will be showcased and briefly described. We refer users to the package documentation (accessible from the R terminal with simple calls such as ?get_annotation_orgdb) for additional details and further usage examples. A fully rendered version (including all the figures and other output) of this Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0005] is also available as a pre-compiled document in the manuscript_CPBioinfo_2021 repository, associated to this manuscript and also used in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004].\n1. Load the expression data as DESeqDataSet object and create the associated annotation table.\nSimilar to Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0003], first load the required packages and create the fundamental DESeqDataSet object to be used for the analysis (using ENSEMBL identifiers); optionally, one can filter the set of lowly expressed genes as specified in the chunk below. Generate the corresponding annotation table for dds_macrophage and store that as anno_df.\n         \n# Loading the packages\nlibrary(\"pcaExplorer\")\nlibrary(\"ideal\")\nlibrary(\"GeneTonic\")\n# Loading the data\nlibrary(\"macrophage\")\nlibrary(\"DESeq2\")\ndata(\"gse\", package = \"macrophage\")\ndds_macrophage <- DESeqDataSet(gse, design = ∼line + condition)\n# Changing the ids, removing the GENCODE-specific suffix\nrownames(dds_macrophage) <- substr(rownames(dds_macrophage), 1, 15)\ndds_macrophage\n# Filtering low expressed features\nkeep <- rowSums(counts(dds_macrophage) >= 10) >= 6\ndds_macrophage <- dds_macrophage[keep, ]\ndds_macrophage\n# Construct the annotation data frame\nlibrary(\"org.Hs.eg.db\")\nanno_df <- get_annotation_orgdb(dds = dds_macrophage,\n                   orgdb_species = \"org.Hs.eg.db\",\n                   idtype = \"ENSEMBL\")\n2. Generate a data transformation and perform PCA on the expression data.\nApply the variance stabilizing transformation to dds_macrophage and run PCA on the resulting object. Highlight the sample points by condition first, and then showing the line of origin.\n         \nvst_macrophage <- vst(dds_macrophage)\n# Alternatively, it is possible to use also the regularized log transformation\nrld_macrophage <- rlog(dds_macrophage)\npcaplot(x = vst_macrophage,\n     intgroup = \"condition\",\n     ntop = 15000,\n     ellipse = FALSE)\npcaplot(x = vst_macrophage,\n     intgroup = \"line_id\",\n     ntop = 15000,",
    "ellipse = FALSE)\n3. Identify the genes with the highest loadings and plot their expression values.\nFirst compute the PCA object, and provide this to the hi_loadings() function. Once some individual genes are visible, plot the normalized expression values for them, choosing different experimental covariates to group them.\n         \npca_results <- prcomp(t(assay(vst_macrophage)))\nhi_loadings(pca_results, topN = 20, whichpc = 1, annotation = anno_df)\ngene_plot(dds_macrophage,\n      gene = \"ENSG00000110944\",\n      intgroup = \"condition\",\n      annotation_obj = anno_df)\nhi_loadings(pca_results, topN = 20, whichpc = 2, annotation = anno_df)\ngene_plot(dds_macrophage,\n      gene = \"ENSG00000084636\",\n      intgroup = \"line_id\",\n      annotation_obj = anno_df)\n4. Compute the enrichment on the top PCA loadings.\nProvide the variance-stabilized transformed values as input to pca2go() – this might take a while to run. Once this is completed, you can explore the tabular components of the list-like object returned. This can be very useful to assign a functional key of interpretation to otherwise unclear principal axes of variation.\n         \nbg_ids <- rownames(dds_macrophage)\nlibrary(\"topGO\")\npcs_enrichment <- pca2go(\n  se = vst_macrophage,\n  annotation = anno_df,\n  organism = \"Hs\",\n  ensToGeneSymbol = TRUE,\n  background_genes = bg_ids\n)\n# save(pcs_enrichment, file=\"pcs_enrichment.RData\")\n# display the results in interactive tables\nDT::datatable(pcs_enrichment$PC1$posLoad)\nDT::datatable(pcs_enrichment$PC1$negLoad)\nDT::datatable(pcs_enrichment$PC2$posLoad)\nDT::datatable(pcs_enrichment$PC2$negLoad)\n5. Run the DE modeling and extract the results.\nAfter specifying the contrast (interferon-gamma treatment vs. naive cells), and an absolute log2 fold change threshold of at least 1, run the DESeq pipeline on the provided dataset. Afterwards, apply the apeglm shrinkage estimator for obtaining moderated log fold changes.\n         \n# running DESeq2 and extracting the results\ndds_macrophage <- DESeq(dds_macrophage)\nres_macrophage_IFNg_vs_naive_MLE <- results(\n  dds_macrophage,\n  name = \"condition_IFNg_vs_naive\",\n  lfcThreshold = 1,\n  alpha = 0.05)\nres_macrophage_IFNg_vs_naive <- lfcShrink(\n  dds = dds_macrophage,\n  res = res_macrophage_IFNg_vs_naive_MLE,\n  coef = \"condition_IFNg_vs_naive\",\n  type = \"apeglm\")\nres_macrophage_IFNg_vs_naive$SYMBOL <- rowData(dds_macrophage)$SYMBOL\n6. Generate summary overviews of the DE results.",
    "This includes a textual summary, an interactive table (sorted by adjusted p-values), and two plots – an MA plot and a volcano plot – where some genes of interest are labelled on top.\n         \nsummary(res_macrophage_IFNg_vs_naive)\nde_table_ifng_vs_naive <- deseqresult2df(res_macrophage_IFNg_vs_naive)\netbl_de <- de_table_ifng_vs_naive\netbl_de$id <- ideal:::createLinkENS(etbl_de$id, species = \"Homo_sapiens\")\netbl_de$SYMBOL <- ideal:::createLinkGeneSymbol(etbl_de$SYMBOL)\nDT::datatable(etbl_de, escape = FALSE, rownames = FALSE)\ngenes_of_interest <- c(\n  \"ENSG00000125347\",    # IRF1\n  \"ENSG00000110944\",    # IL23A\n  \"ENSG00000084636\",    # COL16A1\n  \"ENSG00000172399\"    # MYOZ2\n)\nplot_ma(res_obj = res_macrophage_IFNg_vs_naive,\n     intgenes = genes_of_interest)\nplot_volcano(res_obj = res_macrophage_IFNg_vs_naive,\n        ylim_up = 40,\n        intgenes = genes_of_interest)\n7. Run the functional enrichment analysis.\nThis is now done with the wrappers topGOtable() and goseqTable(), to identify the overrepresented Biological Processes from the Gene Ontology database. First, properly define the set of DE and background genes to obtain reliable results; after running the routines, convert the resulting output from topGO into the format expected by GeneTonic, and display that as interactive table. To conclude this, compute geneset-level aggregated scores on the enrichment results, and create a GeneTonicList object, which will be fed to all relevant functions of GeneTonic.\n         \nlibrary(\"AnnotationDbi\")\n# Define the DE subset and the background set\nde_symbols_IFNg_vs_naive <- deseqresult2df(res_macrophage_IFNg_vs_naive, FDR = 0.05)$SYMBOL\nbackground_symbols <- rowData(dds_macrophage)$SYMBOL[rowSums(counts(dds_macrophage)) > 0]\nres_enrich_topGO <- pcaExplorer::topGOtable(\n  DEgenes = de_symbols_IFNg_vs_naive,\n  BGgenes = background_symbols,\n  ontology = \"BP\",\n  mapping = \"org.Hs.eg.db\",\n  geneID = \"symbol\",\n  topTablerows = 500\n)\nde_ids_IFNg_vs_naive <- deseqresult2df(res_macrophage_IFNg_vs_naive, FDR = 0.05)$id\nbackground_ids <- rownames(dds_macrophage)[rowSums(counts(dds_macrophage)) > 0]\nres_enrich_goseq <- ideal::goseqTable(\n  de.genes = de_ids_IFNg_vs_naive,\n  assayed.genes = background_ids,\n  genome = \"hg38\",\n  id = \"ensGene\",\n  testCats = \"GO:BP\",\n  addGeneToTerms = TRUE\n)\n# Convert for usage in GeneTonic\nres_enrich_macrophage <- shake_topGOtableResult(res_enrich_topGO)\netbl_enrich <- res_enrich_macrophage\netbl_enrich$gs_id <- ideal:::createLinkGO(etbl_enrich$gs_id)\nDT::datatable(etbl_enrich, escape = FALSE, rownames = FALSE)\nres_enrich_macrophage <- get_aggrscores(\n  res_enrich = res_enrich_macrophage,\n  res_de = res_macrophage_IFNg_vs_naive,\n  annotation_obj = anno_df,\n  aggrfun = mean\n)\ngtl_macrophage <- GeneTonic_list(\n  dds = dds_macrophage,\n  res_de = res_macrophage_IFNg_vs_naive,",
    "res_enrich = res_enrich_macrophage,\n  annotation_obj = anno_df\n)\n8. Generate a diverse set of representations for the enrichment results.\nTaking as main input the gtl_macrophage object, which holds all relevant information stored in a standardized manner, it is easy to create a variety of visual and tabular summaries and in-depth views to facilitate insight extraction. Run the chunk below to create a signature heatmap and a volcano plot on the geneset members of GO:0034341 (response to interferon-gamma).\n         \ngs_heatmap(se = vst_macrophage,\n       gtl = gtl_macrophage,\n       geneset_id = \"GO:0034341\",\n       cluster_columns = TRUE,\n       cluster_rows = TRUE,\n       anno_info = \"condition\"\n)\nsignature_volcano(gtl = gtl_macrophage,\n           geneset_id = \"GO:0034341\",\n           FDR = 0.05\n)\nThe following chunk proposes alternatives to the classical tabular enrichment results, e.g., decomposing the contribution of the individual genes to a signature, or their overlap across signatures.\nenhance_table(gtl = gtl_macrophage,\n        n_gs = 20,\n        chars_limit = 60)\ngs_summary_overview(gtl = gtl_macrophage,\n  n_gs = 20,\n  p_value_column = \"gs_pvalue\",\n  color_by = \"z_score\")\ngs_summary_heat(gtl = gtl_macrophage,\n          n_gs = 10)\ngs_volcano(gtl = gtl_macrophage,\n       p_threshold = 0.05,\n       color_by = \"aggr_score\",\n       volcano_labels = 10,\n       gs_ids = NULL,\n       plot_title = \"Gene set volcano\")\nThe following chunk contains visual summaries highlighting the relationship between genesets, computed e.g., on the basis of their overlap.\ngs_scoresheat(\n  mat = gs_scores(\n    se = vst_macrophage,\n    gtl = gtl_macrophage),\n  n_gs = 30\n)\ngs_dendro(gtl = gtl_macrophage,\n      n_gs = 30,\n      gs_dist_type = \"kappa\",\n      clust_method = \"ward.D2\",\n      color_leaves_by = \"z_score\",\n      size_leaves_by = \"gs_pvalue\",\n      color_branches_by = \"clusters\",\n      create_plot = TRUE)\ngs_mds(gtl = gtl_macrophage,\n    n_gs = 200,\n    gs_ids = NULL,\n    similarity_measure = \"kappa_matrix\",\n    mds_k = 2,\n    mds_labels = 5,\n    mds_colorby = \"z_score\",\n    gs_labels = NULL,\n    plot_title = NULL)\nRunning the commands in the next chunk will create a gene-geneset graph and an enrichment map, as fully interactive HTML widgets that simplify the further exploration of complex network objects.\nggs_macrophage <- ggs_graph(\n   gtl = gtl_macrophage,",
    "n_gs = 20)\nggs_macrophage\n# could be viewed interactively with\nlibrary(\"visNetwork\")\nlibrary(\"magrittr\")\nggs_macrophage %>%\n visIgraph() %>%\n visOptions(highlightNearest = list(enabled = TRUE,\n                      degree = 1,\n                      hover = TRUE),\n       nodesIdSelection = TRUE)\nem_macrophage <- enrichment_map(gtl = gtl_macrophage,\n                  n_gs = 30,\n                  color_by = \"z_score\")\nlibrary(\"igraph\")\nlibrary(\"visNetwork\")\nlibrary(\"magrittr\")\nem_macrophage %>%\n  visIgraph() %>%\n  visOptions(highlightNearest = list(enabled = TRUE,\n                       degree = 1,\n                       hover = TRUE),\n        nodesIdSelection = TRUE)\n9. Conclude the session by generating a report.\nIn this step, you will specify genes and genesets of interest in an offline manner, but this will generate a comprehensive report just like if these features had been selected during an interactive session. This makes it easier, e.g., to focus on the same set of signatures across different datasets, thanks to its streamlined programmatic approach.\n         \nhappy_hour(gtl = gtl_macrophage,\n   project_id = \"HappyHour_BatchRun\",\n   mygenesets = gtl_macrophage$res_enrich$gs_id[c(1:5,11,31)],\n       mygenes = c(\"ENSG00000125347\",\n               \"ENSG00000172399\",\n               \"ENSG00000137496\"),\n    open_after_creating = TRUE\n)\n10. Create a full RMarkdown report with all the previous steps (optional).\nIf desired, navigate to the content of the manuscript_CPBioinfo_2021 repository (see Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.411#cpz1411-prot-0004]). Open the CPBioinfo_protocol_alternate_01_fromthecommandline.Rmd file in an RStudio instance, and render the document by clicking on the ‘Knit’ button – this can be reused as a customizable foundation for the analysis of many RNA-seq datasets, leveraging mainly the functions exported by the hereby presented software packages."
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}