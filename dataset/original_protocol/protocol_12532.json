{
  "id": 14959,
  "origin_website": "Jove",
  "title": "CATCH-UP: A High-Throughput Upstream-Pipeline for Bulk ATAC-Seq and ChIP-Seq Data",
  "procedures": [
    "1. Running CATCH-UP pipeline\nClone the UpStreamPipeline repository from https://github.com/Genome-Function-Initiative-Oxford/UpStreamPipeline:\n\tNavigate to the chosen working directory, copy the following code and run on the command line:\ngit clone git@github.com:Genome-Function-Initiative-Oxford/UpStreamPipeline.git\nNavigate inside the UpStreamPipeline folder downloaded using the command: cd UpStreamPipeline\nInstall the anaconda distribution (if necessary):\n\t\nCheck if anaconda is already installed on the system using the command which conda. If the command does not show any path to any conda distribution, download mambaforge from https://github.com/conda-forge/miniforge#mambaforge and select the right distribution and version for the system. For example, for linux users, use wget  https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh. Visit this web page for different Operating Systems: https://github.com/conda-forge/miniforge/.\nRun the installer using sh Mambaforge-Linux-x86_64.sh, and initialize conda in the system by running conda init.\nInstall and activate the upstream conda environment (requirements of the upstream conda environment are listed in Table 2):\n\t\nInstall the environment using the command mamba env create - file=envs/upstream.yml.\nActivate the environment using the command conda activate upstream.\nOnce the upstream conda environment is successfully installed, activate the environment using the command conda activate upstream and navigate to the CATCH-UP folder using cd genetics/CATCH-UP.\nEdit the configuration file, which can be found within the config folder using the command cd /config/analysis.yaml, and modify it accordingly with the analysis specification using a text editor. Follow the line-by-line instructions to edit each parameter within the file itself. This file will be retained after the analysis and act to document the run parameters to aid reproducibility.\nOpen and edit the following three files in a text editor (e.g., TextEdit for Mac or Notepad for Windows):\n\t\nEdit 1_fastqfile_home_dir.txt file to contain a list of all fastq files to be analyzed.\n\t\tNOTE: Read numbers and extensions (e.g., _R1/_R2 and .fastq.gz) must be excluded. For example, if a project contains this list of fastq files:",
    "Sample1_conditionA_L001_R1 . fastq . gz\n\t\tSample1_conditionA_L001_R2 . fastq . gz\n\t\tSample1_conditionA_L002_R1 . fastq . gz\n\t\tSample1_conditionA_L002_R2 . fastq . gz\n\t\tSample1_conditionB_L001_R1 . fastq . gz\n\t\tSample1_conditionB_L001_R2 . fastq . gz\n\t\tSample1_conditionB_L002_R1 . fastq . gz\n\t\tSample1_conditionB_L002_R2 . fastq . gz\n\t\tSample2_conditionA_L001_R1 . fastq . gz\n\t\tSample2_conditionA_L001_R2 . fastq . gz\n\t\tSample2_conditionA_L002_R1 . fastq . gz\n\t\tSample2_conditionA_L002_R2 . fastq . gz\n\t\tSample2_conditionB_L001_R1 . fastq . gz\n\t\tSample2_conditionB_L001_R2 . fastq . gz\n\t\tSample2_conditionB_L002_R1 . fastq . gz\n\t\tSample2_conditionB_L002_R2 . fastq . gz\n\t\tin this case, the 1_fastqfile_home_dir.txt is as follows:\n\t\tSample1_conditionA_L001\n\t\tSample1_conditionA_L002\n\t\tSample1_conditionB_L001\n\t\tSample1_conditionB_L002\n\t\tSample2_conditionA_L001\n\t\tSample2_conditionA_L002\n\t\tSample2_conditionB_L001\n\t\tSample2_conditionB_L002\nIf raw data contains sequencing lanes that require concatenation, edit 2_fastqfile_concat.txt file to define the prefix of the file names to be concatenated. If there are no sequencing lanes to concatenate, then do not edit 2_fastqfile_concat.txt. Ensure that every line of 2_fastqfile_concat.txt contains one sample prefix as follows:\n\t\tSample1_conditionA\n\t\tSample1_conditionB\n\t\tSample2_conditionA\n\t\tSample2_conditionB\nIf merging the data of different samples is required, then edit 3_merge_bams.txt file with the prefix of the file names to be merged. Ensure that every line contains one sample prefix as follows:\n\t\tSample1\n\t\tSample2\nFigure 2 shows a summary of how to summarize these three files. The protocol can be applied to either single or paired-end sequencing data. The pipeline defaults to paired-end analysis unless otherwise specified; this can be modified in the configuration file (see step 1.6).\nOnce all of the required files have been edited, use snakemake to run CATCH-UP as follows: snakemake --configfile=config/analysis_name.yaml all --cores 4.\n\tNOTE: For more detailed instructions and documentation, see the CATCH-UP folder within the UpStreamPipeline GitHub repository, available here[href=https://github.com/Genome-Function-Initiative-Oxford/UpStreamPipeline/tree/main/genetics/CATCH-UP]. This includes detailed documentation on correctly modifying the configuration file, from changing paths for sequencing data files and storing results to editing parameters for each step."
  ],
  "subjectAreas": [
    "Genetics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}