{
  "id": 3373,
  "origin_website": "Cell",
  "title": "Protocol for identifying immune checkpoint on circulating tumor cells of human pancreatic ductal adenocarcinoma by single-cell RNA sequencing",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nIsolation of CTCs from blood samples\nTiming: ∼2 h\nThis section will demonstrate capture CTCs from PDAC whole blood samples.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2956-Fig1.jpg\nFigure 1. The experimental schema for capturing CTC by microfluidic chip\n(A and B) The HPV blood sample from PDAC liver metastatic patients were collected in EDTA tube (A) and lysed with RBC lysis buffer (B).\n(C) The photograph shows the cells after RBC lysis.\n(D) The external view of CTC microfluidic chip.\n(E) The photograph presents the experiment procedure of capturing CTC from lysed HPV blood samples by microfluidic chip.\n(F) Representative images of CTC captured on the microfluidic chip.\n(G) CTCs, which were captured from HPV blood, were verified by multiplex immunofluorescence staining, including EpCAM (green), immunocyte marker CD45 (red), and Hoechst 33342 (blue). Scale bar, 100 μm.\nCritical: To obtain high-quality CTCs, it is essential to isolate the CTCs from fresh blood samples. The hepatic portal vein (HPV) blood samples should be collected in EDTA blood collection tubes and processed within 1–2 h after collection to avoid cell death and mRNA degradation. Throughout the protocol, all samples should be kept on ice or at 4°C to maintain their integrity.\nRed blood cell lysis (Figures 1[href=https://www.wicell.org#fig1]A–1C).\nCollect HPV blood samples from PDAC liver metastatic patients.\nNote: In this study, we collected 6 HPV blood samples from PDAC liver metastatic patients to collect CTC and perform single-cell RNA-seq.\nTransfer the blood samples to a 50 mL centrifuge tube.\nAdd RBC lysis buffer with a volume ratio of 1:3 (e.g., every 10 mL blood sample add 30 mL RBC lysis buffer), and gently resuspend the samples.\nIncubate the samples for 10 min at 4°C.",
    "After step 1d, dilute the samples by adding double volumes of a 0.1% BSA-HBSS solution (e.g., every 10 mL samples add 20 mL BSA-HBSS solution) to stop the reaction.\nCentrifuge at 500 g at 4°C for 5 min and carefully aspirate/pour off the supernatant.\nNote: We recommend prepare step 2 and 3 after step 1f.\nAdd 10 mL of cell resuspension buffer and gently resuspend the cells with a plastic pipette. Then, collect the cells together and transfer them into a 15 mL centrifuge tube.\nRepeat step 1f.\nGently resuspend the cell with 5 mL cell resuspension buffer and adjust the concentration to 1–3×10ˆ7 cells/mL.\nNote: If the cell pellet at this step appears light red, repeat RBC lysis steps from step 1c to 1f. In step 1i, we recommend resuspending each 10 mL blood derived cells with 5 mL of cell resuspension buffer.\nAfter step 1f, prepare the CTC capture chip. The microfluidic chip (Figure 1[href=https://www.wicell.org#fig1]D) is provided by MerryHealth Ltd (Hangzhou, China).\nCritical: During the CTC capture process (from step 2–14), always keep the microfluidic chip wet.\nFill a syringe with 10 mL 0.1% BSA-HBSS solution. Use a syringe pump to pass the solution through the chip channels at 10 mL/h flow rate to remove the protection solution of the chip and prevent cell adhesion on the inner walls of the tubes.\nTransfer the resuspended cells (about 5 mL) into the syringes and connect polyethylene tubes to the syringe.\nNote: We recommend using disposable plastic syringes and removing the needle when aspirating the cells.\nPlace the microfluidic chip on a level table.\nMount the syringes to a syringe pump and connect them to the entrance of microfluidic chips using the polyethylene tubes (Figure 1[href=https://www.wicell.org#fig1]E).",
    "Connect the exit ports of the chips to a waste container through another set of polyethylene tubes (Figure 1[href=https://www.wicell.org#fig1]E).\nCritical: Avoid trapping air bubbles get when connecting the syringe to the microfluidic chip.\nAdjust the flow rate of a syringe pump to 5 mL/h and inject the samples completely into microfluidic channels.\nReplace the empty sample syringes with new syringes filled with 10 mL of 0.1% BSA solution.\nConnect the wash syringes to the microfluidic chip and wash channels at 30 mL/h flow rate to remove the unattached cells from the channels.\nRepeat steps 9 and 10 two times and observe under microscope to confirm the unattached cells were removed (Figure 1[href=https://www.wicell.org#fig1]F).\nReplace the empty wash syringes with new syringes filled with 15 mL of Elution buffer.\nReplace the waste container with a new centrifuge tube to collect the eluted cells.\nWash the channels with Elution buffer at 50 mL/h flow rate to collect the captured CTCs.\nCentrifuge at 500 g for 5 min at 4°C and resuspend the pellet with 0.01% BSA-HBSS solution.\nTo evaluate cell viability (recommended higher than 80%) and concentration, aspirate 5 μL of cell suspension with 5 mL of 0.4% (w/v) Trypan Blue Solution and count the number using hemocytometer under bright field microscope.\nStore the cell suspension on ice before further processing.\nTo identify CTCs and estimate the abundance of CTCs in the collected cells, by splitting 10% of the collected cells for immunofluorescent staining.\nAdd TRITC-CD45 and FITC-EpCAM antibodies to the suspension and incubate at 4°C for 30 min in the dark.\nAfter incubating the antibodies for 20 min, add Hoechst dye to stain the nucleus.\nWash the cells with cold 0.1% BSA-HBSS by centrifugation at 500 g for 5 min at 4°C.",
    "Resuspend the cells with 10 μL HBSS and coat the cells on a slide for confocal observation.\nDetect and calculate the number of CTCs under fluorescence microscope. The typical CTCs are Hoechst 33342 positive (blue), EpCAM positive (green), and CD45 negative (red) (Figure 1[href=https://www.wicell.org#fig1]G).\nAfter step 17, place the cell suspension on ice and without further delays (recommended within 1 h) to perform “droplet-based single-cell RNA-Seq[href=https://www.wicell.org#sec3.4]”.\nCritical: Maintaining cell viability is essential for scRNA-seq, so it is important to capture the CTCs at 4°C or ice throughout the process.\nCritical: Because the number of CTC is crucial for scRNA-seq, it is recommended to calculate the CTC number before being subject to the 10× Genomic process and ensure that at least 100 CTCs is collected.\nProcessing of tumor samples to single-cell suspensions\nTiming: ∼1 h\nThis section will dissociate single-cells from solid tumor primary and metastatic lesions.\nCollect the primary and liver metastatic tumor samples from PDAC samples through laparoscopic surgery.\nCritical: To identify the unique immune checkpoint molecules on CTCs, we recommend setting the paired primary and metastatic tumor cells as control.\nPlace the fresh surgical specimen in a sterile container filled with 5–10 mL of tissue storage solution and immediately transport it to the laboratory on ice.\nNote: Ensure that the biospecimen is completely submerged in tissue storage buffer.\nTransfer the tumor samples into a 15 cm dish and immediately cut them into small pieces of less than 1 mm3 with scissors on ice.\nTransfer the pieces to a 50 mL centrifuge tube with 20 mL digestive enzyme containing (Gibco) 0.25% trypsin, 0.4 mg/mL collagenase type I, and type Ⅳ (Gibco).",
    "Place the tube in a 37°C water bath and digest for 10–15 min gently with manual shaking. The digestion time can be adjusted according to the size of tissue chunks but should not exceed 15 min.\nAdd an equal volume of ice-cold DMEM complete medium (containing 10% fetal bovine serum) to stop the digestion and gently mix the samples up and down 5–8 times with a Pasteur pipette.\nFilter the dissociated cells through a 70 μm cell strainer. If the tissue chunks block the cell strainer, utilize a plunger from a 5 mL syringe to press the samples and rinse the filter with ice-cold RPMI medium.\nCentrifuge the cell suspension at 500 g for 5 min at 4°C and gently aspirate/pour off supernatant to remove debris and dead cells.\nGently resuspend the cell pellet with 2–3 mL RBC lysis buffer and incubate for 3–5 min on ice.\nCritical: This step must be performed even though the red blood cells are invisible to the naked eye.\nDilute the RBC buffer with 10 mL 0.1% BSA-HBSS solution and centrifuge at 500 g for 5 min to remove the supernatant.\nRinse the cells again with 1 mL of 0.1% BSA-HBSS solution and transfer the pellet into a new 1.5 mL Eppendorf Protein LoBind Tube.\nCentrifuge the samples at 500 g for 5 min to discard the supernatant.\nCritical: All waste solutions and materials should be autoclaved for sterilization.\nFACS sorting\nTiming: ∼1–1.5 h\nIn this section, we will sort the live cells from the single-cell suspensions derived from primary and metastatic lesions using FACS\nResuspend the cell pellet with 0.1% BSA-HBSS solution at a density of no greater than 1 × 10ˆ6 cells/100 μL.",
    "Add 5 μL CD45 antibodies for sorting CD45 positive immunocytes and negative non-immunocytes. Incubate the antibody for 20 min on ice.\nNote: If enriching all live cells, CD45 staining was not required. Set the sorting gate negative for PI.\nAfter antibody incubation, wash the cells with 0.1% BSA-HBSS solution and resuspend them at a density of approximately 5 × 10ˆ6 cells/mL.\nPrior to sorting, add 5 μL/100 μL PI staining solution and incubate for 5 min on ice.\nAfter PI incubation, filter the cells again through a 70 μm cell strainer to avoid clumps.\nPrepare FACS sorted cell collection tubes by adding 50 μL of 0.1% BSA-HBSS solution to 1.5 mL Eppendorf LoBind Tube and placing them on ice.\nEstablish appropriate sorting gates to isolate the desired cell population (Figures 2[href=https://www.wicell.org#fig2]A and 2B). To sort live non-immunocytes, ensure that the sorting gates are negative for both PI and CD45.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2956-Fig2.jpg\nFigure 2. FACS sorting strategy for single-cell isolation from solid tumors in this study\n(A and B) All lived cells and non-immunocytes were enriched by sorting PI- (A) and PI-/CD45- (B), respectively.\nNote: In this protocol, the BD FACSAria SORP Flow Cytometer (manufactured 2016, equipped with a 100 μm nozzle) was used for cell sorting. The sorting parameters were set as follows: threshold (5,000), sheath fluid pressure (30 PSI) and sorting speed (1000 events/s). However, cell sorting can also be performed on any other conventional FACS instrument.\nAfter setting the sorting gates, initiate cell sorting and collect the target cells into the collection tube.\nCritical: Collecting the sorted cells into a 1.5 mL Eppendorf LoBind Tube is recommended due to the low number of sorted cells (commonly is 1–2×10ˆ5 cells per sample). Use filtered 0.1% BSA-HBSS solution as the collection buffer to increase cell viability.",
    "Centrifuge cells at 500 g for 4 min at 4°C. Slowly remove the supernatant without disturbing the cell pellet.\nNote: To avoid aspirate cells, it can leave 100 μL supernatant in this step.\nRinse the cells once with cold 0.01% BSA-HBSS solution and centrifuge at 500 g for 5 min at 4°C. Carefully aspirate the supernatant without disturbing the cell pellet.\nBased on the number of the sorted cells, resuspend the cells by using 0.01% BSA-HBSS to a concentration of 700–1200 cells/μL. The resuspension volume should be determined based on the sorted cell number. For example, if the FACS count shows 100,000 cells, resuspend the cell pellet with 50–60 μL 0.01% BSA-HBSS solution.\nTo evaluate cell viability and concentration, aspirate 5 μL of cell suspension with 5 μL of 0.4% (weight/volume) Trypan Blue Solution (Thermo, 15250061) and count the number using hemocytometer under bright field microscope. Dead cells will appear dark blue.\nStore the cell suspension on ice.\nCritical: Maintaining high cell viability is essential for scRNA-seq, therefore it is important to keep the sample on ice during waiting periods and centrifuge always at 4°C.\nDroplet-based single-cell RNA-Seq\nTiming: ∼2 days\nIn this section, we will perform the single cell RNA-seq by using the 10× genomics Chromium Next GEM Single Cell 3ʹ GEM, Library & Gel Bead Kit (v3).\nAfter performing cell counting, proceed droplet-based single-cell RNA-Seq using Chromium Next GEM Single Cell 3ʹ GEM, Library & Gel Bead Kit (v3). Detailed information on the protocol can be found at https://www.10xgenomics.com/support/single-cell-gene-expression/documentation/steps/library-prep/chromium-single-cell-3-reagent-kits-user-guide-v-3-1-chemistry-dual-index[href=https://www.10xgenomics.com/support/single-cell-gene-expression/documentation/steps/library-prep/chromium-single-cell-3-reagent-kits-user-guide-v-3-1-chemistry-dual-index].\nAccording to the cell suspension volume calculator table aspirate indicated number of cells and mix them with the reagents. The capture target is approximately 5,000–8,000 cells per sample.",
    "Critical: If the total cell number falls short of the requirement, centrifuge the cell suspension again, remove the supernatant to adjust the final volume to approximately 42 μL, and load all the cells for scRNA-seq.\nCritical: The number of loaded cells should not exceed 10,000 cells. Overloading can result in an increase in doublets, with a rate of 0.8% for every 1,000 cells.\nFollow the manual for Chromium Controller to load cell-reagents mix, partitioning oil, and Gel Beads onto the Chromium Chip B and then perform reverse transcription of poly-adenylated mRNA.\nAmplify cDNA and construct the libraries according to the instrument of 10 × Genomics Single Cell Reagent Kit (v3) instructions.\nAfter library construction, quantify the library concentration and check its quality using a Bioanalyzer 2100 (Agilent) with a High Sensitivity DNA kit.\nProceed to next-generation sequencing using a mainstream second-generation sequencer, such as the NovaSeq 6000 platform (Illumina) or any other equivalent system at the read depth of 80,000–100,000 reads per cell.\nProcessing the single-cell RNA-seq data\nTiming: 3 days\nIn this section, we will process the raw data of single-cell RNA-seq.\nSequence mapping: Align sequence reads to the GRCh38 genome reference and quantify gene expression using the cell ranger software (v.3.0.0, 10× Genomics).\nImport the single cell RNA-seq gene expression data and create a seurat object for each sample. Since the cell barcode of different samples overlap, cell names need to be modified to ensure uniqueness.\ninstall.packages(\"Seurat\")\nlibrary(Seurat)\nseuread <- function(dir, projectname) {\n  data <- Read10X(data.dir = dir)\n  colnames(data) <- paste(projectname, colnames(data), sep =\n\"_\")\n  seurat <- CreateSeuratObject(counts = data, project =\nprojectname, min.cells = 3, min.features = 200)\n  return(seurat)\n}\n# data import\nSeu.p1hpv <- seuread(dir = \"/outs/filtered_feature_bc_matrix/\",\nprojectname = “P1_HPV”)",
    "Critical: Before data import, set the working directory to cellranger output result location, and read the gene expression data from “/outs/filtered_feature_bc_matrix/” folder.\nMerge the data from all samples by importing each single-cell RNA-seq gene expression dataset into a separate Seurat object, following the steps outlined in Step 52. Once all datasets have been imported, combine them into a single Seurat object using the function \"merge\".\nSeu.p1c <- seuread(dir = \"/outs/filtered_feature_bc_matrix/\",\nprojectname = “P1_C”)\n# Read samples one by one. .....\nseu.all <- merge(x = p1hpv, y =c(Seu.p1c, ...))\nNote: In this protocol, data set used for sc-RNA-seq analysis could be obtained from National Genomics Data Center (NGDC) under GSA-human: HRA003672 (https://ngdc.cncb.ac.cn/gsa-human[href=https://ngdc.cncb.ac.cn/gsa-human]).1[href=https://www.wicell.org#bib1] The combined gene expression matrix of all samples and cell meta data information are available at NGDC under OMIX: OMIX002487 (https://ngdc.cncb.ac.cn/omix/releaseList/[href=https://ngdc.cncb.ac.cn/omix/releaseList/]). Users can download the combined gene expression matrix and build merged Seurat Objects directly.\nCell filtering: Cells and genes were evaluated based on three criteria: (1) Cells with gene expression counts over 7,500 or under 200 were excluded, as low-quality cells often have few genes and doublets may show a high gene count. (2) Cells with more than 25% mitochondrial counts were filtered, as dying cells may have high mitochondrial contamination. (3) Genes expressed in fewer than three cells within a sample were removed.\nseu.all <- PercentageFeatureSet(seu.all, pattern = \"ˆMT-\", col.name\n= \"percent.mt\")\nseu.all <- subset(x = seu.all, subset = nFeature_RNA > 200 &\nnFeature_RNA < 7500 & percent.mito < 25)\nData normalization and identification of highly variable features: The data were normalized using the \"LogNormalize\" method, with a scaling factor of 10,000 as the default. Highly variable features were identified using the \"FindVariableFeatures\" function, with a mean-variance relationship approach.\nseu.all <- NormalizeData(object = seu.all, normalization.method =\n\"LogNormalize\", scale.factor = 1e4)",
    "## 3 Detection of variable features across the single cell\nseu.all <- FindVariableFeatures(object = seu.all, selection.method\n= 'mean.var.plot', mean.cutoff = c(0.0125, 3), dispersion.cutoff\n= c(0.5, Inf))\nScale the data and remove unwanted sources of variation. To remove technical noise and batch effects, consider specifying variables to regress using the \"vars.to.regress\" parameter.\nseu.all <- ScaleData(object = seu.all, vars.to.regress =\nc(\"nCount_RNA\", \"percent.mt\"))\nPerform dimensionality reduction and cluster analysis on cells derived from blood circulation, primary, and metastatic lesions. To avoid overfitting, only consider highly variable genes for the \"RunPCA\" function. Then, determine the optimal number of principal components to be used for the input to the 'FindClusters' function based on the Elbow plot analysis. Select the first 50 principal components for the example dataset in this protocol. Note that the pc and resolution parameters should be adjusted based on the size of the dataset.\n# Perform linear dimensional reduction\nseu.all <- RunPCA(object = seu.all, features =\nVariableFeatures(object = seu.all), verbose = FALSE)\n# Determine statistically significant principal components\nprint(ElbowPlot(object = seu.all, ndims = 50))\n# cluster cells\npc <- 40\nres <- 1\nseu.all <- FindNeighbors(object = seu.all, dims = 1:pc)\nseu.all <- FindClusters(object = seu.all, resolution = res)\n# tSNE\nseu.all <- RunTSNE(object = seu.all, dims = 1:pc)\nIdentify cluster-specific markers using a comparison of each cluster to all other cells, and report only those with positive expression.\nseu.all.markers <- FindAllMarkers(object = seu.all, only.pos = TRUE,\nmin.pct = 0.25, logfc.threshold = 0.25)\nSave data as a separate R object for further processing.\nsaveRDS(object = seu.all, file = \"seuObject.rds\")\nIdentification of CTC from the blood sample\nTiming: >1 day\nIn this section, we will provide the procedures and codes for identifying CTC from the blood samples.",
    "As circulating tumor cells only exist in the blood, it is necessary to identify and analyze them separately. To achieve this, data from the blood samples need to be specifically extracted from all the collected samples. Subsequently, a dimensionality reduction and cluster analysis need to be performed again (Figure 3[href=https://www.wicell.org#fig3]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2956-Fig3.jpg\nFigure 3. Identifying CTCs from HPV-derived cells by scRNA-seq\n(A) The t-SNE plot displays all cells from HPV blood samples based on their respective clusters.\n(B) The dot plot illustrates the expression levels of marker genes in each cluster. The color reflects the z-score of normalized expression, and dot size corresponds to the percentage of marker gene positive cells in each specific cluster.\n(C) The heatmap exhibits the inferred CNV results of CTCs and immunocytes in blood circulation, with immunocytes serving as the normal cell control. The chromosome scale is labeled at the top.\n(D) The t-SNE plot presents all cells from HPV blood samples based on cell type.\nseu.b <- subset(x = seu.all, subset = group_tissue == \"Blood\")\nseu.b <- NormalizeData(object = seu.b, normalization.method =\n\"LogNormalize\", scale.factor = 1e4)\nseu.b <- FindVariableFeatures(object = seu.b, selection.method =\n'mean.var.plot', mean.cutoff = c(0.0125, 3), dispersion.cutoff =\nc(0.5, Inf))\nseu.b <- ScaleData(object = seu.b)\nseu.b <- RunPCA(object = seu.b, features = VariableFeatures(object\n= seu.b), verbose = FALSE)\nseu.b <- FindNeighbors(object = seu.b, dims = 1:40)\nseu.b <- FindClusters(object = seu.b, resolution = 1)\nseu.b <- RunTSNE(object = seu.b, dims = 1:40)\nDistinguish CTCs from blood samples by marker gene expression. Firstly, PTPRC-negative cells in Blood samples are considered potential CTCs. Then marker genes of epithelial cells (KRT8), pancreatic cancer cells (CD9), and platelet genes (PPBP, PF4) were used for further calibration. PTPRC-CD9+PPBP+ cells of Blood samples were preliminarily defined as CTC cells (Figure 3[href=https://www.wicell.org#fig3]B).\ngenes <- c(\"PTPRC\", \"CD9\", \"KRT8\", \"PPBP\", \"PF4\")",
    "FeaturePlot(seu.b, features = genes, reduction = \"tsne\")\nCritical: Marker genes for malignant epithelial cells can vary across different cancer types. It is important to use markers specific to the tumor type of interest, which can be found in the latest published literature or databases such as CellMarker.\nDistinguish CTC from blood samples by CNV analysis. Here copykat was used to infer the copy number variation of cells in Blood samples. Due to the large difference in the cardinality of the result of copy number variation among different patients, each patient was analyzed separately here, and the analysis results were combined (Figure 3[href=https://www.wicell.org#fig3]C).\nlibrary(copykat)\nfor (i in unique(unique(seu.b$group_patient))) {\n  raw.ctc <- subset(seu.b, subset = group_patient == i)\n  exp.rawdata <- as.matrix(raw.ctc@assays$RNA@counts)\n  copykat.test <- copykat(rawmat=exp.rawdata,\n        id.type=\"S\",\n        ngene.chr=1,\n        win.size=25,\n        KS.cut=0.1,\n        sam.name=i,\n        distance=\"euclidean\",\n        norm.cell.names=\"\",\n        n.cores=20)\n}\nCritical: The raw gene count is used as the input file here, and the “n.cores” parameter should be adjusted based on the server situation. If the gene name format of the input file is not symbol, the “id.type” parameter needs to be adjusted. For details about the adjustment mode, visit “https://github.com/navinlabcode/copykat[href=https://github.com/navinlabcode/copykat]“.\nNote: Cells with more abnormal copy number events were defined as malignant cells. Combine the marker gene definition results in step 61. CTCs were eventually identified from the Blood sample originated cells.\nVisual t-SNE dimension reduction result according to the cell types (Figure 3[href=https://www.wicell.org#fig3]D).\nIdentify cell types\nTiming: >1 day\nIn this section, we will perform the reduction and cluster analysis for the cells from primary and metastatic lesions, separately.\nCoarse cell typing: Determine the cell type of each cluster based on the expression of key gene markers (Table 1[href=https://www.wicell.org#tbl1]). Cells are divided into eight large sub-types: Epithelial, Fibroblast, Endothelial, CTC, B cells, Myeloid, NK, and T cells (Figures 4[href=https://www.wicell.org#fig4]A and 4B).\ntable:files/protocols_protocol_2956_6.csv\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2956-Fig4.jpg",
    "Figure 4. The single-cell transcriptional atlas of PDAC primary tumors and metastatic lesions\n(A and B) The UMAP plots present all sequenced cells based on their respective cell types (A) and tissue origins (B).\n(C and D) The UMAP plots present epithelial cells based on the CopyKat prediction results (C) and tissue origins (D).\n(E and F) The UMAP plots present all immune cells based on cell type (E) and tissue origins (F).\n(G) The dotplot shows the expression level of marker genes in each immune cell type. The color indicates z-score of normalized expression, and dot size represents the percentage of marker gene positive cells.\nCopykat is used to infer the copy number variation of cells in primary and metastatic samples as described in step 62. All the cells in the primary and metastatic samples from each patient are analyzed (Figures 4[href=https://www.wicell.org#fig4]C and 4D).\nImmune cell typing: All the immune cells identified in step 64 is subjected to dimensionality reduction and cluster analysis, as described in step 57. Then, immune subtypes are defined based on the expression of key gene markers (Figures 4[href=https://www.wicell.org#fig4]E–4G and Table 2[href=https://www.wicell.org#tbl2]).\ntable:files/protocols_protocol_2956_7.csv\nCell-cell communication analysis\nTiming: >4 h\nIn this section, we will analysis the cell-cell interactions between tumor cells (CTC) and immunocytes, and provide the relevant codes.\nGenerate the input file required for CellPhoneDB in R. We applied CellPhoneDB (v2.0) to analyze the ligand-receptor interactions between tumor cells and immune cells. As the pancreatic primary tumor, portal venous blood, and liver metastatic lesion are located at different sites, we analyzed cells from Primary, Blood, and Metastatic samples separately. The input file should contain gene names as symbols. For more information on the gene name format, please refer to \"https://github.com/Teichlab/cellphonedb[href=https://github.com/Teichlab/cellphonedb]\".\nlibrary(Seurat)\nlibrary(data.table)\nfor (i in c(\"Primary\", \"Metastasis\", \"Blood\")) {",
    "seu.sub <- subset(seu.all, subset = group_tissue == i)\n  # cell type\n  group <- seu.sub$label\n  df <- as.data.frame(as.matrix(GetAssayData(seu.sub, slot =\n\"data\")))\n  df <- df[rowSums(df) > 10, ]\n  Gene <- rownames(df)\n  df <- cbind(Gene, df)\n  celltype <- data.frame(\"Cell\" = colnames(seu.sub), \"Cell_type\" =\ngroup)\n  dir.create(i)\n  fwrite(df, file = paste0(i, \"/cellphonedb_count.txt\"), row.names\n= F, col.names = T, sep = \"\\t\", quote = F)\n  fwrite(celltype, file = paste0(i, \"/cellphonedb_celltype.txt\"),\nrow.names = F, col.names = T, sep = \"\\t\", quote = F)\n}\nPerform cell-cell communication analysis in Python. It is important to note that the input file used for the analysis should contain gene names as symbols. In this step, we used CellPhoneDB to identify ligand-receptor interactions between tumor cells and immune cells, which can provide insights into the complex cellular interactions within the tumor microenvironment. For more information on the analysis procedure and results interpretation, please refer to the CellPhoneDB documentation.\n$ pip install cellphonedb\n$ cellphonedb method statistical_analysis cellphonedb_celltype.txt \\\n> cellphonedb_count.txt --iterations=100 \\\n> --threads=12 --counts-data=gene_name --output-path=outs\nIdentifying the immune checkpoint molecules between tumor-cells/CTCs and immunocytes\nTiming: 3 h\nIn this section, we will identify the immune checkpoint molecules between tumor cells (CTC) and immunocytes, and provide the relevant codes.\nTo determine the interaction weight score between cells, a cell-cell communication network analysis was performed, using the sum of the gene expression count of all significant ligand-receptor pairs between two cell types. Only significant ligand-receptor pairs containing the cell connect gene are retained (Figures 5[href=https://www.wicell.org#fig5]A–5C). The cell connect gene file is available at \"Github: https://github.com/Jinen22/scRNA-PDAC-CC/blob/main/Cellchat_cell_contact_gene_20211213.csv[href=https://github.com/Jinen22/scRNA-PDAC-CC/blob/main/Cellchat_cell_contact_gene_20211213.csv]\".\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2956-Fig5.jpg\nFigure 5. The cell-cell interaction between CTC/tumor cells and immunocytes in blood circulation, primary tumor, and metastasis lesion",
    "(A–C) The potential cell-cell communication network based on the calculation of interactive ligands-receptors between tumor cells/CTCs and immunocytes in the primary tumor (A), blood circulation (B), and liver metastasis (C). The lines connect the cell types expressing cognate receptors or ligands, and the thickness of the line represents the number and expression level of ligand-receptor pairs.\n(D–F) The dotplots present the expression levels of significant immune checkpoint-related ligand-receptor pairs between tumor cells/CTCs and immunocytes in the primary tumor (D), blood circulation (E), and liver metastasis (F). The color represents the mean expression of ligand and receptor genes, and the dot size represents the statistical significance of interactive molecular pairs. The p value presents - Log10 (P value).\nlibrary(psych)\nlibrary(tidyverse)\n# Take Primary for example\nfiles = \"./Primary/\"\ndf.p = read.table(paste0(files, \"/outs/pvalues.txt\"), header=T,\nstringsAsFactors = F, sep = '\\t', comment.char = '', check.names=F)\ndf.m <- read.table(paste0(files, \"/outs/means.txt\"), header=T,\nstringsAsFactors = F, sep = '\\t', comment.char = '', check.names=F)\nrownames(df.p) <- df.p$interacting_pair\nrownames(df.m) <- df.m$interacting_pair\ndf <- read.csv(file = \"Cellchat_cell_contact_gene_20211213.csv\",\nheader = T)\nkeep <- rownames(df.p) %in% df$interaction_name\ndf.p <- df.p[keep, -(1:11)]\ndf.m <- df.m[keep, -(1:11)]\ndf.plot <- c()\nfor (cell in colnames(df.p)) {\n  pval <- df.p[, cell]\n  mea <- df.m[, cell]\n  mea <- mea[pval < 0.05]\n  df.plot <- c(df.plot, sum(mea))\n}\nnames(df.plot) <- colnames(df.p)\nname1 <- unlist(lapply(strsplit(names(df.plot), split = \"[|]\"),\nfunction (x) x[1]))\nname2 <- unlist(lapply(strsplit(names(df.plot), split = \"[|]\"),\nfunction (x) x[2]))\ndf.plot <- data.frame(source = name1, target = name2, count =\ndf.plot)\nDetailed steps for data visualization are available at \"https://github.com/Jinen22/scRNA-PDAC-CC/blob/main/Figure2.R[href=https://github.com/Jinen22/scRNA-PDAC-CC/blob/main/Figure2.R]\".\nIdentifying the immune checkpoint molecules.\nImport the CellPhoneDB output files “pvalues.txt” and “means.txt”in R software.\nImport the file of the immune checkpoint related genes, the file is available at “https://github.com/Jinen22/scRNA-PDAC-CC/blob/main/cellphonedb_gene.csv[href=https://github.com/Jinen22/scRNA-PDAC-CC/blob/main/cellphonedb_gene.csv]”. Only immune checkpoint related interaction pairs were retained.",
    "Filter low expression interaction pairs. Only significant immune check-point related interaction pairs (p < 0.05 & mean (Molecule 1, Molecule 2) > 0.5) were retained.\nlibrary(data.table)\ncellorder <- c(\"B cell\", \"Naive T\", \"CD8 EFF\", \"CD8 Ex\", \"Memory\nT\", \"Treg\", \"NKT\", \"NK\", \"cDC\", \"pDC\", \"M1\", \"M2\", \"Monocyte\",\n\"Neutrophil\", \"Mast\")\ncellread <- function(files, tissue, cellorder) {\n  df <- read.table(files, header=T, stringsAsFactors = F, sep =\n'\\t', comment.char = '', check.names=F)\n  df <- df[, -c(1, 3:11)]\n  df <- df[, c(1, grep(tissue, colnames(df)))]\n  colnames(df)\n  filter <- which(colnames(df) == paste0(tissue, \"|\", tissue))\n  df <- df[, -filter]\n  colorder <- c(colnames(df)[1], paste0(tissue, \"|\", cellorder),\npaste0(cellorder, \"|\", tissue))\n  colorder <- colorder[colorder %in% colnames(df)]\n  df <- df[, colorder]\n  return(df)\n}\n# pvalue\npvalue.p <- cellread(\"cellphonedb/Primary/outs/pvalues.txt\", tissue =\n\"Primary\", cellorder = cellorder)\npvalue.m <- cellread(\"cellphonedb/Metastasis/outs/pvalues.txt\",\ntissue=\"Metastasis\", cellorder = cellorder)\npvalue.b <- cellread(\"cellphonedb/Blood/outs/pvalues.txt\", tissue =\n\"CTC\", cellorder = cellorder)\ndf.p <- full_join(pvalue.b, pvalue.p, by=\"interacting_pair\")\ndf.p <- full_join(df.p, pvalue.m, by=\"interacting_pair\")\ndf.p[is.na(df.p)] <- 1\nmean.p <- cellread(\"cellphonedb/Primary/outs/means.txt\", tissue =\n\"Primary\", cellorder = cellorder)\nmean.m <- cellread(\"cellphonedb/Metastasis/outs/means.txt\",\ntissue=\"Metastasis\", cellorder = cellorder)\nmean.b <- cellread(\"cellphonedb/Blood/outs/means.txt\", tissue =\n\"CTC\", cellorder = cellorder)\ndf.m <- full_join(mean.b, mean.p, by=\"interacting_pair\")\ndf.m <- full_join(df.m, mean.m, by=\"interacting_pair\")\ndf.m[is.na(df.m)] <- 0\n## keep immune interaction pairs\ndf <- read.csv(file = \"cellphonedb_gene.csv\", header = T)\ngene.group <- \"immune\"\ngenes <- unique(df$genes[df$group == gene.group])\nkeep <- c()\nfor (i in genes) {\n  pair <- grep(i, df.p$interacting_pair)\n  keep <- c(keep, pair)\n}\nkeep.row <- unique(keep)\n# 2 filter\ndf.p.use <- df.p[keep.row, -1]\ndf.m.use <- df.m[keep.row, -1]\nCritical: The gene list in step 70 is summarized from the latest published research articles and reviews.6[href=https://www.wicell.org#bib6],7[href=https://www.wicell.org#bib7],8[href=https://www.wicell.org#bib8],9[href=https://www.wicell.org#bib9] The deadline for the collection is 2022, so some novel immune checkpoints may be missed. If some new immune checkpoint molecule pairs are identified in the future, it can be added to the gene list and followed up for analysis.",
    "Visualize the results of the remaining immune check-point related interaction pairs in R (Figures 5[href=https://www.wicell.org#fig5]D–5F). The script including the detailed steps is available at “https://github.com/Jinen22/scRNA-PDAC-CC/blob/main/Figure 2.R[href=https://github.com/Jinen22/scRNA-PDAC-CC/blob/main/Figure%202.R]”."
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Sequence Analysis",
    "Immunology",
    "Bioinformatics",
    "Health Sciences",
    "Cell Isolation",
    "Flow Cytometry",
    "Cancer",
    "Cell Biology",
    "Sequencing",
    "Single Cell",
    "High Throughput Screening"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology",
    "Bioengineering & Technology"
  ]
}