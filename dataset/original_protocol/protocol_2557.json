{
  "id": 2702,
  "origin_website": "Cell",
  "title": "Protocol for the operation of a breathing and vaping biomimetic robot to delineate real-time inhaled particle profile of electronic cigarettes",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nPrepare and connect HUMITIPAA components\nTiming: 3 h\nBuild-up of e-liquid in the tubing can obstruct the pneumatics of the system and ultimately affect the PM reading. Failure to properly connect the components will result in poor data collection and interruptions to the experiment. This step ensures that all systems are clean and functioning properly with each other. This will provide more accurate results and prevent interruptions.\nPrepare the Inhalation Exposure Chamber.\nOpen the Inhalation Exposure Chamber’s code in the Arduino IDE.\nSet the temperature, humidity, and CO2 parameters in the code and upload it to the chamber’s microcontroller.\nSet the temperature to 37°C, humidity to 70% (RH%), and CO2 levels to 5%.\nNote: It may take up to 3 h for the Inhalation Exposure Chamber to equilibrate upon start up. Upon reaching this point, the temperature, humidity, and CO2 levels significantly drop when the chamber is opened. Allow a minimum of 20 min for the chamber to equilibrate after it has been opened.\nIf the system was used previously, replace all pneumatic components of the setup that come into contact with EC aerosols.\nReplace the tubing for all systems, as well as the filters, reservoir, and tube connectors in the Vaping Robot and Dilution Robot.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2191-Fig7.jpg\nFigure 7. Vaping Robot and Dilution Robot assembly and pneumatic components\n(A) The two units of the Dilution Robot assemble such that the syringe assembly sits atop the unit that contains the pneumatic and electrical assemblies. The Dilution Robot sits atop the Vaping Robot with ports to enable the pneumatic and electrical connections between the two robots.",
    "(B) Dilution Robot pinch valve and pneumatic assembly. The two Y-connectors with empty ports connect to the syringe assembly. The reservoir and all connectors and tubing must be cleared of excess e-liquid or replaced between trials.\n(C) Vaping Robot pinch valve assembly. The two tubes seen exiting from the top of the robot connect to the Dilution Robot to access the aerosol reservoir. All connectors and tubing need to be purged of excess e-liquid or replaced between trials.\nNote: The pneumatic components that must be replaced for the Dilution Robot and Vaping Robot are pictured alongside their final assembly in Figure 7[href=https://www.wicell.org#fig7]. The pneumatic diagrams for the Vaping Robot and Dilution Robot are seen in Figures 4[href=https://www.wicell.org#fig4] and 5[href=https://www.wicell.org#fig5].\nCritical: Always make sure systems are powered off and unplugged before handling beyond normal experimental operation.\nPlace and connect robots inside the Inhalation Exposure Chamber.\nConnect communication lines between the robots’ microcontrollers (Figure 8[href=https://www.wicell.org#fig8]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2191-Fig8.jpg\nFigure 8. Wiring diagram for communication between microcontrollers\nThe microcontrollers communicate using binary (high/low) signals. All electrical grounds must be connected within the system to ensure proper communication between microcontrollers (blue lines). The Breathing-Emulator signals the Vaping Robot to step through its states (green line). The Vaping Robot triggers the Dilution Robot to either dilute the EC aerosols or to clear the system of all aerosols. The Dilution Robot sends a signal to the Vaping Robot to utilize its aerosol purging function (yellow lines).\nConnect the PM sensor (Figure 9[href=https://www.wicell.org#fig9]A) and Breathing-Emulator (Figure 9[href=https://www.wicell.org#fig9]B) to their corresponding microcontrollers.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2191-Fig9.jpg\nFigure 9. Assembled particulate matter (PM) sensor and Breathing-Emulator with connections to their microcontrollers",
    "(A) The PM Sensor contained within its gasket assembly is connected to its microcontroller and an external power supply (not pictured). Two serial communication wires can be seen connecting to the microcontroller. A ground wire from the power supply can also be seen leading to the microcontroller as it must share a common electrical ground with the sensor to properly communicate. The tubes connected to the sensor inlet and outlet will connect with the Vaping Robot.\n(B) The Breathing-Emulator’s stepper motor and two end-stop switches are connected to the PCB. The PCB also contains ports for connections to its 12-volt external power supply (not pictured) and for communication wires to the Vaping Robot.\nConnect pneumatics from the Vaping Robot to the PM sensor and Breathing-Emulator and insert the EC in the system (Figure 10[href=https://www.wicell.org#fig10]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2191-Fig10.jpg\nFigure 10. Image of Vaping Robot’s pneumatic connections to other elements of the system and electronic cigarette placed in gasket assembly\nPneumatic ports in the Vaping Robot are used to connect to the Breathing-Emulator and PM sensor inlet and outlet. The EC gasket assembly is connected to the Vaping Robot’s pneumatic assembly to draw aerosols from the EC.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2191-Fig11.jpg\nFigure 11. Fully assembled HUMITIPAA setup in Inhalation Exposure Chamber\nThe final setup of the HUMITIPAA. All pneumatic and electrical connections between and within each component have been established. The USB connections from each components’ microcontroller lead to an external computer (not pictured) which is used to control the system. A 12″ ruler is placed next to the Chamber.\nNote: The image of the full setup in the Inhalation Exposure Chamber is shown in Figure 11[href=https://www.wicell.org#fig11].\nDefine the system parameters for the PM sensor, Breathing-Emulator, Dilution Robot, and Vaping Robot.\nDefine the sampling rate in the PM sensor firmware and test.",
    "Run the sensor for 5 min to ensure that the sampling interval is not too short.\nNote: The sampling rate was set to was set to 1 Hz for this experiment. This is the sensor’s limit, so setting this value any higher may result in a poor reading. When the sampling rate is set too fast, an overflow (“ovf”) warning will appear in the mass concentration reading.\nSelect breathing and dilution profiles in the Vaping Robot firmware.\nSet the dilution ratio, linear actuator limits, and sample syringe volume in the Dilution Robot’s firmware.\nUse the “UNIT_TEST_DILUTION” Arduino file to find the linear actuator limits.\nNote: This file’s code allows the user to manually input the retraction length then see how it translates to the syringe assembly. The minimum and maximum actuator limits are the pulse values for which the sample syringe is retracted to 0 mL and 30 mL.\nSelect breathing profile in the Breathing-Emulator software, ensuring it matches the profile selected in the Vaping Robot’s firmware.\nVerify that the parameters and system setup provide an acceptable PM reading using a control 50:50 PG:VG mixture. Refer to the “collect data[href=https://www.wicell.org#sec3.2]” step detailed below for the process for running the HUMITIPAA system to collect this PM data.\nCritical: Between samples, the PM sensor particle count and mass concentration readings should drop to 0 #/cm3 and 0 μg/m3. Since the pneumatics of the HUMITIPAA system are contained with all access to air being filtered, the PM reading should not be influenced by ambient PM. (Troubleshooting 1[href=https://www.wicell.org#sec7.1]).\nEnsure that the PM reading during the sampling of aerosols is sufficiently below the sensor’s saturation threshold that was previously determined. If not, adjust the dilution ratio accordingly (troubleshooting 2[href=https://www.wicell.org#sec7.3]).",
    "Note: For this protocol, a dilution factor of 10,000 was used to collect the 300 nm–1 μm data, and a dilution factor of 900 was used to collect the 1 μm–10 μm data.\nNote: Testing the dilution parameters using a consistent control PG:VG mixture prior to each experiment validates the Dilution Robot’s efficacy and accuracy over time.\nCollect data\nTiming: 4 days\nThis step outlines the process for collecting data to ensure consistency from the system and prevent cross-contamination between trials.\nLoad the Arduino firmware for each robot and monitor the serial ports.\nOpen each Arduino IDE with code associated with each robot.\nOpen the serial ports so that the data on each serial port can be monitored or recorded simultaneously.\nThe Breathing-Emulator drives the rest of the setup, power this on to begin the experiment.\nLeave setup running until the desired number of puffs is recorded (troubleshooting 3[href=https://www.wicell.org#sec7.5]).\nAfter the data is recorded, stop the setup, pause the PM sensor, and charge the EC.\nCopy the PM sensor serial monitor data into a .txt file. For easier data processing, save with a descriptive file name, followed by the trial number formatted as “T#”, and ensure all subsequent files follow the same format (e.g., “0_Percent_VEA_T1.txt”, “1.25_Percent_VEA_T1.txt” …) (troubleshooting 4[href=https://www.wicell.org#sec7.7]).\nCritical: As the dilution factor increases, the disparity between the submicron particle count (300 nm–1 μm) and the microparticle counts (1 μm–10 μm) greatly increases, resulting in low microparticle counts. This can result in high variability in the microparticle measurements, while the submicron particle count is fairly consistent. This means that two trials at separate dilutions will likely be required to record accurate data for all particle size ranges.\nRun the tube cleaning cycle for the Dilution Robot and Vaping Robot twice.",
    "Set the “tube cleaning” parameter to 1 in the Dilution Robot code’s run settings, as shown in the following snippet of code:\n>#define TUBE_CLEANING  1\nSet the “debug” parameter to 1 in the Vaping Robot code’s run settings, as shown in the following snippet of code:\n>#define DEBUG    1\nWhile the Dilution Robot is connected to the Vaping Robot during the first cycle, manually enter the “Smoke” function through the Vaping Robot’s serial port communication interface.\nDuring the second cycle, manually enter the “Purge” function.\nOnce both cycles are complete, run the “Purge” function again for at least 10 s, or until there is no visible e-liquid passing through the transfer tubing.\nReplace the EC with the next concentration to be studied and repeat experiment until the data for all desired concentrations has been collected.\nAfter all data has been collected, examine it to ensure there are no inconsistencies/missed puffs. If there are, repeat the data collection for that concentration before cleaning the system.\nCritical: Replacing the pneumatic components can slightly affect the PM reading. So, it is imperative that all concentrations are studied within the same trial, before replacing any components. When replacing tubing, make a best effort to align the tubing in the same fashion as it was previously.\nOnce the trial is complete, remove the setup from the Inhalation Exposure Chamber for cleaning.\nClear all pneumatic connectors and tubing of excess e-liquid or replace with new components.\nNote: To avoid the introduction of foreign materials to the system, the tubing and connectors can be cleared of e-liquid accumulation using filtered compressed air or a filtered vacuum. If these components dirty from e-liquid build-up over multiple uses, they must be replaced.",
    "Note: Due to accumulation of the e-liquid in the tubing and connectors, it is not advised to run more than ∼50 puffs without replacing the pneumatic connectors. So, for an experiment measuring 4 concentrations, it is advised to have 9 puffs per concentration (to give room to repeat a concentration if needed), then manually replace and clean the pneumatic components between trials.\nFully charge the EC battery between trials.\nReassemble the setup in the Inhalation Exposure Chamber.\nWait for the chamber to equilibrate.\nRepeat this data collection process for as many trials as desired.\nOptional: If the microparticle counts within the 1 μm–10 μm size fractions are too low, repeat the experiment using a lower dilution factor. Note that this will likely mean the submicron particle count (300 nm–1 μm) will be beyond the sensor’s linearity region, so the data for these particle size ranges would need to be processed separately.\nProcess raw data\nTiming: 10 min (for step 18)\nThis step converts the raw data into table form for further processing and analysis. It also shows a graph of the collected data over time to verify that there were no immediate issues with the experiment.\nUse the “Raw Sensor Output Parser” (RSOP) software to convert the PM sensor’s raw text files into Excel files that can be further processed in MATLAB.\nGroup the raw files according to concentration and process each group separately.\nCopy the group of raw files into the folders: “…/RawSensorOutputParser/ProcessDilutionLinearity/ActiveDataFiles” and “…/RawSensorOutputParser/Release/ActiveDataFiles”.\nRun the ProcessDilutionLinearity executable file located in the folder: “…/RawSensorOutputParser/Release”.\nLocate the output files in the folder: “…/RawSensorOutputParser/Release/ActiveDataFiles” (Table 1[href=https://www.wicell.org#tbl1]).\ntable:files/protocols_protocol_2191_2.csv",
    "The custom-designed data processing software outputs separate Excel files tabulating the particle count and mass concentration data for each raw data file directly copied from the PM sensor readings. An additional text file lists all files processed in the software. These files are manually copied into the MATLAB program’s path for further processing and analysis.\nNote: This software will output two Excel files for each raw text file. The Excel filenames will be that of the text file followed by ‘N’ for the particle count data, and ‘M’ for the mass concentration data. It will also output a “ProcessedFiles” text file that lists the names of these Excel files. This text file is necessary to run the MATLAB code in the next step.\nArrange the file names listed in ProcessedFiles.txt in ascending order according to trial number.\nBased on Table 1[href=https://www.wicell.org#tbl1], the only text contained within ProcessedFiles.txt should be: AllFileNames, 0_Percent_VEA_T1.txtM.csv, 0_Percent_VEA_T1.txtN.csv, 0_Percent_VEA_T2.txtM.csv, 0_Percent_VEA_T2.txtN.csv, 0_Percent_VEA_T3.txtM.csv, 0_Percent_VEA_T3.txtN.csv.\nRun the MATLAB script (ECDataProcessing.m) with the RSOP’s output files to process the data into tables that show the span of data points along each peak (troubleshooting 5[href=https://www.wicell.org#sec7.9]).\nCopy all output files from the RSOP to the folder containing the MATLAB code.\nIn the MATLAB code, enter the name of the files to be processed, the trials to be processed, and the number of peaks per trial (the number of puffs).\nBased on Table 1[href=https://www.wicell.org#tbl1], this code would be:\n>RawDataFileToBeProcessed = \"0_Percent_VEA_\";\n>TrialsToBeProcessed = [\"T1\" “T2” “T3”];\n>NUMBER_OF_PEAKS = 9;\nRun the program to process the data.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2191-Fig12.jpg\nFigure 12. MATLAB graph of all PM data for nine puffs of the control 50:50 PG:VG e-liquid",
    "Plot that is automatically generated by the MATLAB script showing the particle count data with respect to time, where PM1 labels the particles from 300 nm–1 μm, PM2.5 from 1 μm–2.5 μm, PM4 from 2.5 μm–4 μm, and PM10 from 4 μm–10 μm. Note that the readings for PM2.5 – PM10 may not be visible due to the large difference relative to PM1 and scaling. The vertical lines are located at the maximum values for each peak.\nNote: The processed data will be saved into Excel files named “SpanDataCount” for the PM count data and “SpanDataConc” for the PM concentration data. Graphs of the real-time collected data will appear for each file (Figure 12[href=https://www.wicell.org#fig12]).\nReview the tables of processed data (Table 2[href=https://www.wicell.org#tbl2]) and save under a different file name, or in a separate location, as the Excel files will be written over every time the MATLAB script is run.\ntable:files/protocols_protocol_2191_3.csv\nThe MATLAB script tabulates that data such that the first column labels which peak the data points belong to, and the first and second rows label the trial number and particle fraction of the data below it. This table shows data collected for the submicron particle fraction.\nCritical: The data is tabulated based on the order that the files are processed. If the order of the file names in ProcessedFiles.txt is incorrect, the trial numbers in SpanDataCount.xlsx will be mislabeled.\nRepeat this process for each concentration."
  ],
  "subjectAreas": [
    "Health Sciences",
    "Biotechnology And Bioengineering",
    "Physics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research"
  ]
}