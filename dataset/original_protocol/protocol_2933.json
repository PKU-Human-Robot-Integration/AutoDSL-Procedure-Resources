{
  "id": 3104,
  "origin_website": "Cell",
  "title": "High-throughput interrogation of immune responses using the Human Immune Profiling Pipeline",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nHerein we describe step-by-step methods for the workflow in high-dimensional flow cytometry analysis and patient clustering. After standard flow cytometry staining and acquisition, we use FlowJo to select lymphocytes, remove the dead cells and doublets, and down sample cleaned lymphocytes to 10,000 cells per sample. We then use OMIQ to visualize these flow cytometry data in high dimensional space by Uniform Manifold Approximation and Projection (UMAP). Finally, we apply the EMD algorithm in R to calculate pairwise EMD values based on the lymphocyte UMAP axes and group individuals based on the EMD results.\nTo illustrate these various steps, we use as an example, flow cytometry data from cancer patients with a history of COVID-19 infection generated by Lyudovyk et al.1[href=https://www.wicell.org#bib1]\nFlow cytometry, cell filtration, and down sampling\nTiming: 0.5–1 h\nSelection of Lymphocytes, removal of the dead cells and doublets, and down sampling.\n(Flow cytometry raw data) Select Lymphocytes by FSC-A vs. SSC-A.\nRemove the doublets by FSC-H vs. FSC-A.\nRemove the dead cells by the viability channel (troubleshooting 1[href=https://www.wicell.org#sec5.1])\nDown sample the quality-controlled lymphocytes to 10,000 cells per sample (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2678-Fig1.jpg\nFigure 1. Gating strategy for live single lymphocytes and down sampling (refer to steps 1a-1d)\n(A) Time gating.\n(B) Forward and sideward scatter gating to identify lymphoid cells.\n(C) Single cell gating.\n(D) Live cell gating.\n(E) Down sampling to 10,000 cells.\nDimension reduction approaches (UMAP)\nTiming: 1.5 h\nWhile biaxial marker analysis is useful for basic analyses, Dimensional reduction approaches, such as tSNE and UMAP allow for 2D visualization of high dimensional space. Although R and Python have published packages for UMAP plots, user-friendly solutions with graphical interfaces (e.g., OMIQ, or Cytobank) have emerged that bridge high-dimensional analytical pipelines with classical manual analyses in a user-friendly and zero-coding manner.",
    "Specifically, while UMAP and tSNE analyses can certainly be performed using R scripts (e.g., CytoTree), we found that OMIQ allowed increased efficiency in (1) integration of clinical metadata with single and multi-parameter analyses, (2) generating publication-quality data and color palettes, (3) Tracking iterations of analyses and parameters that are used, and (4) Data sharing and collaboration. As part of the workflow, FlowJo is used for quality control and down sampling on raw flow cytometry data, and the clean .fcs files are exported and passed to OMIQ. The UMAP function in OMIQ is used to analyze these qualified cells in high dimensional space and generate UMAP coordinates for subsequent pairwise EMD calculations in R.\nPrepare flow cytometry data.\nSave flow cytometry data in .fcs files.\nNote: Example: Sample 1.fcs\nRename the .fcs files.\nNote: Example: conv1_export_Samples_Tube_001_artifact-.fcs\nPrepare metadata.\nRecord the metadata of each flow cytometry result and prepare the spreadsheet.\nCritical: the filenames in the spreadsheet must match the filenames of the flow cytometry samples.\nNote: Example: Filename, Age at COVID diagnosis, Age ≥60, B-cell depletion (in last 6 m), Duration of COVID positivity.\nFlow cytometry data upload in OMIQ (Movie S1[href=https://www.wicell.org#mmc1]).\nIn OMIQ, (Click) OMIQ -> Datasets -> Create Dataset -> Dataset Name -> Create -> Drag and Drop .fcs files.\n    Your browser does not support HTML5 video.\n  \n      Methods video S1. Flow cytometry data upload in OMIQ, related to step 4\n    \nMetadata upload in OMIQ (Movie S2[href=https://www.wicell.org#mmc2]).\nOrganize the metadata of each flow cytometry result in Excel. The first column (Filename) of metadata in Excel should match the first column (File Name) of Files in OMIQ.\nSelect the metadata in Excel (Ctrl + A) and copy (Ctrl + C).\nIn OMIQ, (Click) File Metadata -> Metadata Actions -> Set Metadata from Spreadsheet -> Paste (Ctrl + V).",
    "Your browser does not support HTML5 video.\n  \n      Methods video S2. Meta data upload in OMIQ, related to step 5\n    \nWorkflows in OMIQ.\nNote: The aim of this step is to calculate the lymphocyte UMAP axes of each sample for the following pairwise EMD algorithm.\nScaling (Only for Visualization).\nNote: The scaling step is to scale the fluorescent signal within the range of the figure plot. This is similar to the Customize Axis function in FlowJo software. This step is important for visualization and is not affecting the EMD results.\nIn OMIQ, (Click) Workflows -> Create Workflow -> Create -> Scaling -> Open (Scaling Type = Arcsinh, Cofactor = 400, Min = -800, Max = 262144) (Movie S3[href=https://www.wicell.org#mmc3]).\n    Your browser does not support HTML5 video.\n  \n      Methods video S3. Scaling in OMIQ, related to step 6b\n    \nUMAP (Figure 2[href=https://www.wicell.org#fig2]) (Movie S4[href=https://www.wicell.org#mmc4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2678-Fig2.jpg\nFigure 2. UMAP plots for four patient samples were generated using OMIQ after down sampling in Flowjo (refer to step 6c)\nCritical: The UMAP parameters are influential for the EMD values and sample clustering. These parameters should be decided empirically.\nNote: Nearest Neighbors: Low values influence the UMAP to focus on local structures, while large values influence the UMAP to consider the broader global structure.\nNote: Minimum Distance: Controls how close points are packed together and the topological resolution of the data. Low values will result in clumpier embeddings, while large values result in greater dispersal of points.\nNote: Components: This determines the dimensionality of the reduced dimension space we will be embedding the data into.",
    "Note: Epochs: The number of training epochs to be used in optimizing the low dimensional embedding. Larger values result in more accurate embeddings. If None is specified, a value will be selected based on the size of the input dataset (200 for large datasets, 500 for small).\nIn OMIQ, (Click) Add new child task in Scaling bar -> UMAP -> Select Files -> Select All -> Select Features -> Select Markers -> UMAP Settings -> Neighbors -> 50 -> Minimum Distance -> 0.01 -> Change the name of UMAP into UMAP N=50 MD=0.01 -> Save Settings -> Run UMAP (Nearest Neighbors = 50, Minimum Distance = 0.01, Metric = Euclidean, Components = 2).\n    Your browser does not support HTML5 video.\n  \n      Methods video S4. UMAP in OMIQ, related to step 6c\n    \nExport Data (Movie S5[href=https://www.wicell.org#mmc5]).\nNote: Export Data Format: .fcs.\nIn OMIQ, (Click) Add new child task in UMAP N=50 MD=0.01 bar -> Export Data -> Select Files -> Select All -> Select Features -> umap_1 and umap_2 -> Export Data Settings -> Format -> FCS -> Exported Data Units -> Original (\"raw\") -> Save Settings -> Run Export Data -> Open in Export Data -> Results -> Download omiq_exported_data.zip.\n    Your browser does not support HTML5 video.\n  \n      Methods video S5. Export data in OMIQ, related to step 6d\n    \nPrepare the .txt files from .fcs files (Movie S6[href=https://www.wicell.org#mmc6]).\nCopy the .fcs files into the same folder with FCS to TXT.R.\nRun FCS to TXT.R in Rstudio.\n    Your browser does not support HTML5 video.\n  \n      Methods video S6. Convert FCStoTXT, related to steps 7–8\n    \nScript 1: FCS to TXT.R\n# This script is adapted from https://github.com/sydneycytometry/CSV-to-FCS[href=https://github.com/sydneycytometry/CSV-to-FCS]\n# Ashhurst TM, Marsh-Wakefield F, Putri GH et al. (2020). bioRxiv. 2020.10.22.349563.10[href=https://www.wicell.org#bib10]",
    "# Adaptation 1: Modify the input from CSV to FCS and the output from FCS to TXT.\n# Adaptation 2: Modify the column names to uMAP1 and uMAP2.\n# Install packages if required\nif(!require('flowCore')) {BiocManager::install(\"flowCore\")}\nif(!require('Biobase')) {install.packages('Biobase')}\nif(!require('data.table')) {install.packages('data.table')}\nif(!require('readr')) {install.packages(\"readr\")}\n# Load packages\nlibrary('flowCore')\nlibrary('Biobase')\nlibrary('data.table')\nlibrary('readr')\n# Finds the directory where this script is located\ndirname(rstudioapi::getActiveDocumentContext()$path)\ngetwd()\nPrimaryDirectory <- getwd()\nPrimaryDirectory\n# Important, the only FCS files in the directory should be the one desired for analysis. If more than one are found, only the first file will be used\n# See a list of FCS files\nFileNames <- list.files(path=PrimaryDirectory, pattern = \".fcs$\")\n# See file names in a list\nas.matrix(FileNames) # See file names in a list\n# Read data from Files into list of data frames\n# Creates and empty list to start\nDataList=list()\n# Loop to read files into the list\nfor (File in FileNames) {\n  tempdata <- exprs(read.FCS(File, transformation = FALSE))\n  tempdata <- tempdata[1:nrow(tempdata),1:ncol(tempdata)]\n  File <- gsub(\".fcs\", \"\", File)\n  DataList[[File]] <- tempdata\n}\nrm(tempdata)\nAllSampleNames <- names(DataList)\n# Check data quality\nhead(DataList)\n# System time\nx <- Sys.time()\nx <- gsub(\":\", \"-\", x)\nx <- gsub(\" \", \"_\", x)\n# Create output folder\nnewdir <- paste0(\"Output_FCS-to-TXT\", \"_\", x)\nsetwd(PrimaryDirectory)\ndir.create(paste0(newdir), showWarnings = FALSE)\nsetwd(newdir)\n# Write files\nfor(i in c(1:length(AllSampleNames))){\n  data_subset <- DataList[i][[1]]\n  data_subset <- as.data.frame(data_subset)\n  colnames(data_subset)\n  dim(data_subset)\n  a <- names(DataList)[i]\n  write.table(data_subset, paste0(a, \".txt\"), sep = \"∖t\", col.names = NA)\n}\n# Write files with uMAP1 and uMAP2 columns\n# These files will be used for next step\nFileNames <- list.files(pattern = \".txt\")\ni <- 1\nfor(i in 1:length(FileNames)){\n  txtFile <- read.table(FileNames[i], header = TRUE)\n  uMAPcolumns <- grep( \"umap_.\", colnames(txtFile))\n  txtFile <- txtFile[,c(1,uMAPcolumns)]\n  colnames(txtFile) <- c(\"cell_ID\",\"uMAP1\", \"uMAP2\")\n  write_tsv(txtFile, paste0(FileNames[i], \"_renamedcols.txt\"))\n}\nOrganize the .txt files.\nSelect all .txt files with \"renamedcols\".",
    "Copy these .txt files into a new folder named txt.\nEMD calculation and patient sample clustering\nTiming: 0.5 h\nAfter receiving the UMAP coordinates from previous steps, pairwise EMD values for every two samples will be calculated. Samples are then grouped based on the hierarchical clusters of the EMD scores, and this result can be informative for patient stratification and phenotyping in later steps.\nEarth Mover Distance (EMD) Algorithm is a method for quantifying differences in high dimensional space that can be applied in many datasets including flow cytometry results. After the flow measurements of dozens of markers on millions of cells in a sample, methods for quantitatively comparing the multi-parametric flow cytometry data are required. Previous analyses were largely based on the mean or median levels of fluorescent markers or the percentage of cells within a gate. However, this type of analysis cannot capture the complex cell characteristics in high dimensional distributions. EMD calculation was developed to solve this issue, plus distinguishing the true biologically significant differences from the background, and it is computationally efficient on a personal laptop.11[href=https://www.wicell.org#bib11] Moreover, it provides an ability to quantify differences between high dimensional spaces.12[href=https://www.wicell.org#bib12] Herein, we calculate the pairwise EMD values between every two samples (patients) and visualize the results in the heatmap. Hierarchical clustering is applied to categorize samples (patients) into groups by similarity for the subsequent EMD group comparisons.\nOpen Config.R in Rstudio (Movie S7[href=https://www.wicell.org#mmc7]).\n    Your browser does not support HTML5 video.\n  \n      Methods video S7. Run EMD calculation, related to steps 9–14\n    \nChange the max_iterations (line 4, Config.R) and binning_factor (line 9, Config.R) (troubleshooting 2[href=https://www.wicell.org#sec5.3]).\nSave the Config.R.\nOpen Emdist Cohort.R in Rstudio.\nSet the cohort_dir to the directory of the folder txt (line 6, Emdist Cohort.R).\nRun the Emdist Cohort.R.\nScript 2: Config.R",
    "Critical: The max_iterations and binning_factor parameters can be influential for the EMD values and sample clustering. These parameters should be decided empirically.\nNote: To change the number of times EMD iterates, change “max_iterations”. EMD values are relatively stable across any iterations. The increase in iterations does not give significant improvement compared to the biological differences.\nNote: To change the size of the bins, change “binning_factor”. Currently, the bin size is an arbitrary uMAP unit. A binning factor of “1” indicates a grid of 1 × 1 uMAP boxes drawn across the map. The increase in bins will reduce the running time of the algorithm.\n# This script is adapted from https://github.com/gooberholtzer/emd-on-tsne[href=https://github.com/gooberholtzer/emd-on-tsne]\n# Adaptation: Made script more succinct and more efficient.\nmax_iterations <- 2\n# A binning factor of 1 groups uMAP values into matrix coordinates based on simple rounding to whole numbers\n# A factor of 2 (for example) creates half as many bins as a factor of 1\nbinning_factor <- 2\nprint( sprintf(\"Max iterations is %d\", max_iterations))\nprint( sprintf(\"Binning factor is %f\", binning_factor ))\nScript 3: Flow EMD.R\nNote: This script defines the functions used in EMD calculation.\n# This script is adapted from https://github.com/gooberholtzer/emd-on-tsne[href=https://github.com/gooberholtzer/emd-on-tsne]\n# Adaptation 1: Made script more succinct and more efficient.\n# Adaptation 2: Modify the codes for UMAP coordinates input.\n# Install packages if required\nif(!require('emdist')) {install.packages('emdist')}\n# Load packages\nlibrary(\"emdist\")\n# read configuration values\nsource( \"Config.R\")\nread_sample_file_to_dataframe <- function ( sample_file ) {\n  print( sprintf(\"Loading %s\", sample_file))\n  #figure out which column has the uMAP1 and uMAP2 data, don't assume it because the column number isn't always the same.\n  fileColumnsFrame <- read.table(sample_file, sep=\"∖t\", header = T, comment.char = \"\", nrows = 1)\n  uMAPcolumns <- grep( \"uMAP\", colnames(fileColumnsFrame))\n  columnFilter <- rep( \"NULL\", ncol(fileColumnsFrame))\n  columnFilter[uMAPcolumns] <- \"numeric\"",
    "return( read.table(sample_file, sep=\"∖t\", header = T, comment.char = \"\", colClasses = columnFilter))\n}\n# Making the EMD world (2D matrix) from the uMAP data frame\npopulate_matrix_from_frame <- function( dimension, fromFrame ) {\n  v <- vector( mode=\"numeric\", length = ( dimensionˆ2 ))\n  fillMatrix <- matrix( data=v, nrow = dimension)\n  midpoint <- round(nrow(fillMatrix)/2)\n  fromFrame <- round(fromFrame) + midpoint\n  for( selected_row in 1 : nrow(fromFrame)) {\n    illMatrix[ fromFrame$uMAP1[selected_row], fromFrame$uMAP2[selected_row] ] <- fillMatrix[ fromFrame$uMAP1[selected_row], fromFrame$uMAP2[selected_row] ] + 1\n  }\n  return( fillMatrix )\n}\n# Used to convert the binned matrix back to a frame for plotting\n# This is for graphical and testing purposes for now...\ncreate_frame_from_matrix <- function( fromMatrix ) {\n  matrix_row <- row(fromMatrix)[which(!fromMatrix == 0)]\n  matrix_col <- col(fromMatrix)[which(!fromMatrix == 0)]\n  matrix_vals <- fromMatrix[cbind(matrix_row, matrix_col)]\n  return ( data.frame( matrix_row, matrix_col, matrix_vals ))\n}\nplot_binned_frame <- function( binnedFrame, my_color, my_ylim, my_xlim ) {\n  symbols( binnedFrame[[1]],\n      binnedFrame[[2]],\n      sqrt(binnedFrame[[3]]/pi),\n      inches=1/3,\n      ann=F,\n      bg=my_color,\n      fg=NULL,\n      xlim = my_xlim,\n      ylim=my_ylim )\n}\ngraph_binned_plots <- function (matrix1,\n                matrix2,\n                sample1_file,\n                sample2_file,\n                raw_uMAP1_frame,\n                raw_uMAP2_frame,\n                output_graphic_file,\n                results) {\n  if( is.null(output_graphic_file)) {\n    return()\n  }\npng(output_graphic_file, width = 1200, height = 800)\n  par(mfrow=c(2,2))\n  smoothScatter(raw_uMAP1_frame, colramp = colorRampPalette(c(\"white\", \"steelblue2\")))\n  smoothScatter(raw_uMAP2_frame, colramp = colorRampPalette(c(\"white\", \"green\")))\n  my_ylim <- c(0,ncol(matrix2))\n  my_xlim <- c(0, nrow(matrix2))\n  plot_binned_frame( create_frame_from_matrix(matrix2), \"green\", my_ylim, my_xlim)\n  par(new=T)\n  plot_binned_frame( create_frame_from_matrix(matrix1), \"steelblue2\", my_ylim, my_xlim)\n  title( main = sprintf( \"%s (blue)\", sample1_file ),\n    sub = sprintf(\"Bin Factor = %d, Max Iterations=%d\", as.integer( results[\"binning_factor\"]), as.integer(results[\"max_iterations\"])))\nplot_binned_frame( create_frame_from_matrix(matrix1), \"steelblue2\", my_ylim, my_xlim)\n  par(new=T)\n  plot_binned_frame( create_frame_from_matrix(matrix2), \"green\", my_ylim, my_xlim)\n  title( main = sprintf( \"%s (green)\", sample2_file ),\n    sub = sprintf(\"EMD energy = %f\", as.numeric(results[\"result\"])))\n  dev.off()\n}\nexecute_emd <- function( sample1_file, sample2_file, output_graphic_file = NULL) {\n  process_start_time = date()\n  t1 <- proc.time()\n  rawsample1frame <- read_sample_file_to_dataframe( sample1_file )\n  rawsample2frame <- read_sample_file_to_dataframe( sample2_file )\n  # adjust for binning factor...\n  binfactoredsample1frame <- rawsample1frame / binning_factor\n  binfactoredsample2frame <- rawsample2frame / binning_factor",
    "# get the biggest dimension in both frames considering x and y\nmatrix_size <- 2 ∗ ceiling( max(abs(range( c( binfactoredsample1frame, binfactoredsample2frame) )))) + 1\n  print( sprintf(\"matrix dimension is %f\", matrix_size) )\n  print( \"Converting sample 1 to EMD matrix...\")\n  matrix1 <- populate_matrix_from_frame(matrix_size, binfactoredsample1frame)\n  normalized_matrix1 <- matrix1 / sum(matrix1)\n  print( \"Converting sample 2 to EMD matrix...\")\n  matrix2 <- populate_matrix_from_frame(matrix_size, binfactoredsample2frame)\n  normalized_matrix2 <- matrix2 / sum(matrix2)\n  print(\"Running EMD on prepared data...\")\n  minimum_energy <- emd2d(normalized_matrix1, normalized_matrix2, max.iter=max_iterations, xdist=binning_factor, ydist=binning_factor)\n  results <- c( file1 = sample1_file,\n        file2 = sample2_file,\n        result = minimum_energy,\n        max_iterations = max_iterations,\n        binning_factor = binning_factor,\n        process_start_time = process_start_time,\n        processing_duration_seconds = (proc.time() - t1)[\"elapsed\"],\n        graphic_output_file = output_graphic_file,\n        machine = Sys.info()[\"nodename\"]\n  )\n  graph_binned_plots(matrix1, matrix2, sample1_file, sample2_file, rawsample1frame, rawsample2frame, output_graphic_file, results)\n  return( results )\n}\nScript 4: Emdist Cohort.R\nNote: This script should create figures in the folder txt/graphics.\n# This script is adapted from https://github.com/gooberholtzer/emd-on-tsne[href=https://github.com/gooberholtzer/emd-on-tsne]\n# Adaptation: Made script more succinct and more efficient.\nsource(file=\"Flow EMD.R\")\ncohort_dir <- paste(getwd(),\"/txt\", sep=\"\")\noutput_file <- paste(cohort_dir,\"/cohort.csv\", sep=\"\")\ngraphics_output_dir <- paste( cohort_dir, \"/graphics\", sep=\"\")\ncount = 0;\nrun_emd <- function( sample1, sample2 ) {\n  count <<- count + 1\n  output_graphic_file <- paste( graphics_output_dir, \"/pairing_\", count, \".png\", sep=\"\")\n  results <- execute_emd( sample1, sample2, output_graphic_file )\n  write.table( data.frame(as.list(results)), file = output_file, append = T, sep = \",\", col.names = F, row.names = F)\n  return( results[\"result\"])\n}\nunlink(paste(cohort_dir, \"/cohort.csv\", sep=\"\"))\ndir.create(graphics_output_dir, showWarnings = FALSE)\nunlink( paste(graphics_output_dir, \"/∗.png\", sep=\"\"))\nsamples <- list.files(path = cohort_dir, pattern = \"∗.txt\", full.names = T)\nmatrix_with_results <- outer( samples, samples, FUN= Vectorize(run_emd) )\nprint( sprintf(\"results are stored in %s\", output_file))\nOptional: Extra Script 1: Max Iterations Comparison.R\nNote: This extra script is optional for the workflow.\nCohort_max_iterations_2_binning_factor_2 = read.csv(\"txt/cohort 2-2.csv\")\nCohort_max_iterations_4_binning_factor_2 = read.csv(\"txt/cohort 4-2.csv\")\ntable(Cohort_max_iterations_2_binning_factor_2$X0\n  == Cohort_max_iterations_4_binning_factor_2$X0)\nMax_Iteration_Comparison_dataframe = data.frame(M2B2 = Cohort_max_iterations_2_binning_factor_2$X0, M4B2 = Cohort_max_iterations_4_binning_factor_2$X0)\nlibrary(\"ggplot2\")",
    "Max_Iteration_Comparison = ggplot(Max_Iteration_Comparison_dataframe) + geom_point(aes(x = M2B2, y = M4B2)) + labs(title = \"EMD Scores\", x = \"max iterations = 2\", y = \"max iterations = 4\", size = 20) + theme_classic()\nMax_Iteration_Comparison\nggsave(\"EMD Scores by Different Max Iteration.png\", width = 5.2, height = 5, dpi = 300)\nNote: Interestingly, the differences in max_iterations do not affect the EMD values (column 3 in the cohort.csv) in our COVID-19 dataset, but the binning_factor drives different EMD results and sample clustering (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2678-Fig3.jpg\nFigure 3. EMD value heatmaps and sample grouping results with different parameters (refer to step 14)\nCheck the EMD graphics and cohort.csv.\nOpen folder txt.\nCheck the graphics folder.\nCheck the cohort.csv, column 3 is EMD values.\nEMD heatmap visualization (Movie S8[href=https://www.wicell.org#mmc8]).\nNote: The number of EMD groups should be determined manually.\nOpen EMD Clusting.R in Rstudio.\nSet the directory to the cohort.csv (line 21, EMD Clusting.R).\nChange the module.assign (k) (line 40, EMD Clusting.R) (troubleshooting 3[href=https://www.wicell.org#sec5.5]).\nSave the EMD Clusting.R.\nRun EMD Clusting.R (troubleshooting 4[href=https://www.wicell.org#sec5.7])\nCheck the heatmap.\nScript 5: EMD Clusting.R\n# This script is adapted from https://github.com/gooberholtzer/emd-on-tsne[href=https://github.com/gooberholtzer/emd-on-tsne]\n# Adaptation 1: Made script more succinct and more efficient.\n# Adaptation 2: Include the package installation codes.\n# Install packages if required\nif(!require('emdist')) {install.packages('emdist')}\nif(!require('dplyr')) {install.packages('dplyr')}\nif(!require('gplots')) {install.packages('gplots')}\nif(!require('RColorBrewer')) {install.packages(\"RColorBrewer\")}\n# Load packages\nlibrary(\"emdist\")\nlibrary(\"dplyr\")\nlibrary(\"gplots\")\nlibrary(\"RColorBrewer\")\nsource(file=\"Emdist Cohort.R\")\nsetwd(\".\")\nPrimaryDirectory <- paste(getwd(),\"/txt\", sep=\"\")\ncohort <- read.csv(\"txt/cohort.csv\", header = FALSE)\nFileNames <- list.files(path = PrimaryDirectory, pattern = \"txt\")\n# Create a matrix from the spreadsheet\n# Change nrow to = number of samples\nemd_vector <- pull(cohort, V3)\nemd_matrix <- matrix(emd_vector, nrow = length(FileNames))\nrownames(emd_matrix) <- cohort[1:length(FileNames),1]\ncolnames(emd_matrix) <- cohort[1:length(FileNames),1]\n# clutser rows and columns\nclustRows <- hclust(as.dist(1-cor(t(emd_matrix), method = \"pearson\")),\n          method = \"complete\")\nclustColumns <- hclust(as.dist(1-cor(t(emd_matrix), method = \"pearson\")),\n        method = \"complete\")",
    "# Cut the resulting tree and create color vector for clusters.\n# Change the value of k to break into different groups\nmodule.assign <- cutree(clustRows, k=5)\nmodule.color <- rainbow(length(unique(module.assign)), start=0.1, end=0.9)\nmodule.color <- module.color[as.vector(module.assign)]\n# Make the heatmap\nmypalette <- brewer.pal(11,\"RdYlBu\")\nheatmap.2(emd_matrix,\n      Rowv=as.dendrogram(clustRows),\n      Colv=as.dendrogram(clustColumns),\n      RowSideColors=module.color,\n      col=mypalette, scale='row', labRow=NA,\n      density.info=\"none\", trace=\"none\",\n      cexRow=1, cexCol=1, margins=c(8,20))\n    Your browser does not support HTML5 video.\n  \n      Methods video S8. EMD visualization (HeatMap), related to step 16\n    \nEMD group comparisons and cell type annotations\nTiming: 0.5 h\nCompare the differences among EMD groups in terms of cell densities, phenotypes, and distributions on UMAP. Annotate cell types on UMAP and summarize the patients’ features.\nMake a table with sample names and their assigned EMD groups (Movie S9[href=https://www.wicell.org#mmc9]).\n    Your browser does not support HTML5 video.\n  \n      Methods video S9. Sample names with EMD groups summary, related to step 17\n    \nScript 6: EMD Summary.R\nSummary = data.frame(EMD_Group = module.assign)\nwrite.csv(Summary, \"Filenames EMD Groups.csv\")\nIn OMIQ, plot the contour plot with all concatenated samples (Movie S10[href=https://www.wicell.org#mmc10]).\n    Your browser does not support HTML5 video.\n  \n      Methods video S10. EMD group comparisons and phenotypes, related to steps 18–21\n    \nIn OMIQ, plot the contour plots with samples in each EMD group (based on Filenames and EMD groups in Filenames EMD Groups.csv) (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2678-Fig4.jpg\nFigure 4. EMD group comparisons (refer to step 19, 3 samples are removed due to the lack of clinical metadata)\n(A) UMAP of all EMD groups (Total: 63 Patients).\n(B) UMAP of EMD group 1 (2 Patients).\n(C) UMAP of EMD group 2 (16 Patients).\n(D) UMAP of EMD group 3 (10 Patients).\n(E) UMAP of EMD group 4 (19 Patients).\n(F) UMAP of EMD group 5 (16 Patients).\nCompare the densities and distributions of cells on UMAP.\nExtra: Plot cell type annotations by differentiation markers on UMAP (troubleshooting 5[href=https://www.wicell.org#sec5.9]).",
    "Export all figures in .PPT file.\nComplete."
  ],
  "subjectAreas": [
    "Health Sciences",
    "Immunology",
    "Flow Cytometry"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research"
  ]
}