{
  "id": 2451,
  "origin_website": "Cell",
  "title": "Inferring cell communication using single-cell calcium spatiotemporal dynamics",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nPreprocessing of fluorescence time-series image stacks collected from GECI reporter cells\nTiming:  <30 min\nThe Preprocessing Step takes as input, a stack of fluorescence time-lapse images (∗.tiff) and an associated ROI file (∗.roi), and generates as output, a list of single cells (one for each ROI) with associated centroids and mean fluorescence time series’. Fiji/ImageJ is first used to subtract background fluorescence from each image, extract centroids, and quantify mean fluorescence time series’ for each single cell (ROI). Next, MATLAB is used to calculate differential fluorescence time series, remove cells without transients, and smooth signals before peak-finding in step 2. Upon completion of this step, the signal is prepared for investigation of spatiotemporal correlations.\nOpen the fluorescence time series (∗.tiff) in Fiji/ImageJ.\nCreating a Median Intensity Projection (MedIP) image.\nSubtract it from each frame of the fluorescence time series to remove background fluorescence.\nNote: Specifically, Image > Stacks > Z Project > Projection type (Median) to create the MedIP image, and Process > Image Calculator > Image 1 (Raw fluorescence) > Subtract > Image 2 (MedIP) to subtract the MedIP image (Figures 2[href=https://www.wicell.org#fig2] and 3[href=https://www.wicell.org#fig3]) (See troubleshooting[href=https://www.wicell.org#troubleshooting], problem 2[href=https://www.wicell.org#sec6.3]).\nLoad the pre-saved ROIs using Analyze > Tools > ROI manager> More >Open.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1934-Fig2.jpg\nFigure 2. Example of a single-cell calcium transient with and without background fluorescence correction\nafu = arbitrary fluorescence units.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1934-Fig3.jpg\nFigure 3. Example of fluorescence time-series preprocessing\n(A) Remove background. Specifically, Image > Stacks > Z Project > Projection type (Median), Process > Image Calculator > Image 1 (Raw fluorescence) > Subtract > Image 2 (MedIP).\n(B) Load pre-saved ROIs. Specifically, Analyze > tools > ROI manager > open.\n(C) Select quantitative features (e.g., mean gray value, centroid). Specifically, Analyze > set measurement.",
    "(D) Record quantitative features for all ROIs. Specifically, Analyze > tools > ROI manager > More > multi measure.\nStandardize the image orientation by setting the origin (0,0) to the lower left-hand corner using Image > Adjust > Coordinates.\nNote: A dialog box will appear. Input 0 after Left and 0 after Bottom.\nExtract quantitative features (mean gray value and centroid) across all time points for each ROI using Analyze > Set Measurements > Mean Gray Value and Centroid followed by Analyze > Tools > ROI Manager > More > Multi Measure. Save the resulting file (∗.csv) (Figure 3[href=https://www.wicell.org#fig3]).\nDownload the cell communication inference script inferring_cell_communication.m (key resources table[href=https://www.wicell.org#key-resources-table]). Open the script in MATLAB and run it by pressing F5.\nThe MATLAB script will prompt the user to select a file (choose the .csv file saved above in substep 4).\nThe script will automatically calculate ΔF/F[t], a matrix of normalized differential fluorescence time series’ for each cell.\nThe script will automatically use F[t], a matrix of raw fluorescence values defined at each time point for each cell.\nThe script will automatically use Fmed, a vector of median fluorescence values, one for each cell.\n    Δ F  /  F  [ t ]  =   (  F  [ t ]    -    F med   )  /  F med",
    "Note: Use of Fmed as a reference assumes that cells spend at least 50% at baseline. If this assumption is satisfied, then Fmed will provide a good estimate of cell-specific baseline dynamics. If it is only valid during part of the record, one should subset the time series and perform the analysis to derive Fmed. An alternative approach to calculating relative fluorescence is to subtract an estimate of initial fluorescence, F0. However, this assumes that cells are not in the midst of a calcium transient at time zero (See troubleshooting[href=https://www.wicell.org#troubleshooting], problem 1[href=https://www.wicell.org#sec6.1]).\nThe MATLAB script will automatically open filterDesigner app, an interactive tool used to design and evaluate digital filters, which will be used to smooth the signal.\nChange the filter type from finite impulse response (FIR) to infinite impulse response IIR. Use the default values or customize the filter for your data.\nSelect Design Filter and export the file using File > Export (to Workspace, as coefficients) and check the Overwrite Variables box.\nClose the app. The resulting filter will be automatically applied to the fluorescence time series.\nEvaluate adequacy of filtering.\nThe script will prompt the user to select an ROI.\nThe pre- and post-filtered fluorescence signals will be displayed.\nIf satisfied with the result, select “yes”; to reject and redesign the filter, select “no”.\nFor more information on filterDesigner select Help on its dialog box (See troubleshooting[href=https://www.wicell.org#troubleshooting], Problems 1[href=https://www.wicell.org#sec6.1] and 3[href=https://www.wicell.org#sec6.5]).\nPeak finding and impulse train determination from Ca2+ GECI time-series fluorescence\nTiming: <30 min\nThe MATLAB script will guide the user through a process that identifies peaks in the fluorescence time series’ and converts them into binary impulse trains for each cell (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1934-Fig4.jpg\nFigure 4. Generation of a single-cell binary impulse train from the normalized differential fluorescence time-series of a single ROI",
    "Normalized differential fluorescence time series’ are low pass filtered, subjected to peak-finding, and converted to single cell binary impulse trains. Figure reprinted with permission from Taghdiri et al. (2021)[href=https://www.wicell.org#bib7].\nInput the parameters for the MATLAB function findpeaks, namely threshold, Min peak Height, Min distance between peaks, Min prominence, Min width, and Max width. Default values are suggested.\nEvaluate the performance. The MATLAB script displays fluorescence vs time with the identified peaks superimposed for the most active cells.\nAccept the peaks by selecting “yes” if they match what one would label manually.\nReject by clicking “no” if there are extra peaks or missed peaks. Then proceed with optimization of parameters (See troubleshooting[href=https://www.wicell.org#troubleshooting], Problems 1[href=https://www.wicell.org#sec6.1] and 4[href=https://www.wicell.org#sec6.7]).\nOptimize peak-finding parameters focusing primarily on Min prominence to adjust for fluorescence amplitude and Min width and Max width to adjust for fluorescence duration.\nOnce accepted, peaks are automatically transformed into a matrix of binary impulses, B[t], which contains a “1” at the time point of each peak for each cell, and a “0” everywhere else. A histogram of the number of impulses per cell will be automatically displayed. This will be used to fit a probability distribution function and to create synthetic cell impulse trains with the same statistics below.\nCritical: Optimization of peak-finding parameters is critical because fluorescence kinetics and amplitudes different across experimental systems since they depend on many factors including cell type, microenvironmental context, and choice of genetically encoded calcium reporter.\nInference of cell communication pipeline based on “excess synchrony” metric\nTiming: ∼1 h\nStep 3 of this protocol infers putative cell communication events from the spatiotemporal synchrony of single cell calcium impulse trains. The strategy is illustrated in Figure 5[href=https://www.wicell.org#fig5]. An overview of the logic and approach are presented first, followed by the detailed sub-steps.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1934-Fig5.jpg",
    "Figure 5. Diagram of cell communication pipeline inference steps\n(A–C) (A) “Real” experimental binary impulse trains are (B) modeled based on their impulse train statistics to create (C) “generated” binary impulse trains.\n(D–F) Real and generated impulse trains are independently used to calculate synchrony, S (w, τ), specifically (E/F) Sreal (w, τ) and Sgen (w, τ).\n(G) A threshold called Sth is defined based on generated synchrony and a user-generated z score.\n(H) Excess synchrony, ΔS/w.\n(I and J) Cell communication events are identified at time τcomm’s and spatial locations (Xcomm’s, Ycomm’s). Figure reprinted with permission from Taghdiri et al. (2021)[href=https://www.wicell.org#bib7].\nFor purposes of this protocol, synchrony, S (w, τ), is defined as the number of impulses within a time window of length w, beginning at time τ. Synchronous impulses can occur either because of true biological information transfer or simply because of chance. By first modeling the “chance” component, we can then limit our search for cell communication to those times during which the experimentally observed synchrony exceeds the amount of synchrony expected “by chance”. We call the difference, after normalization to window size, “excess synchrony”, ΔS/w.\nNote: The reason for normalizing is because synchrony increases monotonically with window size. Normalizing to w enables comparison of excess synchrony across different window sizes.",
    "To determine the synchrony expected by chance, we model the statistics of experimental impulse trains from “real cells”, fit it to a probability distribution, and then sample the distribution to create generated impulse trains from “generated cells” having the same statistics. This allows calculation of generated synchrony due to chance alone, Sgen (w, τ). To convert generated synchrony into a single number that can be easily subtracted from real experimentally observed synchrony, Sreal (w, τ), to calculate excess synchrony, we define a threshold, Sth, at a specified percentile of Sgen (w, τ) using a z score. Excess synchrony, ΔS/w, is then calculated by subtracting Sreal (w, τ) and Sth and normalizing to w. Selection of Sth via the choice of z score is a critical step because high Sth values will predict few cell communication events but have fewer false positives than low Sth values, which will predict more cell communication events but include more false positives (predicted communication where synchrony is actually due to chance alone).\nTo determine the timing of putative cell communication events we derive a vector of communication times τcomm by grouping nearby values of τ for which excess synchrony ΔS/w is greater than zero. For each τcomm, spatial analysis is limited to only those cells with calcium impulses between τcomm and τcomm + w. k-Means clustering is performed and the centroid of the cluster with the greatest cell density is taken as the location of putative cell communication Xcomm, Ycomm. The results of putative cell communication events and their component cells are reported in tabular form in a single ∗.csv file. The following describes detailed sub steps with a focus on the how the user interacts with the script.",
    "The MATLAB script will automatically open the interactive distributionFitter app to facilitate fitting a probability distribution function to the experimental impulse frequencies (Figure 6[href=https://www.wicell.org#fig6]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1934-Fig6.jpg\nFigure 6. Modeling experimental impulse train statistics to generate synthetic cell impulse trains\nIn the parent window, select the Data tab and a daughter window will open.\nIn the Data field of the daughter window, enter “ImpulseHistogram”, and then select Create Data Set.\nReturning to the parent window, select the NewFit… tab, which will open a new daughter window.\nIn the Data field of the new daughter window, select “ImpulseHistogram”.\nIn the Distribution field, select “negative binomial”.\nFinally, select Apply to create the probability distribution object and select Save to Workspace to save it.\nClose the app.\nThe MATLAB script will perform a Chi square goodness of fit test using the built-in function chi2gof.\nThe MATLAB script will return a test decision for the null hypothesis that the experimental impulse histogram data comes from the specified probability distribution (selected from a dropdown in 9e).\nIf the test decision rejects the null hypothesis at the 5% significance level, then the app will reopen.\n9a–f must be repeated with a different distribution.\nAlternatively, the MATLAB script will proceed to automatically generate synthetic cell impulse trains by sampling from the approved distribution and placing the impulses at random time points. Therefore, the synchrony of resulting generated data will be normally distributed.\nNote: The script will run automatically with the assistance of only two input parameters - window size, which determines temporal resolution, and a z-score, which determines the inclusiveness or exclusiveness of communication inference (default values are provided for both).",
    "The user will be prompted, “Do you want to choose the window size automatically?” To use the default window size or specify it manually, answer “no.” Alternatively, to perform a systematic comparison of window sizes in search of the one yielding the maximum excess synchrony, answer “yes” (See troubleshooting[href=https://www.wicell.org#troubleshooting], problem 5[href=https://www.wicell.org#sec6.9]).\nThe user will be prompted to enter a z score, z, (a default is provided), which will be combined with the normally distributed generated data of mean μ and standard deviation σ to give a threshold synchrony Sth (See troubleshooting[href=https://www.wicell.org#troubleshooting], problem 5[href=https://www.wicell.org#sec6.9]).\n   S th    = μ  +  z∗ σ  \nCritical: Optimization of the z score is critical. The default z score is set at 1.28, the 80th percentile. However, Sth is a tunable parameter, which allows the user to alter the stringency of this threshold. At lower percentiles (lower Sth values), the number of identified peaks will increase, resulting in more predicted events but more false positives (i.e., more synchronous impulses that are labeled communication will actually be due to chance). Conversely, at higher percentiles (higher Sth values), the number of identified peaks will decrease resulting in fewer predicted events but more risk of false negatives (i.e., missing true communication events). The z score should be optimized to balance the competing goals of maximizing the number of events detected (by lowering the z score) while minimizing the number of false positives (by increasing the z score). In practice, if one has a biologically negative control sample (i.e., few calcium transients per time) one can reduce the z score until an unacceptable number of cell communication events (of which all are considered false positives) are detected.\nThe MATLAB script will calculate Excess Synchrony ΔS/w is calculated (Figure 7[href=https://www.wicell.org#fig7]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1934-Fig7.jpg",
    "Figure 7. Determination of real and generated synchrony from single-cell impulse trains\nSynchrony is defined as the sum of impulses within a window of length w beginning at time τ. “Real” synchrony Sreal derives from real experimental single impulse trains. “Gen” synchrony Sgen derives from generated single impulse trains. Excess synchrony is shown without normalization ΔS. Figure reprinted with permission from Taghdiri et al. (2021)[href=https://www.wicell.org#bib7].\n      Δ S  / w  =   [   S real   ( w, τ )  -    S th   ]  / w   \nThe MATLAB script will return the timing of putative cell communication events which is vector of communication times τcomm by grouping nearby values of τ for which excess synchrony ΔS/w is greater than zero (Figure 8[href=https://www.wicell.org#fig8]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1934-Fig8.jpg\nFigure 8. Example of how varying Sth affects predicted cell communication events\nSth corresponding to the 50th, 80th, and 100th percentiles of Sgen are illustrated. Communication is predicted where Sreal exceeds Sth, (e.g., where excess synchrony is greater than zero). The initiation of each putative communication event where Sreal sustainably exceeds Sth is deemed a putative communication event assigned to the start time τcomm. Figure reprinted with permission from Taghdiri et al. (2021)[href=https://www.wicell.org#bib7].\nThe script will open a window prompting the user to select a criterion for unsupervised learning algorithm that is used to solve clustering problems.\nThe script will calculate an optimal number of clusters k, evalclusters.\nThe script will use optimal k to preform perform k-Means clustering, kmeans function in MATLAB (See troubleshooting[href=https://www.wicell.org#troubleshooting], problem 6[href=https://www.wicell.org#sec6.11]).\nThe script will return τcomm and perform spatial analysis on only those cells with calcium impulses between τcomm and τcomm + w. Then the script will preform k-Means clustering and report the centroid of the cluster with the greatest cell density as the location for putative cell communication Xcomm, Ycomm (Figure 9[href=https://www.wicell.org#fig9]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1934-Fig9.jpg",
    "Figure 9. Finding high spatiotemporal synchronous cells\nPlot of cluster density vs cluster number for a single communication event (left). Cells with impulses in the time interval between τcomm and τcomm + w are subjected to k-Means clustering (right). The centroid of the cluster with the maximum density is interpreted as the location of putative communication (right).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1934-Fig10.jpg\nFigure 10. Example of the output folder contents at analysis completion\nThe folder includes an output file, FinalResults.csv, and associated plots.\nUpon completion the script will create an output file called FinalResults.csv and save all associated plots and figures. The FinalResults file contains a ∗.csv file with the following column headings: EventIndex, StartTime, EndTime, Duration, NumOfCells, CellIndex, CentroidX, CentroidY.\nNote: For clarity, each row refers to a distinct cell and its participation in each cell communication event. Therefore, EventIndex StartTime, EndTime, Duration, Number of Cells are properties of the event, while CellIndex, CentroidX, CentroidY are defined for the individual cells within each event (Figure 10[href=https://www.wicell.org#fig10])."
  ],
  "subjectAreas": [
    "Bioinformatics",
    "Microscopy",
    "Cell Biology",
    "Signal Transduction",
    "Molecular Biology",
    "Model Organisms"
  ],
  "bigAreas": [
    "Bioengineering & Technology",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}