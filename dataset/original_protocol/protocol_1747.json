{
  "id": 1856,
  "origin_website": "Cell",
  "title": "Quantifying RNA synthesis at rate-limiting steps of transcription using nascent RNA-sequencing data",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nOutline of the protocol\nThis protocol begins with identification of transcribed regulatory elements (regions initiating divergent transcription) de novo (Figure 3[href=https://www.wicell.org#fig3]A). Subsequently, the coordinates of transcribed regulatory elements are intersected with annotated TSSs of gene transcripts (Figure 3[href=https://www.wicell.org#fig3]A). Sites of divergent transcription that do overlap with TSSs of annotated genes indicate actively transcribed genes in the investigated condition. Sites of divergent transcription that do not occur in the vicinity of any annotated TSS of a gene are distal Transcribed Regulatory Elements (dTREs), also called enhancer candidates. We and others have previously verified that enhancer candidates identified from PRO-seq data contain marks of active enhancers, loop to gene promoters, and capture functionally verified enhancers (see Vihervaara et al., 2017[href=https://www.wicell.org#bib27], 2021[href=https://www.wicell.org#bib29]; Wang et al., 2019[href=https://www.wicell.org#bib31]). For simplicity, we hereon refer to the enhancer candidates as enhancers.",
    "Enhancer coordinates reported here are the dREG-identified sites of divergent transcription that do not overlap with any annotated promoter of a gene. Active genes, instead, are further divided into distinct regions (Figure 3[href=https://www.wicell.org#fig3]B). A browser-compatible bed file is generated to visualize every functional genomic region, color-code each region according to the functional category, and display the count of engaged Pol II molecules at the region (Figure 3[href=https://www.wicell.org#fig3]C). The count obtained here is the raw count of 3′-nts of PRO-seq reads (active sites) in the given dataset. This raw count can be normalized to allow comparison between datasets and account for different sequencing depths. Finally, distribution of engaged Pol II (Figure 3[href=https://www.wicell.org#fig3]D) and selected regulatory proteins (Figure 3[href=https://www.wicell.org#fig3]E) across the functional genomic regions are analyzed. For simplicity, the pipeline reported here uses a single condition of human K562 cells cultured in optimal growth conditions. The pipeline as shell and R scripts, as well as the output files generated here, are available via GitHub (https://github.com/Vihervaara/functionalGenomicRegions[href=https://github.com/Vihervaara/functionalGenomicRegions]).\nRun dREG to localize transcribed enhancers and active promoters\nTiming: 1–3 h\nThis section identifies transcribed regulatory elements in the investigated cell line and condition.\nCreate an account at https://django.dreg.scigap.org/[href=https://django.dreg.scigap.org/]. Log in.\nChoose dREG peak calling.\nUpload the unnormalized 3′-coverage bigWig plus strand file to the correct box.\nUpload the unnormalized 3′-coverage bigWig minus strand file to the correct box. Please note that the bigWig files need to be unnormalized (minimum value +1 for the plus strand and -1 for the minus strand).\nChoose a prefix (here ’K562_hg38′) to describe your run and press Launch. The run time depends on the size of the file and available processing capacity, commonly ranging 1–3h.\nWhen the run is complete, download the prefix.dREG.peak.full.bed.gz file and gunzip it.",
    "Move the downloaded file to the working directory and rename it to a simpler form:\nmv ∼/Downloads/K562_hg38.dREG.peak.full.bed  /pathToWorkingDirectory/dREGcalls_hg38_K562.bed\nGenerate coordinates of functional regions\nTiming: 30 min\nThese steps (4–6) divide genes into functional regions.\nDownload RefGene datafile, gunzip it and open it in R.\nwget -c -O hg38.refGene.txt.gz    http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/refGene.txt.gz[href=http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/refGene.txt.gz]\ngunzip hg38.refGene.txt.gz\nR\nrefGene = read.table(\"hg38.refGene.txt\", header=F)\ndim(refGene)      #gives the number of rows and columns in the refGene dataframe\nhead(refGene)    #shows the first six rows of the dataframe\nstr(refGene)      #shows information on each dimension\nName the refGene columns and remove unnecessary columns and chromosome entries.\nnames(refGene) =c(\"bin\", \"txID\", \"chr\", \"strand\", \"txStart\", \"txEnd\",\"cdsStart\", \"cdsEnd\", \"exonCount\", \"exonStarts\", \"exonEnds\", \"score\", \"geneName\", \"cdsStartStat\", \"cdsEnsStat\", \"exonFrames\")\nrefGene = refGene[-grep(\"_\", refGene$chr),]    #maintains chromosomes 1-22, X, Y and M.\nrefGene$chr = factor(refGene$chr)    #drops the extra levels removed above.\nrefGene = refGene[,c(3,5:6,4,13,2)]\nhead(refGene)    #look at the dataframe again\nGenerate coordinates of functional regions for every annotated gene transcript.",
    "In the RefGene data file, the ‘txStart’ is smaller than the same transcript’s ‘txEnd’. This is convenient when working with the coordinates of genes, but it leads to different columns reporting different functional sites depending on whether the plus or the minus strand encodes the gene. For example, the annotated TSS for genes on the plus strand is reported as txStart, while the TSS for genes on the minus strand is reported as txEnd. In the following steps, we add a column ‘TSS’ that reports the annotated TSS for each transcript. We then output a file that reports a 1000-nt window around the TSS. These windows of 1000 nt are intersected with the coordinates of dREG-identified sites of divergent transcription in step 7 to identify genes with active transcription and distal sites of divergent transcription, i.e., enhancers. We also obtain transcript-specific coordinates of promoter-proximal region (PP), divergent transcription (DIV), gene body (GB), CPS, and termination window (TW) according to the scheme in Figure 3[href=https://www.wicell.org#fig3]B.\n### Subset the genes based on the strand:\nrefGene_pl = subset(refGene, strand==\"+\")\nrefGene_mn = subset(refGene, strand==\"-\")\n### Genes on the plus strand:\nrefGene_pl$TSS = refGene_pl$txStart    # TSS\nrefGene_pl$CPS = refGene_pl$txEnd    # CPS\nrefGene_pl$DIVs = refGene_pl$txStart-750  # region of divergent transcription\nrefGene_pl$DIVe = refGene_pl$txStart-251\nrefGene_pl$PPs = refGene_pl$TSS-250    # promoter-proximal region\nrefGene_pl$PPe = refGene_pl$TSS+249\nrefGene_pl$GBs = refGene_pl$TSS+250    # genebody\nrefGene_pl$GBe = refGene_pl$CPS-501\nrefGene_pl$CPSs = refGene_pl$CPS-500    # CPS region\nrefGene_pl$CPSe = refGene_pl$CPS+499\nrefGene_pl$TWs = refGene_pl$CPS+500    # termination window\nrefGene_pl$TWe = refGene_pl$CPS+10499\n#### Genes on the minus strand:\nrefGene_mn$TSS = refGene_mn$txEnd    # TSS\nrefGene_mn$CPS = refGene_mn$txStart    # CPS\nrefGene_mn$DIVs = refGene_mn$txEnd+251    # divergent transcription region\nrefGene_mn$DIVe = refGene_mn$txEnd+750\nrefGene_mn$PPs = refGene_mn$TSS-249    # promoter-proximal region\nrefGene_mn$PPe = refGene_mn$TSS+250\nrefGene_mn$GBs = refGene_mn$CPS+501    # genebody\nrefGene_mn$GBe = refGene_mn$TSS-250\nrefGene_mn$CPSs = refGene_mn$CPS-499    # CPS region\nrefGene_mn$CPSe = refGene_mn$CPS+500\nrefGene_mn$TWs = refGene_mn$CPS-10499    # termination window",
    "refGene_mn$TWe = refGene_mn$CPS-500\n#### combine the data of plus and minus stands:\nrefGene = rbind(refGene_pl, refGene_mn)\nrefGene$promC1 = refGene$TSS-500\nrefGene$promC2 = refGene$TSS+500\n#### generate data files:\nwrite.table(refGene, file=\"hg38_refGene_allTranscripts.txt\", col.names=F, row.names=F, quote=F, sep=\"\\t\")\nwrite.table(refGene[,c(\"chr\",\"promC1\",\"promC2\",\"txID\",\"geneName\")], file=\"hg38_refGenes_TSSpm500.txt\", col.names=F, row.names=F, quote=F, sep=\"\\t\")\nsave.image()            # saves the above entries in the R\nq()                  # exits R\ny                  # answers ‘yes’ for saving the workspace image\nPlease note that an R script comprising the steps from reading the refGene file in step 4 to the end of step 6 is provided in GitHub (https://github.com/Vihervaara/functionalGenomicRegions[href=https://github.com/Vihervaara/functionalGenomicRegions]).\nIdentify active promoters and transcribed enhancers\nTiming: 10 min\nThis step sorts transcribed regulatory elements into active genes and transcribed enhancers.\nIntersect the dREG-identified regulatory regions with the 1000-nt window around TSSs.\nIdentify transcribed enhancers. These regulatory elements do not localize to any annotated TSS of a gene in the genome. The option -v directs the bedtools to output only entries in the file -a that do not show any overlap with coordinates given in file -b. The generated file contains the coordinates of transcribed enhancers.\nbedtools intersect -v -a dREGcalls_hg38_K562.bed -b hg38_refGenes_TSSpm500.txt > enhancers.bed\nIdentify annotated genes with divergent transcription at the promoter. These are genes that have transcriptional activity in the investigated condition. The argument -wa maintains the entries in -a that have any overlap with -b. The argument -u controls that each entry in -a is written only once even if multiple dREG peaks would overlap with the same promoter. The generated file contains coordinates of gene TSSs that have transcriptional activity.\nbedtools intersect -u -wa -a hg38_refGenes_TSSpm500.txt -b dREGcalls_hg38_K562.bed > activeGenes_hg38_K562.bed\nWrite files of functional genomic coordinates\nTiming: 10 min\nThis section generates files that contain the coordinates of functional genomic regions.\nReturn to R and read in the file with the TSSs of transcribed genes\nR",
    "Active = read.table(\"activeGenes_hg38_K562.bed\")\nGenerate a new data frame in R that contains only actively transcribed genes. In essence, the ‘refGene’ data frame generated in step 6 is reduced here to contain only gene transcripts which initiate transcription. The ‘txID’ column contains an individual identification code for each transcript variant.\nrefGeneAct = subset(refGene, txID %in% Active[,4])\nWrite files that contain the coordinates of promoter-proximal and divergent transcription regions. These coordinates were generated in step 6.\nwrite.table(refGeneAct[,c(\"chr\",\"PPs\",\"PPe\",\"geneName\",\"txID\",\"strand\")], file=\"ppPolII.txt\", col.names=F, row.names=F, quote=F, sep=\"\\t\")\nwrite.table(refGeneAct[,c(\"chr\",\"DIVs\",\"DIVe\",\"geneName\",\"txID\",\"strand\")], file=\"divTx.txt\", col.names=F, row.names=F, quote=F, sep=\"\\t\")\nRemove short genes before generating files with the gene body coordinates. This stage is needed to omit gene transcripts, where, due to shortness of the gene, the gene body would overlap with the promoter-proximal region (stretching to +500 from TSS) and CPS (starting from −500 from CPS) windows.\nshortGenes = subset(refGene, txEnd-txStart<=750)\nrefGeneAct_ = subset(refGeneAct, txEnd-txStart>750)\n#in K562 cells mapped against hg38, 351 active genes are removed at this stage.\nWrite the files for the CPSs, gene body coordinates and transcription windows.\nwrite.table(refGeneAct_[,c(\"chr\",\"CPSs\",\"CPSe\",\"geneName\",\"txID\",\"strand\")], file=\"CPS.txt\", col.names=F, row.names=F, quote=F, sep=\"\\t\")\nwrite.table(refGeneAct_[,c(\"chr\",\"TWs\",\"TWe\",\"geneName\",\"txID\",\"strand\")], file=\"TW.txt\", col.names=F, row.names=F, quote=F, sep=\"\\t\")\nrefGeneAct_ = subset(refGeneAct_,GBe-GBs>1) #ensuring no negative gene body lengths remain.\nwrite.table(refGeneAct_[,c(\"chr\",\"GBs\",\"GBe\",\"geneName\",\"txID\",\"strand\")], file=\"geneBody.txt\", col.names=F, row.names=F, quote=F, sep=\"\\t\")\nsave.image()\nq()\ny\nOf note: In the RefGen for hg38 file, short genes constitute 3,575 transcripts. Of these, only 351 genes were uniquely mappable, identified as ‘Active’ and, therefore, removed from our list of active gene transcripts in K562 cells.\nThe steps 8–12 can also be run via an R script provided in GitHub (https://github.com/Vihervaara/functionalGenomicRegions[href=https://github.com/Vihervaara/functionalGenomicRegions]).\nAllocate nascent transcription complexes to functional genomic regions\nTiming: 20 min\nIn steps 13 and 14, active sites of transcription are allocated to individual functional genomic regions. The active sites of transcription are derived from the nascent transcription sequencing data.",
    "Generate a bed file that only contains the 3′-nucleotide (active site of transcription) of each read (Figure 2[href=https://www.wicell.org#fig2]B). In the generated 3pnt.bed file (right panel in Figure 2[href=https://www.wicell.org#fig2]B), each RNA Polymerase position is reported as an individual row.\nSplit the file based on the strand of the mapped read\necho retaining 3prime most coordinate of the bed file\n    awk ‘$6 == \"+\"’ PROseq_K562_hg38.bed > tempPL.bed\n    awk ‘$6 == \"-\"’ PROseq_K562_hg38.bed > tempMN.bed\nActive site of transcription (3′-most nt) is the coordinate given in the third column of plus strand reads and the second column for minus strand reads. In this step, the active site of transcription (single nt) will be placed both to the second and the third column.\n    awk ‘{$2 = $3; print}’ tempPL.bed > tempPL_3p.bed\n    awk ‘{$3 = $2; print}’ tempMN.bed > tempMN_3p.bed\nThe reads from plus and minus strands are combined, the data is converted to tab-delimited, and the reads sorted based on genomic coordinates. Intermediary files are removed.\n    cat tempPL_3p.bed tempMN_3p.bed | tr ‘ ‘ ‘\\t‘ > temp_3p.bed\n    sortBed -i temp_3p.bed > PROseq_K562_hg38_3pnt.bed\n    rm ∗temp∗\nIntersect the coordinates of nascent transcription with the coordinates of functional genomic regions.\nThe coordinates of genomic regions were saved above as individual .txt files. Here, the number of engaged Pol II molecules (rows in the 3pnt.bed file) are allocated to distinct functional categories.",
    "Note: To allocate each engaged Pol II complex only once, we use the -u option in the bedtools intersect command and sequentially allocate the coordinates of active transcription to the distinct genomic categories. In each round, two different files are generated: File 1 retains active sites that localize to the given functional category (options -u and -wa). File 2 reports the active sites that do not localize to the given functional category (controlled with option -v). The file 2 will be used in the subsequent round to ensure that each engaged Pol II is allocated only to one genomic region. The order of the intersections is: i) promoter-proximal regions, ii) sites of divergent transcription, iii) enhancers, iv) CPSs, v) gene bodies, and vi) termination windows. In this order, promoter-associated Pol II molecules are not counted into enhancer transcription. Furthermore, transcription at intragenic enhancers is allocated to enhancers instead of gene bodies. Finally, termination windows can be relatively short or extend over several kilobases (Vilborg et al., 2017[href=https://www.wicell.org#bib30]). In this strategy, long (10 kb) termination windows are queried, but only Pol II complexes that do not overlap with any other functional genomic region are allocated to a gene’s termination window.\n##counting engaged Pol II at promoter-proximal regions\nbedtools intersect -u -wa -a PROseq_K562_hg38_3pnt.bed -b ppPolII.txt > PROseq_K562_ppPolII.bed\nbedtools intersect -v -a PROseq_K562_hg38_3pnt.bed -b ppPolII.txt > ppRemoved.bed\n##counting engaged Pol II at the sites of divergent transcription\nbedtools intersect -u -wa -a ppRemoved.bed -b divTx.txt > PROseq_K562_ppDiv.bed\nbedtools intersect -v -a ppRemoved.bed -b divTx.txt > ppdivRemoved.bed\n##counting engaged Pol II at enhancers\nbedtools intersect -u -wa -a ppdivRemoved.bed -b enhancers.bed > PROseq_K562_enhancers.bed\nbedtools intersect -v -a ppdivRemoved.bed -b enhancers.bed > ppdivEnhRemoved.bed\n##counting engaged Pol II at CPS\nbedtools intersect -u -wa -a ppdivEnhRemoved.bed -b CPS.txt > PROseq_K562_CPS.bed",
    "bedtools intersect -v -a ppdivEnhRemoved.bed -b CPS.txt > ppdivEnhCPSRemoved.bed\n##counting engaged Pol II at GB\nbedtools intersect -u -wa -a ppdivEnhCPSRemoved.bed -b geneBody.txt > PROseq_K562_GB.bed\nbedtools intersect -v -a ppdivEnhCPSRemoved.bed -b geneBody.txt > ppdivEnhCPSgbRemoved.bed\n##counting engaged Pol II at termination windows\nbedtools intersect -u -wa -a ppdivEnhCPSgbRemoved.bed -b TW.txt > PROseq_K562_TW.bed\nbedtools intersect -v -a ppdivEnhCPSgbRemoved.bed -b TW.txt > PROseq_K562_noGene_noEnh.bed\nrm ∗Removed.bed\nQuantify distribution of nascent transcription across functional genomic regions\nTiming: 10 min\nThe code in step 15 calculates engaged Pol II molecules in each category of functional genomic regions (enhancer, div, pp, gb, CPS, tw). Engaged Pol II that does not occur in any of the categories is indicated as unannotated. Step 15 further analyses the distribution of engaged Pol II across the functional genomic regions (see Figure 3[href=https://www.wicell.org#fig3]D).\nPlot the counts of engaged Pol II molecules at distinct categories of functional genomic regions.\nInitiate a script that collects counts of engaged Pol II molecules at the distinct genomic regions. The counts will be printed in the .txt file as well as on the terminal window.\nscript counts_at_functional_regions.txt\nPlot the counts of rows in each intersected bed file. The number of rows in each file corresponds to the number of active sites of transcription in the given category of functional genomic regions.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1336-Fx3.jpg\nTerminate the log script by pressing control + D in the terminal window. The file ‘counts_at_functional_regions.txt’ now reports the number of engaged Pol II molecules at each category of functional genomic regions. Figure 3[href=https://www.wicell.org#fig3]D shows the counts in a table format and includes percentages of engaged Pol II in each category. The pie chart in the graphical abstract illustrates the distribution of engaged Pol II complexes across the functional genomic regions.",
    "Note: The counts generated in this protocol correspond to sites of active transcription (3′-nt of a read) in the dataset. Here, we only have a single sample and, therefore, focus on the distribution (proportions) of active sites across the genomic regions. With PRO-seq data, a normalization factor that accounts for differences in data handling and sequencing depth can be computed. Detailed description of normalization factors is out of the scope of this study. In brief, invariant whole-genome spike-in from a distinct organism can be added to all samples before the run-on reaction. This equal amount of foreign chromatin provides a count of nascent transcription against which the samples can be normalized (Booth et al., 2018[href=https://www.wicell.org#bib5]; Vihervaara et al., 2021[href=https://www.wicell.org#bib29]). Alternatively, genomic regions where no changes are detected during a time course can be utilized to generate a normalization factor between samples (Mahat et al., 2016b[href=https://www.wicell.org#bib17]; Vihervaara et al., 2017[href=https://www.wicell.org#bib27]).\nQuantify nascent transcription complexes at individual genomic regions\nTiming: 15 min\nThis section computes a bed file that can be visualized in a genome browser. The generated bed file shows color-coded functional genomic regions, as well as the raw count of engaged Pol II at each region.\nIntersect coordinates of the active sites of transcription with the coordinates of individual functional genomic regions.\nbedtools intersect -c -wa -a ppPolII.txt -b PROseq_K562_ppPolII.bed > ppPolCounts.tmp\nbedtools intersect -c -wa -a divTx.txt -b PROseq_K562_ppDiv.bed > ppDivCounts.tmp\nbedtools intersect -c -wa -a enhancers.bed -b PROseq_K562_enhancers.bed > enhancerCounts.tmp\nbedtools intersect -c -wa -a geneBody.txt -b PROseq_K562_GB.bed > geneBodyCounts.tmp\nbedtools intersect -c -wa -a CPS.txt -b PROseq_K562_CPS.bed > CPSCounts.tmp\nbedtools intersect -c -wa -a TW.txt -b PROseq_K562_TW.bed > TerminationWinCounts.tmp",
    "Color code the distinct categories of functional genomic regions. The color coding is in bed-compatible rgb format (0–255,0–255,0–255). If desired, the color-code for each category of functional genomic regions can be adjusted here by changing the rgb values.\nawk -F ‘\\t’ -v OFS=‘\\t’ ‘{ $(NF+1) =\"243,132,0\"; print }’ ppPolCounts.tmp > ppPolCounts.bed\nawk -F ‘\\t’ -v OFS=‘\\t’ ‘{ $(NF+1) =\"178,59,212\"; print }’ ppDivCounts.tmp > ppDivCounts.bed\nawk -F ‘\\t’ -v OFS=‘\\t’ ‘{ $(NF+1) =\"115,212,122\"; print }’ enhancerCounts.tmp > enhancerCounts.bed\nawk -F ‘\\t’ -v OFS=‘\\t’ ‘{ $(NF+1) =\"0,0,0\"; print }’ geneBodyCounts.tmp > geneBodyCounts.bed\nawk -F ‘\\t’ -v OFS=‘\\t’ ‘{ $(NF+1) =\"103,200,249\"; print }’ CPSCounts.tmp > CPSCounts.bed\nawk -F ‘\\t’ -v OFS=‘\\t’ ‘{ $(NF+1) =\"255,54,98\"; print }’ TerminationWinCounts.tmp > TerminationWinCounts.bed\nCombine the files. Add an extra column \".\" to obtain a genome browser compatible bed file for visualization.\ncat ppPolCounts.bed ppDivCounts.bed enhancerCounts.bed geneBodyCounts.bed CPSCounts.bed TerminationWinCounts.bed > catRegions.temp\nawk -F ‘\\t’ -v OFS=‘\\t’ ‘{ $(NF+1) =\".\"; print }’ catRegions.temp > catRegions2.temp\nReorganize the columns and add a header track.\nawk ‘{print $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" $7 \"\\t\" $5 \"\\t\" $6 \"\\t\" $2 \"\\t\" $3 \"\\t\" $8}’ catRegions2.temp > catRegions3.temp\nawk ‘!seen[$1,$2,$3,$6]++’ catRegions3.temp | sortBed > catRegions4.temp\ntouch headerLine.txt\necho track name=\"functional_genomic_regions\" itemRgb=\"On\" >> headerLine.txt\ncat headerLine.txt catRegions4.temp > functionalGenomicRegions.bed\nrm ∗.temp\nrm headerLine.txt\nThe generated ’functionalGenomicregions.bed’ file can be read in genome browsers to show the identified functional genomic regions as well as the count of engaged Pol II at each indicated region (exemplified in Figures 3[href=https://www.wicell.org#fig3]C, 4[href=https://www.wicell.org#fig4]A, and 4B).",
    "Note: As mentioned above, the number of engaged Pol II complexes at the distinct genomic regions generated in this protocol originates from raw read counts of the data. This count depends on the sequencing depth. To get a normalized count of engaged Pol II, the column 4 (reporting raw count) in the ’functionalGenomicregions.bed’ file can be multiplied with a normalization factor.\nAnalyze the distribution of chromatin-associated factors to functional genomic regions\nTiming: 30 min if summit files are available, up to hours if they need to be generated from raw data\nThe steps 20–22 input summit coordinates of chromatin-associated factors. The summit coordinates are annotated to the functional genomic regions. The distribution of each factor across the functional genomic regions is obtained (see Figures 3[href=https://www.wicell.org#fig3]E and 4[href=https://www.wicell.org#fig4]C).\nCount genome-associating factors at distinct functional genomic regions.\nObtain or generate datasets of interest. Place them in the folder of your working directory. Here, we used TBP, GATA1, CTCF, H3K36me3, NELFe, p300 and RAD21 ChIP-seq data (Consortium EP, 2011[href=https://www.wicell.org#bib7]). We remapped the ChIP-seq data to hg38 (https://github.com/Vihervaara/ChIP-seq_analyses[href=https://github.com/Vihervaara/ChIP-seq_analyses]). As starting material, please use a file that reports the summit coordinate of each peak, named with '_summits.bed', for example: K562_TBP_summits.bed, K562_GATA1_summits.bed, K562_CTCF_summits.bed, K562_H3K36me3_summits.bed .",
    "The peak summits for each given chromatin-associated factor are intersected with the distinct genomic regions. The strategy described in step 14 is used to ensure that each identified enrichment of a factor at the genome (peak) is counted once. For efficiency, we use a loop function that takes one bed file of mapped peak summits at a time. To define which datasets are analyzed in the loop function, please place names of factors in quotation marks, separated by a space, after the for x in the code below. In the loop, the ${x} will be replaced with the factor name, one listed factor after another.\nRun the code below using the factors of your choice. Please, ensure that the files are placed in the correct folder (working directory) and that the file names correspond to the names in the code. The files listing the coordinates of functional genomic regions were generated in steps 1–12.\nfor x in \"TBP\" \"GATA1\" \"CTCF\" \"H3K36me3\"\ndo\n## Factor-derived reads at promoter-proximal regions\nbedtools intersect -u -wa -a K562_${x}_summits.bed -b ppPolII.txt > ${x}_K562_ppPolII.bed\nbedtools intersect -v -a K562_${x}_summits.bed -b ppPolII.txt > ${x}_ppRemoved.bed\n## Factor-derived reads at the sites of divergent transcription\nbedtools intersect -u -wa -a ${x}_ppRemoved.bed -b divTx.txt > ${x}_K562_ppDiv.bed\nbedtools intersect -v -a ${x}_ppRemoved.bed -b divTx.txt > ${x}_ppdivRemoved.bed\n## Factor-derived reads at enhancers\nbedtools intersect -u -wa -a ${x}_ppdivRemoved.bed -b enhancers.bed > ${x}_K562_enhancers.bed\nbedtools intersect -v -a ${x}_ppdivRemoved.bed -b enhancers.bed > ${x}_ppdivEnhRemoved.bed\n## Factor-derived reads at CPS\nbedtools intersect -u -wa -a ${x}_ppdivEnhRemoved.bed -b CPS.txt > ${x}_K562_CPS.bed\nbedtools intersect -v -a ${x}_ppdivEnhRemoved.bed -b CPS.txt > ${x}_ppdivEnhCPSRemoved.bed\n## Factor-derived reads at GB\nbedtools intersect -u -wa -a ${x}_ppdivEnhCPSRemoved.bed -b geneBody.txt > ${x}_K562_GB.bed\nbedtools intersect -v -a ${x}_ppdivEnhCPSRemoved.bed -b geneBody.txt > ${x}_ppdivEnhCPSgbRemoved.bed\n## Factor-derived reads at termination windows",
    "bedtools intersect -u -wa -a ${x}_ppdivEnhCPSgbRemoved.bed -b TW.txt > ${x}_K562_TW.bed\nbedtools intersect -v -a ${x}_ppdivEnhCPSgbRemoved.bed -b TW.txt > ${x}_K562_noGene_noEnh.bed\nrm ∗Removed.bed\ndone\nPlot the counts of chromatin-associated factors at distinct categories of functional regions.\nInitiate the script that collects factor counts at the functional genomic regions.\nscript Factor_counts_at_functional_regions.txt\nPlot the counts of rows in each intersected bed file.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1336-Fx4.jpg\nTerminate the log script by pressing control + D in the terminal window.\nThe file ‘Factor_peaks_at_functional_regions.txt’ reports the number of ChIP-seq peaks at each functional category. Figure 3[href=https://www.wicell.org#fig3]E exemplifies the counts for TBP peaks in a table format, including the percentages of binding sites at each category of functional genomic regions. The bar charts in the graphical abstract illustrates the distribution of TBP, GATA1, CTCF and H3K36me3 across the functional genomic regions. In Figure 4[href=https://www.wicell.org#fig4]E, bar charts for additional factors (NELFe, p300 and RAD21) are included."
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Bioinformatics",
    "Systems Biology",
    "Genetics",
    "Chromatin Immunoprecipitation (Chip)",
    "Gene Expression"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}