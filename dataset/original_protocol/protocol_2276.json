{
  "id": 2396,
  "origin_website": "Cell",
  "title": "A pipeline of integrating transcriptome and interactome to elucidate central nodes in host-pathogens interactions",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nThe protocol includes seven parts, from PPIs to network comparisons to getting pathogenic target proteins, and everything in between. Each of these sections is described in more detail below. Create a Python notebook (e.g.,: “VTTSHI_STAR_Protocol.ipynb”) to execute all Python scripts and Shell commands step-by-step. In the Linux terminal using the following command open a new Jupyter notebook.\n$ jupyter notebook\nLoad protein-protein interaction networks (PPIs)\nTiming: 1 min\nMake sure that the Python libraries are loaded before you proceed.\nLoad and prepare PPIs with the NetworkX and pandas Python package.\nRun the following command in the Jupyter notebook.\nimport pandas as pd\nfrom glob2 import glob\nfrom collections import defaultdict\nimport networkx as nx\nfrom pathlib import Path\nfrom upsetplot import UpSet, from_contents\nfrom copy import copy\nimport urllib.parse\nimport urllib.request\nimport gseapy as gp\nfrom matplotlib import pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nMake sure all network files are in the path (same environment path).\nCritical: Every network is stored as a tab-separated edge list (∗_net.tsv).\nNote: Use the following command to check if all “∗_net.tsv” are in the same path (Optional step). The tree is a linux tool and can be installed using linux package maneger such as “dnf” and “apt” on the Fedora/centos and Ubuntu respectively.\n!tree D1_Network_data/ -P ∗_net.tsv\nThe output should look something like this:\nD1_Network_data/\n├── BioPlex_3\n│  ⋯  └── BioPlex_net.tsv\n├── CoFrac\n│  ⋯  ├── CoFrac_net.tsv\n│  ⋯  ├── __MACOSX\n│  ⋯  │  ⋯  └── nature14871-s2\n│  ⋯  └── nature14871-s2\n├── HuRI_db\n│  ⋯  └── HuRI_Union_net.tsv\n├── QUBIC\n│  ⋯  └── QUBIC_net.tsv\n└── STRING_db\n  ⋯    └── STRING_exp_net.tsv\n8 directories, 5 files\nIn the Jupyter notebook, run the following command to read network data as a pandas dataframe.\nNetwork_files = glob(‘D1_Network_data//∗/∗_net.tsv')",
    "Network_dfs = defaultdict(dict)\nNetwork_Graphs = defaultdict(dict)\nNetwork_Nodes = defaultdict(dict)\nfor Network_file in Network_files:\n  Net_name = Network_file.split(‘/')[-1].replace(‘_net.tsv’, '')\n  df = pd.read_csv(Network_file, sep=“\\t”)\n  Network_dfs[Net_name] = df\n  G = nx.from_pandas_edgelist(df, ‘IDa’, ‘IDb')\n  G.remove_edges_from(nx.selfloop_edges(G))\n  Network_Graphs[Net_name] = G\n  nodes = set(df.IDa.unique()).union(set(df.IDb.unique()))\n  Network_Nodes[Net_name] = nodes\nprint(f“List of Networks as dataframe {list(Network_dfs)}”)\nprint(f“List of Networks as Graph object{list(Network_Graphs)}”)\nprint(f“List of Networks Nodes list {list(Network_Nodes)}”)\nUse the following Python script to merge networks.\nNote: Our protein networks include 'BioPlex', 'CoFrac', 'HuRI _Union', 'QUBIC', and 'STRING experimental' at this stage.\nList_of_dfs = list(Network_dfs.values())\ndf_network = pd.concat(List_of_dfs)\ndf_network.drop_duplicates(inplace=True)\nLoad viral target data\nTiming: 1 min\nOptional: Ensure that all viral target datasets are in the path (same environment path) by using the following command (optional step).\n!tree HPIDB_data/∗∗/∗.tsv\nRun the following command to load the viral data.\nViral_target = defaultdict(dict)\nViral_files = glob(‘HPIDB_data/∗/∗.mitab_plus.tsv')\nfor Viral_file in Viral_files:\n  V_name = Viral_file.split(‘/')[-1].split(‘_')[0].title()\n  df = pd.read_csv(Viral_file, sep=“\\t”)\n  df_arrt = df.copy()\n  df_arrt[list(df_arrt)[-1]] = V_name + “_target”\n  df_arrt.to_csv(Viral_file.replace(‘mitab_plus.tsv’, “mitab_plus_attr.txt”), index=False, sep=“ ”)\n  Human_proteins = set(df.Human.unique())\n  Viral_target[V_name] = Human_proteins\nprint(list(Viral_target))\nThe following Python function to check for overlap between viral targets and individual PPI networks.\ndef Upset_protein(Target):\n  Uset_data = defaultdict(dict)\n  print(‘>', list(Network_Nodes))\n  Uset_data = copy(Network_Nodes)\n  Uset_data[Target] = Viral_target[Target]\n  print(list(Uset_data))\n  return Uset_data\nTo make a plot of HVP overlaps, follow the script below (Figure 2[href=https://www.wicell.org#fig2]B).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1882-Fig1.jpg\nFigure 1. Enrichment analysis and comparison of VITTSHI-HPV and VITTSHI-HSV\n(A) Shell-to-shell enrichment analysis of VITTSHI-HSP and VITTSHI-HSP wk-shell decomposition buckets.\n(B) The Sankey plot of overlapping wk-shell decomposition buckets.\n(C) Prioritization of proteins based on VITTSHI-HPV centrality and their functional enrichment.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1882-Fig2.jpg\nFigure 2. Overlapping UpSet plots of nodes and edges\n(A) The intersection between the VITTSHI-HPV network and the VITTSHI-HSV network.\n(B) Couplings between HPV target proteins and PPIs.\n(C) A variety of overlapping combinations of HSV target proteins and different PPIs.\nData = Upset_protein(‘Papillomaviruses')\nData = from_contents(Data)\nData",
    "upset = UpSet(Data, show_counts='%d', show_percentages=True, shading_color=.0, other_dots_color=.1, orientation='vertical')\nupset.style_subsets(present=“Papillomaviruses”, edgecolor=“blue”, linewidth=1)\nPath(“Images”).mkdir(parents=True, exist_ok=True)\nupset.plot()\nfig = plt.gcf()\nfig.savefig(“Images/Upset_HPV.png”, dpi=300)\nfig.savefig(“Images/Upset_HPV.pdf”)\ndel(Data)\nTo make a plot of HSP overlaps, follow the script below (Figure 2[href=https://www.wicell.org#fig2]C).\nData = Upset_protein(‘Herpes')\nData = from_contents(Data)\nData\nupset = UpSet(Data, show_counts='%d', show_percentages=True, shading_color=.0, other_dots_color=.1, orientation='vertical')\nupset.style_subsets(present=“Herpes”, edgecolor=“magenta”, linewidth=1)\nPath(“Images”).mkdir(parents=True, exist_ok=True)\nupset.plot()\nfig = plt.gcf()\nfig.savefig(“Images/Upset_HSV.png”, dpi=300)\nfig.savefig(“Images/Upset_HSV.pdf”)\ndel(Data)\nCritical: Only about 1 percent of viral protein targets do not overlap with PPI datasets in both cases. It is imperative to minimize non-overlapping protein targets.\nLoad transcriptomics data\nTiming: 1 min\nThe RNA-Seq analysis has been done using DESeq2 using GSE124118 and GSE74927 (Qin et al., 2018[href=https://www.wicell.org#bib40], 2020[href=https://www.wicell.org#bib39]; Zhang et al., 2016[href=https://www.wicell.org#bib54]) datasets.\nEnsure that all transcriptomics files are in the path (same environment path).\nCritical: All networks should be in a comma-separated edge list. (∗_net.csv) format. Check that all “∗.csv” files are in the path (same environment path) using the following command.\n!tree Transcriptome/∗∗/∗00_DEDeq2_Data∗∗/∗.csv\nLoad transcriptomics data using the following script.\nHerpes_df = pd.read_csv(“Transcriptome/Herpes_GSE124118/00_DEDeq2_Data_HSV/hsv_cells_Skin_vs_lung.csv”)\nHerpes_exp = set(Herpes_df[Herpes_df.padj <= 0.05].UNIPROT.dropna())\nPapillomavirus_df = pd.read_csv(“Transcriptome/Papillomavirus_GSE74927/00_DEDeq2_Data_HPV/hpv_status_HPV_vs_Neg.csv”)\nPapillomavirus_exp = set(Papillomavirus_df[Papillomavirus_df.padj <= 0.05].UNIPROT.dropna())\nprint(f“Number of expressed genes in HSV:{len(Herpes_exp)}”)\nprint(f“Number of expressed genes in HPV:{len(Papillomavirus_exp)}”)\nCritical: To eliminate genes that are not significantly expressed, only a q-value (padj ∗= 0.05) filter is used. However, other filters can be applied, depending on the circumstances. P-value can be used in place of q-value, for example:\nHerpes_exp = set(Herpes_df[Herpes_df.pvalue <= 0.05].UNIPROT.dropna())\nPapillomavirus_exp = set(Papillomavirus_df[Papillomavirus_df.pvalue <= 0.05].UNIPROT.dropna())\nIntegrate PPIs with viral protein target and viral transcriptome data\nTiming: 1 min\nUsing the following Python function Integrate PPIs with Viral protein target and Viral transcriptome data.",
    "Note: This Python function that takes a protein list and a network as inputs, and outputs two networks, an open network, and a closed network. From the network, it extracts the partners of the proteins or nodes list provided. When the extracted network contains only proteins from the provided list, it is a closed network; otherwise, if there are additional proteins not listed in the list, it is an open network. In technical terms, a network consists of edges. Each edge in an open target network contains at least one target node (protein target). In contrast, in a close target network, both nodes of an edge list should be protein' (Viral) targets.\nNetwork_Dir = “Network_data/”\ndef df_nx(df, Targets):\n  LOL = df.values.tolist() #[:10]\n  Open = []\n  Close = []\n  for a,b in LOL:\n    # print(a,b)\n    if a in Targets and b in Targets:\n      Close.append([a,b])\n    if a in Targets or b in Targets:\n      Open.append([a,b])\n  O = nx.Graph()\n  O.add_edges_from(Open)\n  O.remove_edges_from(nx.selfloop_edges(O))\n  C = nx.Graph()\n  C.add_edges_from(Close)\n  C.remove_edges_from(nx.selfloop_edges(C))\n  print(O)\n  print(C)\n  return O, C\nList_of_dfs = list(Network_dfs.values())\ndf_network = pd.concat(List_of_dfs)\ndf_network.drop_duplicates(inplace=True)\ndf_network.head()\nIntegrate PPIs with viral (HSV) targets and transcriptome data using the following Python script and make an open target and close target network.\nNote: We will refer to the integrated network as VTTSHI-HSV.\nCount_info = defaultdict(lambda: defaultdict(lambda: defaultdict(dict)))\nO, C = df_nx(df_network, Viral_target['Herpes'])\nOut_Dir = Network_Dir + “Herpes/”\nPath(Out_Dir).mkdir(parents=True, exist_ok=True)\nnx.write_edgelist(O, Out_Dir + 'Herpes' + “_Open_edgelist.nx”, delimiter=' ', data=False)\nnx.write_edgelist(C, Out_Dir + 'Herpes' + “_Close_edgelist.nx”, delimiter=' ', data=False)\nCount_info['Herpes']['Viral_target']['Open']['Node'] = O.number_of_nodes()\nCount_info['Herpes']['Viral_target']['Open']['Edges'] = O.number_of_edges()\nCount_info['Herpes']['Viral_target']['Close']['Node'] = C.number_of_nodes()\nCount_info['Herpes']['Viral_target']['Close']['Edges'] = C.number_of_edges()\nO_exp_O, O_exp_C = df_nx(nx.to_pandas_edgelist(O), Herpes_exp)\nOut_Dir = Network_Dir + “Herpes/”\nPath(Out_Dir).mkdir(parents=True, exist_ok=True)\nnx.write_edgelist(O_exp_O, Out_Dir + 'Herpes' + “_Open_exp_Open_edgelist.nx”, delimiter=' ', data=False)\nnx.write_edgelist(O_exp_C, Out_Dir + 'Herpes' + “_Open_exp_Close_edgelist.nx”, delimiter=' ', data=False)\nCount_info['Herpes']['Viral_expressed_open']['Open']['Node'] = O_exp_O.number_of_nodes()\nCount_info['Herpes']['Viral_expressed_open']['Open']['Edges'] = O_exp_O.number_of_edges()\nCount_info['Herpes']['Viral_expressed_open']['Close']['Node'] = O_exp_C.number_of_nodes()\nCount_info['Herpes']['Viral_expressed_open']['Close']['Edges'] = O_exp_C.number_of_edges()",
    "C_exp_O, C_exp_C = df_nx(nx.to_pandas_edgelist(C), Herpes_exp)\nOut_Dir = Network_Dir + “Herpes/”\nPath(Out_Dir).mkdir(parents=True, exist_ok=True)\nnx.write_edgelist(C_exp_O, Out_Dir + 'Herpes' + “_Close_exp_Open_edgelist.nx”, delimiter=' ', data=False)\nnx.write_edgelist(C_exp_C, Out_Dir + 'Herpes' + “_Close_exp_Close_edgelist.nx”, delimiter=' ', data=False)\nCount_info['Herpes']['Viral_expressed_close']['Open']['Node'] = C_exp_O.number_of_nodes()\nCount_info['Herpes']['Viral_expressed_close']['Open']['Edges'] = C_exp_O.number_of_edges()\nCount_info['Herpes']['Viral_expressed_close']['Close']['Node'] = C_exp_C.number_of_nodes()\nCount_info['Herpes']['Viral_expressed_close']['Close']['Edges'] = C_exp_C.number_of_edges()\nIntegrate PPIs with viral (HPV) targets with transcriptome data using the following Python script and make an open target and close target network.\nNote: We will refer to the integrated network as VTTSHI-HPV.\nO, C = df_nx(df_network, Viral_target['Papillomaviruses'])\nOut_Dir = Network_Dir + “Papillomaviruses/”\nPath(Out_Dir).mkdir(parents=True, exist_ok=True)\nnx.write_edgelist(O, Out_Dir + 'Papillomaviruses' + “_Open_edgelist.nx”, delimiter=' ', data=False)\nnx.write_edgelist(C, Out_Dir + 'Papillomaviruses' + “_Close_edgelist.nx”, delimiter=' ', data=False)\nCount_info['Papillomaviruses']['Viral_target']['Open']['Node'] = O.number_of_nodes()\nCount_info['Papillomaviruses']['Viral_target']['Open']['Edges'] = O.number_of_edges()\nCount_info['Papillomaviruses']['Viral_target']['Close']['Node'] = C.number_of_nodes()\nCount_info['Papillomaviruses']['Viral_target']['Close']['Edges'] = C.number_of_edges()\nO_exp_O, O_exp_C = df_nx(nx.to_pandas_edgelist(O), Papillomavirus_exp)\nOut_Dir = Network_Dir + “Papillomaviruses/”\nPath(Out_Dir).mkdir(parents=True, exist_ok=True)\nnx.write_edgelist(O_exp_O, Out_Dir + 'Papillomaviruses' + “_Open_exp_Open_edgelist.nx”, delimiter=' ', data=False)\nnx.write_edgelist(O_exp_C, Out_Dir + 'Papillomaviruses' + “_Open_exp_Close_edgelist.nx”, delimiter=' ', data=False)\nCount_info['Papillomaviruses']['Viral_expressed_open']['Open']['Node'] = O_exp_O.number_of_nodes()\nCount_info['Papillomaviruses']['Viral_expressed_open']['Open']['Edges'] = O_exp_O.number_of_edges()\nCount_info['Papillomaviruses']['Viral_expressed_open']['Close']['Node'] = O_exp_C.number_of_nodes()\nCount_info['Papillomaviruses']['Viral_expressed_open']['Close']['Edges'] = O_exp_C.number_of_edges()\nC_exp_O, C_exp_C = df_nx(nx.to_pandas_edgelist(C), Papillomavirus_exp)\nOut_Dir = Network_Dir + “Papillomaviruses/”\nPath(Out_Dir).mkdir(parents=True, exist_ok=True)\nnx.write_edgelist(C_exp_O, Out_Dir + 'Papillomaviruses' + “_Close_exp_Open_edgelist.nx”, delimiter=' ', data=False)\nnx.write_edgelist(C_exp_C, Out_Dir + 'Papillomaviruses' + “_Close_exp_Close_edgelist.nx”, delimiter=' ', data=False)\nCount_info['Papillomaviruses']['Viral_expressed_close']['Open']['Node'] = C_exp_O.number_of_nodes()\nCount_info['Papillomaviruses']['Viral_expressed_close']['Open']['Edges'] = C_exp_O.number_of_edges()\nCount_info['Papillomaviruses']['Viral_expressed_close']['Close']['Node'] = C_exp_C.number_of_nodes()\nCount_info['Papillomaviruses']['Viral_expressed_close']['Close']['Edges'] = C_exp_C.number_of_edges()\nExamine the overlap statistics for VTTSHI-HSV and VTTSHI-HPV.\npd.concat({k: pd.DataFrame(v).T for k, v in Count_info.items()}, axis=0)\nCritical: The overlap statistics for all integration steps should be examined for each viral dataset to be able to choose an appropriate overlapping network. In this protocol, the \"open-expressed-open\" dataset is used to analyze both viral data. This step is critical for different datasets, hosts, and pathogens. Make sure the chosen network is not too sparse for further processing.\nThe output of the overlap statistics:\ntable:files/protocols_protocol_1882_1.csv\nNetwork centrality and weighted k-shell decomposition analysis\nTiming: 100 min",
    "By analyzing network centrality, key characteristics of the network structure can be uncovered, and complex patterns of relationships can be estimated. The importance of protein nodes can also be determined using indicators of centrality like ‘Betweenness Centrality’, ‘Closeness Centrality’, ‘Clustering Coefficient’, ‘Degree’, etc. The iterative refinement centrality of a given node, such as that of wk-shell decomposition, also informs us of the mutual enhancement effect. Shells are assigned to nodes in the wk-shell decomposition. Networks have varying numbers of shells. Shells are normalized to percentiles, and further percentiles are grouped into buckets of ten so that buckets of each network can be fairly compared.\nCritical: Please install the Cytoscape software as indicated in the “key resources table[href=https://www.wicell.org#key-resources-table]”. Using the Cytoscape app manager, install the wk-shell-decomposition app as well.\nUse the following command to ensure that network datasets are in the path (same environment path, optional step).\n!tree Network_data/∗∗/∗Open_exp_Open_edgelist.nx\nPerform network centrality and weighted k-shell (wk-shell) decomposition analysis, following the steps below using Cytoscape.\nOpen Cytoscape.\nLoad network - Click => File -> Import -> From File -> (Choose network file, separated by spaces and without headers (∗.nx)).\nClick => Tools -> Analyze Networks -> (Uncheck Directed Graph option) > OK.\nSelect Apps -> wk-shell-decomposition.\nIn the parent directory, make a “Cytoscape_network_analysis” folder if it doesn’t exist.\n!mkdir Cytoscape_network_analysis\nSelect File -> Export -> Table To File… -> Save to “Cytoscape_network_analysis” (‘Herpes_Open_exp_Open_edgelist.nx default node.csv’ and ‘Papillomaviruses_Open_exp_Open_edgelist.nx default node.csv')\nMake sure all files are in the path (same environment path) using the following command (optional step).\n!tree Cytoscape_network_analysis/∗.csv\nwk-shell enrichment\nTiming: 1 min\nComparing VTTSHI-HSV and VTTSHI-HPV networks using the wk-shell-decomposition network analysis (from the previous step).\nQuantitatively compare node and edge overlap.\nNote: The following Python script loads networks as NetworkX Graph objects.\nG_h = nx.read_edgelist(‘Network_data/Herpes/Herpes_Open_exp_Open_edgelist.nx')\nG_h.name = ‘VTTSHI-HSV'\nprint(G_h)",
    "G_p = nx.read_edgelist(‘Network_data/Papillomaviruses/Papillomaviruses_Open_exp_Open_edgelist.nx')\nG_p.name = ‘VTTSHI-HPV'\nprint(G_p)\nCreate an UpSet plot Python dictionary object of nodes and sets, using the following function.\ndef Upset_Graph_data(Graphs, sort_edges = True):\n  Data = defaultdict(list)\n  for i in range(len(Graphs)):\n    G = Graphs[i]\n    if len(G.name) == 0:\n      G.name = “G\"+str(i+1)\n    # print(G.name)\n    Data[G.name + “_Node”] = set(G.nodes())\n    Edges = list(G.edges())\n    for j in range(len(Edges)):\n      e = list(Edges[j])\n      if sort_edges:\n        e.sort()\n      e = “_”.join(e)\n      Edges[j] = e\n    Data[G.name + “_Edge”] = set(Edges)\n  for i in Data:\n    print(f“{i} : {len(Data[i])}”)\n  return dict(Data)\nUpset_data = Upset_Graph_data([G_h, G_p])\nData = from_contents(Upset_data)\nData\nCreate an UpSet plot Using the following Python script (Figure 2[href=https://www.wicell.org#fig2]A).\nupset = UpSet(Data, show_counts='%d', shading_color=.1, other_dots_color=.1, element_size=None, orientation='vertical')\nupset.plot()\nPath(“Images”).mkdir(parents=True, exist_ok=True)\nfig = plt.gcf()\nfig.set_size_inches(5, 6)\nfig.savefig(“Images/Graph_comp.png”, dpi=300)\nfig.savefig(“Images/Graph_comp.pdf\")\nMake a pandas dataframe object containing the Cytoscape centrality analysis results.\nHerpes_Cyto_File = “Cytoscape_network_analysis/Herpes_Open_exp_Open_edgelist.nx default node.csv”\nPapilloma_Cyto_File = “Cytoscape_network_analysis/Papillomaviruses_Open_exp_Open_edgelist.nx default node.csv”\nHerpes_df = pd.read_csv(Herpes_Cyto_File)\nPapilloma_df = pd.read_csv(Papilloma_Cyto_File)\nCreate a Python dictionary object of the wk-shell-decomposition bucket.\nNote: Refer to the following Python definition.\ndef Bucket(File, Step=10, Print=False):\n  df = pd.read_csv(File)\n  df = df.set_index(“name”)\n  df = df.dropna()\n  df['Percentile'] = df._wkshell.rank(pct = True)\n  df = df.sort_values(‘Percentile’, ascending = False)\n  df = df[[“Percentile”]]\n  List = [i/100 for i in range(0,100,Step)]\n  for i in List:\n    df.loc[(df['Percentile'] >= i), ‘Bucket'] = int(i∗100)\n  df = df[[“Bucket”]]\n  d = df.T.to_dict(‘list')\n  Dic = defaultdict(list)\n  for i in d:\n    Gene,Bucket = i, str(Step+int(d[i][0])) + “_” + str(int(d[i][0]))\n    Dic[Bucket].append(Gene)\n  for i in Dic:\n    Dic[i] = set(Dic[i])\n    if Print:\n      print(f“Number of gene in {i} bucket : {len(Dic[i])}”)\nreturn Dic\nHerpes_wkshell_bukt = Bucket(Herpes_Cyto_File)\nPapilloma_wkshell_bukt = Bucket(Papilloma_Cyto_File)\nUse the following Python function, save ‘wk-shell-decomposition bucket’ as a gmt (Gene Matrix Transposed file format) file.\ndef Dict_to_gmt(Dic, discription=\"NA”, file_name = “Wkshell_file”):\n  from pathlib import Path\n  Genes = []\n  GMT_Dir = “GMT_base/”\n  Path(GMT_Dir).mkdir(parents=True, exist_ok=True)\n  file_name = GMT_Dir + file_name + “.gmt”",
    "fh = open(file_name, “w”)\n  for i in Dic:\n    set_name = i\n    Items = '\\t'.join(set(Dic[i]))\n    for j in Dic[i]:\n      Genes.append(j)\n  fh.close()\n  Genes = list(set(Genes))\n  print(file_name, len(Genes))\n  return file_name, Genes\nGMT_file_HSV, Genes_HSV = Dict_to_gmt(Herpes_wkshell_bukt, discription=“Wk_shell_HSV”, file_name = “VTTSHI-HSV”)\nGMT_file_HPV, Genes_HPV = Dict_to_gmt(Papilloma_wkshell_bukt, discription=“Wk_shell_HPV”, file_name = “VTTSHI-HPV”)\nGenes = list(set(Genes_HSV + Genes_HPV))\nprint(f\"\\nTotal Number of genes in {len(Genes)}\")\nPerform bucket-to-bucket enrichment analysis Using the GSEApy Python library. Select one VTTSHI gmt file as a target (HSV) and another as a query (HPV).\ndef Module_Enrichment(gmt, Genes, Gene_set, sig = ‘Adjusted P-value’, col_name = “Target”):\n  enr = gp.enrichr(gene_list=Gene_set,\n            gene_sets='GMT_base/HSV.gmt',\n            description='test_name',\n            outdir='test',\n            background=Genes,\n            cutoff=1\n            )\n  enr.results = enr.results.rename(columns={'Term':col_name})\n  return enr.results[[col_name, sig, ‘Overlap']]\nPerform enrichment of each bucket of the query bucket (HPV) with respect to the target bucket (HSV) Using the following Python script.\nNote: A single list of proteins from both networks is used as the background for the enrichment analysis.\ndf_list = []\nfor S in Papilloma_wkshell_bukt:\n  Gene_set = list(Papilloma_wkshell_bukt[S])\n  ench_Df = Module_Enrichment(‘GMT_base/HSV.gmt’, Genes, Gene_set).copy()\n  ench_Df['Source'] = S\n  ench_Df.loc[ench_Df['Adjusted P-value'] > 0.05, ‘Significance'] = ‘NE'\n  ench_Df.loc[ench_Df['Adjusted P-value'] <= 0.05, ‘Significance'] = '∗'\n  ench_Df.loc[ench_Df['Adjusted P-value'] <= 0.01,'Significance'] = '∗∗'\n  ench_Df.loc[ench_Df['Adjusted P-value'] < 0.001, ‘Significance'] = '∗∗∗'\n  df_list.append(ench_Df)\nCritical: Based on enrichment, an 'Adjusted P-value' significance symbol is assigned for further visualization purposes (‘∗∗∗' >> 0.05, > 0.05 '∗∗' <0.01 and > 0.01'∗').\nCombine all enrichment into one pandas dataframe object using The following Python script.\ndf_gseapy = pd.concat(df_list)\ndf_gseapy.Target.unique()\ndf_gseapy\nMake a scatter plot of the bucket-to-bucket enrichment analysis using Plotly.\nNote: The color represents significance level (‘green' >> 0.05, > 0.05, 'gold' <0.01 and > 0.01 'yellow') and a non-circle is not significant (Figure 1[href=https://www.wicell.org#fig1]A).\nimport plotly.express as px\nfig = px.scatter(df_gseapy, x=\"Target”, y=\"Source”, color=\"Significance”, symbol = “Significance”,\n          category_orders={\"Target”: ['10_0′, ‘20_10′, ‘30_20′, ‘40_30′, ‘50_40′,\n                              ‘60_50′, ‘70_60′, ‘80_70′, ‘90_80′, ‘100_90'][::-1],",
    "“Source”: ['10_0′, ‘20_10′, ‘30_20′, ‘40_30′, ‘50_40′,\n                              ‘60_50′, ‘70_60′, ‘80_70′, ‘90_80′, ‘100_90'],\n                      “Significance” : ['∗∗∗', “∗∗”, “∗”, “NC”],},\n          color_discrete_map={'∗∗∗' : “#88C408”, '∗∗' : “#A69363”, '∗': “#FFD602”, “NE”: “#808285”},\n          symbol_map ={'∗∗∗' : 200, '∗∗' : 200, '∗': 200, “NE”: 33},\n          template=“plotly_white”,)\nfig.update_traces(marker=dict(size=15, line=dict(width=2, color='#144B39′)), selector=dict(mode='markers'))\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black’, mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black’, mirror=True)\nfig.update_layout(title=f“wk-Shell Enrichment”, autosize=False, width=400, height=430, plot_bgcolor='rgba(0,0,0,0)', xaxis=dict(title=“VTTSHI-HSV”), yaxis=dict(title=“VTTSHI-HPV”), font=dict(family=“Arial”, size=14,))\nPath(“Images”).mkdir(parents=True, exist_ok=True)\nfig.write_image(“Images/Enrichment_dot.svg”)\nfig.write_image(“Images/Enrichment_dot.png”, scale=2)\nfig.write_image(“Images/Enrichment_dot.pdf”)\nfig.show()\nMake a Sankey plot that can be used for quantitative analysis, using the following Python script (Figure 1[href=https://www.wicell.org#fig1]B).\ndef Sankey_Plot_Wkshell(D1,D2, lab1=“A”, lab2=“B”, method=“Wkshell”, spaceing = 0.05):\n  def tone_color(H, percent = 50):\n    h = H.lstrip('#')\n    r,b,g = tuple(int(h[i:i+2], 16) for i in (0, 2, 4))\n    a = round(percent/100, 2)\n    r,b,g,a = map(str, (r,b,g,a))\n    rgba = “rgba(“ + ”, “.join((r,b,g,a))+ ”)”\n    return(rgba)\n  print(f“Length of D1:{len(D1)}, Length of D2:{len(D2)}”)\n  if len(D1) != len(D1):\n    print(“Not same size!! Killed”)\n    return\n  if len(set(D1)-set(D1)):\n    print(“Dataset doesn't have similar bins!!! Killed”)\n    return\n  D1 = {lab1 + “ ” +k:v for k,v in D1.items()}\n  D2 = {lab2 + “ ” +k:v for k,v in D2.items()}\n  print(len(D1[lab1 + “ ” +'100_90']))\n  print(f“Generating {2∗len(D1)} lables… ”)\n  label = []\n  D1_lab = list(D1)\n  if method != “Wkshell”:\n    D1_lab.sort()\n  D2_lab = list(D2)\n  if method != “Wkshell”:\n    D2_lab.sort()\n  Colors = []\n  for i in range(len(D1_lab)):\n    l1, l2 = D1_lab[i], D2_lab[i]\n    Colors.append(px.colors.qualitative.Plotly[i])\n    Colors.append(px.colors.qualitative.Plotly[i])\n    label.append(l1)\n    label.append(l2)\n  print(f“Generating Y {len(D1)} Co-ordinates… ”)\n  y = [(i+1)/10 for i in range(len(D1))]\n  y = y + y\n  y.sort()\n  print(f“Generating X {len(D1)} Co-ordinates… ”)\n  x = []\n  for i in range(len(D1)):\n    x1 = 0.1\n    x2 = x1 + spaceing\n    x.append(x1)\n    x.append(x2)\n  print(f“Generating edge data … ”)\n  source = []\n  target = []\n  intersection = []\n  Edges_colors = []\n  for i in range(len(D1_lab)):\n    l1 = D1_lab[i]\n    S1 = D1[l1]\n    for j in range(len(D2_lab)):\n      l2 = D2_lab[j]\n      S2 = D2[l2]\n      I = (S1.intersection(S2))\n      source.append(label.index(l1))\nEdges_colors.append(px.colors.qualitative.Plotly[D1_lab.index(l1)])",
    "target.append(label.index(l2))\n        intersection.append(len(I))\n  Edges_colors = [tone_color(h) for h in Edges_colors]\n  fig = go.Figure(go.Sankey(\n  textfont=dict(color=“rgba(0,0,0,0)”, size=1),\n  arrangement = “snap”,\n  node = {\n      “label”: label,\n      “x”: x,\n      “y”: y,\n      'pad':10, 'thickness' : 10,\n      'color' : Colors,\n  },\n  link = {\n      “source”: source,\n      “target”: target,\n      “value”: intersection\n  }))\n  fig.update_traces(orientation='h', selector=dict(type='sankey'))\n  fig.update_traces(link_color=Edges_colors, selector=dict(type='sankey'))\n  fig.update_layout({\n      'plot_bgcolor': 'rgba(0, 0, 0, 0)',\n      'paper_bgcolor': 'rgba(0, 0, 0, 0)',})\n  fig.update_layout(\n  title=f'',\n  autosize=False,\n  width=1000,\n  height=600,\n  plot_bgcolor='rgba(0,0,0,0)',\n  xaxis=dict(\n      title=“Type of Network”),\n  yaxis=dict(title=“”))\n  fig.update_layout(\n  title=f“{lab1} PPI vs {lab2} PPI”,\n  font=dict(\n      family=“Arial”,\n      size=12,\n      color=“black”))\n  return fig\nfig = Sankey_Plot_Wkshell(Herpes_wkshell_bukt, Papilloma_wkshell_bukt, lab1=“HSV”, lab2=“HPV”, spaceing = 0.1)\nfig.write_image(“Images/Sanky_plot.pdf”)\nfig.write_image(“Images/Sanky_plot.png”, scale=300)\nfig.write_image(“Images/Sanky_count_plot.svg”)\nfig.write_html(“Images/Sanky_count_plot.html”)\nfig.show()\nProtein prioritization and viral protein enrichment\nTiming: 5 min\nTo demonstrate the integration of networks centrality and enrichment analysis, we use only VTTSHI-HPV as an example.\nPapilloma_df = pd.read_csv(Papilloma_Cyto_File)\ngene_list = Papilloma_df.name\ngene_list\nglist = gene_list.squeeze().str.strip().tolist()\nprint(glist[:10])\n26.Map UniProt-KB IDs to gene names Using UniProt Python API.\nurl = ‘https://www.uniprot.org/uploadlists/[href=https://www.uniprot.org/uploadlists/]'\nparams = {\n‘from’: ‘ACC+ID′,\n‘to’: ‘GENENAME',\n‘format’: ‘tab',\n‘query’: “ ”.join(glist)\n}\ndata = urllib.parse.urlencode(params)\ndata = data.encode(‘utf-8′)\nreq = urllib.request.Request(url, data)\nwith urllib.request.urlopen(req) as f:\n  response = f.read()\nLOL = []\nfor i in response.decode(‘utf-8′).splitlines():\n  LOL.append(i.split())\ndf = pd.DataFrame(LOL)\nnew_header = df.iloc[0]\ndf = df[1:]\ndf.columns = new_header\ndf.head(5)\nUniprotKB_to_Genename = dict(zip(df.From, df.To))\nPapilloma_df.replace({'shared name’: UniprotKB_to_Genename}, inplace=True)\nPapilloma_df.rename(columns={“shared name”: “GeneName”}, inplace=True)\nPapilloma_df.rename(columns={“_wks_percentile_bucket”: “wk-shell”}, inplace=True)\nPapilloma_df\nUse the following Python script to keep only the desired columns and discard the rest.\nPapilloma_df = Papilloma_df[['name','GeneName’, ‘BetweennessCentrality’, ‘ClosenessCentrality’, ‘ClusteringCoefficient’, ‘Degree’, ‘Radiality’, ‘Stress’, ‘TopologicalCoefficient']]\nPapilloma_df.set_index(['name’, ‘GeneName'], inplace=True)\nPapilloma_df.head(5)\nVisualize the centralities selected by to rescaling the values and selecting the top 20 genes from the list.\nPapilloma_df['Sum'] = Papilloma_df.loc[:,:].sum(axis=1)\nPapilloma_df.sort_values(by=['Sum'], ascending=False, inplace=True)\nlist(Papilloma_df)\nTop_20 = Papilloma_df[['BetweennessCentrality’, ‘ClosenessCentrality’, ‘ClusteringCoefficient’, ‘Degree’, ‘Radiality’, ‘Stress’, ‘TopologicalCoefficient']].head(20)\nTop_20 -= Top_20.min()\nTop_20 /= Top_20.max()\nTop_20 = Top_20.reset_index()\nTop_20.index += 1\ndf = Top_20[list(Top_20)[2:]]\nCols = list(df)",
    "Col_dict = {Cols[i]:i+1 for i in range(len(Cols))}\ndf.index = list(Top_20.GeneName)\ndf.head(5)\nglist = list(df.index)\nprint(len(glist))\nprint(∗glist, sep=“; ”)\nSelect the enrichment databases that you want to use using the Enrichr databases.\nNote: Python script queries all databases with the “Virus” keyword and then selects the “VirusMINT” database. It's possible to use multiple databases or different databases for enrichment analysis depending on the requirements. The documentation and list of all supported databases can be found at (‘https://maayanlab.cloud/Enrichr/#libraries[href=https://maayanlab.cloud/Enrichr/#libraries]').\nnames = gp.get_library_name(organism='Human’) # default: Human\nfor db in names:\n  if ‘VIRUS’ in db.upper():\n    print(db)\ngene_sets=['VirusMINT']\ngene_sets\nPerform enrichment analysis using The Enrichr Python API as in the following Python script.\nenr = gp.enrichr(gene_list=glist, gene_sets=gene_sets, organism='Human’, description='VirusMINT’, outdir='VirusMINT’, cutoff=1)\nenr.results.head(5)\nencrihment_df = enr.results[enr.results['Adjusted P-value'] <= 0.005]\nEncrihment_dict = defaultdict(list)\nfor Term, Genes in encrihment_df[['Term’, ‘Genes']].values.tolist():\n  for gene in Genes.split(‘;'):\n    Encrihment_dict[gene].append(Term)\nfor i in Encrihment_dict:\n  Encrihment_dict[i] = “<br>”.join(Encrihment_dict[i])\nEncrihment_dict = dict(Encrihment_dict)\nPreproces the Enrichr results to create a dot plot with the following Python script.\nx = []\ny = []\nsize = []\ntext = []\ngroups = []\nfor c in Col_dict:\n  I = list(df[c].index)\n  for i in I:\n    y.append(i)\n    x.append(c)\n    E = ‘NE'\n    if i in Encrihment_dict:\n      E = Encrihment_dict[i]\n    groups.append(E)\n  for s in df[c].values:\n    size.append(s)\n    text.append(“<br>”.join([str(round(s, 2)), c]))\nDot_plot_df = pd.DataFrame({“Centrality”:x,\n                    “Protein”:y,\n                    “Value”:size,\n                    “Info”:text,\n                    “Encrichment”:groups})\nDot_plot_df.head(5)\nMake a dot plot using the Plotly Python library (Figure 1[href=https://www.wicell.org#fig1]C).\nfig = px.scatter(Dot_plot_df, x=“Centrality”, y=“Protein”, size=\"Value”, color=“Encrichment”, hover_data=['Info'])\nfig.update_traces(mode='markers’, marker_symbol = 200, marker_line_width=2, marker_line_color='rgba(0, 0, 0, 1)')\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black’, mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black’, mirror=True)\nfig.update_layout(title=None, autosize=False, width=420, height=910, plot_bgcolor='rgba(0,0,0,0)', xaxis=dict(\n    title=“Centralities”),\n  yaxis=dict(title=“Protein”),\n  font=dict(family=“Arial”, size=14, color=“black”))\nfig.update_layout(\n  legend=dict(orientation=“v”, yanchor=“bottom”, y=1.02, xanchor=“right”, x=1, traceorder=“reversed”,\n    title_font_family=“Times New Roman”,\n    font=dict(family=“Arial”, size=12, color=“black”), bgcolor=“rgba(0,0,0,0)”, bordercolor=“Black”, borderwidth=2)\n)\nfig.write_image(“Images/Dot_plot.png”, scale=2)\nfig.write_image(“Images/Dot_plot.pdf”)\nfig_dots = fig\nfig_dots.show()\ngenerate a relative dot size legend using the following Python script.",
    "fig = px.scatter(x=['', '', '', '', ''], y=[0, 0.25, 0.5, 0.75, 1], size = [0, .25, .50, .75, 1])\nfig.update_traces(mode='markers’, marker_symbol = 200, marker_line_width=2, marker_line_color='rgba(0, 0, 0, 1)')\nfig.update_traces(marker=dict(color='lightgray'))\nfig.update_xaxes(visible=False)\nfig.update_yaxes(ticklabelposition=\"outside right”, side= ‘right')\nfig.update_yaxes(tick0=0, dtick=0.25)\nfig.update_xaxes(tick0=0, dtick=0)\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black’, mirror=True)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black’, mirror=True)\nfig.update_layout(title=f'Values’, autosize=False, width=200, height=290, plot_bgcolor='rgba(0,0,0,0)', yaxis=dict(title=None))\nfig.write_image(“Images/Dot_legend_plot.png”, scale=300)\nfig_radius = fig\nfig_radius.show()\nCritical: VTTSHI-HPV serves as an example of the integration of networks centrality and enrichment analysis. However, the same steps can be applied to any data set, VTTSHI-HPV, or other appropriate datasets."
  ],
  "subjectAreas": [
    "Genomics",
    "Immunology",
    "Bioinformatics",
    "Systems Biology",
    "Microbiology"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}