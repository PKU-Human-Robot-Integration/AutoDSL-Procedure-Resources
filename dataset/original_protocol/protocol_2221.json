{
  "id": 2339,
  "origin_website": "Cell",
  "title": "Protocol for Genome-Scale Reconstruction and Melanogenesis Analysis of Exophiala dermatitidis",
  "procedures": [
    "Step-By-Step Method Details\nStep-By-Step Method Details\nIterative Application of OptFill to the Exophiala dermatitidis Draft Models to Development of the Final Model\nTiming: days to weeks\nNow that the draft model is in a state such that OptFill can be applied, this section details the iterative application of OptFill to the second draft model. This section specifically discusses the applications of OptFill to the second, third, and fourth drafts of the iEde2091 model to expand the functionality of the reconstructions. Detailed in this section is the construction of each database, the application of OptFill, the inclusion of a chosen solution to the previous draft model to produce the next draft model, and the application of BLASTp using NCBI’s BLAST API to determine the evidence for the selected OptFill solution. This method is used in Schroeder et al. (2020)[href=https://www.wicell.org#bib24] in model reconstruction.\nBuilding the first database. From the analysis of the overlap of enzymes present in the four Apsergillus models, the set of enzymes which is common to any three of those models and absent from the fourth should be used as the basis of the first database (from analysis done in Before You Begin step 17). These enzymes should be allowed with all compartmentalizations which are already present in the second draft genome-scale Exophiala dermatitidis model. This list of enzymes with appended compartmentalization (such as “1.1.1.1[c]” for alcohol dehydrogenase in the cytosol) can then be converted to a list of reactions with stoichiometry using the “Enzymes_to_rxns.pl” Perl language code (yellow arrow in Figure 2[href=https://www.wicell.org#fig2]) which automatically adds compartmentalization to each reaction stoichiometry based on the compartmentalization of the enzyme. The list of reactions and stoichiometries produced by this step is defined as the first database for the application of OptFill.",
    "Applying OptFill for the first time. Using the database defined in step 1, OptFill should then be applied to the second draft model of Exophiala dermatitidis. The process of the application of OptFill is the same as that described in the “General steps on how to apply OptFill” section of this protocol, and therefore will not be repeated here (Figure 5[href=https://www.wicell.org#fig5] and Figure 6[href=https://www.wicell.org#fig6] are taken from the results of this application of OptFill as a method for checking results obtained). OptFill produces two types of results, first the results of the TIC-Finding Problem (TFP) and second, the results of the Connecting Problems (CPs) which provide sets of reactions to be added to the model to fill metabolic gaps. See the “General steps on how to apply OptFill” section of this protocol for how to read and interpret OptFill results.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/183-Fig5.jpg\nFigure 5. Screenshot of an Example of the Output of the Standard TIC-Finding Problem (TFP) from the First Application of OptFill to the Second Draft Exophiala dermatitidis Model\nBlack text is the output, blue text, lines, and boxes serve to highlight important features of the output so that it may be better understood.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/183-Fig6.jpg\nFigure 6. Screenshot of an Example of the Output of the Standard CPs from the First Application of OptFill to the Second Draft Exophiala dermatitidis Model\nBlack text is the output, blue text, lines, and boxes serve to highlight important features of the output so that it may be better understood.",
    "Selecting and applying the first filling solution. In this instance, it is recommended to select and implement the first CPs solution produced by OptFill as this solution improves the model yet not at the expense of adding unnecessary additional reactions. The stoichiometries for the reactions selected by the first CPs solution (taken from the first database file) should be added to a copy of the second draft Exophiala dermatitidis model in order to make the third draft E. dermatitidis model.\nNote: Other solutions of the CPs could be selected at this stage but would result in a different model and may result in different results of analyses than those obtained through the iEde2091 model.",
    "Performing BLASTp to support the first solution. From the OptFill solution selected, a list of enzymes which catalyze these reactions should be manually gathered from the KEGG database and placed into a list in the file “EClist_1.txt”. Using this list and the code “BidirectionalBLAST.pl” (input files “EClist_1.txt” and “BlastSpecs.txt”) an automated search should be made to determine if there is genetic evidence to support this OptFill solution using the “BidirectionalBLAST.pl” code. This code uses an input list of enzymes; specifications as to acceptable cutoffs values for percent positive substitution of residues and expect value (E value) related to sequence similarity; and a list of related species from which to take the search sequences for the given enzyme. This code works as follows. First, for each enzyme on the list, this code searches KEGG for amino acid sequences for genes known to produce that enzyme from an acceptably related organism (these organisms are specified in the “BlastSpecs.txt” file). This sequence is then used as the query in a BLASTp search, utilizing the BLAST Application Programming Interface (API), against only the Exophiala dermatitidis genome in the NCBI database. It should be noted that the performance of the BLASTp analyses themselves are based on the sample Perl code provided by NCBI for using the BLAST API, available in the developer information of the BLAST API documentation (BLAST Developer Information, n.d.[href=https://www.wicell.org#bib3]). The time need to receive BLAST results depends not on the BLAST code, but rather the volume of demand for the BLAST tool at the time. All matches are then exported to various text files to store these “forward” BLAST results.",
    "This code then evaluates each match in terms of the cutoffs provided, and if the match passes, performs a BLASTp of the sequence found in the target genome against the sequence provided by the reference genome. Should this “backward” BLAST also pass the provide criteria, the match is accepted. The recommended cutoffs could be 60% positive substitution (e.g., 60% of residues are conserved or substituted by a similar amino acid) and an expect value of 1E-30. This should result in a CSV file which details genome-based support for the the inclusion of the reactions included in the OptFill results.",
    "Critical: Note the formatting of input files “BlastSpecs.txt” and “EClist_1.txt”, provided in the GitHub associated with Schroeder et al. (2020)[href=https://www.wicell.org#bib24], as no effort was made to allow for different formatting of input files in the “BidirectionalBLAST.pl” code.\nCritical: A loss of internet connection while the “BidirectionalBLAST.pl” code is running could cause the program to terminate prematurely.\nNote: If the “BidirectionalBLAST.pl” code no longer functions, consult the BLAST Developer information web page or other BLAST API documentation to determine if the API has changed or been updated.\nNote: It is suggested by the authors to run the “BidirectionalBLAST.pl” code such that times of peak BLAST usage are avoided (or minimized). In the experience of the authors, it is best to run such code overnight or over the weekend.\nNote: Depending on how the supercomputing facilities which the reader uses works, this code may need to be run on a personal or work device (such as a laptop or desktop computer) rather than the supercomputing cluster as operations which directly interact with outside websites may not be allowed.\nBuilding the second database. The second database should be constructed in the same manner as the first database (detailed in step 1); however, the enzymes used for the construction of this database are those common to two of four of the Aspergillus models analyzed, allowing all compartmentalizations currently in the third draft E. dermatitidis model for each enzyme.\nApplying OptFill for the second time. OptFill should then be applied to the third draft Exophiala dermatitidis model (serving as the model) with the second database built in step 5 serving as the database for this application of OptFill, applying the procedure detailed in “General steps on how to apply OptFill”. The results of this application are described in Schroeder et al. (2020)[href=https://www.wicell.org#bib24].",
    "Selecting and applying the second filling solution. As with step 3, the best solutions should be selected from the second application of OptFill, and the stoichiometries of the reactions in the optimal CPs solution should be added to a copy of the third draft Exophiala dermatitidis model to produce the fourth draft E. dermatitidis model.\nPerforming BLASTp to support the second solution. As in step 4 a list of enzymes which catalyze the reactions which participate in the OptFill solution selected in step 7 is created, and the “BidirectionalBLAST.pl” code is applied to this list to attempt to find some genomic support for this second OptFill solution.\nBuilding the third database. The third database is built in the same manner as the first and second databases (detailed in steps 1 and 5); however, the enzymes which should be used for the construction of the database are those unique to one of the Aspergillus models analyzed, allowing all compartmentalizations currently in the fourth draft E. dermatitidis model for each of these enzymes.\nApplying OptFill for the third time. As in steps 2 and 6, OptFill should then be applied for the third time using the fourth draft E. dermatitidis model as the model file, the third database (constructed in step 9) as the database, and following the procedure outlined in the “General steps on how to apply OptFill” section of this protocol. The results of this application are described in Schroeder et al. (2020)[href=https://www.wicell.org#bib24].",
    "Selecting and applying the third filling solution. As with steps 3 and 7, the best solutions should be selected from the third application of OptFill, and the stoichiometries of the reactions in the optimal CPs solution can then be added to a copy of the fourth draft Exophiala dermatitidis model to produce the fifth draft E. dermatitidis model.\nPerforming BLASTp to support the third solution. As in steps 4 and 8, a list of enzymes which catalyze the reactions which participate in the OptFill solution of step 11 should be created, and the “BidirectionalBLAST.pl” code is applied to this list to find some genomic support for this third OptFill solution.\niEde2091 Model: Shadow Price Analyses\nTiming: hours to days",
    "After reconstructing the Exophiala dermatitidis model iEde2091, it is desired to use this model in analysis of E. dermatitidis metabolism. As the defensive pigments of E. dermatitidis are of particular interest for their ability to confer polyextremotolerant properties to an organism, shadow price analysis is selected as a tool for metabolic investigation of these molecules. Shadow price represents the cost to the objective (growth in this model) to produce one more unit (here mmol/gDW∙h) of a particular metabolite. The analysis is performed using the dual form of the FBA optimization problem to determine the shadow price for each metabolite. It can then be used to determine the cost of particular metabolic phenotypes to the organism (here melanogenesis and carotenogensis) to give greater insight into an organism’s metabolism. The shadow price analysis of metabolites, specifically defensive pigments, is one of the key analyses of Schroeder et al. (2020)[href=https://www.wicell.org#bib24]. Here is a step-by-step description of how the shadow price analysis was performed on the fifth draft Exophiala dermatitidis model, which could hopefully aid others in their uses of shadow price analysis. Further, this analysis resulted in some additional curation of the fifth draft Exophiala dermatitidis model, which finally resulted in the iEde2091 model.\nGet all requisite files. Files which are required for the shadow price analysis are included in the GitHub associated with Schroeder et al. (2020)[href=https://www.wicell.org#bib24] (doi:10.5281/zenodo.3608172[href=https://github.com/ssbio/E_dermatitidis_model]) and indicated by light blue-colored arrows in Figure 2[href=https://www.wicell.org#fig2]. These files include “iEde2091.txt” (the model file), “convertModel.py” (the file which creates necessary input files from the model file), and “get_shadow_prices.gms” (the file which performs the shadow price analyses).",
    "Note: So as not to upload many duplicates of the “convert∗.py” (where “∗” represents some descriptive word like “Model” or “Database”), the “convertModel.py” code contains a generic placeholder “Model.txt” as the input file in line 20. For this subprocedure, replace this text with “iEde2091.txt”.\nSetting up appropriate file architecture. For this protocol, it is assumed that all three files mentioned in step 13 are in the same file folder.\nRun code generating requisite input files for shadow price analysis. For Windows users, open the command prompt and for Mac and Unix users, open the terminal. Navigate the working directory to where the files are located from all previous steps (the iEde2091 should be present in this direcotyr). To run the code, simply type “python convertModel.py >output.txt” into the terminal/prompt followed by selecting enter on the keyboard. The “>output.txt” portion should place what would normally be written to the command prompt or terminal to a text file named “output.txt” for later viewing.\nCritical: The format of the model file, here “iEde2091.txt”, is important to how the convert file reads the model and the proper creation of the input files required for the shadow price analysis. The format is as follow (Perl- and python- format regular expressions are used to describe the format, items which will be described in greater detail are bracketed by “<>”):\n“<ReactionLabel>\\t(<#>\\s<MetaboliteLabel>(\\s\\+\\s)?)∗(\\->|<\\->|<\\-)\\s (<#>\\s<MetaboliteLabel>(\\s\\+\\s)?)∗”\nExample reactions and reaction formats are shown in Figure 7[href=https://www.wicell.org#fig7] with the format described below.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/183-Fig7.jpg\nFigure 7. Screenshot from the “iEde2091.txt” Model Files Showing an Example of the Formatting of the iEde2091 Model",
    "The first line shows an example comment inside the model (comments start with a pound sign “#”). The formatting is such that the reaction label is written (for instance “R10965[c]”), followed by a tab, followed by the stoichiometry of the reaction. Forward (reaction “R02907[c]”), backward (reaction “R02906[c]”) and reversible (reaction “R10965[c]”) reactions are shown, where the direction of the reaction is written into the stoichiometry of the model by the format of the arrow. Further, custom reaction labels (such as “R900[c]” and “R901[c]”) and metabolite labels (“X00001[e]” and “C17937DHN[e]”) are shown in this example. The latter custom label is made from the KEGG identifier for melanin (C17937) combined with a label for the type of melanin (“DHN”) and the metabolite compartmentalization (“[e]”).\n“<ReactionLabel>”: label of the reaction. While it can be anything, but in this work the reaction label is composed of the KEGG reaction identifier, if applicable, followed by square brackets surrounding a short code indicating subcellular compartment. Exchange, transport, and reactions not in the KEGG database but in the Exophiala dermatitidis metabolism generally have custom reaction labels, which uses three digits after the character “R” (such as “R900[c]” and “R901[e]” in Figure 7[href=https://www.wicell.org#fig7]), as opposed to five digits in the KEGG identifiers.\n“<#>”: stoichiometric coefficient of the metabolite in the given reaction. Not to be confused with a line beginning with “#” which denotes a comment in the model file (such as the first line of text in Figure 7[href=https://www.wicell.org#fig7]). These comments are ignored by the python code “convert∗.py” so that the comments aid in the organization of the file yet have no effect on the actual function of the model.",
    "“<Metabolite label>”: label of a metabolite. While it can be anything, in this work the metabolite label is composed of the KEGG reaction identifier, if applicable, followed by square brackets surrounding a short code indicating subcellular compartment. Metabolites which do not have KEGG identifiers have custom labels beginning with “X”, such as X00001[c] in Figure 7[href=https://www.wicell.org#fig7] which stands in for 1,8-dyhidroxypaphthalene which is not a compound in the KEGG database.\nNote: Any changes made to the model, such as curation or the addition of reactions, should be made to the “iEde2091.txt” model file, then repeating this step (specifically running the “convertModel.py” code) will automatically update all input files required for the shadow price analysis.\nRun shadow price analysis code. Run the “get_shadow_prices.gms” code using the command “gams get_shadow_prices.gms”. The mathematics related to this analyses are described in detail in Schroeder et al. (2020)[href=https://www.wicell.org#bib24]; however, it may be summarized that the shadow price is the cost to the objective function (in this case, rate of biomass production) that would be incurred by producing one more mmol/gDW·h of a given metabolite. This creates several output files. First is “rxn_rates_out.csv”, which is a CSV file which stores the reaction flux (in mmol/gDW·h) for each FBA performed in the shadow price analysis. The second output file is “shadow_price.csv”, which stores the shadow prices calculated for metabolites which are metabolically close to carotenoids and melanins. The next file is “shadow_price_MCoA.csv” which stores the calculated shadow prices for malonyl-CoA and its precursor metabolites. Finally, “shadow_price_biomass.csv” stores the shadow price of all biomass precursor for each FBA analysis.",
    "Study shadow price analysis results. The majority of shadow price values should be negative, indicating that producing extra of any metabolite detracts from biomass production, except for metabolites which may be biomass-coupled. A discussion on biomass-coupling can be found in Burgard, Pharkya and Maranas (2003)[href=https://www.wicell.org#bib4]. This study is generally the most time-consuming step of the procedure of shadow price analysis applied to the iEde2091 model.\nModel curation using shadow price analysis. When applying shadow price analysis to the fifth draft Exophiala dermatitidis model, it may be the case that some compounds have positive shadow prices (indicating that if more is made then more biomass is also made) and others may have shadow prices which vary between the high, medium, and low limiting nutrient availability conditions. These issues are likely indicators of mass or charge imbalance is some reaction involving that particular metabolite, or a metabolite upstream of that metabolite in the reaction network, or that a particular metabolite is coupled with biomass production. The latter is unlikely unless the model is of a particular strain designed to have biomass production be coupled with metabolite production. The former can be corrected by manual curation which addresses reaction balances. The shadow price analysis may then be run again until neither of these indicators remain present in the analysis. In Schroeder et al. (2020)[href=https://www.wicell.org#bib24], this served as the final curation step to turn the fifth draft Exophiala dermatitidis model into the final iEde2091 model.\nGeneral Steps on How to Apply OptFill\nTiming: minutes to 1 week",
    "Should a reader wish to apply OptFill to a Genome-Scale Model (GSM) of an organism of choice, as opposed to the iEde2091 model as described in this workflow, this section will describe, in more general terms, the step-by-step procedure to apply OptFill using GAMS. This section describes the required files, directory structure, and modifications to code provided in the GitHub repositories related to this work which will be necessary to apply OptFill to an organism and model of the user’s choice.\nGetting all requisite files. For the general application of OptFill, several input files are required, and the number of required files varies to some extent by the procedure used. Here it will be assumed that a similar procedure is used in the general application of OptFill as in the specific applications of OptFill to build the iEde2091 model. Therefore, required files include the following (marked by dark blue arrows in Figure 2[href=https://www.wicell.org#fig2]):\nOne model file – the model whose metabolic gaps are to be filled using the OptFill method (in this case the second draft Exophiala dermatitidis model is marked).\nOne database file – the database of reactions representing metabolic functionalities to use in the filling of metabolic gaps of the model using the OptFill method (the “3of4DB.txt” file is marked as this is what was used with the second draft Exophiala dermatitidis model).\nCritical: These files should have the same formatting as described in step 15.",
    "Two “convert∗.py” files – Line 20 of each of these “convert∗.py” files should be changed so that one file converts the provided model file, while the other converts the provided database file. Further, lines 23 through 32 in these files must be somewhat changed so that unique sets of output files are made for each file to which as “convert∗.py” code is applied.\nOne “prep_for_optfill.pl” file – This file runs both of the “convert∗.py” and creates certain input files for the OptFill code, such as the set of all metabolites and the set of all reactions in both the model and database.\nCritical: Attention should be paid to updating the input files in the “convert∗.py” and “prep_for_optfill.pl” code based on what the codes in this step were named (specifically lines 9 and 10 of this code) and what the output files of step 15 were named (specifically lines 15, 22, and 98 should reference the output files of the convert code which converted the model file, and lines 28, 34, and 103 should reference the output files of convert code which converted the database file).\nOne OptFill file – The OptFill code file which will fill the metabolic gaps in the model file using the database file.\nCritical: Attention should be paid to updating the input files in the code based on the name of output files of previous steps, specifically step 15. Lines particularly important to examine are 31, 34, 37, 40, 43, 46, 49, 58, 61, 64, 67, 79, 82, and 85.\nSetting up appropriate file architecture. These codes assumed that all other codes are contained in the same directory.\nNote: The authors set up the directory on the Crane computing cluster of the Holland Computing Center which was used in this work.",
    "Run code generating requisite input files for OptFill. This code can be run in two steps: first run the “prep_for_optfill.pl” code (command is “perl prep_for_optfill.pl” provided the terminal working directory is the directory in step 20).\nCritical: Format the model and database files (format shown in Figure 7[href=https://www.wicell.org#fig7]); otherwise code will not run properly.\nNote: This step will create a large number of files.\nRun OptFill. OptFill should be run on the hardware as advance as possible which allows for a long runtime. Depending on the quality and size of the model and database used, the runtime may be between a few seconds and several days.\nNote: In both the Schroeder and Saha (2020)[href=https://www.wicell.org#bib25] and Schroeder et al. (2020)[href=https://www.wicell.org#bib24] works, the Crane computing cluster was used. In order to have an uninterrupted run time, jobs were submitted using the SLURM research manager which is used by all Holland Computing Center computing clusters.\nNote: A discussion about the needed quality of the model and how quality influence runtime can be found in Schroeder and Saha (2020)[href=https://www.wicell.org#bib25]. Should the model itself has a large number of inherent TICs, see the general steps on how to apply the TFP. This can greatly increase the runtime, and the TFP may need to be coupled with manual curation to address model quality issues.\nUnderstanding OptFill solutions part 1: the TFP. An example of results for the TFP is shown in Figure 5[href=https://www.wicell.org#fig5] and will be used to show what a typical output would look like (important features highlighted in blue). The substeps below describe feature of the output of the TFP.\nLines 1 through 5 represent the standard output header, which is always at the top of the output file.",
    "Lines 6 through 9 is the standard output block which the TIC-Finding Problem (TFP) returns when there are no more TICs of a given size (where the size in indicated by the value of phi) left to find. In this case, there are no TICs of size 1 (which only occur when there are duplicate reactions in the database and model) or of size 2.\nLines 18 through 28 and 31 through 41 show two examples of the information provided by the TFP once a TIC is found.\nOn lines 18 and 31, it is shown that each new TIC is assigned a new, whole number, label.\nOn lines 19–20 and 32–33, the objective value of the number of reactions in the TIC are both reported. As discussed in Schroeder and Saha (2020)[href=https://www.wicell.org#bib25], the objective function is the minimization of the number of reactions participating in the TIC, and that this number is also fixed by the value of phi, rendering the objective function moot, yet one is still required for optimization. Each pair of objective function and number of reaction pairs should have the same value. If they do not, this indicates that the relaxations allowed by the solver may need to be tightened.\nLines 21–22 and 34–35 serve as headers to make the output more human-readable and indicates the start of the table which describes the TIC found in detail.\nAt the start of each line in the table is the reaction label as provided in the model file.",
    "The next column in the table is an arrow indicating the direction of flux through the reaction when the reaction is participating in the TIC. Each reaction is allowed to proceed either forward or backward. The direction of the reaction is also indicated by the binary variables alpha and beta reported in the last two columns where alpha indicates forward while beta indicates backward.\nThe third column of the table indicates where the reaction resides, either in the model (M) or database (DB).\nThe fourth column reports on the binary variable eta, which simply reports whether (value 1) or not (value 0) a reaction is participating in the found TIC. All values of this column should be 1, and if this is not the case, consider tightening the relaxations allowed by the solver.\nThe fifth column indicates the flux through the reactions participating in the TIC. The values will always belong to the set [−1, −1E −5]∪[1E −5, −1]. This is because allowing smaller magnitude flux rates or more orders of magnitude for the range in flux rates may cause issues with the relaxations used by optimization problem solvers. Generally, the magnitude of the reported flux rate is unimportant, rather the ratios between flux rates is more enlightening. See Schroeder and Saha (2020)[href=https://www.wicell.org#bib25] for a discussion on this issues.",
    "Understanding OptFill solutions part 2: the CPs. An example of the results which may be returned from the CPs is shown in Figure 6[href=https://www.wicell.org#fig6]. Note that as there are several output sections for each CPs solution, only one example solution is shown, and some lines have been removed from that solution (replaced with ellipses) for the brevity of the figure. It should be noted that, for some portions of the output of the solutions to the CPs, formatting is not as neat as that of the TIC-Finding Problem.\nLine 2,577 is the heading for the start of the current CPs solution.\nLines 5,279, 5280, and 5,281 report the objective solution for the first, second, and third CPs respectively. These problems sought to maximize the number of metabolites which can be produced, minimize the number of reactions, and maximize the number of reactions added reversibly respectively.\nLines 5,283 through 5,305 is the first result table of the CPs solution and summarizes which reactions are added in the solution and how those reactions are added. The meaning of each column is detailed in Figure 6[href=https://www.wicell.org#fig6].\nLines 5,308 through 7,142 is the same table as lines 5,283 through 5,305, though these lines detail the results for all reactions contained in the database, hence the much larger size. This is mostly used for the purposes of debugging. Reactions not included in the CPs solution are labeled with a direction of “XX”.\nLines 7,145 to 1,776 list the metabolites which can now be produced by the OptFilled model which the model could not previously produce.\nLines 7,179 through 9,507 produces a table of all metabolites in both the model and the database, and the binary variable, x(i), which determines whether or not they are produced.",
    "Lines 9,510 through 11,119 show the results of a FBA of the OptFilled model. The alignment of text is not as high quality as with other tables produced by OptFill, but this can be remedied by copying-and-pasting this table into a Microsoft Excel worksheet and using the text import wizard tool to delimit the cells by spaces. This will result in a more readable table of FBA results. This table is mostly used for the purposes of debugging.\nLines 11,121 through 11,123 report the model and solver statuses of the solutions, as well as the number of iterations needed for the solver to reach these solutions. Should the model or solver statuses not have a value of 1 at any stage, this would be an indication of a need for debugging the code.\nLine 11,124 again states the number of reversible reactions in the CPs solution.\nLine 11,125 states the growth/biomass rate of the OptFilled model, as often fixing metabolic gaps can have an effect on the rate of biomass production.\nLine 11,126 finally reports the time, in seconds, which the solver takes to reach this optimal solution.\nSelect Solution. A set of unique filling solutions will be provided by the OptFill code. Users should carefully review the filling solutions produced by the OptFill code and select the solution based on criteria such as how optimal the solution is determined by OptFill (e.g., order of solutions), which metabolites are fixed (literature evidence for fixed metabolites), which reactions are added (literature evidence for metabolic functions), or other user-defined criteria.\nGeneral Steps on How to Use the TIC-Finding Problem of OptFill for Identifying Inherent TICs\nTiming: minutes to 1 week",
    "This section describes how to apply the modified TFP of OptFill to identify inherent TICs utilizing GAMS. This is useful in order to identify TICs inherent to a model to improve the quality of the reconstruction. This section describes the required files, directory structure, and modifications to code provided in the GitHub repositories related to this work which will be necessary to apply the modified TFP to an organism and model of the user’s choice.\nGetting all requisite files. For the general application of the TFP of OptFill, a few input files are required, and the number of required files varies to some extent by the procedure used. Here it will be assumed that a similar procedure is used in the general application of OptFill as in the specific applications of OptFill to build the iEde2091 model. Therefore, required files include the following (marked by orange arrows in Figure 8[href=https://www.wicell.org#fig8]):\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/183-Fig8.jpg\nFigure 8. Screenshot of a Sub-folder of the OptFill GitHub Repository (https://doi.org/10.5281/zenodo.3518501 or https://github.com/ssbio/OptFill[href=https://github.com/ssbio/OptFill]) with code highlighted which can be used to perform the TIC-Finding Problem only on the iJR904 model to identify TICs inherent to the model. This code should be adaptable to other genome-scale models as well.\nOne model file – the model to which the TFP will be applied. Here, the iJR904 model file (“iJR904.txt”) is marked as the system to which the inherent TIC-Finding will be applied.\nCritical: These files should have the same formatting as described in step 15.\nOne “convert∗.py” file – A Python code which makes several input files necessary for the TFP. Line 20 of this “convert∗.py” file should be changed so that one file converts the provided model file. (Here, the file is “convert_iJR904.py”).",
    "One TIC-Finding Problem file – The code which performs the TIC-Finding Problem on the input model file (here labeled “OptFill_TFP_only_iJR904.gms”).\nSetting up appropriate file architecture. These codes assumed that all other codes are contained in the same directory.\nRun code generating requisite input files for OptFill. The “convert∗.py” code from step 26b should be run to create all necessary input files.\nRun TFP Code. The TFP should be run on the hardware as advance as possible which allows for a long runtime. Depending on the quality and size of the model and database used, the runtime may be between a few seconds and several days.\nNote: In both the Schroeder and Saha (2020)[href=https://www.wicell.org#bib25] and Schroeder et al. (2020)[href=https://www.wicell.org#bib24] works, the Crane computing cluster was used. In order to have an uninterrupted run time, jobs were submitted using the SLURM research manager which is used by all Holland Computing Center clusters.\nAnalyze Solution. TICs inherent to the model will be included in the solution of the TFP code. These solutions will include both the reactions participating in TICs and their directions in the participating TIC. Inherent TICs generally need to be addressed through manual curation that involve changing reaction directions or removing reactions.\nGeneral Steps on How to Use the iEde2091 Model Including Accompanying Codes for Basic Analyses (FBA and FVA)\nTiming: seconds to minutes\nThis section describes how to use the iEde2091 model for general analyses such as FBA and FVA using codes provided by the authors. The code focused on in this section utilize GAMS.\nGetting all requisite files. To run FBA and FVA codes on the iEde2091 code, four files are required (indicated by purple arrows in Figure 2[href=https://www.wicell.org#fig2]).\n“iEde2091.txt” file – The model file for the iEde2091 model.",
    "“convertModel.py” – Converts the iEde2091 model file into several files required by FBA and FVA code.\n“FBA.gms” file – Code which runs Flux Balance Analysis on the iEde2091 model.\n“FVA.gms” file – Code which runs Flux Variability Analysis on the iEde2091 model.\nSet up appropriate file architecture. These codes assume that all files are contained in the same directory.\nRun code which generates input files necessary for FBA and FVA. The “convertModel.py” file should be run to create all requisite input files (the command is “python convertWLS.py”).\nRun FBA and FVA. Flux Balance and Flux Variability Analyses may be run using the command “gams F∗A.gms” (where “∗” is substituted with “B” or “V” based on the desired analysis), and each will create output files with the results of these analyses.\niEde2091 Model: Comparison with Human Metabolism\nTiming: minutes to days\nAs mentioned in (Schroeder et al., 2020[href=https://www.wicell.org#bib24]), E. dermatitidis is a potential model defensive pigment producing organism due to it relatively small genome of 26.4 Mbp, compared to other model organisms including Saccharomyces cerevisea with a genome of 11.9 Mbp, Drosophilia melanogaster with a genome of 137.6 Mbp, Arabidopsis thaliana with a genome of 119.1 Mbp, and Homo sapiens with a genome of 2,893.9 Mbp (National Center for Biotechnology Information, n.d.[href=https://www.wicell.org#bib18]). Due to the size of the Exophiala dermatitidis genome and the importance of melanin to the organism, the similarities and differences between E. dermatitidis and H. sapiens was investigated to determine the potential of E. dermatitidis as a model of H. sapiens melanogenesis. This section describes the procedure used to compare human and Exophiala dermatitidis melanin metabolisms in the Schroeder et al. (2020)[href=https://www.wicell.org#bib24]. This procedure includes comparing metabolic pathways and comparing human and E. dermatitidis tyrosinase amino acid sequences.",
    "Comparing metabolic pathways of melanin synthesis. From the reconstruction of the iEde2091 model, the metabolic pathway of melanin synthesis should be known through the reconstruction process. Now the metabolic pathways for the synthesis of melanins, specifically pheomelanin and eumelanin, must be investigated. Several sources were identified in Schroeder et al. (2020)[href=https://www.wicell.org#bib24] which detailed eumelanin and pheomelanin synthesis pathways. This allows for a comparison of reaction pathways such as is shown in Figure 3A of Schroeder et al. (2020)[href=https://www.wicell.org#bib24].\nEnsuring that all tyrosinase enzymes have been identified in Exophiala dermatitidis. The key enzyme in the synthesis of eumelanin (and also the synthesis of pheomelanin in humans) is tyrosinase (EC number 1.14.18.1). In Chen et al. (2014)[href=https://www.wicell.org#bib6], this four gene copies encoding the tyrosinase enzyme are listed with NCBI accessions of XP_009160170.1, XP_009156893.1, XP_009157733.1, and XP_009155657.1. The former two are said to be gene copies unique to E. dermatitidis, whereas the latter two are said to be conserved from Aspergillus homologs. A quick check should be done to ensure that no new tyrosinase gene copies have been identified.\nPerform a search in NCBI using the string “tyrosinase Exophiala dermatitidis”, which should produce a short list of all enzymes annotated as tyrosinase in Exophiala dermatitidis. In Schroeder et al. (2020)[href=https://www.wicell.org#bib24], these were the only four gene copies in the list.",
    "Perform a BLASTp search to determine if there are as yet unidentified tyrosinase gene copies in the Exophiala dermatitidis genome. Do this by performing a BLASTp of the known E. dermatitidis gene copies against the E. dermatitidis genome. This can be done by searching for the accession number in NCBI and selecting the protein page result matching that accession number. Then, selecting the “FASTA” link on that page (just below the heading). This will give the amino acid sequence of the tyrosinase gene copy.\nThe amino acid sequence can then be copied-and-pasted into the query sequence textbox in the the BLASTp tool (see Figure 9[href=https://www.wicell.org#fig9]). Figure 9[href=https://www.wicell.org#fig9] shows the BLASTp settings used. Figure 10[href=https://www.wicell.org#fig10] shows composite results of the BLAST results performed on 04/23/2020. From this, it can be shown that, at present, there is no genetic evidence for additional gene copies of tyrosinase in E. dermatitidis using this method. Interestingly, some tyrosinase genes are so dissimilar, at least on the whole amino acid sequence, that some gene copies do not match to all other gene copies of tyrosinase.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/183-Fig10.jpg\nFigure 10. BLASTp Results for the Query of Each Exophiala dermatitidis Tyrosinase Gene Copy against the Exophiala dermatitidis Genome when Searching for Previously Unidentified Tyrosine Gene Copies\n(A) Search results for comparing E. dermatitidis protein XP_009156893.1 (tyrosinase) to the rest of the E. dermatitidis genome utilizing the settings shown in Figure 9[href=https://www.wicell.org#fig9].\n(B) Search results for comparing E. dermatitidis protein XP_009157733.1 (tyrosinase) to the rest of the E. dermatitidis genome utilizing the settings shown in Figure 9[href=https://www.wicell.org#fig9].\n(C) Search results for comparing E. dermatitidis protein XP_009160170.1 (tyrosinase) to the rest of the E. dermatitidis genome utilizing the settings shown in Figure 9[href=https://www.wicell.org#fig9].",
    "(D) Search results for comparing E. dermatitidis protein XP_009155657.1 (tyrosinase) to the rest of the E. dermatitidis genome utilizing the settings shown in Figure 9[href=https://www.wicell.org#fig9].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/183-Fig9.jpg\nFigure 9. Setup of the BLASTp Query Used to Map Exophiala dermatitidis Tyrosinase Gene Copy XP_0099155657.1 Back onto the Exophiala dermatitidis Genome to Search for as yet Unidentified Tyrosinase Gene Copies\nThis search was repeated for each gene copy of Exophiala dermatitidis.\nComparison of human and tyrosinase enzymes through BLASTp. As one method for evaluating the similarity of human and Exophiala dermatitidis melanin synthesis, the similarity between tyrosinase enzymes of the two species should be evaluated. The first method of evaluation is a BLASTp analysis, which can be performed similarly to steps 4, 8, and 12, except that the search is limited to the Homo sapiens genome. The combined results for this search can be seen in Figure 11[href=https://www.wicell.org#fig11]. In summary, no tyrosinase gene copy from Exophiala dermatitidis has high sequence similarity to that of Homo sapiens.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/183-Fig11.jpg\nFigure 11. BLASTp Result for the Query of Each Exophiala dermatitidis Tyrosinase Gene Copy against the Homo Sapiens Genome to Determine if the Tyrosinase Gene of Humans Are Sufficiently Similar to that of E. dermatitidis to Produce a Significant BLASTp Match\n(A) BLASTp results comparing E. dermatitidis protein XP_009156893.1 (tyrosinase) to the human (H. sapiens) genome.\n(B) BLASTp results comparing E. dermatitidis protein XP_009157733.1 (tyrosinase) to the human (H. sapiens) genome.\n(C) BLASTp results comparing E. dermatitidis protein XP_009160170.1 (tyrosinase) to the human (H. sapiens) genome.\n(D) BLASTp results comparing E. dermatitidis protein XP_009155657.1 (tyrosinase) to the human (H. sapiens) genome.",
    "Comparing human and tyrosinase enzymes through COBALT. A BLASTp analysis generally looks a whole-sequence similarity; however, the whole amino acid sequence of an enzyme is generally not critical to enzyme function. Rather, those amino acids in the active site or sites of an enzyme are most critical; therefore, this step is focused on evaluating the similarity and conservation of the active site using the Constraint-based Multiple Alignment Tool (COBALT) (Papadopoulos and Agarwala, 2007[href=https://www.wicell.org#bib20]). The COBALT is available through NCBI (url: https://www.ncbi.nlm.nih.gov/tools/cobalt/re_cobalt.cgi[href=https://www.ncbi.nlm.nih.gov/tools/cobalt/re_cobalt.cgi]) and is relatively simple to use, as described below to compare human tyrosinase, human tyrosinase related proteins, and Exophiala dermatitidis tyrosinase gene copies.\nTo compare human tyrosinase related proteins, human tyrosinase alleles, and Exophiala determatitidis, use the settings and search query shown in Figure 12[href=https://www.wicell.org#fig12] (note that since this screenshot was taken on 04/23/2020, the COVID-19 banner was removed from the image so as to show what is normally seen), then select “Align”.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/183-Fig12.jpg\nFigure 12. Input to the COBALT Tool Used when Comparing the Amino Acid Sequences of Human Tyrosinase-Related Proteins 1 and 2, Three Different Human Alleles for Tyrosinase, and the Four Gene Copies of Tyrosinase in E. dermatitidis\nOnce the alignment is complete, the enzymes may be compared, particularly in term of conserved sequences. For this analysis, 3-bit conservation settings should be used (this can be changed by changing the drop-down menu labeled “Conservation Setting:” under the heading “Alignments”).",
    "The active sites of tyrosinase and tyrosinase related proteins, CuA and CuB (standing for Copper-binding domains A and B respectively) can be identified using information on the residue positions of these active sites from sources such as García-Borrón and Solano (2002)[href=https://www.wicell.org#bib12], Spritz et al. (1997)[href=https://www.wicell.org#bib26], and Furumura et al. (1998)[href=https://www.wicell.org#bib11]. It should be assumed that the sequences from E. dermatitidis genes copies of tyrosinase which align with these active sites are the active sites of these tyrosinases. In summary, these results should show relatively well-conserved active sites and particularly well-conserved key active site residues.\nComparing E. dermatitidis tyrosinase gene copies to hidden Markov Models (hMMs) using Pfam. To further evaluate how similar Exophiala dermatitidis gene copies are to other tyrosinase sequences, the sequence of each gene copy should be evaluated against the hidden Markov Models (hMMs) of various protein families using the Pfam tool. As with the COBALT tool, it is fairly simple to use and the steps are described below.\nThe Pfam tool can be found at pfam.xfam.org[href=http://pfam.xfam.org]. To submit a sequence to query against hMMs of protein families, select the link “Sequence Search” in the middle of the page.\nThis will result in a text box appearing in the middle of the page. Copy-and-past the amino acid sequence of the desired protein into that text box and then select “Go” (note that this should be done one sequence at a time).",
    "In general, the only protein family to which Exophiala dermatitidis tyrosinase gene copies map is tyrosinase, showing that the important portions of the sequence are well conserved (expect values of 2E-38 or better). Two of these gene copies, XP_0091601701.1 and XP_009156893.1, also had weak matches to the Tyrosinase C hMM as well. A combination of the results for each tyrosinase gene copy of E. dermatitidis is shown in Figure 13[href=https://www.wicell.org#fig13].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/183-Fig13.jpg\nFigure 13. Results of the Analysis of Each Tyrosinase Gene Copy in Exophiala dermatitidis in a Hidden Marko Model Analysis Done by the Pfam Tool\nAs shown here, each of these sequences align well with the tyrosinase hidden Markov Model.\n(A) Result of comparison of E. dermatitidis protein XP_009160170.1 (tyrosinase) against the baseline Hidden Markov Chain of the tyrosinase family using the Pfam tool.\n(B) Result of comparison of E. dermatitidis protein XP_009156893.1 (tyrosinase) against the baseline Hidden Markov Chain of the tyrosinase family using the Pfam tool.\n(C) Result of comparison of E. dermatitidis protein XP_009157733.1 (tyrosinase) against the baseline Hidden Markov Chain of the tyrosinase family using the Pfam tool.\n(D) Result of comparison of E. dermatitidis protein XP_009155657.1 (tyrosinase) against the baseline Hidden Markov Chain of the tyrosinase family using the Pfam tool.",
    "Analyze all data gather to this point on the similarity of Human and Exophiala dermatitidis melanin synthesis. To this point, a comparison of the reaction pathway which produces melanins has been made (step 35), the key enzyme (tyrosinase) is compared between the two species (steps 37, 38, and 39), and tyrosinase gene copies of E. dermatitidis are compared to the hidden Markov Models of tyrosinase. At this stage, comparisons of human and Exophiala dermatitidis eumelanin and pheomelanin metabolism may be made. An example of such an analysis is provided in Schroeder et al. (2020)[href=https://www.wicell.org#bib24]."
  ],
  "subjectAreas": [
    "Metabolism",
    "Microbiology",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}