{
  "id": 3122,
  "origin_website": "Cell",
  "title": "Integrating single-cell transcriptomes, chromatin accessibility, and multiomics analysis of mesoderm-induced embryonic stem cells",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nPart 1: Single cell RNA seq analysis\nTiming: 1 h (for step 1 to step 9)\nIn this section, we describe essential steps to analyze scRNA-seq datasets.\nLoad datasets using Seurat package troubleshooting 4[href=https://www.wicell.org#sec5.7].\nlibrary(dplyr)\nlibrary(Seurat)\nlibrary(monocle3)\nlibrary(SeuratWrappers)\n# for plotting\nlibrary(ggplot2)\nlibrary(patchwork)\nset.seed(1234)\naPSM.matrix <- Read10X(data.dir =\"./aPSM_scRNA/filtered_feature_bc_matrix/\")\nCreate Seurat object.\naPSM <- CreateSeuratObject(counts = aPSM.matrix, min.cells = 3, min.features = 200, project = “ aPSM”)\nNote: Options for min.cell and min.features are selected as default values from Seurat tutorials (https://satijalab.org/seurat/articles/pbmc3k_tutorial.html[href=https://satijalab.org/seurat/articles/pbmc3k_tutorial.html]). File names should be barcodes.tsv.gz, features.tsv.gz, and matrix.mtx.gz. For Window OS, “.\\\\filtered_feature_bc_matrix\\\\ can be used.\nSelect cells for the analysis through quality control (QC) (Figure 2[href=https://www.wicell.org#fig2]A). Troubleshooting 5[href=https://www.wicell.org#sec5.9].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2694-Fig2.jpg\nFigure 2. scRNA-seq data quality control\n(A) Violin plots of scRNA-seq data of aPSM scRNA-seq data. mRNA counts (nCount_RNA), number of detected genes(nFeature_RNA), mitochondria gene percentage (percent.mt).\n(B) Elbowplot of aPSM scRNA-seq data describing the standard deviations of the principal components (PC).\naPSM[[\"percent.mt\"]] <- PercentageFeatureSet(aPSM, pattern = \"ˆmt-\")\n  VlnPlot(aPSM, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), ncol = 3)\nplot1 <- FeatureScatter(aPSM, feature1 = \"nCount_RNA\", feature2 = \"percent.mt\")\nplot2 <- FeatureScatter(aPSM, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\")\nplot1+plot2\naPSM <- subset(aPSM, subset = nFeature_RNA > 0 & nFeature_RNA < 8000 & percent.mt < 20)\nPreprocess data and select features for the analysis.\naPSM <- NormalizeData(object = aPSM, normalization.method = \"LogNormalize\", scale.factor = 1e4)\naPSM <- FindVariableFeatures(aPSM, selection.method = \"vst\", nfeatures = 2000)\naPSM_top10 <- head(VariableFeatures(aPSM), 10)\nplot1 <- VariableFeaturePlot(aPSM)\nplot2 <- LabelPoints(plot = plot1, points = aPSM_top10, repel = TRUE)\nplot1+plot2\naPSM.all.genes <- rownames(aPSM)\naPSM <- ScaleData(aPSM, features = aPSM.all.genes)\nFilter cell cycle genes.\nconvertHumanGeneList <- function(x){\n  require(\"biomaRt\")\n  human <- useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\" , host = \"https://dec2021.archive.ensembl.org/\")\n  mouse <- useMart(\"ensembl\", dataset = \"mmusculus_gene_ensembl\" ,host = \"https://dec2021.archive.ensembl.org/\")",
    "tmp <- getLDS(attributes = c(\"hgnc_symbol\"), filters = \"hgnc_symbol\", values = x , mart = human, attributesL = c(\"mgi_symbol\"), martL = mouse, uniqueRows=TRUE)\n  mousex <- unique(tmp[,2])\n  return(mousex)}\ns.genes <- convertHumanGeneList(cc.genes.updated.2019$s.genes)\ng2m.genes <- convertHumanGeneList(cc.genes.updated.2019$g2m.genes)\ncell_cycle <- t(read.csv(file=\"aPSM_scRNA/cell_cycle.txt\",header=F))[,1]\nfiltered_genes <- c(s.genes,cell_cycle)\nFilter cell cycle genes, reduce dimensions and establish dataset dimensionality (Figure 2[href=https://www.wicell.org#fig2]B).\naPSM <- RunPCA(object = aPSM, features = VariableFeatures(object = aPSM), verbose = FALSE)\naPSM <- CellCycleScoring(aPSM, s.features = filtered_genes, g2m.features = g2m.genes, set.ident = TRUE)\naPSM <- ScaleData(aPSM, vars.to.regress = c(\"S.Score\", \"G2M.Score\"), features = rownames(aPSM))\naPSM <- JackStraw(aPSM, num.replicate = 100)\naPSM <- ScoreJackStraw(aPSM, dims = 1:20)\nElbowPlot(object = aPSM,ndims =50)\nCluster and visualize cells (Figure 3[href=https://www.wicell.org#fig3]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2694-Fig3.jpg\nFigure 3. Visualization of aPSM scRNA-seq data\n(A) UMAP plot of aPSM scRNA-seq data.\n(B) Pseudotime plot of aPSM scRNA-seq data. The heatmap represents units of progress, with 1 located at the root of the trajectory.\naPSM <- FindNeighbors(object = aPSM, dims = 1:30)\naPSM <- FindClusters(object = aPSM, resolution = 0.25)\naPSM <- RunTSNE(object = aPSM, dims = 1:30)\naPSM <- RunUMAP(object = aPSM, dims = 1:30)\nDimPlot(object=aPSM,reduction='umap',label=T)+labs(title = \" aPSM\")\nsave(aPSM,file=\"aPSM_scRNA.RData\")\nAnalyze unique features of each cluster.\naPSM.markers <- FindAllMarkers(aPSM, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)\naPSM.markers_table <- aPSM.markers %>%group_by(cluster) %>% slice_max(n = 20, order_by = avg_log2FC)\nNote: Options for min.pct and logfc.threshold are selected as default values from Seurat tutorials (https://satijalab.org/seurat/articles/pbmc3k_tutorial.html[href=https://satijalab.org/seurat/articles/pbmc3k_tutorial.html]).\nVisualize clusters pseudotime (Figure 3[href=https://www.wicell.org#fig3]B).\nDefaultAssay(aPSM) <- \"RNA\"\naPSM_cds <- as.cell_data_set(aPSM)\naPSM_cds <- cluster_cells(aPSM_cds,reduction=\"UMAP\",k = 30,resolution = 0.00012)\naPSM_cds <- learn_graph(aPSM_cds, close_loop = F,use_partition = T,learn_graph_control =list(minimal_branch_len=5))\nplot_cells(aPSM_cds, label_groups_by_cluster = T, label_leaves = F, label_branch_points = T,graph_label_size = 3)\naPSM.min.umap <- which.min(unlist(FetchData(aPSM, \"UMAP_2\")))\naPSM.min.umap <- colnames(aPSM)[aPSM.min.umap]\naPSM_cds <- order_cells(aPSM_cds, root_cells = aPSM.min.umap)\nplot_cells(aPSM_cds, color_cells_by = \"pseudotime\", label_cell_groups =T, label_leaves = F, label_branch_points = F,show_trajectory_graph = T,graph_label_size = 3,label_groups_by_cluster = T)",
    "Part 1: Single cell ATAC seq analysis\nTiming: 1 h (for step 10 to step 17)\nIn this section, we describe steps to evaluate chromatin accessibility using scATAC-seq.\nLoad datasets using Signac package.\nlibrary(Signac)\nlibrary(Seurat)\nlibrary(GenomeInfoDb)\nlibrary(EnsDb.Mmusculus.v79)\nlibrary(patchwork)\nset.seed(1234)\naPSM.counts <- Read10X_h5(\"./aPSM_scATAC/ filtered_peak_bc_matrix.h5\")\naPSM_meta <- read.table(\"./aPSM_scATAC/singlecell.csv.gz\", sep = \",\", header = TRUE, row.names = 1)\naPSM_chrom_assay <- CreateChromatinAssay(\n  counts = aPSM.counts,\n  sep = c(\":\",\"-\"),\n  genome = 'mm10',\n  fragments = './aPSM_scATAC/filtered_feature_bc_matrix/fragments.tsv.gz', min.cells = 3, min.features = 100)\nNote: Options for min.cell and min.features are selected as default values from Signac tutorials (https://stuartlab.org/signac/articles/pbmc_vignette.html[href=https://stuartlab.org/signac/articles/pbmc_vignette.html]).\nCreate Seurat object.\naPSM_atac <- CreateSeuratObject(\ncounts = aPSM_chrom_assay,\nassay = 'aPSM_peaks',\nproject = 'aPSM_atac',\nmeta.data = aPSM_meta[colnames(aPSM_chrom_assay),])\nAdd annotation information.\nannotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)\n# change to UCSC style since the data was mapped to mm10\nseqlevelsStyle(annotations) <- 'UCSC'\ngenome(annotations) <- \"mm10\"\n# add the gene information to the object\nAnnotation(aPSM_atac) <- annotations\nSelect cells for analysis through QC (Figure 4[href=https://www.wicell.org#fig4]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2694-Fig4.jpg\nFigure 4. Quality control and visualization of integration between scATAC and scRNA-seq data\n(A) Features distribution of aPSM scATAC-seq data.\n(B) UMAP plot of aPSM scATAC-seq datasets.\n(C) Features distribution between naïve and instructed scRNA-seq datasets.\n(D) UMAP plots before and after Harmony integration.\naPSM_atac <- NucleosomeSignal(object = aPSM_atac)\n# compute TSS enrichment score per cell\naPSM_atac <- TSSEnrichment(object = aPSM_atac, fast = FALSE)\naPSM_atac$pct_reads_in_peaks <- aPSM_atac$peak_region_fragments / aPSM_atac$passed_filters ∗ 100\naPSM_atac$blacklist_ratio <- aPSM_atac$blacklist_region_fragments / aPSM_atac$peak_region_fragments\nVlnPlot(\n  object = aPSM_atac,\n  features = c('pct_reads_in_peaks', 'peak_region_fragments',\n  'TSS.enrichment', 'blacklist_ratio', 'nucleosome_signal'),pt.size = 0.1, ncol = 5)\nPreprocess data and select features for the analysis.\nFeatureScatter(aPSM_atac, feature1 = \"peak_region_fragments\", feature2 = \"nCount_aPSM_peaks\")\naPSM_atac <- subset(\n  x = aPSM_atac,\n  subset = peak_region_fragments > 2586 &\n    peak_region_fragments < 20000 & pct_reads_in_peaks > 15 & blacklist_ratio < 0.05)\nncol(aPSM_atac)\nVlnPlot(\n  object = aPSM_atac,\nfeatures = c('nucleosome_signal','peak_region_fragments'),pt.size = 0.1) + NoLegend()",
    "FeatureScatter(aPSM_atac, feature1 = \"peak_region_fragments\", feature2 = \"nCount_aPSM_peaks\")\nReduce dimensions.\naPSM_atac <- RunTFIDF(aPSM_atac)\naPSM_atac <- FindTopFeatures(aPSM_atac, min.cutoff = 'q0')\naPSM_atac <- RunSVD(\n  object = aPSM_atac, assay = 'aPSM_peaks',\n  reduction.key = 'LSI_', reduction.name = 'lsi')\nCluster and visualize cells (Figure 4[href=https://www.wicell.org#fig4]B).\nlibrary(ggplot2)\naPSM_atac <- RunUMAP(object = aPSM_atac, reduction = 'lsi', dims = 1:40)\naPSM_atac <- RunTSNE(object = aPSM_atac, reduction = 'lsi', dims = 1:40)\naPSM_atac <- FindNeighbors(object = aPSM_atac, reduction = 'lsi', dims = 1:40)\naPSM_atac <- FindClusters(object = aPSM_atac, verbose = FALSE,resolution=0.25)\nDimPlot(object = aPSM_atac, label = F,reduction = 'umap') +labs(title = \" aPSM scATAC\")\nCalculate gene activities and add them to Seurat object.\naPSM_gene.activities <- GeneActivity(aPSM_atac)\nsave(aPSM_gene.activities,file=\"aPSM_atac_gene.activities.RData\")\n# add the gene activity matrix to the Seurat object as a new assay and normalize it\naPSM_atac[['RNA']] <- CreateAssayObject(counts = aPSM_gene.activities)\naPSM_atac <- NormalizeData(\n  object = aPSM_atac, assay = 'RNA', normalization.method = 'LogNormalize',scale.factor = median(aPSM_atac$nCount_RNA) )\nsave(aPSM_atac,file=\"aPSM_scATAC.RData\")\nPart 1: Integrated data analysis\nTiming: 1 h (for step 18 to step 19)\nIn this section, we describe steps to integrate and analyze data from different platforms. Users can infer the changes of gene expressions during time points or relations between gene expressions and chromatin accessibility during cellular differentiation.\nIntegrate single cell RNA seq datasets.\nPrepare R library for the integration.\nlibrary(dplyr)\nlibrary(Seurat)\nlibrary(harmony)\nlibrary(data.table)\nlibrary(parallel)\nset.seed(1234)\n# Set number of cores to use\nNCORES = 1\nmeta <- fread(\"naive_instructed_esc.csv\")\nLoad datasets.\ndata_dir <- list(\"./naive_scRNA/\",\"./instructed_scRNA/\")\nmat.list <- list()\nsoupx.used <- list()\nfor(i in 1:length(data_dir)){\n  mat.list[[i]] <- Read10X(data.dir = paste0(data_dir[i], 'filtered_feature_bc_matrix'))\n  soupx.used[[i]] <- F}\ncat(sum(unlist(lapply(mat.list, ncol))),\"cells (total) loaded...\\n\")\nsample_num<-min(ncol(mat.list[[1]]),ncol(mat.list[[2]]))\nsel.id<-sample(colnames(mat.list[[2]]), size=sample_num, replace=FALSE)\nmat.list[[2]]<-mat.list[[2]][,sel.id]\nNote: Files should be in filtered_feature_bc_matrix folder, and file names should be barcodes.tsv.gz, features.tsv.gz, and matrix.mtx.gz.\nCreate Seurat objects.\nseu.list <- list()\nseu.list <- mclapply(\n  mat.list,\n  FUN = function(mat){\n    return(CreateSeuratObject(\n      counts = mat, min.features = 200, min.cells = 3,project = 'naive_instructed_data'))",
    "}, mc.cores = NCORES)\nfor(i in 1:length(seu.list)){\n  cat(' ------------------------------------\\n',\n    '--- Processing dataset number ', i, '-\\n',\n    '------------------------------------\\n')\n  # Add meta data\n  for(md in colnames(meta)){\n    seu.list[[i]][[md]] <- meta[[md]][i]\n  }\n  # add %MT\n  seu.list[[i]][[\"percent.mt\"]] <- PercentageFeatureSet(seu.list[[i]], pattern = \"mt-\")\n  # Filter out low quality cells according to the metrics defined above\n  seu.list[[i]] <- subset(seu.list[[i]],\n            subset = nFeature_RNA > 1600 & nFeature_RNA < 8000 & percent.mt < 20)\n  # Only mito and floor filtering; trying to find doublets\n}\ncat((sum(unlist(lapply(mat.list, ncol)))-sum(unlist(lapply(seu.list, ncol)))),\"cells (total) removed...\\n\")\nPreprocess Seurat objects.\nseuPreProcess <- function(seu, assay='RNA', n.pcs=30, res=0.25){\n  pca.name = paste0('pca_', assay)\n  pca.key = paste0(pca.name,'_')\n  umap.name = paste0('umap_', assay)\n  seu = NormalizeData(\n    seu\n  ) %>% FindVariableFeatures(\n    assay = assay,\n    selection.method = \"vst\",\n    nfeatures = 2000,\n    verbose = F\n  ) %>% ScaleData(\n    assay = assay\n  ) %>% RunPCA(\n    assay = assay,\n    reduction.name = pca.name,\n    reduction.key = pca.key,\n    verbose = F,\n    npcs = n.pcs\n)\nn.pcs.use =n.pcs\n  # FindNeighbors %>% RunUMAP, FindClusters\n  seu <- FindNeighbors(\n    seu,\n    reduction = pca.name,\n    dims = 1:n.pcs.use,\n    force.recalc = TRUE,\n    verbose = FALSE\n  ) %>% RunUMAP(\n    reduction = pca.name,\n    dims = 1:n.pcs.use,\n    reduction.name=umap.name\n  )\n  seu@reductions[[umap.name]]@misc$n.pcs.used <- n.pcs.use\n  seu <- FindClusters(object = seu,resolution = res)\n  seu[[paste0('RNA_res.',res)]] <- as.numeric(seu@active.ident)\n  return(seu)\n}\n# preprocess each dataset individually\nseu.list <- lapply(seu.list, seuPreProcess)\nMerge datasets (Figure 4[href=https://www.wicell.org#fig4]C).\ntmp.list <- list()\nfor(i in 1:length(seu.list)){\n  DefaultAssay(seu.list[[i]]) <- \"RNA\"\n  tmp.list[[i]] <- DietSeurat(seu.list[[i]], assays = \"RNA\")\n}\n# merge tmp count matrices\n  scMuscle.pref.seurat <- merge(\n    tmp.list[[1]],\n    y = tmp.list[[2]]\n)\nVlnPlot(\n  scMuscle.pref.seurat,\n  features = c(\n    'nCount_RNA',\n    'nFeature_RNA',\n    'percent.mt'\n  ),\n  group.by = 'source',\n  pt.size = 0\n)\nPreprocess merged data.\n# Seurat preprocessing on merged data ----\nDefaultAssay(scMuscle.pref.seurat) <- 'RNA'\nscMuscle.pref.seurat <-\n  NormalizeData(\n    scMuscle.pref.seurat, assay = 'RNA'\n  ) %>% FindVariableFeatures(\n    selection.method = 'vst',\n    nfeatures = 2000,verbose = TRUE\n  ) %>% ScaleData(\n    assay = 'RNA',\n    verbose = TRUE\n  ) %>% RunPCA(\n    assay = 'RNA',",
    "reduction.name = 'pca_RNA',\n    reduction.key = 'pca_RNA_',\n    verbose = TRUE,\n    npcs = 50\n  )\nElbowPlot(scMuscle.pref.seurat, reduction = 'pca_RNA', ndims = 50)\nFind clusters for individual datasets.\nn.pcs = 30\nscMuscle.pref.seurat <-\n  RunUMAP(\n    scMuscle.pref.seurat, reduction = 'pca_RNA',\n    dims = 1:n.pcs, reduction.name='umap_RNA'\n  ) %>% FindNeighbors(\n    reduction = 'pca_RNA',\n    dims = 1:n.pcs,\n    force.recalc = TRUE,\n    verbose = F\n  )\nscMuscle.pref.seurat <- FindClusters(object = scMuscle.pref.seurat, resolution = 0.25)\nscMuscle.pref.seurat[['RNA_res.0.25']] <- as.numeric(scMuscle.pref.seurat@active.ident)\nIntegrate datasets using Harmony package.\nscMuscle.pref.seurat <-\n  scMuscle.pref.seurat %>% RunHarmony(\n    group.by.vars=c('sample'), reduction='pca_RNA',\n    assay='RNA',plot_convergence = TRUE,verbose=TRUE)\nscMuscle.pref.seurat <-\n  scMuscle.pref.seurat %>% RunUMAP(\n    reduction = 'harmony', dims = 1:n.pcs,\n    reduction.name='umap_harmony')\nscMuscle.pref.seurat@reductions$umap_harmony@misc$n.pcs.used <- n.pcs\nscMuscle.pref.seurat <-\n  scMuscle.pref.seurat %>% FindNeighbors(\n    reduction = 'harmony',dims = 1:n.pcs,\n    graph.name = 'harmony_snn',force.recalc = TRUE,\n    verbose = FALSE)\nscMuscle.pref.seurat <- FindClusters(\n  object = scMuscle.pref.seurat,resolution = 1.0,\n  graph.name='harmony_snn')\nscMuscle.pref.seurat[['harmony_res.1.0']] <- as.numeric(scMuscle.pref.seurat@active.ident)\nscMuscle.pref.seurat <- FindClusters(\n  object = scMuscle.pref.seurat,\n  resolution = 2.0, graph.name='harmony_snn')\nscMuscle.pref.seurat[['harmony_res.2.0']] <- as.numeric(scMuscle.pref.seurat@active.ident)\nValidate integrated results (Figure 4[href=https://www.wicell.org#fig4]D).\nlibrary(cowplot)\nlibrary(ggplot2)\np1<-DimPlot(object = scMuscle.pref.seurat, reduction = \"umap_RNA\", pt.size = .1, group.by = \"sample\")+labs(title = \"Merged by Seurat\")\np2<-DimPlot(object = scMuscle.pref.seurat, reduction = \"umap_harmony\", pt.size = .1, group.by = \"sample\")+labs(title = \"Merged by Seurat with Harmony\")\np1+p2\nsave(scMuscle.pref.seurat,file=\"naive_instructed_scRNA_ESCs.RData\")\nIntegrate scATAC-seq dataset with scRNA-seq dataset.\nPrepare R library for integration.\nlibrary(Signac)\nlibrary(Seurat)\nlibrary(GenomeInfoDb)\nlibrary(EnsDb.Mmusculus.v79)\nlibrary(patchwork)\nlibrary(ggplot2)\nset.seed(1234)\nLoad datasets.\nload(\"aPSM_scRNA.RData\")\nload(\"aPSM_scATAC.RData\")\nInfer relations between scRNA-seq and scATAC-seq.\nDefaultAssay(aPSM_atac) <- 'RNA'\nncol(aPSM_atac)\ntransfer.anchors <- FindTransferAnchors(\n  reference = aPSM, query = aPSM_atac, k.anchor = 20,\n  k.filter = 200, reduction = 'cca', dims = 1:30)\npredicted.labels <- TransferData(\n  anchorset = transfer.anchors,\n  refdata = aPSM$seurat_clusters,\n  weight.reduction = aPSM_atac[['lsi']],\n  dims = 2:30)\nsave(transfer.anchors,file=\"transfer.anchors_aPSM_atac.RData\")\naPSM_atac <- AddMetaData(object =aPSM_atac, metadata = predicted.labels)\nsave(aPSM_atac,file=\"aPSM_atac_meta.RData\")\nVisualize the clusters of the integrated datasets.\nDimPlot(object = aPSM_atac, label = F,reduction = 'umap',group.by ='predicted.id' ) +labs(title = \" aPSM scATAC\")\nDimPlot(object = aPSM, label = F,reduction = 'umap') +labs(title = \" aPSM\")\nPart 2: Multiomics analysis",
    "Timing: 1 h (for step 20 and step 21)\nIn this section, we describe major steps on how to perform multimodal analysis.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2694-Fig5.jpg\nFigure 5. Multiomics data quality control\n(A) snRNA and snATAC QC plot before removing low quality cells.\n(B) snRNA and snATAC QC plot after removing low quality cells.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2694-Fig6.jpg\nFigure 6. Characterization and annotation of cell states\n(A) UMAP visualization of the clustering based on snRNA-seq, snATAC-seq, and WNN analysis before cell state annotation.\n(B) Pseudotime single cell trajectory plot. The heatmap represents units of progress, with 1 located at the root of the trajectory.\n(C) Cell states derived from pseudotime trajectory inference. State 2 and state 4 are marked NA (not assigned), since they may represent transitioning states and could not be unambiguously assigned to a specific developmental stage.\n(D) UMAP visualization of cell states after annotated clustering.\nData preprocessing.\nLoad the libraries and setup working directory.\nlibrary(Seurat)\nlibrary(Signac)\nlibrary(patchwork)\nlibrary(monocle3)\nlibrary(SeuratWrappers)\nlibrary(EnsDb.Mmusculus.v79)\nlibrary(GenomeInfoDb)\nlibrary(ggplot2)\nlibrary(dplyr)\nset.Seed(1234)\nsetwd(getwd())\nLoad snRNA and snATAC data and create Seurat object.\nStar.data <- Read10x(data.dir = \" ./multiomics/filtered_feature_bc_matrix/”)\n# Extract RNA and ATAC data\nrna_counts <- Star.data$`Gene Expression`\natac_counts <- Star.data$Peaks\n# Create Seurat object containing snRNA data\nStar <- CreateSeuratObject(counts = rna_counts, project = \"Star\", min.cells=5, min.features = 100, assay = \"RNA\")\nCritical: HIFLR_snRNA_barcodes.tsv.gz, HIFLR_snRNA_features.tsv.gz, and HIFLR_snRNA_matrix.mtx.gz are the files generated by CellRanger-arc v2.0.0. Files should be kept in the same folder, named as filtered_feature_bc_matrix.\nLoad snATAC-seq fragments files.\ngrange.counts <- StringToGRanges(rownames(atac_counts), sep = c(\":\", \"-\"))\ngrange.use <- seqnames(grange.counts) %in% standardChromosomes(grange.counts)\natac_counts <- atac_counts[as.vector(grange.use), ]\nAdd annotation.\nannotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)\nseqlevelsStyle(annotation) <- \"UCSC\"\ngenome(annotation) <- \"mm10\"\nCreate snATAC assay.\nfragpath <- \" ./multiomics/filtered_feature_bc_matrix/fragments.tsv.gz\"\nStar[[\"ATAC\"]] <- CreateChromatinAssay(counts = atac_counts, sep = c(\":\", \"-\"), genome = 'mm10', fragments = fragpath, min.cells = 10, annotation = annotation)\nDownsize the dataset.\nset.seed(111)",
    "Star <- subset(x = Star, downsample = 6000)\nsave(Star, file=\"Star_ds6k.RData\")\nload(\"./Star_ds6k.RData\")\nCritical: To load the snATAC-seq fragments file properly, fragments.tsv.gz.tbi file is required to be in the same folder.\nCritical: Use only peaks in standard chromosomes and set sequence level style as UCSC.\nQuality control:\nCalculate percentage of mitochondrial genes in snRNA-seq.\nCompute both TSS enrichment score and nucleosome signal metrics in Signac for snATAC-seq (Figure 5[href=https://www.wicell.org#fig5]A).\nDefaultAssay(Star) <- \"RNA\"\nStar[[\"percent.mt\"]] <- PercentageFeatureSet(Star, pattern = \"ˆmt-\")\nVlnPlot(Star, features = c(\"nCount_RNA\", \"nFeature_RNA\", \"percent.mt\"), ncol = 3, log = TRUE, pt.size = 0) + NoLegend()\nDefaultAssay(Star) <- \"ATAC\"\nStar <- NucleosomeSignal(Star)\nStar <- TSSEnrichment(object=Star, fast=FALSE)\nVlnPlot(Star, features = c(\"nCount_ATAC\", \"nFeature_ATAC\", \"TSS.enrichment\", \"nucleosome_signal\"), ncol = 4, log = TRUE, pt.size = 0) + NoLegend()\nNote: Low-quality cells refer to potential damaged cells, empty droplets, cell doublets, or multiplets.\nRemove low quality cells (Figure 5[href=https://www.wicell.org#fig5]B).\nStar <- subset(x = Star,\n  subset = nCount_RNA < 100000 &\n  nCount_RNA > 1200 &\n  nCount_ATAC < 1e5 &\n  nCount_ATAC > 1e2 &\n  nucleosome_signal < 2.5 &\n  TSS.enrichment > 3 &\n  Percent.mt < 10)\nsaveRDS(Star, file=\"Star.RData\")\nVlnPlot(Star, features = c(\"nCount_RNA\", \"nFeature_RNA\", \"percent.mt\"), ncol = 3, log = TRUE, pt.size = 0) + NoLegend()\nVlnPlot(Star, features = c(\"nCount_ATAC\", \"nFeature_ATAC\", \"TSS.enrichment\", \"nucleosome_signal\"), ncol = 4, log = TRUE, pt.size = 0) + NoLegend()\nCritical: The filtering criteria are dataset specific. Chose a cutoff to avoid losing unique cell populations or to include noisy cells.\nWNN analysis.\nPerform normalization and dimensional reduction of snRNA-seq and snATAC-seq assays independently and individually.\n# snRNA analysis\nDefaultAssay(Star) <- \"RNA\"\nStar <- SCTransform(Star, verbose = FALSE) %>% RunPCA() %>% RunUMAP(dims = 1:30, reduction.name = 'umap', reduction.key = 'UMAP_')\n# snATAC analysis\nDefaultAssay(Star) <- \"ATAC\"\nStar <- RunTFIDF(Star)\nStar <- FindTopFeatures(Star, min.cutoff = 'q0')\nStar <- RunSVD(Star)\nStar <- RunUMAP(Star, reduction = 'lsi', dims = 2:30,",
    "reduction.name = \"umap.atac\", reduction.key = \"atacUMAP_\")\nNote: In snATAC-seq assay, the first dimension is typically correlated with sequencing depth rather than biological variation. It is thus excluded in the UMAP computing.\nLearn cell-specific modality weights and construct a WNN graph.\nStar <- FindMultiModalNeighbors(Star, reduction.list = list(\"pca\", \"lsi\"),dims.list = list(1:30, 2:30))\nStar <- RunUMAP(Star, nn.name = \"weighted.nn\",\n  reduction.name = \"umap.wnn\", reduction.key =\"wnnUMAP_\")\nStar <- FindClusters(Star, graph.name = \"wsnn\",\n  resolution = 0.8, algorithm = 3, verbose = FALSE)\nVisualize the clusters. (Figure 6[href=https://www.wicell.org#fig6]A).\np1 <- DimPlot(Star, reduction = \"umap\", group.by = \"seurat_clusters\", label = TRUE, label.size = 8, repel = TRUE) + ggtitle(\"RNA\")\np2 <- DimPlot(Star, reduction = \"umap.atac\",group.by = \"seurat_clusters\", label = TRUE, label.size = 8, repel = TRUE) + ggtitle(\"ATAC\")\np3 <- DimPlot(Star, reduction = \"umap.wnn\", group.by = \"seurat_clusters\", label = TRUE, label.size = 8, repel = TRUE) + ggtitle(\"WNN\")\np1+p2+p3 &NoLegend()\nsnRNA-seq analysis: Characterization and annotation of cell states are achieved by identifying marker genes via differential expression analysis in both pseudotemporal ordering identified clusters and WNN clusters. Cell types are defined using known gene markers. For example, Myod1, Myog, and Myf5 are myogenic markers and Ascl1, Neurod4, and Nhlh1 are neurogenic markers. Pax7 drives both myogenesis and neurogenesis. Meis1 and Pbx1 are anterior presomitic mesoderm (aPSM) markers. As an example, here we analyze myogenic genes Myod1 and Myog.\nFind markers.\nDefaultAssay(Star) <- \"RNA\"\nStar.rna.markers <- FindAllMarkers(Star, assay = \"RNA\", only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)\nStar.rna.markers %>%\n  group_by(cluster) %>%\n  top_n(n = 2, wt = avg_log2FC)\nAdd cell states annotations.\nStar <- RenameIdents(Star, '10' = 'cell_5','11' = 'cell_2')\nStar <- RenameIdents(Star, '5' = 'cell_4','6' = 'cell_1','7' = 'cell_1','8' = 'cell_3','9' = 'cell_5')\nStar <- RenameIdents(Star, '0' = 'cell_1','1' = 'cell_2','2' = 'cell_1','3' = 'cell_1','4' = 'cell_3')\nStar$celltype <- Idents(Star)",
    "Critical: Cell states can be assigned with known markers. Writing the Star.rna.markers into a file and studying the markers potentially used to annotate the clusters would be recommended.\nVisualize the cell states (Figure 6[href=https://www.wicell.org#fig6]D).\np1 <- DimPlot(Star, reduction = \"umap\", group.by = \" celltype\", label = FALSE, label.size = 8, repel = TRUE) + ggtitle(\"RNA\")\np2 <- DimPlot(Star, reduction = \"umap.atac\",group.by = \" celltype\", label = FALSE, label.size = 8, repel = TRUE) + ggtitle(\"ATAC\")\np3 <- DimPlot(Star, reduction = \"umap.wnn\", group.by = \" celltype\", label = FALSE, label.size = 8, repel = TRUE) + ggtitle(\"WNN\")\np1+p2+p3\nsnATAC-seq analysis.\nLoad libraries.\nlibrary(chromVAR)\nlibrary(motifmatchr)\nlibrary(JASPAR2020)\nlibrary(TFBSTools)\nlibrary(BSgenome.Mmusculus.UCSC.mm10)\nFind snATAC markers.\nDefaultAssay(Star) <- \"ATAC\"\nStar.atac.markers <- FindAllMarkers(Star, assay = \"ATAC\", only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)\nStar.atac.markers %>%\n  group_by(cluster) %>%\n  top_n(n = 2, wt = avg_log2FC)\nAdd motif information.\npwm_set <- getMatrixSet(x = JASPAR2020, opts = list(collection = \"CORE\", tax_group = 'vertebrates', all_versions = FALSE))\nStar <- AddMotifs(\n  object = Star,\n  genome = BSgenome.Mmusculus.UCSC.mm10,\n  pfm = pwm_set,\n  assay=\"ATAC\")\nComputer motif activities.\nStar <- RunChromVAR(\n  object = Star,\n  genome = BSgenome.Mmusculus.UCSC.mm10)\nPart 2: Data visualization\nTiming: 1 h (for step 22)\nIn this section, we describe steps to do data visualization.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2694-Fig7.jpg\nFigure 7. Visualization of myogenic cells\n(A) Individual and paired-plots expression of Myod1 and Myog in cell states derived from pseudotime trajectory inference.\n(B) Myod1 and Myog footprinting profile in aPSM, neurogenic and myogenenic clusters.\nPseudotime analysis:\nConvert Seurat object to Monocle object.\nDefaultAssay(Star) <- \"RNA\"\nset.seed(22)\ncds <- SeuratWrappers::as.cell_data_set(Star, assay = \"RNA\", reduction = \"umap\", group.by = \"celltype\")\ncds@rowRanges@elementMetadata@listData[[\"gene_short_name\"]] <- rownames(Star[[\"RNA\"]])\nCreate CDS object.\ncds <- preprocess_cds(cds, method = \"PCA\")\ncds <- reduce_dimension(cds, preprocess_method = \"PCA\",umap.n_neighbors= 14L, reduction_method = \"UMAP\")\ncds <- cluster_cells(cds, reduction_method = \"UMAP\")\ncds <- learn_graph(cds, use_partition = FALSE, close_loop = FALSE)",
    "Set the root with Seurat clusters 0 and order cells.\ncell_ids <- colnames(cds)[Star$seurat_clusters == \"0\"]\nclosest_vertex <- cds@principal_graph_aux[[\"UMAP\"]]$pr_graph_cell_proj_closest_vertex\nclosest_vertex <- as.matrix(closest_vertex[colnames(cds), ])\nclosest_vertex <- closest_vertex[cell_ids, ]\nclosest_vertex <- as.numeric(names(which.max(table(closest_vertex))))\nmst <- principal_graph(cds)$UMAP\nroot_pr_nodes <- igraph::V(mst)$name[closest_vertex]\nrowData(cds)$gene_name <- rownames(cds)\nrowData(cds)$gene_short_name <- rowData(cds)$gene_name\ncds <- order_cells(cds, root_pr_nodes = root_pr_nodes)\nVisualize trajectory plot (Figure 6[href=https://www.wicell.org#fig6]B).\nplot_cells(cds, color_cells_by = \"pseudotime\",\n      label_cell_groups =T, label_leaves = F,\n      label_branch_points = F,show_trajectory_graph = T,\n      graph_label_size = 3, label_groups_by_cluster = T)\nVisualize cell states derived from trajectory inference (Figure 6[href=https://www.wicell.org#fig6]C).\nplot_cells(cds, color_cells_by = \"cluster\", cell_size = 1,\n      label_cell_groups = TRUE, group_label_size = 4,\n      show_trajectory_graph = FALSE,\n      label_branch_points = FALSE,\n      label_roots = FALSE,\n      label_leaves = FALSE)\nVisualize paired-plots expression of Myod1 and Myog (Figure 7[href=https://www.wicell.org#fig7]A).\nStar.seur <- as.Seurat(cds, assay = NULL, clusters = \"UMAP\")\nStar.seur <- AddMetaData(Star.seur,metadata= cds@principal_graph_aux$UMAP$pseudotime,\ncol.name = \"monocle3_pseudotime\")\nFeaturePlot(Star.seur,features = c(\"Myod1\",\"Myog\"),\n      reduction =\"UMAP\",combine = T,\n      blend = TRUE, blend.threshold = 0.0,\n      min.cutoff = 0,max.cutoff = 6)\nVisualize Footprinting plots (Figure 7[href=https://www.wicell.org#fig7]B).\nStar_135 <- subset(x = Star, idents = c(\"cell_1\", \"cell_3\", \"cell_5\"), invert = FALSE)\nDefaultAssay(Star_135) <- \"ATAC\"\nStar_135 <- Footprint(\n  object = Star_135,\n  motif.name = c(\"MYOG\", \"MYOD1\"),\n  genome = BSgenome.Mmusculus.UCSC.mm10)\nPlotFootprint(Star_135, features = c(\"MYOD1\")) + patchwork::plot_layout(ncol = 1)\nPlotFootprint(Star_135, features = c(\"MYOG\")) + patchwork::plot_layout(ncol = 1)\nNote: Cell_1 is aPSM cells, Cell_3 is a neurogenic cluster, and Cell_5 is a myogenic cluster."
  ],
  "subjectAreas": [
    "Computer Sciences",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}