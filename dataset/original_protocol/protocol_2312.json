{
  "id": 2436,
  "origin_website": "Cell",
  "title": "Protocol to study the oligomeric organization of single-span transmembrane peptides using molecular dynamics simulations",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nMolecular model preparation\nTiming: 2 h\nStarting from the helical structure (all-atom) of the transmembrane segment of human TACI (Transmembrane activator and calcium modulator and cyclophilin ligand interactor, TNFRSF13B), you will create the corresponding coarse-grained version. Then you will prepare an array of 9 peptides equidistantly distributed and randomly oriented around the z-axis. This array will be embedded in a lipid bilayer composed of dioleyl palmitoyl choline (DOPC) and dilauryl palmitoyl choline (DLPC) (7:3) equally distributed on both sides of the membrane. Finally, the system will include water particles and ions. This system will be used in the following steps for the molecular dynamic simulation.\nAll the scripts and accessory files necessary for this protocol are available from our repository in GitLab.\nDownload the whole repository from this link (https://gitlab.com/BioComp/taci_cg_simulations[href=https://gitlab.com/BioComp/taci_cg_simulations]) as a compressed file or, if you use git, clone the repository with the next command:\n> git clone https://gitlab.com/BioComp/taci_cg_simulations[href=https://gitlab.com/BioComp/taci_cg_simulations]\nOnce the repository is decompressed as a folder in your computer, open a bash terminal and move there with the following command, where PATH is the location in your computer where you saved the content of the repository:\n> cd PATH/taci_cg_simulations\nCreate a working directory named as you prefer (“PROT” in this example):\n> mkdir PROT\nFrom the folder “example_files” copy the file “peptide.pdb” into the folder PROT using this command:\n> cp example_files/peptide.pdb PROT/\nNote: In this example, “peptide.pdb” corresponds to the helical structure of the human TACI transmembrane domain (residues 156 to 191) structure from AlphaFold (AF-O14836-F1).\nAlso copy the whole folder “martiniff”. This folder contains the version of the Martini force field and the “lipids.itp” file used in our original work.\n> cp -r martiniff/ PROT/\nMove to the new working directory:\n> cd PROT",
    "Once you are in this folder, download a copy of the files “martinize.py” (http://cgmartini.nl/index.php/tools2/proteins-and-bilayers/204-martinize[href=http://cgmartini.nl/index.php/tools2/proteins-and-bilayers/204-martinize]) and “insane.py” (http://www.cgmartini.nl/index.php/downloads/tools/239-insane[href=http://www.cgmartini.nl/index.php/downloads/tools/239-insane]) inside this folder. For using these scripts, you have to grant them execution permission with the next commands:\n> chmod +x martinize.py\n> chmod +x insane.py\nNote: The next instructions assume you are using “martinize.py” version 2.6 and the current version of “insane.py”, the same versions we used in our work. Using other versions, especially versions 3+, may have some changes in the syntax and requirements. Check the manuals in the Martini force field webpage.\nBe sure that the DSSP program (https://swift.cmbi.umcn.nl/gv/dssp/[href=https://swift.cmbi.umcn.nl/gv/dssp/]) is correctly installed on your computer. DSSP is part of the Debian and Ubuntu Linux distributions. Once installed, you can copy the path of the executable file from the output of the next command:\n> which dssp\nCopy this path and use it as the variable for the flag “-dssp” in the next step. Usually the path is “/usr/bin/dssp”.\nNote: If the previous command does not provide a path, try “which mkdssp” instead. If the command provides a valid path, use it for the option “-dssp” in the next step.\nConvert an all-atom model of the peptide into a coarse-grain MARTINI model with the next command:\n> martinize.py -f peptide.pdb \\\n      -o peptide-CG.top \\\n      -x peptide-CG.pdb \\\n      -ff elnedyn22 \\\n      -name Protein \\\n      -p None \\\n      -elastic -cys auto -eu 1.0 \\\n      -dssp /usr/bin/dssp \\\n      -nt \\\n      -sep\nAs a result, you will obtain a topology file named “peptide-CG.top” and a structure file named “peptide-CG.pdb”. Troubleshooting 1[href=https://www.wicell.org#sec6.1].\nNote: “martinize.py” version 2,6 runs in Python 2.7. If you have several Python versions in your system, you may have to add “Python2.7” before “martinize.py”. If you use conda environments with another Python version, deactivate conda.",
    "You can check the “martinize.py --help” for options. With the option “-ff” you can use any of the force fields available in the “martinize.py” script: martini21, martini21p, martini22, martini22p, elnedyn, elnedyn22 and elnedyn22p. In this example we use elnedyn22. You can perform this step also with the new version of martinize3, which is a Python package.\nOptional: You can open the “peptide.pdb” and “peptide-CG.pdb” files with pymol to visualize the input structure and the generated coarse-grained model. To do this, first open pymol and then type the following lines in the pymol console.\n> load PATH/peptide.pdb\n> load PATH/peptide-CG.pdb\n> show spheres\n> bg_color white\nYou must replace “PATH” with the path where “peptide.pdb” and “peptide-CG.pdb” are located in your computer. You will see structures like the ones shown in Figure 1[href=https://www.wicell.org#fig1].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1920-Fig1.jpg\nFigure 1. All-atom and coarse-grained peptide models\nPymol visualization of “peptide.pdb” (all-atom model) and “peptide-CG.pdb” (coarse-grained model) files. Colors in the all-atom model are the default scheme from Pymol : C, H, O, N, O, S, in cyan, white, red, blue and yellow, respectively. In the coarse-grained model, BB beads are colored in pink and side chain beads in yellow.\nUsing the coarse-grained peptide structure “peptide-CG.pdb” previously generated, build a box where a single helix is aligned to the z-axis using the following command:\n> gmx editconf -f peptide-CG.pdb -c -princ -o aligned_peptide.gro\nChoose “System (option 0)” as the group for determining the orientation.\nNote: All GROMACS tools are preceded by the “gmx” command. Depending on your installation, this prefix can vary. A usual variant is “gmx_mpi”.\nRotate the peptide 90 degrees around the y-axis (or x-axis, if necessary):\n> gmx editconf -f aligned_peptide.gro -c -rotate 0 90 0 -o z_aligned_peptide.gro",
    "The location of the N-terminus of the peptide (towards the upper or the lower membrane layer) can be controlled by rotating plus or minus 90 degrees. You can visualize the orientation of the peptide in VMD by using the reference XYZ axes on the bottom left corner of the model display window as follows:\n> vmd -m z_aligned_peptide.gro\nIn the menu “Graphics/Representations” you can create a representation of the BB atoms (type “name BB” in the Selected Atoms box) and choose “VDW” as the Drawing Methods to observe the BB particles as van der Waals spheres.\nCreate an array of 3 x 3 peptides where the helices are located equidistantly and randomly oriented around their z-axis using the following command:\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1920-Fig2.jpg\nFigure 2. Peptide array\nPymol visualization of “peptide_array.gro” file. BB beads are in orange, side chain beads in light blue.\n> gmx genconf -f z_aligned_peptide -nbox 3 3 1 -dist 4 4 0 -o peptide_array.gro -rot -maxrot 0 0 180",
    "Note: The peptide array is specified in the option “-nbox 3 3 1”. The distance between peptides in the xy-plane is controlled by the option “-dist 4 4 0”. The options “-rot -maxrot 0 0 180” ensure that every peptide is rotated randomly around the z-axis ±180 degrees. In the simulation box, the membrane plane is parallel to the XY plane, so the principal axis of the transmembrane peptides must be oriented parallel to the Z-axis. The starting configuration is set up to avoid initial peptide-peptide interactions. Thus, peptides should be completely surrounded by lipid molecules and distributed on the XY plane separated from each other by a distance greater than the cutoffs of the vdW and coulombic interactions (specified in the file production_310K.mdp). In addition, to avoid a preferential orientation of the first contacts as the peptides approach each other, the helices must be randomly rotated around the Z-axis. These features allow an unbiased exploration of the environment.\nCritical: In the previous steps you have created several files with the “.gro” extension. Although some of them are temporary files or intermediate steps, do not erase them. They can be used in the analysis steps.\nOptional: As explained before, if you visualize the “peptide_array.gro” file with pymol, the structure will be like the one shown in Figure 2[href=https://www.wicell.org#fig2].\nUse the “insane.py” script to create a membrane where this array will be embedded.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1920-Fig3.jpg\nFigure 3. Simulation box",
    "Side (A) and top (B) views of the simulation box (“peptide_array_mem.gro” file) in the starting configuration. Waters are shown as violet beads, lipids as green sticks and backbone beads bonded by orange sticks (side chains and ion beads are not shown for simplicity). XYZ axes are shown in every panel. Water beads are not shown in panel (B). The image was generated using VMD and the script leading to this representation can be found in the repository.\n(C) Pymol (default) visualization of “peptide_array_mem.gro” file. Color scheme used by Pymol may vary with software version and may not correctly represent the different types of beads.\n> insane.py -f peptide_array.gro \\\n      -o peptide_array_mem.gro \\\n      -p topol-insane.top \\\n      -salt 0.15 \\\n      -ring \\\n      -x 12 -y 12 -z 10.5 \\\n      -sol W -rand 0.095 \\\n      -l DLPC:3 -l DOPC:7 \\\n      -u DLPC:3 -u DOPC:7\nNote: Options “-x -y -z” control the dimensions (nm) of the periodic box. The compositions of the lower and upper layers of the membrane are selected with the options “-l” and “-u”. We chose DOPC and DLPC (7:3) to mimic the composition of the experimental membranes used to determine the NMR structure of other transmembrane TNFR domains. For alternative membrane compositions, check that the topologies of the lipids you select are included in the “lipids.itp” file.",
    "Critical: To calculate the dimensions (L) of the periodic box in the X and Y axes, consider that the distance from the peptides in the borders of the array to the nearest peptide in the periodic image has to be no less than the separation you specified in the previous command. So, “L” needs to be equal or greater than “N x d”, where “N“ is the number of copies of the peptides in a row or column of the array and “d” is the distance you specified in the previous command. The dimension in the Z axis is enough to create a layer of water beads that separate the membrane from its periodic image. Then, if you want to create a different array, you have to edit the XY values. For example, if you choose “-nbox 4 4 1 -dist 4 4 0” in the previous command, here you may use “-x 16 -y 16 -z 10.5”.\nOptional: After the previous steps, the initial configuration of the system is composed as shown in the Figures 3[href=https://www.wicell.org#fig3]A and 3B. The script leading to this representation can be found in the repository. If you visualize the “peptide_array_mem.gro” file with pymol, you will see a structure like the one shown in the Figure 3[href=https://www.wicell.org#fig3]C.\nEdit the topology file “.top” generated by “insane.py”. This file may not be consistent with the environment variables and the next steps could be aborted by errors. Open “topol-insane.top” with a plain text editor (for example “gedit” in Linux) and edit as follows.\nOpen the file in gedit\n> gedit topol-insane.top\nRemove the “#include” lines (usually the first one or two lines).\nCopy the following lines at the beginning of the file:\n#include \"martiniff/martini_v2.1.itp\"\n#include \"martiniff/lipids.itp\"\n#include \"martiniff/martini_v2.0_ions.itp\"\n#include \"Protein_A.itp\"\n#ifdef POSRES\n#include \"posre.itp\"\n#endif",
    "Note: Do not exclude the numeral symbol when copying the previous lines. They are not comment symbols. In the GROMACS syntax the comment symbol is “;”).\nYou also need to edit two variables in this file:\nThe internal name of the peptide. This name is defined under the section “[moleculetype]” in the file “Protein_A.itp”. Copy that name.\nThe number of copies of the peptide. In this example we used 9 peptides in the system.\nUnder the section “[ molecules ]” in “topol-insane.top” you will find a first uncommented line with the name and number of proteins. Be sure that the protein name corresponds to the one you copied in “Protein_A.itp” (step 12.d.i) and modify the number of peptides to 9 as follows:\nProtein 1 → Protein_A 9\nGenerate an index file with the atom number of the backbone (BB) particles.\nIn the box below you have an interacting version of the command, where the options are already defined between the flags “<<OPT” and “OPT”.\nCopy the four lines and press “ENTER” to run the script.\nIf you only type the command (i.e., first line except “<<OPT”) the script will ask you to type your options. Then, you have to type the lines 2 and 3 only. You can use this option to have a more GROMACS-like experience.\n> gmx make_ndx -f z_aligned_peptide.gro -o index_BB.ndx <<OPT\naBB\nq\nOPT\nNote: GROMACS has an interactive tool to make indices: “make_ndx”. In the help menu, you can check the examples to learn the syntax and choose your groups of atoms.\nGenerate a position restriction file that will be useful for the preparation steps before the simulation.\nRun the command “genrestr” to generate a position restriction file using the index file generated in the previous step.",
    "The command asks you to choose an option, select the option corresponding to the group you created (the name of the groups can be “BB”; check the output of the previous command “make_ndx”).\n> gmx genrestr -f peptide_array_mem.gro -n index_BB.ndx\nMolecular dynamics simulation\nTiming: days or weeks\nIn this section you will be guided to use the previously generated peptide array in a lipid bilayer for the molecular dynamic simulation. To do so, it is necessary to perform an initial minimization of the system, followed by a position restrained equilibration step and a free equilibration step. Finally, the production step will generate the simulation of the array for 3 microseconds.\nEnergy minimization:\nCreate nested folders for every step to avoid the accumulation of many files in a single folder. In the working directory (“PROT”), create a directory for the minimization and then move there.\n> mkdir minimization\n> cd minimization\nGROMACS requires creating a “.tpr” as input file to run the energy minimization. This is done with the “grompp” preprocessor tool that reads the topology and the coordinates, and writes the atomic description of the system.\nCopy the file “minimization.mdp” from the “mpds” folder from our repository into this directory:\n> cp ../../mdps/minimization.mdp ./\nRun the following command:\n> gmx grompp -f ./minimization.mdp \\\n        -c ../peptide_array_mem.gro \\\n        -r ../peptide_array_mem.gro \\\n        -p ../topol-insane.top\nNote: Most probably, “grompp” will halt before creating the output file because of a warning message. Check the importance of the warning. Solve the problem if necessary or surpass this message adding the option “-maxwarn 1” to “grompp”.\nOnce the “topol.tpr” file has been created, run the minimization with the following command.\n> gmx mdrun -s topol.tpr\nNote: This step can take some minutes to finish.\nEquilibrations:",
    "Perform a position-restrained equilibration (POSRE) using the output configuration from the minimization.\nCreate a new directory inside “minimization” and then move there. Then, copy the file “equilibration_POSRE.mdp” from the “mpds” folder:\n> mkdir POSRE\n> cd POSRE\n> cp ../../../mdps/equilibration_POSRE.mdp ./\nRun the following commands:\n> gmx grompp -f ./equilibration_POSRE.mdp \\\n        -c ../confout.gro \\\n        -r ../confout.gro \\\n        -p ../../topol-insane.top\n> gmx mdrun -s topol.tpr\nNote: This step can take some minutes to finish.\nPerform a free equilibration step. Create the corresponding directory and move there and copy the file “equilibration_FREE.mdp” from the “mdps“ folder:\n> mkdir equil\n> cd equil\n> cp ../../../../mdps/equilibration_FREE.mdp ./\nRun the following commands:\n> gmx grompp -f ./equilibration_FREE.mdp \\\n        -c ../confout.gro \\\n        -r ../confout.gro \\\n        -p ../../../topol-insane.top -maxwarn 4\n> gmx mdrun -s topol.tpr\nNote: This step can take some minutes to finish.\nProduction:\nRecommended: before running the production simulation, check that the system is properly equilibrated. Please refer to the GROMACS user guide (https://manual.gromacs.org/documentation/current/user-guide/index.html[href=https://manual.gromacs.org/documentation/current/user-guide/index.html]) for good practices and tips in this regard. If equilibration steps were successful, we are ready to initiate the production simulation.\nCreate a new directory, move there, and copy the “production_310K.mdp” file from the “mpds” directory. Then, run the “grompp” and “mdrun” tools as follows. Depending on your CPU, this step can take from 1 to 7 days. The procedure is similar to the previous ones and the necessary commands are in the next box.\n> mkdir production\n> cd production\n> cp ../../../../../mdps/production_310K.mdp ./\n# Download ‘production_310K.mdp’ into this directory\n> gmx grompp -f ./production_310K.mdp \\\n        -c ../confout.gro \\\n        -r ../confout.gro \\\n        -p ../../../../topol-insane.top\n> gmx mdrun -s topol.tpr",
    "Optional: You can parallelize the simulation by adding options to “mdrun”. These options strongly depend on the structure of your hardware. We recommend checking the GROMACS user guide (https://manual.GROMACS.org/current/user-guide/index.html[href=https://manual.gromacs.org/current/user-guide/index.html]). If your computer has 4 cores and OpenMPI installed, a usual example could be:\n> gmx mdrun -ntomp 4 -s topol.tpr\nTo observe the simulation use the following command:\n> gmx view -f traj_comp.xtc -s topol.tpr\nOptional: It is possible to visualize the simulation in VMD. Use the “confout.gro” file from the equilibration so you do not need to wait for the simulation to finish. For this use the following command:\n> vmd -f ../confout.gro traj_comp.xtc\nIn the menu “Graphics/Representations” you can create a representation of the BB atoms (type “name BB” in the selected atoms box) and choose “VDW” as the Drawing Methods to observe the BB particles as van der Waals spheres and the rest of the system as points. One initial step may look like Figure 4[href=https://www.wicell.org#fig4].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1920-Fig4.jpg\nFigure 4. Trajectory snap shot\nTop (left) and side (right) views of an early snapshot from the trajectory file \"traj_comp.xtc\" produced with VMD (follow instructions in the repository to reproduce this representation). BB particles are represented as pink spheres. Lipid beads are represented as small spheres of different colors: phosphates in violet, non-polar beads of lipids in green. Water beads are not shown in the top view.\nContact map analysis\nTiming: 1 h",
    "Here we describe the procedure to calculate a matrix of contacts between peptides at the residue level. For every time step analyzed, a contact is considered to be formed when the distance between two backbone beads (BB) of different peptides is equal to or lesser than the distance cutoff. Chemical properties are not explicitly considered to count a contact. This procedure counts how many times along the simulation a BB(i) of every peptide contacts a BB(j) of every other peptide (different from itself). Here, “i” and “j” refer to the number of the residue in the peptide sequence.\nIn detail, for each residue (i) of every peptide (H) it is computed along the simulation time (T) the number of contacts against all the other residues (j) in the remaining peptides (K={1…N}, K≠H). For a particular time step (t), a contact (c) was defined between residues “i” and “j” from two different peptides when their BB are located at XYZ-distance equal to or less than an arbitrary cut-off, as follows:\n   c  i j   H K    ( t )  =  {     1 ,  i f   ‖   r i K   ( t )   −   r j H   ( t )   ‖  ≤  d cutoff        0 ,   i f   ‖   r i K   ( t )   −   r j H   ( t )   ‖  >  d cutoff        \nThus, the number of contacts (C) for every residue (i) against each residue (j) in the remaining (K) helices are computed (Sica and Smulski 2021[href=https://www.wicell.org#bib7]; Smulski et al., 2022[href=https://www.wicell.org#bib9]).\n   C  i j   =  ∑  t =  t 0   T    ∑ j  K ≠ H     c  i j   H K    ( t )",
    "Note: Normally cutoff distances between 0.8 and 1 nm provide a good representation of closely interacting residues. These values are comparable to the cut off distances used for computing van der Waals (0.9 nm) and Coulombic (1.2 nm) interactions (default values in the parametrization of the Martini force field - check these values in the file “production_310K.mdp”). With values closer to the bead diameter (0.47 nm for BB atoms) contact detection tends to zero. With values greater than 1.0 nm the algorithm increases the counts of contacts where BB atoms are not in direct interaction or have a third BB atom in the middle.\nIn this procedure, the contact detection along the simulation is performed by the GROMACS tool “select”. You have to provide this tool with the number of the BB particle (i) and the number of all other BB particles of the rest of the peptides to check for possible contacts. This procedure is repeated for every BB particle. The number of particles (i) and particles (j) has to be listed in two groups in an index file (the syntax of this file is specific to GROMACS). In the procedure, you have to create one index file per particle (i). In our example, every peptide has 36 BB particles. Thus, for a system with 9 peptides you have to create 36 x (9 - 1) = 288 index files. GROMACS has a tool to create this type of files, but we use a Rscript to automate this step. Then we used the GROMACS tool “select” to compute the contacts. Finally, we process the output of the previous step with another Rscript to calculate the contact matrix. The matrix has dimension RxR, where (R) is the number of amino acids in the peptide (36 in this example).",
    "Move to the first working directory (“PROT”, in this example) and copy the folder “contact_map” downloaded from the repository and move there. If you are in the folder “PROT”, use these commands:\n> cp -r ../contact_maps/ ./\n> cd ./contact_maps/\nCreate two new directories, one for the index files (“/indices”) and another for the output of the “select” command (“/output_contacts”).\n> mkdir ./indices\n> mkdir ./ouput_contacts\nNote: The next steps generate a great number of temporary files.\nCreate the index files. First, copy the atom number of the BB particles from one (the first) peptide to a file named “one_peptide_BB_atoms” and atom number of the BB particles from all peptides to a file named “all_peptides_BB_atoms”. We provide the next bash command to extract these numbers from two “.gro” files, which in our example are one step before in the directory tree.\n# Assuming the correct path is ../. Change if necessary\n> grep BB ../z_aligned_peptide.gro  | awk '{print $3}' >\n./indices/one_peptide_BB_atoms\n> grep BB ../peptide_array_mem.gro  | awk '{print $3}' >\n./indices/all_peptides_BB_atoms\nCritical: Check the output to be sure the numbers are correct and no other line was copied.\nCreate a series of “.ndx” GROMACS index files. This step is performed with a Rscript named “indices.R” that you will find in the current directory.\nOpen “indices.R” (you can use a text editor or RStudio) and edit the variables indicated in the Rscript as you need.\nThen, you can run the Rscript in RStudio or directly in the terminal with the next command.\n> Rscript ./indices.R",
    "Next, using the GROMACS command “select”, compute the contacts between the BB particle in “[ group1 ]” and all other BB particles in “[ group2 ]”, as defined in every “.ndx” file generated in the previous step (open any of the index files to verify the syntax). The output files of this step are saved in “./ouput_contacts”. The GROMACS “select” command is executed with a bash script.\nUsing a text editor, open the script “contacts.sh” located in this folder, edit the variables as you need: cutoff to filter interactions by distance, name of directories, etc.\nAfter editing your options, grant execution permission and run the script.\n> chmod +x ./contacts.sh\n> ./contacts.sh\nNote: You can check “gmx select -h” for better understanding the options that we have selected and which other options you could use (i.e., initial and final time of analysis). For example, we used “-pbc” to detect contacts through periodic boundaries and “-dt 100” to control the time step of our analysis.\nUse “matrix.R” to calculate how many times the particle “BB(i)” of any peptide contacted the particles “BB(j)” of the remaining peptides.\nOpen this R script and edit your options as indicated (directories, number of atoms per peptide).\nRun the script in RStudio or in the terminal with the next command. The script will show you the number of BB particles per peptide and in the whole system, and will output the matrix in the shell. Troubleshooting 2[href=https://www.wicell.org#sec6.3].\n> Rscript matrix.R\nIf the script runs successfully two files are created: “ContactMat.RDS” and “ContactMat.csv”. These files contain the same matrix of raw number of contacts in two different formats. Additionally, a figure “Contact_map.png” will be created with the normalized contact map in the format we used in our work (Figure 5[href=https://www.wicell.org#fig5]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1920-Fig5.jpg\nFigure 5. Contact matrix",
    "“Contact_map.png” plot created with the normalized contact map for TACI. Each dot represents the normalized amount of contacts (Cij) between BB atoms of residues “i” (x axis) and “j” (y axis). To help visualization, the normalized value of Cij is represented by color (from yellow (high) to violet (low)) and size scales. Numbers correspond to each amino acid from the N-terminal region (1) to the c-terminal region (36).\nNote: In some cases, it is useful to exclude the residues in the aqueous phase from the matrix graph. The script also produces the plot in “Contact_map_buried_residues.png” showing only the residues buried in the membrane.\nRadial and angular map analysis\nTiming: 1 h\nIn this section we are going to analyze the structural organization of the contacts between peptides. We are going to build maps of radial distribution and angle orientation between peptides in the membrane XY-plane. In this analysis, we first calculate a centroid per peptide at the level of a selected residue. Then, every centroid in the array is considered a center of coordinates, and the position and orientation of the surrounding peptides along the simulation time is computed (Sica and Smulski 2021[href=https://www.wicell.org#bib7]; Smulski et al., 2022[href=https://www.wicell.org#bib9]).",
    "To compute a centroid (C), we define a central residue and then take the coordinates of its BB particle (i) and of the BB particles of the previous and next residue in the sequence (C(i) =[r(i-1)+r(i)+r(i+1)]/3, where r is the XYZ-coordinate of the atom). Then, the unit bisection vector is computed between the central BB particle (i) and adjacent BB particles (i±1). Finally, the centroid is considered the origin of the reference frame with its orientation vector aligned in the X-axis and the position and orientation of the centroids of the remaining peptides (8 in this example) are computed. This procedure is repeated for every peptide along a certain simulation time. The scatter plot of the accumulated XY-centroids positions and orientations are transformed to a density map with “ggplot” implemented in R.\nIn our analysis we are going to compute the next variables, which are illustrated in Figure 6[href=https://www.wicell.org#fig6]:\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1920-Fig6.jpg\nFigure 6. System reference\nScheme of the reference system used to calculate the relative positions and orientation of the helices when each helix is placed at the center (X=0, Y=0) of a virtual quadrant.\nvdx and vdy: Correspond to the X/Y location of the centroid of the peptide hi with respect to the centroid of the reference peptide (href).\nAlpha angle: Corresponds to the location of the centroid of the peptide hi with respect to the centroid of the reference peptide (href).\nBeta angle: Corresponds to the orientation of the peptide hi with respect to the orientation of the reference peptide (href).\nReturn to the first directory (“PROT” in this example) and copy the folder “radial_distribution” downloaded from the repository and move there. If you are in the folder “PROT”, use these commands:\n> cp -r ../radial_distribution/ ./\n> cd ./radial_distribution/\nGrant execution permission to the bash script “extract_coordinates.sh”.",
    "> chmod +x extract_coordinates.sh\nThe script performs the following three steps:\nFirst, the script creates an index file with the number of the BB particles necessary for computing the centroids of every peptide.\nSecond, using this index and the GROMACS tool “trjconv”, the script creates a trajectory in “.gro” format for these atoms.\nFinally, the script creates three different files with the values of the coordinates, box dimension and timestamp extracted from the trajectory file.\nEdit the script “extract_coordinates.sh”. In this example you only have to edit the paths to directories and files. If you are using a peptide different from the example, you will also need to modify the following variables:\nThe variable “FIRST_PEPTIDE_RESIDUE_UNIPROT” corresponds to the Uniprot numeration of the first residue in the input PDB file. In our case this number is 156 (serine) in accordance with the Uniprot sequence O14836.\nThe variable “CENTER_RESIDUE_UNIPROT” corresponds to the residue selected for the centroids calculation, according to Uniprot. In this example we used 174 (valine).\nOnce edited, grant execution permission and run the script in the terminal:\n> chmod +x extract_coordinates.sh\n> ./extract_coordinates.sh\nUse the Rscript “radial_distribution.R” present in this directory to perform the calculations of vdx, vdy, alpha and beta angles. Open this file and edit the variables. You can also follow the comments in the code to understand the calculations.\nRun this Rscript in RStudio or in a terminal with the next command.\n> Rscript ./radial_distribution.R\nThe script creates two files (“xyR_residueX.csv” and “xyR_residueX.RDS”) with identical data in different formats. The files contain the following data in columns:\nTime: time of the simulation.\na,b: identification number of the peptides a and b interacting at distance less than cutoff.\npeptide_a,peptide_b: peptide identification in letters code.\ndistance: geometric distance between centroids.",
    "vdx,vdy: (x,y) location of peptide b with respect to peptide a.\nalpha: alpha angle in degrees (-180 to 180) of the location of peptide b with respect to peptide a.\nbeta: angle between orientation vectors of peptide b with respect to peptide a.\nThe script also creates two graphs in “.png” format, as shown in Figure 7[href=https://www.wicell.org#fig7].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1920-Fig7.jpg\nFigure 7. Data analysis\nGraphs generated by “radial_distribution.R”: “Radial_map_residue174.png” and “Angular_map_residue174.png”. The center of the reference corresponds to V174.\n“Radial_map_residueXXX.png”: a density map of vdx vs. vdy for residue XXX accumulated along every interacting pair of peptides (i,j). The scatter plot is shown in the background.\n“Angular_map_residueXXX.png”: a density map of alpha angle vs. beta angle for residue XXX accumulated along every interacting pair of peptides (i,j). The scatter plot is shown in the background."
  ],
  "subjectAreas": [
    "Structural Biology",
    "Protein Biochemistry",
    "Bioinformatics",
    "Cell Membrane"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}