{
  "id": 7759,
  "origin_website": "Bio",
  "title": "A Cartographic Tool to Predict Disease Risk-associated Pseudo-Dynamic Networks from Tissue-specific Gene Expression",
  "procedures": [
    "To predict disease risk-associated pseudo-dynamic networks, we need the following inputs from each subject: predicted disease risk (named “agent” below), one covariate of interest (e.g., smoking), and pre-processed gene expression data. The detailed procedures of how to generate the agent, train the network model, and visualize the results are listed below.All the programs, demo data for illustration, and brief tutorials for the following procedures can be found in our GitHub repository (https://chencxxy28.github.io/DRDNetPro/articles/NAME-OF-VIGNETTE.html[href=https://chencxxy28.github.io/DRDNetPro/articles/NAME-OF-VIGNETTE.html]). Predict the agent (Tutorial 1 in the GitHub repository)  Prepare the data for training prediction values of the agentBefore predicting the agent, users need to prepare the data for model training. The data needs to be a matrix, including the outcome in the first column and all potential predictors in the remaining columns. Do not include the intercept as one column. The outcome in this protocol has values of 0 and 1, corresponding to healthy and diseased subjects, respectively. More complicated outcomes with multiple categories are not considered in the current bio-protocol, as we regard this as future work. One remedy for the case of multiple categories are to categorize the outcome into binaries, which is also often applied in practice. All values in the matrix should be numeric. The missing data is allowed in this training process, though it is always recommended to have complete data as an input.For demonstration, we have prepared a toy data example in this tutorial, which can be accessed from https://chencxxy28.github.io/DRDNetPro/articles/web/data.html[href=https://chencxxy28.github.io/DRDNetPro/articles/web/data.html]. See details in the Data analysis section below.Select a training methodThere is no unique way to predict the agent. Either statistical regression models or machine learning algorithms can be applied. In our program, we allow the users to specify the following commonly used methods: conventional logistic regression, random forest, and XGBoost.",
    "Logistic regression—This is the most conventional statistical tool to predict disease risk, which will lead to a probability-scaled risk. Run the function “glm()” in R to fit the training model, and then run “fitted()” to extract the predicted agent.Random forest—This is a machine learning method with an ensemble of decision trees. It builds and combines multiple decision trees to produce more accurate predictions. It is a non-linear classification algorithm. There are several R packages available for implementing random forest. We provide demo codes based on the package “ranger”. The data required for “ranger” should be in a matrix form, where the outcome should be a factor, to enable running classification trees. After preparing the data, run the function “ranger()” to train the model, and run the function “predict()” to extract the predicted agent.XGBoost—This is another machine learning method with an efficient implementation of the gradient boosting framework. It provides built-in k-fold cross-validation (CV) Stochastic Gradient Boosting Machines, with column and row sampling (per split and per tree) for better generalization. We provide demo codes based on the package “XGBoost”. A specific type of input data is required by “XGBoost”, where the response and predictors should be separately stored. The series codes to prepare the required data are provided in this tutorial (see details in Tutorial 1). After preparing the data, run the function “xgb.cv()” to get an initial prediction model. Then, run the function “dplyr::summarise()” to extract the tuned parameter, i.e., the number of trees. Finally, run the function “xgboost()” to train the data, and “predict()” to extract the predicted agent.Predict and evaluate the agentPrepare the training and testing data—When the agent model is fitted, it is better to check its prediction performance.",
    "Note that the pseudo-dynamic network is sensitive to the values of agent, and the agent with good prediction for the disease risk is preferred. To evaluate its predictive performance, we consider the metric of the area under the receiver operating characteristic curve (AUC-ROC). To avoid the overfitting issue, we need a testing data set. For illustration purposes, we artificially created training and testing data by randomly splitting the original data, with no overlap between the two constructed data sets. The training data is used for data fitting, whereas the testing data is used for prediction evaluation. Run the function “sample()” to generate these two datasets. In real applications, another way to validate prediction performance is to use identical but independently sampled data from an external source as the testing set.Generate the AUC-ROC plot—After fitting the model based on the training data, by running the function “glm()”, extract the predicted agent based on the testing data, by running the function “predict()”. Run the function “roc” to generate the plot. A larger AUC-ROC value indicates a better prediction model. Train the network model (Tutorial 2 in the GitHub repository)  Prepare the data for training the networkFiltering and transformation—To construct the gene–gene network, the users need to preprocess the gene expression data, by normalizing, excluding low-expressed genes, and, if needed, transforming to relieve skewness and reduce variance.Screening—To learn the disease risk-associated network, genes showing changing expression patterns as the agent changes should be included, which is different from association-based network. Two selection procedures can be considered:To test differentially expressed genes, run the function “test_screen()” to locate genes showing the difference between disease groups, after adjusting for covariates and applying the Hochberg multiple test correction (adjusted P-value <0.05).",
    "To screen the genes, run the function “spearman_screen()” to find genes showing high associations between expression and the predicted agent. Pick the top (e.g., top 40) most correlated genes. Perform separate screening to check if more than one homogeneous group is considered. Determine the final genes by combining the two selection procedures.Optional screening can be done based on prior biological knowledge (i.e., the GO enrichment analysis).Train the varying coefficient modelRefine the data—Before constructing the network, each selected gene should be fitted by the varying coefficient model. This model estimates dynamic features of coefficients in terms of a certain agent by Kernel/Spline regression, which fits the context of reconstructing pseudo-dynamic networks well. We refer readers to Chen et al. (2022) for more technical details. When two subjects have the same agent value, it means the expression data from these two are not informative. Run the R codes in this tutorial to refine the data, by deleting the data with agents too close to each other.Fit the model—After refining the data, run the function “vc.fit()” to fit the varying coefficient model with a covariate (e.g., smoking).Check the fitted curves—Run the function “plot()” and “lines()” to check how well the data is fitted. The users can also use the package “ggplot2” for visualization.Generate a base matrix for the network modelThe base matrix is the key component for the network to learn in a non-parametric manner. Run the function “base.construct()” to construct the base matrix for the varying intercept and base matrices for the varying coefficient of the covariate (e.g., smoking). The default knots are lower quartile and upper quartile with degree =3, which is related to the cubic spline.",
    "The output—A list of four matrices based on varying intercepts (X_big), varying covariate effects (X_big_cov), varying intercepts with a column containing ones (X_big_int), and varying covariates with a column containing ones (X_big_int_cov).Train the networkAfter constructing the base matrices, the users should run the function “network.learn()” to train the network structure. This function requires the input of the design matrix, the outcome, and the group information, as well as the method to select the tuning parameters.The design matrix—Extract the output results from the previous step of construction of base matrices, which includesdata_observe: the gene expression matrix.x_cov: the vector including the numerical values of the covariate of interest (e.g., smoking: 0 and 1).X_big_int: the matrix based on varying intercepts, with a column containing ones.X_big_int_cov: the matrix based on varying coefficients, with a column containing ones.Agent: the predicted disease risk obtained from Tutorial 1.Determine the tuning parameters—Multiple methods are available to tune the hyperparameters, including 5-fold CV (CV5), 10-fold CV (CV10), Akaike information criterion (AIC), Bayesian information criterion (BIC), and empirical BIC (EBIC). Use the argument “cv” in the function “network.learn()” to specify the preferred method.Output from the network learning—This output includes information on node size, interaction, and covariate effect. All of them will be used in the next step for visualizing the results.Node size information: self-node size for baseline, self-node size for the covariate effect, overall self-node size.Interaction information: gene interaction effects from the baseline, gene interaction effects from the covariate, overall gene interaction effects.Covariate effect information: covariate effect, trend effect for baseline, trend effect from the covariate. Visualize the results (Tutorial 3 in the GitHub repository)  Extract the results from the trained network modelRead the output data from the network learning in Tutorial 2, which includes network.output, data.list.t3, and gene.names.",
    "Visualize the networks with a given range of agent valuesBaseline networks—To visualize the pseudo-dynamic network given an agent (disease risk) value, one useful tool is the package “igraph”. It allows for a self-designed network structure. More details about “igraph” can be found in the tutorial (https://igraph.org/r/[href=https://igraph.org/r/]). Run the demo code to visualize the recovered baseline network (e.g., the non-smoking group), where the agent is changing from no risk to high risk.Covariate-effect networks—Run the demo code for visualizing three recovered covariate-effect (e.g., effect caused by smoking) networks, where the agent is changing from no risk to low/moderate/high risk (data-driven or subjective cut-points selected for risk levels).Visualize the interaction behaviors for a given gene over the spectrum of the agentSelect one specific gene of interest, and run the demo code to plot the trend effect and interaction effects over the whole spectrum of the agent."
  ],
  "subjectAreas": [
    "Systems Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}