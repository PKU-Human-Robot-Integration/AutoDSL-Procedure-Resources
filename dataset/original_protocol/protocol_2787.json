{
  "id": 2946,
  "origin_website": "Cell",
  "title": "Protocol for comparing gene-level selection on coding mutations between two groups of samples with Coselens",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nHere we describe how to conduct an analysis of conditional selection with Coselens. To illustrate how this works in practice, we use data from a recent study that investigated epistasis between driver mutations in cancer.1[href=https://www.wicell.org#bib1] The key idea is that epistatic interactions can be detected by looking for conditional selection on driver mutations. More precisely, epistasis implies that the effect of driver mutations in one gene depends on the presence or absence of driver mutations in another gene. Because the intensity of selection on a mutation is proportional to its fitness effect, epistasis makes selection for driver mutations in one gene conditional on the presence (or absence) of driver mutations in the other gene. Following this rationale, to identify genes that participate in epistatic interactions with the tumor suppressor gene APC, the authors of the study collected somatic mutation data from a large number of colorectal tumors and classified the tumors into two groups, depending on whether they harbored potential driver mutations in APC or not. Then, epistatic partners were identified with Coselens as genes showing evidence of differential selection between the two groups of tumors.\nRunning Coselens\nTiming: 5–10 min (more for datasets with >100K mutations)\nTo run Coselens, all the relevant data must be first loaded in R. Then, Coselens is executed with options set according to the origin of the data and the purpose of the analysis. We describe the most relevant options and their usage below.\nLoad the Coselens package (troubleshooting[href=https://www.wicell.org#troubleshooting] 1):\n>library(\"coselens\")\nLoad mutation tables as data frames.\nIdentify the paths to each mutation table:\n>group1_file = \"/path/to/table_file_1.csv\"\n>group2_file = \"/path/to/table_file_2.csv\"\nNote: Replace /path/to/table_file_1.csv and /path/to/table_file_2.csv by the actual location of the files, keeping the double quotes.\nLoad mutation tables. Comma-delimited files can be loaded with the following commands:",
    ">group1 = read.csv(group1_file, stringsAsFactors = FALSE)\n>group2 = read.csv(group2_file, stringsAsFactors = FALSE)\nNote: To load tab-delimited files, add the argument sep = \"\\t\" when calling the function read.csv().\nNote: Coselens includes some example datasets that can be directly loaded and used for testing. To load the example data, run the following lines of code and skip step 3:\n>data(\"group1\", package = \"coselens\") # mutations from colorectal tumors with drivers in APC\n>data(\"group2\", package = \"coselens\") # mutations from colorectal tumors without drivers in APC\n>data(\"cancer_genes\", package = \"coselens\") # list of cancer genes\n>sequenced_genes = cancer_genes # list of sequenced genes (same as list of cancer genes)\nAfter running step 2, there will be two data frames in the R workspace, named group1 and group2, that contain the mutations found in each group of samples. You can inspect the content of these data frames by running the R command head(). For example, to show the first lines of group1, run\n>head(group1)\nNote: If the file was correctly loaded, the output should coincide with the first lines of the original file.\nLoad the list of sequenced genes (for targeted sequencing data) and genes to include in the results report (optional).\n>sequenced_genes_file = \"/path/to/sequenced_genes_file.csv\"\n>sequenced_genes = read.csv(sequenced_genes_file, stringsAsFactors = FALSE, header=FALSE)\n>unlist(as.vector(sequenced_genes))\n>cancer_genes_file = \"/path/to/cancer_genes_file.csv\"\n>cancer_genes = read.csv(cancer_genes_file, stringsAsFactors = FALSE, header=FALSE)\n>unlist(as.vector(cancer_genes))\nNote: Replace /path/to/sequenced_genes_file.csv and /path/to/cancer_genes_file.csv by the actual locations of the files with the list of sequenced genes and the genes of interest, respectively, keeping the double quotes. Use header=TRUE if the file has headers.",
    "Note: In most cases involving targeted sequencing data, it makes sense to use the same list to indicate which genes were sequenced and which should be included in the results report. However, there are some scenarios in which using different lists could be desirable (for example, if reusing targeted sequencing data that covered genes that are not relevant to the current study).\nNote: After running step 3, the data frame cancer_genes will contain the list of genes of interest (that is, those that should be included in the results report), and sequenced_genes will contain the list of genes covered by targeted sequencing.\nRun Coselens and filter the results to only include a subset of genes of interest (for example, genes involved in cancer initiation and progression).\nThe following command would apply to whole-exome sequencing data mapped to the GRCh37/hg19 assembly of the human reference genome.\n>coselens_out = coselens(group1, group2, subset.genes.by = cancer_genes)\nNote: When using the subset.genes.by option, the Benjamini-Hochberg correction for false discovery rate is only applied to the filtered gene set. To show the results for all genes in the reference database (around 20k for human data) and apply the false discovery rate correction to the whole gene set, omit the option subset.genes.by = cancer_genes.\nTo analyze data from targeted sequencing, use the optional parameter sequenced.genes to indicate the list of sequenced genes:\n>coselens_out = coselens(group1, group2, sequenced.genes = sequenced_genes, subset.genes.by = cancer_genes)\nTo work with mutation data from other species or mapped to other assemblies of the human genome, use the optional parameter refdb to indicate the file that contains the alternative reference database.\n>coselens_out = coselens(group1, group2, refdb = \"/path/to/ref_db_file.rda\", cv = NULL)",
    "Note: By default, the covariates used by Coselens (more precisely, the dndscv function underneath Coselens) for statistical inference are specific to the GRCh37/hg19 assembly of the human genome. If working with other species or assemblies, the option cv = NULL should be included to instruct Coselens to not use covariates. Not using covariates can reduce the performance of the method, especially in datasets with large unexplained variation in the mutation rates across genes. Alternatively, if covariates are available for the species of interest, they can be used by setting cv = covariates, where covariates is a data frame with gene names as rows and one column per covariate. See troubleshooting 3[href=https://www.wicell.org#sec6.5] for further information on how to generate alternative covariate files.\nNote: During execution, the program will display several messages indicating its progress. Pay special attention to the values of θ (theta) in the regression models for substitutions and indels. Low values of θ, particularly θ < 1, indicate that there is large unexplained variation in the mutation density across genes so that the model used by Coselens might not be suitable for this dataset. For more information about possible warnings and errors produced in this step, see troubleshooting 2–8[href=https://www.wicell.org#sec6.3].\nVisualization and interpretation of the results\nTiming: 5 min\nCoselens returns several tables with effect sizes and p-values for differential selection in each gene of the reference genome. If a list of genes is provided through the subset.genes.by option, the results and Benjamini-Hochberg corrections are restricted to those genes. This section explains how to visualize, save, and filter the results based on statistical significance. The columns of the results table are described in the Expected Outcomes[href=https://www.wicell.org#expected-outcomes] section.\nPre-view and save the results of the analysis (gene-wise conditional selection based on coding substitutions).",
    "Pre-view the first rows of the results table, sorted by false discovery rate:\n>head(coselens_out$substitutions[order(coselens_out$substitutions$qval),])\nNote: Figure 2[href=https://www.wicell.org#fig2] shows, as an example, a fragment of the output table generated by Coselens. The contents of the table are described in detail in the Expected Outcomes[href=https://www.wicell.org#expected-outcomes] section.\nNote: Replace coselens_out$substituions by coselens_out$indels to explore differential selection on indels (see also the notes below step 6).\nSave the results table as a comma-delimited file:\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2485-Fig2.jpg\nFigure 2. Example of an output table generated by Coselens. The contents of the table are described in detail in the Expected Outcomes[href=https://www.wicell.org#expected-outcomes] section.\n>write.table(coselens_out$substitutions, \"/path/to/output_file.csv\", sep = \",\", quote = FALSE, row.names = FALSE)\nNote: Replace /path/to/output_file.csv by the location where the file should be saved, keeping the double quotes. To save as a tab-delimited file, replace sep=\",\" with sep=\"\\t\".\nFilter genes subject to statistically significant conditional selection on driver substitutions at a 5% false discovery rate:\n>coselens_out$substitutions[which(coselens_out$substitutions$qval < 0.05),]\nNote: To filter results based on other criteria, replace qval by the name of the desired column (for example, pval for p-values) and 0.05 by the significance level.\nOptional: Coselens also looks for differential selection on indels and registers the separate contributions of missense and truncating (nonsense and essential splice site) substitutions to the total number of driver substitutions. Result tables for indels, missense substitutions, and truncating substitutions can be found in coselens_out$indels, coselens_out$missense_sub, and coselens_out$truncating_sub, respectively. Coselens also returns the results of a joint analysis of single-nucleotide substitutions and indels in the table coselens_out$overall_mut. In the latter case, p-values are obtained using Fisher’s formula for aggregated probabilities (troubleshooting 9[href=https://www.wicell.org#troubleshooting]). To pre-view, save, and filter these tables, repeat steps 5 and 6 and replace coselens_out$substitutios by the name of the table of interest.",
    "Note: Coselens uses different statistical frameworks to infer the number of driver substitutions and indels. The null model for substitutions is obtained by fitting the number of observed synonymous substitutions to a 192-rate model with gamma-distributed across-gene variability and genomic covariates. The null model for indels is based on the number of indels found in coding regions that do not belong to the set of genes of interest, accounting for gene length and genomic covariates. Therefore, any indel in a gene that does not belong to the set of genes of interest is considered neutral. In practice, these different approaches imply that the sensitivity of driver inference is often much higher for substitutions than for indels. As a result, caution must be taken when comparing results obtained for substitutions and indels.\nNote: Aggregated p-values calculated using Fisher’s formula, such as those provided for the combination of substitutions and indels in the table coselens_out$overall_mut, can be overly conservative if the tests that are being combined suffer from low sensitivity. In our experience with cancer somatic mutation data, the indel test (coselens_out$indels) only attains good sensitivity if the sample size is large (>100 samples) and indels are frequent. Otherwise, the low sensitivity of the indel test can result in non-significant p-values when jointly analyzing substitutions and indels (coselens_out$overall_mut), despite the presence of substantial differential selection on substitutions (troubleshooting 9[href=https://www.wicell.org#sec6.17]). Thus, we recommend using the table coselens_out$substitutions to assess the significance of differential selection on substitutions, while restricting coselens_out$indels and coselens_out$overall_mut to datasets with large sample sizes and genes in which indels are the main subject of selection.",
    "Optional: Coselens returns coselens_out$dndscv, a list of objects with the complete output of (non-conditional) selection analyses separately run on each group of samples, as provided by the dndscv package. A possible application of these objects is to compare mutational signatures between groups, which can be done by using the maximum likelihood estimates of the mutation models found in coselens_out$dndscv$dndscv_group1$mle_submodel and coselens_out$dndscv$dndscv_group2$mle_submodel. For more detail on the structure and information contained in these objects, we refer the reader to the documentation of the dndscv package (https://github.com/im3sanger/dndscv[href=https://github.com/im3sanger/dndscv])."
  ],
  "subjectAreas": [
    "Evolutionary Biology",
    "Genomics",
    "Bioinformatics",
    "Cancer"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}