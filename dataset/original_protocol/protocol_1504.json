{
  "id": 1609,
  "origin_website": "Cell",
  "title": "Quantifying spatial position in a branched structure in immunostained mouse tissue sections",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nStep 1–2: Prepare tissue sections from mouse organs\nTiming: 2 days\nThis step prepares tissue sections for the immunostaining protocol. For our exemplary data we prepared E14.5 embryonic pancreas from the mouse, but the protocol can be used for other tissues and ages depending on the biological question addressed, as long as a clear branching structure is evident, and cells/nuclei can be segmented.\nNote: For the purpose of minimizing biological variation caused by developmental differences, it is important that dissection is always carried out at the same time of day (i.e., at noon), and that each embryo is examined with regard to normal development and embryonic age (see step 1e). For younger embryos somites can be counted to more accurately stage embryos. Consult (Kaufman, 1992[href=https://www.wicell.org#bib5]) for more information on staging.\nNote: For the purpose of statistical analysis of biological variation between littermates, it is advisable to dissect and analyze at least 3–4 embryos per pregnant female. In our experience there is some variation in cell differentiation between litters (this can however be minimized by careful staging of embryos as described above). If analyzing the effect of a treatment or a genetic perturbation, it is therefore important to test whether a difference is due to litter variation or the perturbation.\nIsolate your organ of interest from embryos\nEuthanize the pregnant female by cervical dislocation\nDissect the uterus containing the embryos from the pregnant female\nMove embryos to ice-cold sterile 1× PBS in a Petri dish stored on wet ice\nDissect the embryos one by one from the uterus and move to a clean Petri dish containing ice-cold sterile 1× PBS\nCheck the developmental age of the embryo by careful examination of the front and rear paw characteristics consulting (Kaufman, 1992[href=https://www.wicell.org#bib5])",
    "Note: Some variation of embryo development (−0.5 days) may occur within a litter, and we routinely exclude embryos in which the developmental stage does not match the gestational stage\nUnder a stereoscope, dissect your organ of interest from the embryos using #1 Dumont forceps or similar\nTransfer the tissue to 4% formaldehyde in 1× PBS in a 12 well plate and fix at 20–22°for 1–24 h depending on the size of the tissue.\nNote: Although adequate fixation is required for good cytological preservation, over-fixation can block or prevent antibodies from binding to the protein epitope (Wang and Matise, 2013[href=https://www.wicell.org#bib15]) . We routinely fix E14.5 embryonic pancreas for 16–18 h. The reaction of formaldehyde depends on the temperature, and penetration of tissue by formaldehyde is a function of the square root of the time of exposure (Fox et al., 1985[href=https://www.wicell.org#bib2]). We recommend consulting (Fox et al., 1985[href=https://www.wicell.org#bib2]) to determine the optimal fixation time.\nCryoprotect the tissue by transferring to 30% sucrose in 1× PBS solution at 4°C until the tissue falls to the bottom of the well (usually within 3–16 h depending on the size).\nInfiltrate tissue with OCT by incubating in 100% OCT for 1 h at 4°C\nEmbed tissue into blocks as follows:\nLabel plastic mold\nPlace the plastic mold onto a piece of dry ice, adding enough OCT to cover bottom\nWait for the bottom to freeze\nPlace the tissue in the middle of the block and add OCT to cover. Be careful not to make any bubbles in the OCT.\nWhen all of the OCT is white, store in a sealed plastic bag at –80°C immediately.\nPause point: If needed, frozen tissue blocks can be stored at –80°C indefinitely\nSection tissue on a cryostat\nSection tissue on a cryostat following manufacturer's instructions",
    "Section at 6 μm and place 2–3 sections per slide depending on the size\nNote: Sections should stay within the boundaries of the + signs on the slide and should not overlap.\nMount tissue sections on labeled and numbered Superfrost PLUS glass slides\nStore at –80°C\nPause point: if needed, frozen sections can be stored at –80°C for 2–3 years\nStep 3–8: Immunostain tissue sections\nTiming: 2 days\nThis step stains the tissue in preparation for imaging and image quantification. It has been optimized for embryonic mouse pancreatic tissue fixed in 4% paraformaldehyde and prepared as frozen sections as described in the previous step but can also be used for other embryonic organs.\nCritical: After step 4c the tissue should always be kept moist or submerged. Any drying during antibody incubation will increase the antibody concentration and drying out at all other steps will increase nonspecific antibody binding and therefore background fluorescence. See problem 1[href=https://www.wicell.org#sec6.1]: Excessive background fluorescence\nAlternatives: Paraffin sections can be used instead of frozen sections. In that case, the sections should be deparaffinized and rehydrated: Incubate for 15 min in Xylene to deparaffinize and rehydrate in a descending alcohol series: 100% ethanol for 2 times 3 min, 95% ethanol for 3 min, 70% ethanol for 3 min, 50% ethanol for 3 min. After rehydration the slides are washed in running tap water and staining can proceed from step 4c below.\nSelect a number of slides containing tissue that adequately represents the whole 3-dimensional organ.",
    "Note: Exclude any sections not showing the branching structure (typically, these are at the extreme ends of the tissue). For a single E14.5 pancreas we typically get 200 6 μm sections, and stain every 30th section (excluding the extreme ends), giving a total of 4–6 sections/pancreas. Include sufficient individual biological replicates to be able to perform statistical analysis (3–5 biological replicates of each experimental condition) and have enough samples for controls (see Table 1[href=https://www.wicell.org#tbl1]).\ntable:files/protocols_protocol_1046_2.csv\nPrepare slides for antibody incubation\nAlign 3–20 slides in a slide holder for staining. (See Figure 2[href=https://www.wicell.org#fig2]). Always include at least one slide as a negative control and one as secondary antibody only control (see Table 1[href=https://www.wicell.org#tbl1] below for more information on controls).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1046-Fig2.jpg\nFigure 2. Methods and equipment\nSlide holder for washing steps, PAP pen and humidified chamber with numbered slides inside.\nDry sections in an oven at 37°C for 20 min\nWash 3 times in 1× PBS for 5 min each\nOptional: Antigen retrieval\nRemove 1× PBS and leave in Citric acid antigen retrieval buffer for 1 h at 37°C\nWash 3 times in 1× PBS for 5 min each\nNote: Antigen retrieval is necessary for unmasking of some but not all antigens prior to primary antibody incubation. Detection of some antigens may even suffer from antigen retrieval. For our antibody panel, antigen retrieval by microwave treatment in citrate buffer pH6 (Shi et al., 1993[href=https://www.wicell.org#bib13]) is necessary for detection of SOX9, while P120CTN detection suffers. We therefore used a milder treatment with incubation in citrate buffer pH 6 without boiling in the optional steps above.\nWorking one slide at a time to reduce drying:\nPlace slides flat in a humidified chamber\nOutline tissue section with a hydrophobic PAP pen (See Figure 2[href=https://www.wicell.org#fig2])\nAdd enough blocking buffer to each slide to cover tissue",
    "Incubate slides in blocking buffer for 60–120 min at 20°C–22°C\nIn the meantime, prepare antibody dilutions (see Table 2[href=https://www.wicell.org#tbl2] for an example):\ntable:files/protocols_protocol_1046_3.csv\nDilute primary antibodies for one or two antigens expressed in your cells of interest (here: SOX9 and Carboxypeptidase 1 (CPA1)), and for a marker visualizing the general shape of the organ (here: P120CTN) in blocking buffer.\nCritical: Primary antibody concentration has to be carefully titrated for specific tissues to avoid non-specific binding. See problem 1[href=https://www.wicell.org#sec6.1]: Excessive background fluorescence\nNote: Prepare enough primary antibody dilution to stain all your samples, allowing 100 μl per sample. Note that extra diluted antibody should be made to account for pipetting error (at least 10% extra volume).\nPrimary antibody incubation\nWorking one slide at a time to reduce drying:\nRemove blocking buffer with a micropipette\nAdd enough antibody solution (typically 100–200 μL) to each slide to cover tissue completely.\nLeave at least two sections with only the blocking buffer on, to serve as negative and secondary antibody only controls (see Table 1[href=https://www.wicell.org#tbl1]).\nLeave for 16–20 h at 20°C–22°C in the humidified chamber (See Figure 2[href=https://www.wicell.org#fig2])\nNext morning: Prepare secondary antibody solution (See Table 3[href=https://www.wicell.org#tbl3] for an example)\ntable:files/protocols_protocol_1046_4.csv\nUse secondary antibodies against the species in which the primary antibodies are produced.\nCritical: Secondary antibodies produced in the same species (i.e., Donkey) are preferable to avoid cross-reaction. For our test data, we had to use a secondary antibody produced in goat, which would be bound by the anti-goat antibody used to detect CPA1, if not applied separately and in the correct order as outlined below. See also Table 3[href=https://www.wicell.org#tbl3].",
    "Critical: The secondary antibodies must be conjugated to stable fluorescent dyes matching the configuration of your fluorescent microscope. A good combination with minimal spectral overlap is Dylight-405/DAPI, Alexa Fluor-488, Rhodamine-RedX, Alexa- Fluor 647. See problem 2[href=https://www.wicell.org#sec6.3]: Unexpected staining patterns\nMake secondary antibody solution 1 and 2 by diluting secondary antibodies in blocking buffer at a dilution of 1:1000 as outlined in Table 3[href=https://www.wicell.org#tbl3]. Leave the tubes with diluted antibodies on wet ice and protected from light.\nNote: Secondary antibodies dilutions should be optimized for specific tissues to avoid non-specific binding. See problem 1[href=https://www.wicell.org#sec6.1]: Excessive background fluorescence\nNote: Prepare enough secondary antibody dilution to stain all your samples and your secondary antibody only control, allowing 100 μl per sample. Note that extra diluted antibody should be made to account for pipetting error (at least 10% extra volume).\nSecondary antibody incubation\nRemove primary antibody solution with a micropipette\nWash 3 times in 1× PBS for 5 min each\nWorking one slide at a time to reduce drying:\nAdd enough secondary antibody solution 1 (typically 100–200 μL) to each slide to cover tissue.\nAdd secondary antibody to the secondary antibody only control slides. Leave the negative control slide in 1 × PBS.\nIncubate for 60–120 min.\nWash 3 times in 1× PBS for 5 min each\nWorking one slide at a time to reduce drying:\nAdd enough secondary antibody solution 2 (typically 100–200 μL) to each slide to cover tissue.\nAdd secondary antibody solution 2 to the secondary antibody only control slides. Leave the negative control slide in 1 × PBS.\nIncubate for 60–120 min.\nWash 3 times in 1× PBS for 5 min each\nFor blue staining of nuclei, add DAPI to the last wash at a dilution of 1:1000",
    "Mount with DAKO mounting medium or similar and #1.5 cover glass preferably with a thickness of 0.17–0.18 mm (usually marked #1.5H or “high performance”)\nLeave flat to dry for 10 min protected from light\nPause point: if needed, stained sections can be stored dark at 4°C for several weeks.\nCritical: Variation in staining intensity can occur from experiment to experiment, so it is critical to include all samples in the same experiment, if comparison of staining intensity is planned.\nAlternatives: Different combinations of primary and secondary antibodies can be used as needed.\nStep 9–10: Confocal microscopy of stained tissue sections\nTiming: 1–3 days depending on number of samples\nMicroscopy of stained tissue sections creates the images needed for subsequent image analysis steps.\nConfocal imaging was performed on a Zeiss LSM780 inverted confocal microscope equipped with a 32PMT GaAsP spectral detector and two PMT’s (one for blue and one for far-red). We recommend consulting (Shihan et al., 2021[href=https://www.wicell.org#bib12]) for detailed instructions on how to acquire images in Zeiss Zen software.\nMount sample in confocal microscope\nTurn confocal system on and wait for lasers to warm up\nPlace the slide with the cover slip facing down (if using an inverted microscope) in the sample holder and find your sample using a 10× objective or similar\nAdd oil immersion to a Plan-Apochromat 40×/1.30 oil objective or similar\nFind the Z position that best represents the shape of your tissue. Note down Z position for later use\nAcquire images:\nAdjust laser and detector gain settings to maximize the dynamic range of your system and minimize spectral overlap (Shihan et al., 2021[href=https://www.wicell.org#bib12]). Save/note down the settings for later use. See also critical notes below and problem 2[href=https://www.wicell.org#sec6.3]: Unexpected staining patterns.",
    "Adjust the settings to 16-bit images (if possible) and at least 1024×1024 frame size at 1× zoom\nSet the pinhole as close to 1AU as possible but ensure that the same actual pinhole diameter is used for all channels.\nAcquire tiled images (Tile scan) of a single Z plane of the entire organ section with 10% overlap scanning each fluorescent dye separately (sequential acquisition), in order to avoid spectral overlap. See (Shihan et al., 2021[href=https://www.wicell.org#bib12])\nSave the file in the proprietary format (.czi or .lsm for a Zeiss confocal microscope)\nStitch the tiled images using imaging software (such as Zen black, Imaris, Amira or the free software Image J/Fiji) and save in the proprietary format.\nStitching in Zen black is initiated in the stitch function under the processing tab\nSelect the image to be stitched\nSet a threshold for stitching. We routinely use “strict”\nSelect apply\nSave the image in the proprietary format. For images acquired using Zen black this format is czi or lsm\nExport as TIFF files to perform image analysis. See Figure 3[href=https://www.wicell.org#fig3] for an example of a stitched image of a pancreas section with four channels (P120CTN, SOX9, CPA1, DAPI).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1046-Fig3.jpg\nFigure 3. Example input image\nStitched image of an entire pancreatic section for embryonic day 14.5 mouse embryo. The pancreas was stained for DAPI (nuclear marker), P120CTN (membrane marker of the epithelium), SOX9 and CPA1.\n(A) The merged image shows DAPI, P120CTN, SOX9 and CPA1.\n(B–E)(B) DAPI, (C) P120CTN, (D) SOX9 and (E) CPA1.\nThe scale bars are 100 μm.\nOpen the proprietary file in ImageJ: File; Open\nSave as TIFF in ImageJ: File; Save as; Tiff",
    "Note: The images included in the test dataset are TIFF stacks with all channels included. These can be analyzed directly by our code without further modification. The channels include: Channel 1: CPA1, channel 2: P120CTN, channel 3: SOX9, channel 4: DAPI\nCritical: Identical microscopy settings and Z planes must be used for all samples, if comparison of staining intensity is planned.\nCritical: Detector gain and laser intensity should be optimized to maximize the dynamic range. Most systems have the option of visualizing the image with a look up table (LUT) where pixels with an intensity of 0 are blue and pixels with the highest pixel intensity are red (in Zen this option is called “Range indicator”). Use this LUT to ensure that your image has only a few maximum intensity (red) pixels (Shihan et al., 2021[href=https://www.wicell.org#bib12]). Whenever possible, data for intensity quantitation should be captured as 16-bit images, as this optimizes discrimination of pixel intensities as compared to 8-bit images (Shihan et al., 2021[href=https://www.wicell.org#bib12]).\nAlternatives: Different confocal microscope systems and non-confocal fluorescent microscopes can be used, as long as it is ensured that the images are compatible with nuclei segmentation. Please note that confocal microscopy is highly recommended, if images are to be used for other downstream applications such as intensity measurements or threshold-based area quantification.\nStep 11–13: Draw outline/mask of tissue shape\nTiming: approx. 5 min per image\nThis is the only semi-manual step in the image analysis pipeline. It creates a mask of the tissue, which is used as an input in subsequent steps.\nCritical: The image chosen as input for this step has to be an image of an antibody staining for an antigen that marks either the whole epithelium or an outline of the epithelium. For this project we used images of P120CTN.",
    "The outline of the organ can be drawn and saved as a binary image using the MATLAB app ‘ImageSegmenter’, as follows:\nOpen MATLAB\nGo to the ‘App’ tap in MATLAB\nSearch for the ‘Image Segmenter’ app and open it\nLoad the image you want to annotate into the ImageSegmenter App (either from file or from the MATLAB workspace).\nGo to the ‘ADD TO MASK’ menu and select ‘Draw ROI’s\nUse the ‘Freehand’ or ‘Assisted Freehand’ tool to draw an organ ROI/outline\nPress ‘Apply’ and ‘Close ROI’ when you are done drawing.\nExport binary outline/ROI to MATLAB workspace\nPress ‘Export’ and then ‘Export Images’\nSelect ‘Final Segmentation’ (unselect ‘Masked Images’) and type in a name (for example ‘myBranchedMask’) for your new mask and press ok. Your new mask/ROI will now appear in the MATLAB workspace window).\nNote: Hand-drawn masks for the test dataset are supplied in supplementary data\nStep 14–16: Tip score locations inside your outline/mask using tipScoreIm.m\nTiming: runtime for a script calling the tipScoreIm() function is approx. 1 min per image\nThis step calculates a metric for how distant each pixel inside the tissue-outline is from the center of a branched structure. A low score indicates proximity to the center (in the pancreas called “trunk”), while a high score indicates a location close to the periphery (in the pancreas called “tip”). We named this the “tip score”.",
    "tipScoreIm() is a custom MATLAB function (stored in tipScoreIm.m) that takes the binary mask (hereafter called BranchedMask) from step 10–12 above, and returns an image where each pixel contains a value that quantifies how 'tip like' this location is. Note that the tip score function was developed to quantify/correlate well with what a biologist judges by eye as “tip” and “trunk” in the branched structure of a pancreas, but it could potentially be used to quantify location in other branched organ structures too.\nThe tipScoreIm(BM,approxPixelWidthOfTipStructure,plot_yes_no) function needs 3 inputs:\nBM: a binary mask/outline (class/type: logical, double, uint8, or uint16) of the branched structure. Has 1's everywhere inside the structure and 0's outside. This mask could be based on a hand drawn outline (see step 11–13) or based on a segmentation.\napproxPixelWidthOfTipStructure: the approximate length scale/width/length measured in pixels of what is judged to be a 'tip structure' in your image. This was estimated based on the CPA1 staining in our example.\nplot_yes_no: If set to 1, you will see a plot of the final tipscore image together with a plot of the components used to calculate it. (I.e., side branch, mid branch and convex hull images). Seeing this plot can help you fine tune the 'approxPixelWidthOfTipStructure' (see input 2) to an appropriate value for your image.\nThe tipScoreIm(BM,approxPixelWidthOfTipStructure,plot_yes_no) function has 1 output:\nAn image (of type double) where each pixel contains a value that quantifies how 'tip-like' its location is, (values >0 will be in very tip-like areas). Tip score values are usually in the range [−2,1], but the numbers depend on the input value ‘approxPixelWidthOfTipStructure' and the specific structure given by 'BranchedMask'). Pixel values outside the BranchedMask are set to NaN.\nWrite a simple MATLAB script that calls the tipScoreIm() function:",
    "Study the two demo scripts 'demoScript_OneImage_ManualInput.m' and 'demoScript_Batch_NoInput.m' for inspiration.\nMake sure that the three function inputs ‘BranchedMask’, ‘approxPixelWidthOfTipStructure’, and ‘plot_yes_no’ are defined in the MATLAB Workspace.\nMake sure that the file tipScoreIm.m is stored in your current MATLAB directory, or in the folder ‘/Documents/MATLAB/Add-Ons’.\nWrite your script in the MATLAB editor window. Here is an example code that calls tipScoreIm() and shows the output:\nBranchedMask = MyBranchedMask;\napproxPixelWidthOfTipStructure = 300,\nplot_yes_no = 1;\nMyTipSCoreIm = tipScoreIm(BranchedMask,approxPixelWidthOfTipStructure,plot_yes_no);\nfigure\nimshow(MyTipSCoreIm,[]);\nRun your script. (Press the green ‘Run’ button in the EDITOR tab).\nInspect the output figure from tipScoreIm() that shows the subdivision of the skeletonization (Haralick and Shapiro, 1992[href=https://www.wicell.org#bib3]; Lam et al., 1992[href=https://www.wicell.org#bib6]) into ‘side branches’ and ‘mid branches’ and the convex hull (see Figures 4[href=https://www.wicell.org#fig4]B–4D). Test different values of approxPixelWidthOfTipStructure: run the script again and see how it impacts the tip score values. Repeat until you find a value which approximates the size of the actual tip domain (as based on tip marker). NB: Use the same value for images with the same resolution.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1046-Fig4.jpg\nFigure 4. Illustration of principle of method\n(A) Confocal image of E14.5 pancreas stained for P120CTN and DAPI.\n(B–D) Black-green color map shows local distance to convex hull/mid branch/side branches respectively. (B) White line: convex hull of epithelial outline. (C) Magenta line: Mid branch of skeletonization of epithelial outline. (D) Magenta lines: Side branches of skeletonization of epithelial outline.\n(E) Color map shows tip score value in different locations for the image shown in A. Figure reprinted with permission from (Nyeng et al., 2019[href=https://www.wicell.org#bib9]).\nScale bar in A is 30 μm.\nStep 17–20: Define cell position using a DAPI channel image and segmentDAPIimage.m\nTiming: runtime for a script calling the segmentDAPIimage() function is approx. 5 min per image",
    "This step is crucial for getting a tip-score for cells, rather than pixels. It is based on analysis of images of nuclei from the DAPI channel. segmentDAPIimage() is a custom MATLAB function (stored in segmentDAPIimage.m) that takes a DAPI channel image and returns a binary mask of cell nuclei using, (Vincent, 1993[href=https://www.wicell.org#bib14])(Otsu 1979[href=https://www.wicell.org#bib10]).\nThe segmentDAPIimage(IM,ROI,nucleiD,manual_input_yes_no,answers) function needs 5 inputs:\nIM: a DAPI channel 2D image. Array of type double, uint8 or uint16.\nROI: A binary mask (same size as IM) with ones everywhere where you want to segment nuclei. Give an empty image (all zeros) if you want nuclei segmented everywhere. Array of type logical, double, uint8 or uint16. The mask from step 10–12 can be used here.\nnucleiD: Integer number of type double, uint8 or uint16. The average diameter measured in number of pixels of the DAPI stained nuclei you want to segment (approx. 25 pixels for our test images).\nmanual_input_yes_no: Integer of value 0 or 1. if set to one 1 you will be prompted 4 times during the run of the function and have to pick between images that show different threshold levels. (Eg. you will be shown a fig. and asked ‘What thresholded image includes all nuclei and not more? Note: Nuclei should not have holes in them. (Enter image number from fig. here and press enter):’).\nif ‘manual_input_yes_no’ is set to 0 the function will run without prompting the user and use the values specified in the 1×4 array ‘answers’ input (see below).",
    "answers: Integer array [opt_index pess_index regT_index altPess_index] with 4 integer index numbers in the range [1–20], type double, uint8 or uint16. The values correspond to the manual command window answers given during a run with ‘manual_input_yes_no=1’. If ‘manual_input_yes_no=0’ the values in answers will be used as input. Use this e.g., if you want to do a batch run but want to give different answers for different images, (see e.g., in demoScript_Batch_NoInput). Note if answers are set to [0 0 0 0] the default [3 9 7 10] will be used (optimal for some of our test images).\nThe segmentDAPIimage(IM,ROI,nucleiD,manual_input_yes_no, answers) function gives 1 output:\nA binary image/mask with 1's where there are nuclei, (see e.g., of a final nucleus segmentation result Figure 1[href=https://www.wicell.org#fig1]E, colors are added to highlight different nuclei).\nWrite a simple MATLAB script that calls the segmentDAPIimage() function:\nStudy the two demo scripts 'demoScript_OneImage_ManualInput.m' and 'demoScript_Batch_NoInput.m' for inspiration.\nYou may import a .tif image into the workspace using the MATLAB function ‘imread()’ (write e.g.,: IM = imread(‘MyTiffFileName’,xx), where xx is the number of the DAPI channel in your tif stack. If your .tif file contains only a single channel write: IM = imread(‘MyTiffFileName’)).\nMake sure that the 5 function inputs IM, ROI, nucleiD, manual_input_yes_no and answers are defined in the MATLAB Workspace.\nMake sure that the file segmentDAPIimage.m is stored in your current MATLAB directory or added to the folder ‘/Documents/MATLAB/Add-Ons’.\nWrite your script in the MATLAB editor window. Here is a simple example code that calls segmentDAPIimage() and shows the output:\nIM = MyDAPIimage;\nROI = MyBranchedMask;\nnucleiD = 30;\nmanual_input_yes_no = 1;\nanswers = [0 0 0 0];\nMyNucMask = segmentDAPIimage(IM,ROI,nucleiD,manual_input_yes_no,answers);\nfigure\nimshow(MyNucMask,[]);\nRun your script. (Press the green ‘Run’ button in the EDITOR tab).",
    "Answer the 4 prompted questions asked in the command line. See the section ‘MATLAB and demo scripts’ for image examples of appropriate answers.\nInspect the output figure. If there is over or under segmentation see problem 4[href=https://www.wicell.org#sec6.7]: Over/under segmented nuclei.\nStep 21: Measure pixel intensity for nuclear cell marker using returnTableWithCellInt()\nTiming: runtime for a script calling the returnTableWithCellInt() function is a few seconds per image\nThis is an optional step designed to measure intensity of a nuclear localized antigen. As stated in section 8, special precautions need to be taken if measuring and comparing staining intensity between different images. In our example, we measured the intensity of nuclear localized SOX9.\nreturnTableWithCellInt() is a custom MATLAB function (stored in returnTableWithCellInt.m) that takes a 2D image with a nuclear marker and binary mask of cell nuclei and returns a table (a table[href=https://se.mathworks.com/help/matlab/ref/table.html?searchHighlight=table&s_tid=srchtitle] is a MATLAB object) that contains the image intensity found in each nucleus centroid pixel.\nThe returnTableWithCellInt(NUCLEI_BW,IM,nucleiD) function needs 3 inputs:\nNUCLEI_BW: 2D binary mask (1's where there are nuclei and 0 s elsewhere) of type, logical, double, uint8 or uint16. Each connected component in NUCLEI_BW defines the location of a cell nucleus. From step 19 above.\nIM: An 2D Intensity image of type double, uint8 or uint16. Could e.g., be an immunohistochemical staining of a nuclear marker.\nnucleiD: Length scale/diameter of an average nucleus. Used for setting the width of the gaussian filtering of the image. (We filter/blur the image to ensure that the extracted pixel intensities are representative of the local intensities and not extreme outliers. If you do not want any gaussian filtering, then set 'approxPixelWidthOfCellNuclei=1′).\nThe returnTableWithCellInt(NUCLEI_BW,IM,nucleiD) function has 1 output:\na table object with 4 columns and one row for each cell/nucleus/connected comp in NUCLEI_BW.",
    "Column 1 have index number/ ID number in labeled image\nColumn 2 has x coordinate of nucleus centroid\nColumn 3 has y coordinate of nucleus centroid\nColumn 4 has intensity value in gaussian filtered image IM at nucleus centroid location\nWrite a simple MATLAB script that calls the returnTableWithCellInt() function:\nStudy the two demo scripts 'demoScript_OneImage_ManualInput.m' and 'demoScript_Batch_NoInput.m' for inspiration.\nMake sure that the 3 function inputs NUCLEI_BW, IM and nucleiD are defined in the MATLAB Workspace.\nMake sure that the file returnTableWithCellInt.m is stored in your current MATLAB directory or added to the folder ‘/Documents/MATLAB/Add-Ons’.\nWrite your script in the MATLAB editor window. Here is an example code that calls returnTableWithCellInt() twice using first a nuclear marker image and second a tipscore image (output of tipScoreIm()), merges the returned tables, shows the first three rows of the merged table Tcells in the MATLAB command window and saves the table as a .csv file in the current directory (.txt, .dat, .csv, .xls, .xlsm, or .xlsx are possible):\nNUCLEI_BW = MyNucMask;\nIM = MyNucMarkerImage;\nTS = MyTipSCoreIm,\nnucleiD = 30;\nT1 = returnTableWithCellInt(NUCLEI_BW,IM,nucleiD);\nT2 = returnTableWithCellInt(NUCLEI_BW,TS,nucleiD);\n% rename VariableName “IMintensity” in T2 so the two tables (T1 and T2) do not have\n% columns with identical names (identical names will cause an error message when\n% concatenating tables later)\nT2.Properties.VariableNames{'IMintensity'} = 'TipScore';\nTcells = [T1 , T2(:,4)]; % concatenate T1 and 4th column of T2\nTcells(1:3,:) % show first 3 rows in command window\nwritetable(Tcells,‘TableCells.csv’); % save as .csv file\nStep 22: Measure pixel intensity for membrane cell marker returnTableWithCellPairInt()\nTiming: runtime for a script calling the returnTableWithCellPairInt() function is a few seconds per image",
    "In this optional step we have developed a method to estimate intensity of a membrane expressed protein based on a line scan between two cell centroids. If needed, this method can be implemented by running returnTableWithCellPairInt() which is a custom MATLAB function (stored in returnTableWithCellPairInt.m) that takes a 2D image with a membrane marker and a binary mask of cell nuclei and returns a table that contains the max image intensity found along a line scan performed between the nucleus centroids of all neighbor cell pairs. See Figure 6[href=https://www.wicell.org#fig6] for examples of the lines drawn between cell nuclei along which the max intensity is extracted at the cell membrane between the two cells.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1046-Fig6.jpg\nFigure 6. Example of data plots from a larger dataset (linescans)\n(A) Example image of neighbor cell pair with linescan (white line) and P120CTN maximum intensity value along curve (green dot). Note that the position of the maximum intensity value coincides with the position of the double membrane between cells.\n(B) Example of P120CTN linescan extracted between neighbor cells shown in image in panel (A).\n(C) Confocal image of E14.5 pancreas stained for P120CTN and DAPI. Yellow dots: cell positions. White lines: linescans between neighboring cells.\n(D) P120CTN intensity between cell pairs versus tip score. Data comes from the original dataset (Nyeng et al., 2019[href=https://www.wicell.org#bib9]) and contains n=4 embryos (24 images). Note that the tip score scale is different in this dataset. n= 3305–3400 cell pairs per class.\nThe graphs in C and E show median ± confidence interval. ns=not significant. ∗∗p<0.01, ∗∗∗∗p<0.0001 (Wilcoxon signed-rank test). Figure reprinted with permission from (Nyeng et al., 2019[href=https://www.wicell.org#bib9]). Scale bars: (A) 5 μm, (C) 20 μm.\nThe returnTableWithCellPairInt(NUCLEI_BW,IM,nucleiD,plot_yes_no) function needs 4 inputs:",
    "NUCLEI_BW: 2D binary mask (1's where there are nuclei and 0 s elsewhere) of type, logical, double, uint8 or uint16. Each connected component in NUCLEI_BW defines the location of a cell nucleus.\nIM: An 2D Intensity image of type double, uint8 or uint16. Could e.g., be an immunohistochemical staining of a membrane marker.\nnucleiD: Length scale/diameter of an average nucleus. Used for deciding which cells are close enough to be neighbors.\nplot_yes_no: if set to 1 you will see a plot showing IM with white lines at the locations of all the cell neighbor pairs line scans performed in the image. Inspecting this plot can help you find the appropriate value of nucleiD. See example of output in Figure 1[href=https://www.wicell.org#fig1]F. Note: you do not need to use exactly the same value for nucleiD as you did for segmentDAPIimage().\nThe returnTableWithCellPairInt(NUCLEI_BW,IM,nucleiD,plot_yes_no) function has 1 output: A table object with 9 columns and one row for each neighbor cell pair in NUCLEI_BW.\nColumn 1 has x coordinate of midpoint of line scan\nColumn 3 has y coordinate of midpoint of line scan\nColumn 4 ID of first cell in pair\nColumn 5 ID of second cell in pair\nColumn 6 array with full linescan\nColumn 7 Length (in number of pixels) of line scan.\nColumn 8 Maximum intensity value of mean smoothed linescan (filter size = 3).\nColumn 9 Median intensity value of mean smoothed linescan (filter size = 3).\nWrite a simple MATLAB script that calls the returnTableWithCellPairInt() function:\nStudy the two demo scripts 'demoScript_OneImage_ManualInput.m' and 'demoScript_Batch_NoInput.m' for inspiration.\nMake sure that the 3 function inputs NUCLEI_BW, IM, nucleiD and plot_yes_no are defined in the MATLAB Workspace.\nMake sure that the file returnTableWithCellPairInt.m is stored in your current MATLAB directory or added to the folder ‘/Documents/MATLAB/Add-Ons’.",
    "Write your script in the MATLAB editor window. Here is an example code that calls returnTableWithCellPairInt() twice using first a nuclear marker image and second a tipscore image (output of tipScoreIm()), merges the returned tables, shows the first three rows of the merged table TcellPairs in the MATLAB command window and saves the table as a .csv file in the current directory (.txt, .dat, .csv, .xls, .xlsm, or .xlsx are possible):\nNUCLEI_BW = MyNucMask;\nIM = MyMembMarkerImage;\nTS = MyTipSCoreIm,\nnucleiD = 30;\nplot_yes_no = 1;\nT1 = returnTableWithCellPairInt(NUCLEI_BW,IM,nucleiD,plot_yes_no);\nT2 = returnTableWithCellPairInt(NUCLEI_BW,TS,nucleiD,0);\n% Change generic names to names specific for marker (xx) in table. (If this is not done\n% you will get an error when you try to concatenate table T1 and T2)\nT1.Properties.VariableNames{'lineScanMax'} = 'xxMaxInt';\nT1.Properties.VariableNames{'lineScanMed'} = 'xxMedInt';\nT1.Properties.VariableNames{'lineScan'} = 'xxLineScan';\nT2.Properties.VariableNames{'lineScanMed'} = 'tipScore'; % we only use the median for\n% the tip score of the cell pairs (column 9)\nTcellPairs = [T1, T2(:,9)]; % concatenate T1 and 9th column of T2\nTcellPairs(1:3,:) % show first 3 rows in command window\nwritetable(TcellPairs,‘TableCellPairs.csv’); % save as .csv file"
  ],
  "subjectAreas": [
    "Cell Biology",
    "Bioinformatics",
    "Microscopy"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology",
    "Bioengineering & Technology"
  ]
}