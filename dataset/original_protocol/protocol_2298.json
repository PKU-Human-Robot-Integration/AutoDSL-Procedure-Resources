{
  "id": 2421,
  "origin_website": "Cell",
  "title": "Transcriptional profiling of mouse projection neurons with VECTORseq",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nStereotaxic injections\nTiming: 2–3 weeks\nThis step delivers the viral barcodes to label different projection neurons. It is important to ensure that the retrograde viruses used infect the intended cell types.\nSurgery: 1–5 h/mouse for surgeries\nPassive wait time: 2–3 weeks for virus to traffic and express in source location\nAdminister preoperative analgesics according to approved IACUC protocol.\nPrepare:\nViral aliquot(s) in styrofoam ice box.\nMicroinjection system.\nScalpel blade.\nBiohazard bag for biohazard disposal.\nHeating pad.\nSterile drapes to place on stereotaxic frame and over mouse.\nSterilize all surgical tools in the bead sterilizer for approximately 10 s.\nPlace on sterile drape.\nSterile gloves.\nHair removal agent(s).\nPlace the mouse in the stereotaxic frame, remove the hair from the scalp, make an incision through the scalp, and level the head in the frame.\nInject each projection target with a retrograde virus encoding a different transgene (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1906-Fig1.jpg\nFigure 1. VECTORseq workflow\nRetrogradely infecting viruses encoding different transgenes are injected into projection targets of a source structure of interest (in this schematic, primary visual cortex (V1)). Weeks later, the source structure is microdissected, dissociated into single cells or single nuclei (in an optional step, FACS enrichment of neuronal nuclei may be possible using expression of the neuronal marker NeuN, although note that not all neurons express NeuN), and single-cell or -nucleus libraries are prepared and sequenced. The sequencing datasets are then analyzed and viral transgene expression overlaid on clusters to identify projection populations.\nNote: To reduce the likelihood of spillover and increase the efficiency of labeling, try to choose stereotaxic coordinates near the center of each target structure.\nClose incision, recover mice from anesthesia, and return to home cage.\nTissue slice preparation\nTiming: 30 min–1 h",
    "Critical: Make sure all surfaces and tools are free of fixative.\nThis step slices the brain to enable subsequent microdissection of the regions of interest.\nPre-steps:\nPrepare artificial cerebrospinal fluid (ACSF) and N-Methyl-D-glucamine (NMDG) buffer solution before starting.\nThe NMDG solution used with the vibratome should be put in a -20°C freezer and shaken every 10–15 min to prevent clumping. Freeze and shake until you achieve a slurry/slushy consistency. This step will take approximately 1 h.\nWarm approximately 200 mL of NMDG in a glass dish set inside a warm 32°C–34°C water bath. Place a cell strainer into the dish of NMDG.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1906-Fig2.jpg\nFigure 2. Tissue sectioning and incubation\n(A) Illustration of brain on vibratome for sectioning. Coronal orientation. Brain is roughly 10 mm wide.\n(B) Illustration of setup for incubating brain in carbogen-bubbled 1x ACSF.\nNote: Before use, take care to bubble the warming NMDG solution with carbogen for at least 30 min by a gas diffusion tube connected to a carbogen source directly into the solution (Figure 2[href=https://www.wicell.org#fig2]B).\nPrepare the station in which you will sacrifice the mouse and retrieve the brain.\nBiohazard bag.\nDissection tools: Large decapitation scissors, small spring scissors, forceps, spatula, and razor blade.\nDeeply anesthetize the mouse to euthanize according to IACUC guidelines.\nTranscardially perfuse mice with cold (4°C) 1x ACSF using gravity perfusion (approximately 5 min per mouse).\nIt takes approximately 15 mL of 1x ACSF to perfuse one mouse.\nDecapitate with large scissors.\nQuickly but carefully explant entire the brain. We used small spring scissors, forceps, and spatula for this step.\nImmediately place into NMDG slurry and wait 30 s.\nPlace a filter paper (e.g., a 90 mm Whatman filter disc) on a clean surface (e.g., a Petri dish).\nRemove the brain from the slurry and place directly onto the filter.",
    "Create a flat surface on the coronal plane by cutting the end of the brain that is not needed. We used a razor blade.\nNote: We cut off brainstem/cerebellum and adhered the brain directly onto the vibratome platform using Loctite glue with the olfactory bulb pointing up and our ROI oriented closer to the blade. Depending on the region of interest, the brain may need to be oriented differently.\nOrient the brain on the platform such that your region of interest is closest to the blade.\nWe used the Paxinos mouse brain atlas as a guide to identify landmarks close to our ROI.\nCut 300 μm vibratome sections (Figure 2[href=https://www.wicell.org#fig2]A).\nUse high speeds initially (e.g., 0.3 mm/s) to quickly trim away sections that do not contain areas that will be sequenced and slower speeds (e.g., 0.12 mm/s) when cutting sections containing the regions to be sequenced.\nRecover slices in warm 32°C–34°C NMDG solution in the water bath. Continue bubbling with carbogen for 30–45 min.\nNote: Use cell strainers floating in the NMDG dish to suspend slices (Figure 2[href=https://www.wicell.org#fig2]B).\nWhile slices are recovering, prepare solutions for single-cell isolation or single-nuclei isolation.\nMove slices into RT ACSF bubbled with carbogen. Slices can be kept alive up to 16 h.\nMicrodissect the region of interest under a dissection scope.\nSingle-cell isolation\nTiming: 1.5–2 h\nThis step microdissects brain regions of interest and isolates single cells for sequencing.\nNote: Prepare Worthington Papain Dissociation Kit + EBSS without Phenol Red, Miltenyi Adult Neuron Isolation Kit, 1x ACSF.\nTISSUE DISSOCIATION AND FILTRATION OF CELLS –modified Worthington protocol\nTransfer one slice at a time to a Petri dish and dissect region of interest from vibratome sections and return to ACSF. Once all slices have been microdissected, place regions of interest in a 2 mL low-retention centrifuge tube.",
    "Follow the Papain Dissociation System Protocol[href=https://worthington-biochem.com/PDS/] (https://worthington-biochem.com/PDS/[href=https://worthington-biochem.com/PDS/]) from Worthington Biochemical Corporation to make the different solutions. Some steps are summarized below.\nAdd 32 mL of Earle’s Balanced Salt Solution (EBSS) to the albumin-ovomucoid inhibitor mixture. Can be stored at 2°C–8°C after reconstitution. Discard if there is discoloration or cloudiness that could indicate microbial growth.\nAdd 5 mL of EBSS to the papain vial. Place papain in a 37°C water bath for 10 min until dissolved.\nAdd 500 μL EBSS to DNAse vial, mix gently to prevent shear denaturation.\nAdd 250 μL of this solution to the vial containing papain.\nPlace tissue in the papain solution.\nIncubate at 37°C with agitation for 1–1.5 h triturating with a transfer pipette or 200 μL pipette after 20 min and every 10 min thereafter. Be very gentle.\nOnce the dissociation is complete, centrifuge at:\n300–350 g for 5–10 min, depending on the tissue.\nTiming should be tested on different ROIs. We recommend spinning at 7 min as a start and adjusting the timing from there.\nMeanwhile, prepare the density gradient solution (step 9 of protocol summary for Papain Dissociation System).\nDiscard the supernatant and prepare the density gradient.\nDENSITY GRADIENT\nAdd 500 μL of the EBSS-reconstituted albumin-ovomucoid inhibitor mixture into a microcentrifuge tube.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1906-Fig3.jpg\nFigure 3. Example cell pellet in 2 mL microcentrifuge tube\nThis pellet is large and was subsequently resuspended and divided across two tubes.\nNote: If the cell pellet after centrifugation is large, (example shown in Figure 3[href=https://www.wicell.org#fig3]), fill more tubes since the goal is to maximize the number of cells passing through the density gradient solution. In most cases (e.g., isolating cells from a ∼1 mm3 structure isolated from 3-5 mice) 1–2 tubes should suffice.",
    "Add 300 μL of density gradient solution to the cell pellet to resuspend and layer carefully on top of the 500 μL of EBSS-reconstituted albumin-ovomucoid to form a gradient. Do not mix.\nNote: if the cell resuspension appears viscous (noticeably more viscous than water, similar to maple syrup) or opaque after adding the initial 300 μL of the density gradient solution, or if the cell pellet was large (Figure 3[href=https://www.wicell.org#fig3]), add another 300 μL of the density gradient solution and fill another microcentrifuge tube with 500 μL of the EBSS-reconstituted albumin-ovomucoid inhibitor mixture. The result will be 2 density gradient tubes. Perform step iii.\nCentrifuge at 100 g for 5–10 min to pellet the cells while leaving debris in the supernatant. For example, we used 6 min for ventral midbrain and 7 min for primary visual cortex (V1) and superior colliculus (SC).\nNote: Users should troubleshoot which spin time works best for their tissue type.\nAspirate and discard the supernatant and reconstitute the cell pellet in 1 mL of 1x ACSF.\nCount the cells using a hemocytometer; using trypan blue to assess viability.\nNote: We only did this for cortex in the published paper. At this stage, we had ∼∼106 cells and had 1.4∗105 cells after filtering.\nMagnetic Labeling and Separation with LS Column: Perform all steps on ice. Directions are adapted from the instructions in the kit. Neuron Isolation Kit Data Sheet[href=https://www.miltenyibiotec.com/upload/assets/IM0018892.PDF] Midi MACS Data Sheet[href=https://www.miltenyibiotec.com/upload/assets/IM0001210.PDF] LS Columns Data Sheet[href=https://www.miltenyibiotec.com/upload/assets/IM0001298.PDF] Note the cell count from Step 21.\nCentrifuge cell suspension at 300 g for 10 min. Discard the supernatant.\nDuring centrifugation, prepare d-MACS Buffer as follows: for each sample, make 10 mL of a 1:20 dilution of the MACS BSA Stock solution in Dulbecco’s Phosphate Buffered Saline (DPBS).",
    "Prepare MACS Buffer as follows: for each sample, make 5 mL of a 1:20 dilution of the MACS BSA Stock solution in autoMACS Rinsing Solution.\nNote: Keep all solutions on ice. Always use freshly diluted buffer.\nAdd 80 μL of d-MACS buffer per 107 total cells to the cell pellet.\nAdd 20 μL of the Adult Non-Neuronal Cell Biotin-Antibody cocktail per 107 total cells.\nMix well but DO NOT VORTEX. Incubate for 5 min on ice.\nWash cells by adding 2 mL of MACS buffer per 107 cells and centrifuge at 300 g for 10 min. Discard the supernatant.\nAdd 80 μL of d-MACS buffer per 107 cells to the cell pellet.\nAdd 20 μL of Anti-Biotin Microbeads per 107 total cells.\nMix well by inverting the tube and DO NOT VORTEX. Incubate for 10 min on ice.\nAdjust volume up to 500 μL for up to 107 cells using the buffer. For more cells, scale up buffer volume accordingly.\nProceed to magnetic separation.\nPlace LS column in the magnetic field referred to in the LS Columns Data Sheet.\nWash column twice with 1 mL of MACS buffer. Discard the eluate.\nApply cell suspension to the column by passing through the pre-separation filters. Collect filtrate into the collection tube provided with the LS columns.\nWash column 2x with 1 mL of d-MACS. Collect filtrate into the collection tube provided with the LS columns.\nNote: Do not use the plunger as this would remove the magnetically bound cells. Unbound cells are the neurons.\nTransfer filtrate into a 2 mL microcentrifuge tube.\nPellet the cells at 300 g for 10 min using a microcentrifuge at 4°C and remove supernatant for single-cell isolation.\nResuspend cells in 1 mL of 1x ACSF and note the count using a hemocytometer.",
    "Concentrate or dilute cells as necessary for 10x library preparation.\nSingle-nuclei isolation\nTiming: 3–4 days\nTiming: 20–30 min to overnight for pre-steps\nTiming: 45 min–1 h active time for nuclei isolation\nTiming: 2.5–4 h for FACS\nTiming: 5–20 min for nuclei counting\nTiming: 1–2 days for library prep\nThis step isolates single nuclei from brain regions of interest for single-cell sequencing.\nPRE-CHILL FOR AT LEAST 20 min at –20°C or OVERNIGHT at 4°C:\nNote: “Precoated with 1% BSA” means that 1% BSA solution was used to coat the item and the excess fluid was removed. Refer to Martin et al. (2020)[href=https://www.wicell.org#bib15]protocol for extra detail. 1% BSA was made by using 10% BSA stock diluted in the autoMACS Rinsing Solution.\ntable:files/protocols_protocol_1906_12.csv\nSolutions to Prepare (Night before or morning of dissociation)\n1x ACSF\nChill in −20°C freezer to cool quickly (but be sure not to freeze).\nCritical: All solutions need to be chilled to 4°C and kept on ice prior to use. All steps are performed on ice or in a 4°C walk-in except for cell counting on a hemocytometer.\nNUCLEI ISOLATION (∼45 min- 1 h) based on Martin et al. (2020)[href=https://www.wicell.org#bib15] protocol and Krishnaswami et al. (2016)[href=https://www.wicell.org#bib4]\nAdd 1 mL ExB (Extraction Buffer) to tissue region of interest and deposit into a well of a 12-well plate.\nPerform four trituration sets.\nA single trituration set is defined as 20 times of trituration followed by a 2-min wait period on ice. Triturate slowly with a 1 mL pipette tip.\nCritical: Do not create bubbles.\nRepeat trituration cycle a 5th time only if the dissociation does not appear complete (e.g., large visible chunks).\nPass the entire volume twice through a 26 G needle into the same well.\nTransfer into the pre-coated and pre-chilled 50 mL Falcon tube.",
    "Add 30 mL of WB (Wash Buffer).\nSplit volume evenly into the 2 1% BSA pre-coated, pre-chilled 15 mL Falcon tubes.\nSpin down at 600 g for 10 min at 4°C using a swinging bucket rotor.\nRemove supernatant until only ∼500 μL remains in each tube. Combine the samples (pooled volume = 1 mL).\nPass the suspension through the pre-chilled 40 μm cell strainer and filter using only gravity. Do not plunge or apply pressure.\nTransfer to a chilled 2 mL Eppendorf tube.\nCount nuclei on a hemocytometer. Make sure the concentration is roughly 106 nuclei/mL.\nTo attain this concentration range, dilute or concentrate nuclei with 1x ACSF. Nuclei can be concentrated by following the gentle centrifugation protocol outlined in step 25j, removing the supernatant, and then adding desired volume of 1x ACSF.\nReserve some nuclei for FACS negative control before staining (minimum volume required is usually around 200 μL). Keep on ice.\nStain remaining nuclei with rabbit anti-NeuN antibody conjugated to Alexa Fluor 488 (ab190195).\nNote: Use 0.1–10 μg/mL anti-NeuN Ab. A dilution series should be tested to optimize concentration. We found that for our ROIs, 0.1 μg/mL was sufficient.\nIncubate in the dark at 4 °C for 30–45 min on a gentle rocker or tube rotator.\nWash three times with 200 μL FACS buffer (total 600 μL) and gentle centrifugation (15–20 min total).\nGENTLE CENTRIFUGATION PROTOCOL:\nPlace a BSA-coated, pre-chilled 0.5 mL tube in a 2.0 mL tube inside a centrifuge.\nAdd nuclei to the 0.5 mL tube. Use a maximum volume of 200 μL.\nCentrifuge at 200 g for 1 min at 4°C.\nAfter reaching a complete stop, centrifuge again at 200 g for 1 min at 4°C.\nAspirate supernatant. Resuspend nuclei in FACS buffer at 107/mL, add DAPI at 1 mg/mL or 1:1000 dilution.",
    "Proceed to FACS.\nBring the stained sample and the negative control (unstained) sample from step h.\nFill collection tubes with 20 μL of FACS capture buffer (CDB) in each tube.\nNote: Number of tubes are dependent on number of cells to be counted.\nFACS (∼1–4 h depending on sample size)\nUse DAPI and anti-NeuN labeling to isolate neuronal nuclei (Figure 4[href=https://www.wicell.org#fig4]). The NeuN labeling distribution is bimodal and we gate to include the peak with higher labeling.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1906-Fig4.jpg\nFigure 4. Example FACS plots for a single-nucleus experiment\n(A) Gate for nuclei overlaid on forward scatter area (FSC-A) and side scatter area (SSC-A).\n(B) Gate used for nuclei on plots of FSC-A against forward scatter height (FSC-H).\n(C) as in B for side scatter.\n(D) Gate for nuclei showing DAPI staining against forward scatter.\n(E) Gate for NeuN+ nuclei.\nTo concentrate nuclei, perform GENTLE CENTRIFUGATION PROTOCOL described in step 25j. Centrifuge at 200 g for 1 min at 4°C.\nCOUNT NUCLEI AFTER FACS (∼5 min–20 min).\nCount nuclei on hemocytometer.\nPrepare a 1:10 dilution of part of the sample (18 μL of chilled DB (Dissociation Buffer) with 2 μL of nuclei from the PCR tube).\nLoad into hemocytometer.\nExamine fluorescent channels and the DAPI channel.\nDilute nuclei with 1x ACSF or concentrate nuclei via gentle centrifugation protocol in a 4°C walk-in to 17,000 nuclei per 40 μL for the 10x Genomics library prep protocol. Proceed as soon as possible to 10x library preparation. Note: We have not waited longer than 45 min post-FACS (including counting).\nLIBRARY PREP (1–2 days)\nEnsure that the reagents are shipped ahead of time.\nPrepare libraries using the 10x Genomics Chromium single cell 5′ mRNA workflow following standard protocol[href=https://support.10xgenomics.com/single-cell-vdj/index/doc/user-guide-chromium-single-cell-5-reagent-kits-user-guide-v2-chemistry-dual-index] (https://support.10xgenomics.com/single-cell-gene-expression/sample-prep/doc/demonstrated-protocol-isolation-of-nuclei-for-single-cell-rna-sequencing-and-tissues-for-single-cell-rna-sequencing[href=https://support.10xgenomics.com/single-cell-gene-expression/sample-prep/doc/demonstrated-protocol-isolation-of-nuclei-for-single-cell-rna-sequencing-and-tissues-for-single-cell-rna-sequencing]) and sequence libraries.",
    "Depending on the desired sequencing depth, we used either NovaSeq (2 × 1010 reads) or NextSeq (1.3–2.6 × 108 reads). We aimed for 20–50,000 reads/cell and used standard paired-end 150 bp read lengths.\nGenome alignment\nTiming: Varies from 15 min–1 day depending on dataset size and hardware\nThis section describes methods used to align single-cell sequencing data with the reference genome and the addition of viral transgenes to the reference genome.\nRaw gene sequence data outputs are converted to cell count tables using Cell Ranger provided by 10x Genomics.\nHardware: We recommend a computer with at least 8–16 CPU cores, 128 GB RAM, and 1–2 TB of disk storage depending on data size.\nOperating System:\nInstall a Debian-based Linux distribution such as Ubuntu or Centos. For our publication, we used Ubuntu on an Amazon Web Service (AWS) Elastic Compute Cloud (EC2) instance in our examples.\nUsing the package manager on the Linux distribution, install tools needed to configure the python environment, including wget, sh, bash.\nCell Ranger:\nVisit the 10x Genomics download links here[href=https://support.10xgenomics.com/single-cell-gene-expression/software/down+loads/latest] to download software and reference genomes.\nDownload Cell Ranger (for our publication, we used version 6.0.0) software. We used the 10x Genomics mm10 mouse reference genome.\nFollow instructions for building a custom reference genome here[href=https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/tutorial_mr]. Append custom reference information (such as viral transgenes) to the provided .gtf file within the reference genome. Then filter the .gtf file.\ncreate custom .gtf file\ntouch transgene.gtf\nvim into the .gtf file and add in the transgene information. Example below.\ntransgene  unknown  exon  1  1443  .  +  .  gene_id \"transgene\"; transcript_id \"transgene\"; gene_name \"Transgene\"\nAppend into the custom transgene.gtf file to the end of the provided .gtf file.\ncat transgene.gtf >> genes.gtf\nfilter the .gtf file.\ncellranger mkgtf \\\ngenes.gtf \\\ngenes_filtered.gtf \\\n--attribute=gene_biotype:protein_coding",
    "Append transgene.fa to the provided .fa file\ncreate custom .fa file\ntouch transgene.fa\nvim into the .fa file and add in the transgene information. Example (for tdTomato sequence) below.\n>transgene 1443\nCGGTACCGCCACCATGGTGAGTAAGGGCGAGGAAGTGATCAAAGAGTTCATGCGGTTTAAGGTGAGAATGGAAGGAAGCATGAACGGCCACGAGTTCGAAATTGAGGGAGAAGGAGAGGGACGGCCCTACGAGGGCACCCAGACAGCCAAGCTGAAAGTGACAAAGGGCGGGCCTCTGCCATTCGCTTGGGACATCCTGAGCCCACAGTTTATGTACGGCTCCAAGGCCTATGTGAAACATCCAGCTGACATTCCCGATTATAAGAAACTGAGCTTCCCCGAGGGGTTTAAGTGGGAAAGAGTGATGAACTTCGAGGACGGAGGCCTGGTGACTGTGACCCAGGACAGCTCCCTGCAGGATGGGACCCTGATCTACAAGGTGAAAATGAGAGGGACAAATTTTCCCCCTGATGGACCTGTGATGCAGAAGAAAACTATGGGATGGGAGGCCTCCACCGAAAGGCTGTATCCACGCGACGGGGTGCTGAAAGGAGAAATCCACCAGGCTCTGAAGCTGAAAGATGGGGGACATTACCTGGTGGAGTTCAAGACAATCTACATGGCCAAGAAACCTGTGCAGCTGCCAGGCTACTATTACGTGGACACAAAACTGGATATCACTTCACACAACGAGGACTACACTATTGTGGAGCAGTATGAACGGAGCGAGGGGAGACACCATCTGTTCCTGGGCCATGGGACTGGAAGTACCGGCTCAGGGTCTAGTGGAACCGCCTCAAGCGAGGATAACAATATGGCTGTGATCAAAGAGTTCATGAGGTTTAAGGTGCGCATGGAGGGCAGCATGAATGGGCACGAATTTGAGATTGAAGGAGAGGGCGAAGGGAGGCCTTACGAGGGCACACAGACTGCCAAGCTGAAAGTGACCAAGGGAGGACCACTGCCTTTCGCTTGGGATATCCTGTCTCCTCAGTTTATGTACGGAAGTAAGGCCTATGTCAAGCATCCCGCTGACATTCCTGATTACAAGAAACTGTCTTTCCCAGAGGGCTTTAAGTGGGAGAGAGTGATGAATTTTGAAGATGGAGGCCTGGTGACCGTGACACAGGACTCCTCTCTGCAGGATGGCACTCTGATCTACAAAGTCAAAATGCGCGGCACCAATTTTCCACCCGATGGGCCCGTGATGCAGAAGAAAACAATGGGGTGGGAGGCCAGCACTGAACGGCTGTATCCTAGAGACGGAGTGCTGAAGGGCGAAATCCACCAGGCCCTGAAGCTGAAAGACGGCGGCCACTACCTGGTGGAGTTCAAAACCATCTACATGGCCAAGAAACCAGTGCAGCTGCCCGGCTATTACTATGTGGACACCAAGCTGGATATCACATCCCACAATGAAGACTACACCATTGTGGAACAGTATGAGAGGTCTGAAGGACGCCACCATCTGTTTCTGTACGGCATGGATGAGCTGTATAAGTA\nAppend the custom transgene.fa file to the end of the provided .fa file.\ncat transgene.fa >> genes.fa\nMake the custom reference genome using the newly made genes.fa and genes.gtf files. Example code below:\ncellranger mkref \\\n--genome=mm10_custom_ref \\\n--fasta=path_to_fa_file/genes.fa \\\n--genes=path_to_gtf_file/genes.gtf\nRun cellranger count to generate counts for each gene in a cell count table that will be saved in a .h5 file. Read more about this function here[href=https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/count]. We ran our parameters as follows:\ncellranger count \\\n--id=sample_id \\\n--fastqs=path_to_fastqs \\\n--sample=sample_name_from_sequencer \\\n--include-introns \\\n--transcriptome=mm10_custom_ref\nIf combining samples, refer to instructions here[href=https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/aggregate]. Example code below:\ntouch samples_to_aggregate.csv\nvim samples_to_aggregate.csv\nvim into the .csv file and add the sample information.\nsample_id,molecule_h5\nsample_01,sample_01_molecule_info_directory/molecule_info.h5\nsample_02,sample_02_molecule_info_directory/molecule_info.h5\nsample_03,sample_03_molecule_info_directory/molecule_info.h5\ncellranger aggr --id=custom_name --csv=samples_to_aggregate.csv\nResulting count matrix will end in .h5 file extension.\nexample: filtered_feature_matrix.h5\nData analysis\nTiming: 1–3 d\nThis section describes the procedures for clustering neurons, identifying markers, and overlaying viral barcode expression on clusters to identify projection neurons.\nSingle-cell sequencing analysis is commonly performed using ScanPy (Python package) or Seurat (R package). The below protocol describes steps using Python and ScanPy that were used in Cheung et al., (2021)[href=https://www.wicell.org#bib2] (code[href=https://github.com/vic-cheung/vectorseq]). For clarity, our protocol references function names in ScanPy version 1.7.2, but please note that function names may change per authors and maintainers of the ScanPy library in future versions. Analogous steps can be performed using R and Seurat.",
    "Hardware: We recommend a computer with at least 16 CPU cores, 64 GB RAM, and 1 TB of disk storage. The speed of some algorithms may benefit from additional CPU cores and it may be beneficial to use an on-demand cloud computing service to dynamically scale computing requirements since some (but not all) algorithms benefit from multi-core CPU acceleration.\nOperating System:\nInstall a Debian-based Linux distribution such as Ubuntu or Centos. We use Ubuntu in our examples.\nUsing the package manager on the Linux distribution, install tools needed to configure the python environment, including wget, sh, bash.\nSoftware:\nDownload a python package manager such as pip or conda. We primarily used conda for package management and installations. Examples using conda below:\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ∼/miniconda.sh[href=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh%20-O%20%7E/miniconda.sh]\nbash ∼/miniconda.sh -b -p $HOME/miniconda\nCreate a conda environment <env_name> and then add bioconda and conda-forge channels. Then install packages. The specific packages shown below are used for the VECTORseq project. Specific versions of each package used can be found in the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq] under the requirements.txt file.\nconda config --add channels bioconda\nconda config --add channels conda-forge\nconda create --name <env_name> jupyter ipykernel nb_conda anndata==0.7.5 scanpy==1.7.2 leidenalg pysam pynndescent pandas==1.2.3 numpy scipy pytz matplotlib tqdm black flake8 scikit-learn pyarrow fastparquet snappy seaborn\nAnalysis: The following data pipeline is used for data cleaning and generating optimal clusters with biological plausibility for both inhibitory and excitatory neuronal datasets described in Cheung et al., (2021)[href=https://www.wicell.org#bib2].\nReformat: Convert data to AnnData format.\nLoad the cell count table in the .h5 and convert it to the AnnData data format used by ScanPy using the function scanpy.read_10x_h5. This generates an in-memory adata object upon which downstream ScanPy functions can be applied.\nIn the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq], this step corresponds to the “reformat” pipeline stage.",
    "Distribution Plots: Assess sequencing data quality.\nCompute quality control metrics using the function scanpy.pp.calculate_qc_metrics.\nGenerate scatter plots and violin plots for number of genes, number of counts, and percent mitochondrial genes. These plots can reveal any contamination of single cell data with dead cells, doublets, multiplets, etc.\nThe percent mitochondrial genes cutoff we used was 5% for brain tissue.\nGeneral rule of thumb to plot the distribution across counts/cell and genes/cell.\nNote: For counts/cell, if there is a bimodal distribution, the initial filtration criteria is usually made on the value after the end of the first peak and at the beginning of the second one.\nIn the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq], this step corresponds to the “distribution_plots” pipeline stage.\nFilter: Apply filtering cutoffs to remove dead cells, doublets, multiplets, and any unwanted artifacts created as a consequence of the single cell sequencing process that do not reflect biological phenomena .\nApply count cutoffs using the function scanpy.pp.filter_cells.\nYou may also choose to selectively filter mRNA expression from chromosomal, ribosomal, and mitochondrial genes by manually subsetting adata.X and excluding a blacklist of known genes.\nIn the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq], this step corresponds to the “filter” pipeline stage.\nNormalize: Normalize counts and convert viral transgenes from expression data to a metadata label so that further analysis with Scanpy functions only operates upon endogenous genes.\nLog-normalize total counts (number of times gene detected) per cell using the functions scanpy.pp.normalize_total and scanpy.pp.log1p. This baseline count normalization is necessary for comparisons between cells. Apply any additional transforms as desired such as log transform, term frequency-inverse document frequency (TFIDF), depending on your application. TFIDF was used in Cheung et al., (2021)[href=https://www.wicell.org#bib2] to highlight unique genes within each cell, including the unique viral transgenes that had been previously introduced.",
    "Importantly, viral transgene expression should be removed from the cell count table and converted into a label since downstream steps are intended to be applied only to endogenous gene expression. In ScanPy and AnnData, this can be accomplished by moving the viral transgenes and their corresponding counts from adata.X to adata.var which stores metadata corresponding to each cell. All further ScanPy methods will be applied to adata.X.\nOnce adata.X contains only endogenous genes, several techniques are employed to reduce the number of genes to include in further analysis. TFIDF and log-normalization are repeated on only endogenous genes. Highly variable genes are computed using the function scanpy.pp.highly_variable_genes, both before and after TFIDF. Some genes may not be highly variable within a dataset but are useful for determination of cluster identity. To keep them in the dataset, we a priori whitelisted specific genes of interest. The final genes to be included in analysis are the set of genes in the whitelist combined with the union of highly variable genes before and after the TFIDF transform.\nScale each gene to unit variance and clip outlier values using the function scanpy.pp.scale.\nIn the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq], these steps correspond to the “normalize” pipeline stage.\nCluster: Compute neighborhood graph and Leiden clusters.\nCompute top n principal components of adata.X using scanpy.pp.pca, and then use scanpy.pp.neighbors to compute a neighborhood graph of observations using the top principal components. We selected an n of 50.",
    "Use the Leiden algorithm (Traag et al., 2019[href=https://www.wicell.org#bib10]) with scanpy.tl.leiden to generate clusters based on the neighborhood graph. Various results can be obtained depending on how many n principal components are selected, the n_neighbors used to generate the neighborhood graph, and the leiden_resolution used for Leiden clustering. Using n = 50, we ran a grid search for n_neighbors and leiden_resolution. The value of n_neighbors is swept from 5 to 105 with increments of 5. The value of leiden_resolution is swept from 0.05 to 1.25 with increments of 0.05.\nIn the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq], this step corresponds to the “cluster” pipeline stage.\nCluster Metrics:\nCompute various internal cluster validation metrics for each combination of n_neighbors and leiden_resolution used in the grid search. Internal cluster validation metrics include within-cluster sum of squared error, within-cluster variance, Davies-Bouldin Index, Average Silhouette Score, Calinski-Harabasz Index (Pseudo-F statistic), and Xie-Beni Index (Caliński and Harabasz, 1974[href=https://www.wicell.org#bib1]; Davies and Bouldin, 1979[href=https://www.wicell.org#bib3]; Rousseeuw, 1987[href=https://www.wicell.org#bib6]; Singh et al., 2017[href=https://www.wicell.org#bib7]).\nVisualize internal cluster validation metrics on heatmaps and 3D surface plots. Local minima and maxima on these plots correspond to more optimal hyperparameters.\nNote: In general better separation of clusters is achieved by minimizing within-cluster sum of squared error, within-cluster variance, Davies-Bouldin Index, Xie-Beni Index, and by maximizing Calinski-Harabasz Index and Average Silhouette Score.\nMultiple local minima/maxima may exist for each of the internal cluster validation metrics. These local optima suggest good candidate options for hyperparameters n_neighbors and leiden_resolution.\nNote: Final selection of these hyperparameters ultimately requires inspection of cluster gene expressions and correlation with biological plausibility.\nIn the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq], this step corresponds to the “cluster_metrics” pipeline stage.\nCreate UMAP: Generate Uniform Manifold Approximation and Projection (UMAP) visualizations.",
    "Use UMAP to remap the high-dimensional gene expression manifold to a 2D representation with scanpy.tl.umap, then use scanpy.pl.umap to create a scatter plot. Color code cluster identities generated from Leiden clustering onto the UMAP plot. A unique UMAP visualization is generated for every combination of n_neighbors and leiden_resolution used in the grid search.\nUsing a combination of internal cluster validation metrics and inspection of UMAP visualization along with the biological plausibility of known genes from the whitelist of genes included during the Normalize step, optimal clustering schemes with specific n_neighbors and leiden_resolution can be selected for further downstream analysis.\nNote: Selection of specific n_neighbors and leiden_resolution will vary between datasets. Cross-examining several different combinations via exploratory data analysis will be the most useful in determining which parameters to choose.\nIn the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq], this step corresponds to the “create_umap” pipeline stage.\nExpression Plots: Generate gene expression plots.\nAfter an optimal combination of n_neighbors and leiden_resolution is chosen, use the cluster identities to generate a dendrogram plot using scanpy.tl.dendrogram and scanpy.pl.dendrogram.\nRelative gene expressions can be visualized with heatmaps using scanpy.pl.heatmap, matrix plots using scanpy.pl.matrixplot, and dot plots using scanpy.pl.dotplot. When calling these functions, group by the leiden cluster identities and include the computed dendrogram to help visualize cluster relationships.\nMost highly expressed genes within each cluster group can be selectively visualized. Genes within each cluster can be ranked using scanpy.tl.rank_genes_groups, then visualized as a heatmap using scanpy.pl.rank_genes_groups_heatmap, matrix plots using scanpy.pl.rank_genes_groups_matrixplot, and dot plots using scanpy.pl.rank_genes_groups_dotplot. When calling these functions, group by the Leiden cluster identities and include the computed dendrogram to help visualize relationships. You will also need to specify how many top ranked genes in each cluster you desire to visualize on the plots.",
    "At this stage, expression of viral transgenes can be overlaid to identify the clusters corresponding to different projection populations.\nNote: These annotations were stored in adata.var during our normalization step. Viral overlays can be performed ScanPy’s built-in plotting functions by calling the column name used when storing the annotation in adata.var.\nIn the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq], this step corresponds to the “expression_plots” pipeline stage.\nSubset: Subset data based on selected clusters to further explore expression data.\nThis is an optional step which can be recursively performed to target specific subset of cells based on cluster membership. For example, in Cheung et al., (2021)[href=https://www.wicell.org#bib2], we extracted only excitatory neuron clusters based on gene expression profile, then performed further clustering and expression analysis on that subset by repeating the above steps Cluster, Cluster Metrics, Create UMAP, and Expression Plots. The same was done for inhibitory neuron clusters.\nIn the VECTORseq project code[href=https://github.com/vic-cheung/vectorseq], this step corresponds to the “subset” pipeline stage."
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Sequence Analysis",
    "Bioinformatics",
    "Cell Isolation",
    "Neuroscience",
    "Gene Expression",
    "Sequencing",
    "Single Cell"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology",
    "Bioengineering & Technology"
  ]
}