{
  "id": 19513,
  "origin_website": "Jove",
  "title": "Computational Modeling of Retinal Neurons for Visual Prosthesis Research - Fundamental Approaches",
  "procedures": [
    "1. Setting up the finite element model for electric potential calculations\nDetermine the simulation steps and the complexity of the model\n\tNOTE: The aim of the first step is to clarify the purpose of the modeling, which will determine the necessary elements of the model and the simulation procedure. An important point to consider is the behavior of neural cells that needs to be shown by the model, and what testing protocol would be needed to demonstrate that behavior. This study shows a distance-threshold relationship for a neuron that is extracellularly stimulated, as well as the electrode size-threshold curve. To do this, a neural cell model compartmentalized to different sections (to incorporate the variation of morphological and biophysical parameters in the neuron) sensitive to extracellular voltage and simulation of a range of electrode sizes and positions are needed.\n\t\nDefine the research question and the experimental variables.\n\t\t\nDefine a research question and testing protocol to guide the construction of the model. It is best to start with a clear question and build a model as simple as possible to answer it.\nDetermine the necessary elements to be included in the complete model\n\t\tNOTE: In this modeling approach, the cell is seen as being immersed in an electrically conductive medium, that is, the biological tissue. The electrical stimulation happens across this 'volume conductor,' i.e., the medium, resulting in a distribution of electric potential.\n\t\t\nBased on the research questions and variables to solve, decide whether both elements (FEM and neuron cable model) are required. If, for example, the modeling needs a single electrode that can be simplified as a point source and that the medium is homogeneous, a FEM might not be necessary, and an analytical calculation of the extracellular electric field can be done to replace it.\nDownload and install the software",
    "NOTE: The study used the versions of software applications (COMSOL, NEURON, and Python Anaconda) and hardware specified in the Table of Materials. There might be minor differences in steps or results if different versions of the software/hardware are used.\n\t\nDownload the software that suits the computer's operating system and purchase a license, if necessary. Make sure that all the required simulation modules are downloaded and install all software.\nGather the data on the anatomy of the tissue and cell to be modeled\n\tNOTE: For this method, the anatomical and biophysical parameters were taken from empirical findings. It is common for computational models to mix parameters measured in different species due to the unavailability of data. For a simulation of suprachoroidal stimulation, the tissue layers between the stimulating and the reference electrodes need to be included in the model.\n\t\nGather the anatomy of the tissue from histological studies.\n\t\t\nIn this model, include the choroid, the retinal tissue, and the vitreous domains, where each domain is modeled as a rectangular prism for easy construction of the model. Collect the average retinal tissue thickness from published histological data14 to later be used as the height of each prism.\nCollect the single-cell morphology data from cell staining or public neuron database.\n\t\t\nDownload the detailed neuron morphology from a database such as NeuroMorpho.org, which provides a Search Metadata feature to find the relevant neuron based on species, brain region, cell type, etc. For this study, find Guo's OFF RGC model (D23WM13_27_1-OffRGC_msa)15 by entering Rabbit > New Zealand White in the Species field and Retina in the Brain Region field. Click on the model and download the .swc file.\nGather the biophysical data of the cell modeled",
    "NOTE: The biophysical parameters include the electrical conductivity values for each tissue layer and the electrical parameters of the neural membrane and ion channels.\n\t\nDue to the availability of data, use the electrical conductivity values that were taken from the rabbit16 for the tissue model, while the dynamics of the ion channels were based on the Sheasby and Fohlmeister model of the tiger salamander retina17.\nBuild the geometry of the finite element model of the tissue and electrode in the FEM software\n\tNOTE: The geometry of the tissue and electrode array both affect the electric potential distribution, which in turn influences the neural cell behavior. Hence, building a realistic geometry of the medium where the cells reside, as well as the electrode, is important. The FEM software used in this tutorial has a GUI that enables easy construction of model geometry.\n\t\nSetting up the FEM model in the software's GUI:\n\t\t\nRun the FEM software and click on Model Wizard > 3D. In the Select Physics list box, expand the AC/DC > Electric Fields and Current > Electric Currents (ec), and then click on Add. Click on Study and add a Stationary study under the General Studies option, and then click on Done (Supplementary Figure 1).\nSetting up the unit and geometrical parameters of the electrode.\n\t\t\nOn the Model Builder tree, click on Parameters 1. In the table, type 'elec_rad' in the Name field and '50' in the Expression field to create an electrode that is 50 units in radius. Then, click on Geometry, and change the Length unit to µm, as the soma of a typical retinal ganglion cell is around 10 µm in diameter (Supplementary Figure 2).\nCreate the tissue layers using block domains",
    "NOTE: To build the model geometry, three blocks to represent different structures in the eye were used. Block 1 represented the choroid, block 2 the retinal tissue, and block 3 the vitreous.\n\t\t\nRight-click on Geometry 1 > Block to create a block domain. Repeat this step two more times to create three blocks in total. For all blocks, set both the Depth and Width to 5,000 µm, and change the Base option (under Position) to Center. Assign the following Height (under Size and Shape) and z (under Position) values for each block:\n\t\t\tBlock 1: Height = 112 µm, z = 0 µm\n\t\t\tBlock 2: Height = 151 µm, z = 131.5 µm\n\t\t\tBlock 3: Height = 5,000 µm, z = 2,707 µm\nCreating a workplane to add an electrode to the model\n\t\t\nRight-click on the Geometry 1 in the Model Tree, and choose Work Plane. Click on Work Plane 1 and change the Plane Type to Face Parallel, click on the Activate Selection button below the Plane Type and choose the bottom surface of Block 1 (blk 1 > 1).\nDrawing a disk electrode on the work plane\n\t\t\nClick on Plane Geometry under Work Plane 1 and click on Sketch in the main toolbar. Select Circle, click anywhere inside the rectangle in the Graphics tab, and drag to create a disc electrode. Change the radius to 'elec_rad' µm, xw and yw to 0 µm, and then click on Build All.\nAssigning material properties to each domain\n\t\tNOTE: By following the steps to build the geometry, the model would be separated into several 'domains', which are individual 3D parts that make up the complete geometry. Each domain should be assigned an electrical conductivity value to calculate the electric field distribution throughout the whole model.",
    "In the Model Tree, right-click on Material > Blank Material, and then click on Material 1 and change the Selection to Manual.\nClick on the domains in the Graphics window so that only domain 1 is chosen. Choose Material Properties > Basic Properties > Electrical Conductivity, click on Add to Material button, and change the Electrical conductivity value to the value to 0.043 S/m15.\nRepeat the steps for domains 2 and 3, with the electrical conductivity values of 0.716 and 1.5516 S/m, respectively (Supplementary Figure 3).\nMeshing a 3D model: To mesh the model, go to the Model Tree and right-click on Mesh 1 > Free Tetrahedral. Click on Free Tetrahedral 1 and choose Build All.\n\t\tNOTE: The meshing process breaks up the whole geometry into smaller 'elements' (an element is a virtual segment of the model's geometry where the physical equations are solved numerically). Meshing with smaller elements theoretically increases the accuracy of the approximation but is computationally exhaustive. A common practice is by starting the model with sparse mesh and recording the result of the simulation, then continuously repeating the simulation with smaller mesh elements each time and comparing the results. The refinement process can stop when there is no significant difference in the calculation results from subsequent refinement steps.\n\t\t\nAssessing the mesh quality: Right-click on Mesh 1 and choose Statistics to show the histogram of the element quality. Follow the mesh refining steps below to improve the quality of the elements.\n\t\t\tNOTE: Using the default meshing may produce many low-quality elements, which in turn renders inaccurate computations. In most cases, some degree of mesh refinement is needed.\nRefining the mesh around the perimeter of the electrode",
    "NOTE: The areas where there could be abrupt changes in the electric field typically require a more refined mesh. Here, a denser meshing around the perimeter of the electrode was added by using the edge distribution feature.\n\t\t\t\nFirstly, delete the existing Free Tetrahedral 1 mesh. Then, right-click on Mesh 1 > Distribution, click on Distribution 1, change the Geometric Entity Level to Edge and choose Edges 19-22 (the perimeter of the disk electrode).\nSet the Distribution Type to Fixed Number of Elements and change the Number of Elements field to elec_rad*3/10 to make the elements reasonably small.\nRefining the mesh across the choroid and the retinal tissue\n\t\t\t\nIn the Model Tree, right-click on Mesh 1 > Swept. Click on Swept 1. Choose Domains 1 and 2. Then, right-click on Mesh 1 > Free Tetrahedral, set the Geometrical Entity Level to Remaining, and click on Build All. (Optional: Check the element quality histogram again to ensure that the low-quality elements have been reduced in proportion).\nApply the physics to the finite element model\n\tNOTE: The 'physics' in the FEM software are sets of mathematical equations and boundary conditions that need to be assigned to the model. It is the computing of the solution to the simultaneous set of equations that is carried out during the course of running the model. The choice of physics to apply to geometry depends on the physical phenomenon that is simulated. For instance, electric current physics, as used in this model, observes the electric field distribution and neglects the magnetic (inductive) phenomenon. Other physics could be applied to the geometry if other physical problems (e.g., temperature distribution, mechanical stress, etc.) are to be solved.\n\t\nSelection of physics and application of boundary conditions",
    "NOTE: If a constant voltage pulse is to be applied, the floating potential boundary condition should be replaced with an electric potential boundary condition.\n\t\t\nExpand Electric Currents 1 in Model Tree and check whether Current Conservation 1, Electric Insulation 1, and Initial Values 1 are listed. Then, right-click on the Electric Currents 1 > Ground (this assigns 0 V to a distant plane, simulating a distant reference electrode) and apply this to the surface furthest from the electrode (Surface 10).\nNext, right-click on the Electric Currents 1 > Floating Potential (this simulates a current source with constant current), assigned to the disk electrode (surface 14), and change the I 0 value to 1[µA] to apply a unitary current.\nRunning the simulation with a parametric sweep.\n\t\tNOTE: This step will run the simulation and a parametric sweeping was added, where multiple simulations were done with the value of a parameter changed in each simulation. Here, the electrode radius parameter was swept and the electric potential distribution for each simulation was stored in the model file. After the simulation was run, the Results branch in the Model Tree was populated with an Electric Potential (ec) Multislice graph.\n\t\t\nIn the Model Tree, right-click on Study 1 > Parametric Sweep. Click on Parametric Sweep, and in the Study Setting table, click on Add, and then choose elec_rad for the Parameter Name.\nType '50, 150, 350, 500' for the Parameter Value List and 'µm' for the Parameter Unit, and click on Compute to run the study (Supplementary Figure 4).\nimgsrc://cloudfront.jove.com/files/ftp_upload/63792/63792fig01.jpg\nFigure 1: Creating the tisssue geometry. A block geometry was inserted into the FEM model to represent the tissue. Please click here to view a larger version of this figure.[href=https://www.jove.com/files/ftp_upload/63792/63792fig01large.jpg]\nimgsrc://cloudfront.jove.com/files/ftp_upload/63792/63792fig02.jpg",
    "Figure 2: Creating the electrode's geometry. (A) Making a work plane to draw the disk electrode. (B) Sketching a circle on a work plane to create a disk electrode. Please click here to view a larger version of this figure.[href=https://www.jove.com/files/ftp_upload/63792/63792fig02large.jpg]\nimgsrc://cloudfront.jove.com/files/ftp_upload/63792/63792fig03.jpg\nFigure 3: The element quality histogram of the FEM model. The histogram showed the quality of the elements throughout the model. Mesh refinements are needed if a significant portion of the elements are in the low quality region. Please click here to view a larger version of this figure.[href=https://www.jove.com/files/ftp_upload/63792/63792fig03large.jpg]\nimgsrc://cloudfront.jove.com/files/ftp_upload/63792/63792fig04.jpg\nFigure 4: Assigning a current value to the electrode. A unitary current applied to the electrode's geometry in the FEM software. Please click here to view a larger version of this figure.[href=https://www.jove.com/files/ftp_upload/63792/63792fig04large.jpg]\n2. Importing the geometry of the neural cell in the neuron computational suite's GUI\nBuild the geometry of the cell model\n\t\nImporting the morphology using the Cell Builder feature.\n\t\t\nRun 'nrngui' from the neuron computational suite's installation folder, click on Tools > Miscellaneous > Import 3D, and then tick the Choose a File box.\nLocate the downloaded .swc file and click on Read. Once the geometry has been imported, click on Export > Cell Builder (Supplementary Figure 5).\nCreating a .hoc file of the imported cell morphology\n\t\t\nGo to the Subsets tab and observe the subsets that have been predefined in the model (e.g., soma, axon, basal, etc). Tick the Continuous Create box, go to Management > Export, and export the morphology as 'rgc.hoc'.\nViewing the morphology of the cell\n\t\t\nClick on Tool > Model View > 1 Real Cells > Root Soma[0] on the toolbar, right-click on the appearing window and click on Axis Type > View Axis. By visual inspection, this model's dendritic field diameter is around 250 µm. Close the NEURON windows for now.",
    "imgsrc://cloudfront.jove.com/files/ftp_upload/63792/63792fig05.jpg\nFigure 5: Exporting the neuron model information as a .hoc file. The geometry of the neuron was exported to a .hoc file to allow further modifications. Please click here to view a larger version of this figure.[href=https://www.jove.com/files/ftp_upload/63792/63792fig05large.jpg]\nimgsrc://cloudfront.jove.com/files/ftp_upload/63792/63792fig06.jpg\nFigure 6: Measuring the dimension of the neuron. The morphology of the neuron (top view) was displayed in the GUI of the neuron computational suite with the x-y axes superimposed. The scale was in µm. Please click here to view a larger version of this figure.[href=https://www.jove.com/files/ftp_upload/63792/63792fig06large.jpg]\n3. Programming the NEURON computation simulation\nAdjusting the cell's morphology by programming in .hoc language\n\tNOTE: The morphology of the cell can be adjusted via the GUI's Cell Builder feature. However, how this could be done by editing the .hoc file to speed up the process is demonstrated. The .hoc file defines the topology (physical connections between each part of the neurons), morphology (the length, diameter, and location of each neuron section) and the biophysical properties (ion channel parameters) of the modeled cell. The complete documentation for .hoc programming can be found in: https://neuron.yale.edu/neuron/static/new_doc/index.html#,\n\t\nOpen the resulting .hoc file with a text editor (e.g., Notepad). Add an axon initial segment of 40 µm length and a narrow axonal segment of 90 µm length close to the soma as described in Sheasby and Fohlmeister17, as well as change the length of the dendrites so that the dendritic field size becomes 180 µm to match the G1 cell in Rockhill, et al.18.\n\t\t\nCreating new cell sections and defining the topological connections for each section.\n\t\t\t\nTo create new cell sections for the axon initial segment (AIS) and the narrow axonal segment (NS), add these lines to the beginning of the rgc.hoc file:\ncreate AIS, NS // Declaring cell compartments called AIS and NS",
    "Then, replace the line 'connect axon(0), soma[1](1)' with:\nconnect ais(0), soma[1](1) // Connecting the first segment of AIS to the end of soma[1]\nconnect ns(0), ais(1) // Connecting the first segment of NS to the end of AIS\nconnect axon(0), ns(1) // Connecting the first segment of the axon to the end of NS\nDefining the 3D positions, diameters, and length of the cell sections\n\t\t\t\nDefine the 3D positions and diameters of the AIS and NS compartments by writing these lines inside the 'proc shape3d_31()' brackets:\nais { pt3dadd(-2.25, -1.55, 0, 1) // The first three numbers are the xyz-coordinate, and the diameter is 1 µm\npt3dadd(37.75, -1.55, 0, 1)} // The first point is at x = -2.25 µm and the last point is at x = 37.75 µm\nns { pt3dadd(37.75, -1.55, 0, 0.3) // The 3D coordinates and the diameter for the NS segments\npt3dadd(127.75, -1.55, 0, 0.3)}\nAt the end of the file, shift the axon's 3D coordinate so that its initial point meets the end point of NS by typing:\n\t\t\t\taxon {for i=0,n3d()-1 {pt3dchange(i, x3d(i)+130, y3d(i),z3d(i)-5, diam3d(i))}} //Shift the x-coordinate\nAt the end of the file, shorten the dendritic compartments by 18% by typing:\nforsec basal {L=L*0.82} // Scaling the length to make the dendritic field size smaller\ndefine_shape() // Filling in missing 3D information\nDefining the number of segments for each section",
    "NOTE: Each section of the neuron can be spatially discretized, much like the process of meshing in the FEM model. The spatial discretization divides the neuron virtually into smaller segments where computations are to be done. For the number of segments 'nseg', make sure that odd numbers are used to ensure that there is an internal node at the midpoint of a cell section, and try tripling the nseg number until the computation produces a consistent result9. A higher number of segments will produce a more accurate numerical approximation but also increases the computational load.\n\t\nTo exemplify the discretization process, add the following lines in the rgc.hoc file to divide the neuronal sections in the somatic and axonal subsets into several segments:\nforsec somatic {nseg=31}\nforsec axonal {nseg=301}\n\t\tOther sections in the model need to be discretized as well by typing these lines but changing the subset name (after 'forsec') and the number of segments (after 'nseg') as desired.\nInsert customized ion channel mechanisms\n\t\nWriting customized ion channel mechanisms as .mod files: To apply the ion channel mechanisms, create .mod files and insert the files into the biophysical section part of the .hoc file by following steps 3.3.1-3.3.3. The .mod file contains the variables and the differential equations to be solved for each ion channel.\n\t\tNOTE: Correct ion channel mechanism definitions and implementations are critical in accurate neuron simulations. When writing .mod files, check whether the units are correct (the provided 'modlunit' utility that can be run to check unit consistency) and that the equations are written correctly. To test that the ion channel mechanisms are correct, the current for each ion channel during intracellular or extracellular stimulation can be plotted and compared to empirical findings.\n\t\t\nVoltage-gated ion channels",
    "NOTE: A .mod file to create a voltage-gated ion channel typically includes a DERIVATIVE block that has the differential equation to solve, a BREAKPOINT block that has the commands to solve the differential equations using a chosen numerical approximation method, and PROCEDURE blocks that tell the program to calculate the gating parameters (e.g., mt, ht, and d in this example). This code will calculate the values of the ionic current passing through the channel for each time step.\n\t\t\t\nTo exemplify the process, create a voltage-dependent Ca channel that has first-order differential equations to solve for the gating variables.\nOpen a new file in the text editor and type the lines in the Supplementary Material-Defining a voltage-dependent Cat channel. Save this file as Cat.mod in the same folder as the .hoc file. This process needs to be repeated for the other ion channels that the model neuron contains.\nVoltage- and concentration-dependent ion channels\n\t\t\t\nThe kinetics of some ion channels, such as the calcium-activated potassium channels in the retinal ganglion cells, depend on the intracellular calcium concentration besides the transmembrane voltage19. To model this type of mechanism, create a file called KCa.mod, and type the lines as shown in Supplementary Material-Voltage- and concentration-dependent ion channels. In this .mod file, the variable 'cai', which is defined as the internal concentration of Ca ion was calculated, and then this variable is used in the equation to calculate the iKCa current.\nCompilation of .mod files\n\t\t\nCompile all the .mod files by running the neuron computational suite's mknrndll utility from the installation folder. Locate the folder where the .mod files are contained and click compile to create O and C files. After this, the mechanisms can be inserted into this cell model.\nApplication of the .mod files in the main NEURON model file.",
    "NOTE: Besides inserting the ion channels, the maximum Na conductance was defined for the 'somatic' subset only. We could individually adjust the maximum membrane conductance for different neuronal segments if necessary.\n\t\t\nFor brevity, combine all the ion channel mechanisms to a single .mod file (Supplementary Material-Complete .mod file). Insert the combined .mod file containing all the ion channels and a passive leak channel to all the segments in the 'somatic' subset by typing the lines below in the 'biophys' procedure of the rgc.hoc file:\nforsec somatic {insert rgcSpike\n\t\t\tinsert pas // passive leak channel\n\t\t\tgnabar_rgcSpike = 80e-3\n\t\t\tg_pas = 0.008e-3 // leak membrane conductance}\nSetting the axoplasmic resistivity\n\t\t\nThe cells have axoplasmic resistivity that can be changed per compartment. For this model, all segments have the same resistivity of 110 Ω·cm. Change the axoplasmic resistivity in the rgc.hoc file:\nforall {Ra = 110}\nInsert extracellular mechanisms and define pulse waveform\n\t\nInserting an extracellular mechanism into the cell model\n\t\t\nFor the cell model to respond to extracellular voltage, insert an extracellular mechanism into all segments by typing the line at the bottom of the rgc.hoc file:\nforall {insert extracellular}\nCreating a biphasic pulse\n\t\tNOTE: In this demonstration, a constant current biphasic pulse is made that is user-adjustable in pulse width, interphase gap, and the number of repetitions by creating a procedure in a .hoc file. For a more structured program, use the rgc.hoc file as a file to create the cell model, while the stimulation process is applied in a separate .hoc file, which would load the cell model to which the stimulation is applied.",
    "Create a new text file called stimulation.hoc and start the code by loading the cell model file; then, make a biphasic pulse by defining a procedure as shown in Supplementary Material-Creating a biphasic pulse in the neuron simulation.\n\t\t\tNOTE: This step creates a constant current cathodic-first biphasic pulse where the stimulus parameters are to be declared by the user when running the simulation. Currently, the magnitude of the anodic and cathodic pulses is ±1 µA, but this magnitude needs to change depending on the stimulation current delivered by the disk electrode.\n4. Running and automating multiple simulations\nCombining the models\n\t\nExtracting the coordinates for the nodes in the neuron cell model\n\t\tNOTE: The purpose of combining the simulations is to acquire the extracellular potential values corresponding to each node of the cell model. The coordinates of the two models must, however, be aligned. In this example, the center segment of the soma (soma(0.5)) was aligned to lie on the horizontal midplane of the retinal tissue (corresponding to the retinal ganglion cell layer), with the center node of the soma located right above the center of the disk electrode.\n\t\t\nOpen the FEM model, and note the coordinate of a reference point (e.g., the horizontal midplane of the retinal tissue, above the center of the disk electrode), in which case it is [0, 0, 131.5] µm.\nIn the neuron computational suite, create a file called calculateCoord.hoc to extract the coordinates of each segment's centroid and shift each section so that the center segment of the soma has the same coordinate as the reference point in the FEM model (Supplementary Material-Calculating the coordinate of each node).\nSaving the coordinate points to a text file",
    "Run the calculateCoord.hoc file (either by double-clicking from the File Explorer or by opening GUI of the neuron computational suite; then, click on File > load hoc in the toolbar). Save the coordinates for the extracellular voltage values to be evaluated to a text file named 'coordinates.dat'.\nRunning the simulations and saving the voltage data to a text file\n\t\tNOTE: In this step, we extracted the calculated extracellular values from the FEM model, but we would only save the data from the relevant coordinates that coincide with the centre of each cell segment. Follow step 4.1.6.2 when a large number of potentials are required to export.\n\t\t\nOpen the tissue model file in the FEM software; go to the Results heading in the Model Tree, and click on Export > Data > Data 1. Make sure that the Dataset is set to Study 1/Parametric Solutions 1, and then type 'V' in the Expression column and 'mV' in the Unit column.\nUnder Output, change the Filename to extracellular.dat, and choose Points to Evaluate in: From File. Load the coordinates.dat for the Coordinate File field, and then click on Export.\nApplying the biphasic pulse to the cell model\n\t\tNOTE: At this stage, the extracellular voltage values for each cell segment at one time point (where the current is 1 µA) is available. As the study intends to subject the cell to a biphasic pulse, make the extracellular voltage value experienced by the cell change with time using the 'vector.play' method.\n\t\t\nAdd the lines shown in the Supplementary Material-Application of the biphasic pulse in the stimulation.hoc.\nRunning the combined simulation\n\t\tNOTE: A time interval 'dt' for the numerical approximations needs to be defined to run the simulations. Similar to nseg, a shorter dt can increase the computational accuracy but also increases the computational cost.",
    "Add the lines shown in the Supplementary Material-Executing the neuron simulation to the end of the stimulation.hoc. Then, double-click on the stimulation.hoc file to load the script and automatically run the simulation. The transmembrane potential of the segment of interest can be displayed in the GUI of the neuron computational suite (step 4.2.1) or saved to a text file to be read in other programs (step 4.1.6.1.2). Follow steps 4.1.6.1 and 4.1.6.2 if repeated calculations and a large number of membrane potentials need to be exported.\nExtra: Automating simulations\n\t\tNOTE: To find a threshold amplitude, loop the simulation several times with a different current amplitude each time. Another automation might be needed to find the threshold for neurons located at different positions relative to the stimulating electrode. An automation step can be done in the neuron computational suite using a procedure, as well as in the FEM software using a script called a 'method'.\n\t\t\nAutomation of neuron simulation to find a threshold amplitude\n\t\t\tNOTE: A batch of neuron simulations can be done automatically. The following steps are implemented in the neuron simulation program to find the threshold amplitudes of neurons under different stimulation parameters.\n\t\t\t\nCreate a procedure to repeat simulation in the neuron simulation program: In the stimulation.hoc, create a vector to contain a range of current amplitude to test. Then, create a procedure to apply the current amplitude and record any presence of a spike (a positive change from a negative to a positive transmembrane voltage), and the threshold amplitude is defined as the lowest current amplitude that causes a spike to occur. To do this, define a procedure called findTh() (Supplementary Material-Looping over a range of current amplitudes) at the end of the stimulation.hoc file",
    "Saving the response at the threshold to a text file: Add the following lines to the findTh() procedure in the stimulation.hoc to store the calculated transmembrane voltage values for all neuron compartments from each time step in a text file:\nsprint(saveFileName, \"Response_%d.dat\", th) // Store the threshold value\n\t\t\t\tsaveFile.wopen(saveFileName)\n\t\t\t\tfor i=0,(responseVector.size()-1){\n\t\t\t\tsaveFile.printf(\"%g, \", responseVector.x[i])\n\t\t\t\tif(i==responseVector.size()-1) {saveFile.printf(\"%g\\n\", responseVector.x[i])\n\t\t\t\tsaveFile.close(saveFileName)\n\t\t\t\t}}\nAutomation in the FEM software to find the voltage values for neurons in different locations\n\t\t\tNOTE: Another automation that can be done is the automatic acquisition of extracellular voltage values for neurons in different locations. The Application Builder menu in the FEM software provides a means to define a 'method', or a script to automate the steps needed for the software to perform calculations. To demonstrate, the location of the cell in the x-direction is shifted by 5 times in a 100 µm step (Supplementary Figure 6).\n\t\t\t\nWriting a code for automations of FEM simulations.\n\t\t\t\t\nGo to the Application Builder, right-click on Methods in the Application Builder tree, choose New Method, and click on OK. Go to File > Preferences > Methods, tick the View All Codes box, and click on OK.\nWrite a .hoc script that will load the coordinate file, shift the values to match the desired location, and save a text file containing the voltage values for the new location of the cell by typing the codes shown in the Supplementary Material-Defining a method to automate FEM simulations.\nRunning the automated steps in the FEM software: Switch to the Model Builder, Developer > Run Method > Method 1. This will produce .dat files with the appropriate voltage values, named extracellular_1.dat, extracellular_2.dat, etc.\nLooping the simulations in a general purpose programming language",
    "NOTE: To loop the simulations, the appropriate text file needs to be loaded to the neuron computational suite's simulation each time, and a programming language20 that can load and manipulate text files easily is convenient to perform this step. Any convenient integrated development environment (IDE)21 can be used for this step.\n\t\t\t\nOpen the chosen IDE, click on New File to make a new script. Here a .py file is used in this example. Type the lines shown in Supplementary Material-Running the simulations in a general purpose programming language.\nFinally, click on Run or press F5 to run the script, which will also open the GUI (Supplementary Figure 7).\nDisplay of simulation data\n\tNOTE: By following all the steps above, the simulation results should be stored in text files, containing the threshold value and the transmembrane potential at the threshold. However, the user has the option to display the simulation result while the simulation is running using NEURON's GUI.\n\t\nGraph the response of the neuron model to the extracellular stimulation in the neuron computational suite's GUI. To do this, run stimulation.hoc, click on Graph > Voltage Axis from the toolbar, and on the graph window, right-click anywhere and choose Plot What.\nType in 'axon.v(1)' in the Variable to Graph field, which means that it will plot the transmembrane potential of the last segment of the axon per time step.\nimgsrc://cloudfront.jove.com/files/ftp_upload/63792/63792fig07.jpg\nFigure 7: Displaying and exporting the FEM computation results to a text file. The Graphics window showing a Multislice plot of the electric potential in V. The options in the Data Export Setting allowed exporting the calculated variable into a text file. Please click here to view a larger version of this figure.[href=https://www.jove.com/files/ftp_upload/63792/63792fig07large.jpg]\nimgsrc://cloudfront.jove.com/files/ftp_upload/63792/63792fig08.jpg",
    "Figure 8: Displaying the graph of the transmembrane potential using a voltage graph. The neuron transmembrane potential was displayed in the GUI of the neuron computational suite. The x-axis is time in ms, while the y-axis is the transmembrane potential of the chosen neuron segment in mV. Please click here to view a larger version of this figure.[href=https://www.jove.com/files/ftp_upload/63792/63792fig08large.jpg]Subscription Required. Please recommend JoVE to your librarian."
  ],
  "subjectAreas": [
    "Neuroscience"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research"
  ]
}