{
  "id": 19685,
  "origin_website": "Wiley",
  "title": "Exploring the Genomic Landscape of Cancer Patient Cohorts with GenVisR",
  "procedures": [
    "The GenVisR Waterfall() function has the ability to read in data in a variety of formats including Ensembl Variant Effect Predictor (VEP) or mutation annotation formats (MAF; (McLaren et al., 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-bib-0009]); https://docs.gdc.cancer.gov/Data/File_Formats/MAF_Format/#introduction[href=https://docs.gdc.cancer.gov/Data/File_Formats/MAF_Format/#introduction]. These standard formats have the advantages of being widely used and simple to create. However, the Waterfall() function also has the flexibility to support custom data formats in the form of a data.frame or data.table structure, given that the structure has at least gene, sample, and mutation information. Here we will use that method for an illustrative set of variant calls from a Phase 1 clinical trial of Buparlisib for metastatic breast cancer patients (Ma et al., 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-bib-0007]). This file was derived from pipelines running the Genome Modeling System (Griffith et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-bib-0005]).\nNecessary Resources\nHardware\nA modern compute environment capable of running R/Rstudio > 3.5.0\nSoftware\nR/Rstudio and the Bioconductor package GenVisR. GenVisR can be installed via Bioconductor. See Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0005].\nFiles\nAn example dataset containing variant calls from a Phase1 clinical trial is available at: http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv[href=http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv]\n1. Load the “GenVisR” and “data.table” libraries, if they are not installed (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0005]). Note that data.table is a GenVisR dependency and will be installed automatically when installing GenVisR\n         \nlibrary(GenVisR)\nlibrary(data.table)\n2. Read in available mutation data; here we read a custom TSV file directly from a URL into a data.table object.\n         \nmyVars <-\nfread(\"http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Mutation_Data.tsv\")\n3. The Waterfall() function will look for specific column names within the data.table; these are expected to be “sample”, “gene”, and “mutation”. Here we rename our columns to conform to this expectation. The amino acid change column is not required, but is used in Basic Protocol 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0004]. All other columns are not used and ignored.\n         \nmyVars <- myVars[,.(`patient`, `gene name`, `trv type`, `amino acid change`)]\nsetnames(myVars, c(\"sample\", \"gene\", \"mutation\", \"amino acid change\"))",
    "The backticks above are necessary because of the spaces in our column names.\n4. In situations where there are multiple mutations for the same gene/sample, we need to specify which mutation type should get the priority for plotting purposes. This is done by defining a mutation hierarchy as a data.table, where the most significant mutation should come first. We also tell Waterfall what colors we would like to plot in this step.\n         \nmyHierarchy <- data.table(\"mutation\"=c(\"nonsense\", \"frame_shift_del\", \"frame_shift_ins\", \"in_frame_del\", \"splice_site_del\", \"splice_site\", \"missense\",\n\"splice_region\", \"rna\"), color=c(\"#FF0000\", \"#00A08A\", \"#F2AD00\", \"#F98400\", \"#5BBCD6\", \"#046C9A\", \"#D69C4E\", \"#000000\", \"#446455\"))\n5. With the core data imported, we can now construct our plot object. The output will include not only graphical objects, but the underlying data from which they were constructed as well.\n         \nplotData <- Waterfall(myVars, mutationHierarchy = myHierarchy)\n6. We next save this plot to a PDF device for viewing and/or publication. First we open a PDF device in R. We then use the GenVisR drawPlot() function to output a plot (Fig. 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-fig-0001]), and finally close the graphics device.\n         \npdf(file=\"Figure_1.pdf\", height=8, width=12)\ndrawPlot(plotData)\ndev.off()\nSaving to a PDF is optional; calling drawPlot() by itself will generate a plot in the Rstudio viewer window. Also, R provides a number of options for saving graphics, in addition to pdf() there are png(), jpeg(), tiff(), and bmp() functions that are available for use within base R.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/7a224c5d-e8fa-451a-a20b-ff5d53ea413b/cpz1252-fig-0001-m.jpg</p>\nFigure 1\nGenVisR drawPlot() function plot of multiple mutations within the same gene/sample.",
    "It is often beneficial to view clinical annotations for each patient in the context of mutations. Doing so may help identify important associations. For example, mutations in a specific gene may be associated with treatment response, sex, tumor stage, or subtype. Waterfall() allows for the addition of clinical annotations to make such patterns obvious. This protocol is an addendum to Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0001] and assumes that the relevant libraries and data from that protocol are already present.\nNecessary Resources\nHardware\nA modern compute environment capable of running R/Rstudio > 3.5.0.\nSoftware\nR/Rstudio, GenVisR\nFiles\nAn example dataset containing clinical data from a Phase1 clinical trial is available at: http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv[href=http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv]\nmyVars (see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0001])\nmyHierarchy (see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0001])\n1. First, read the clinical data. In this case, data is saved in a custom TSV file and read directly from a URL.\n         \nmyClinical <-\nfread(\"http://genomedata.org/gen-viz-workshop/GenVisR/BKM120_Clinical.tsv\")\n2. Subset the clinical data to the data needed for this example. We require sample information and one or more clinical variables.\n         \nmyClinical <- myClinical[,.(`sample Number`, `Best response`, `PTEN Immunohist.`)]\n3. The “sample” name column should be named as such, and should match those sample designations that were used in the myVars data structure (i.e., Sample 1 should be named as such in both the myVars and myClinical data objects).\n         \nsetnames(myClinical, c(\"sample\", \"Best response\", \"PTEN Immunohist.\"))\nmyClinical[,sample := gsub(\"WU0+\",\"\",sample)]\n4. Create a named vector for clinical variables and colors to set a color palette. In our example, we have six clinical variables that we must supply names and colors for.\n         \nmyClinicalColors <- c(\"Progressive Disease\"=\"#798E87\", \"Stable Disease\"=\"#C27D38\", \"Partial Response\"=\"#CCC591\", \"negative\"=\"#29211F\", \"positive\"=\"#9C964A\", \"unknown\"=\"#85D4E3\")\nWe use hex codes here to designate color, but any character string that R can recognize as a color will work.",
    "5. Read the clinical information into GenVisR via the Clinical() function. This function looks for a data.frame or data.table with a “sample” column. All other columns will be treated as clinical variables. We also set a color palette and specify that we would like our legend split up into two columns.\n         \nclinicalData <- Clinical(inputData = myClinical, palette = myClinicalColors, legendColumns = 2)\n6. Call the Waterfall() function as before, this time including the clinical object we created above via the “clinical” parameter.\n         \nplotData <- Waterfall(myVars, mutationHierarchy = myHierarchy, clinical = clinicalData)\n7. As the final step in this protocol, save and view the final plot (Fig. 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-fig-0002]), as was done in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0001].\n         \npdf(file=\"Figure_2.pdf\", height=8, width=12)\ndrawPlot(plotData)\ndev.off()\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/334c43bb-eb79-4941-86b9-4cb6d076f451/cpz1252-fig-0002-m.jpg</p>\nFigure 2\nClinical annotations for a sample within the context of mutations utilizing the Waterfall() function.",
    "By default, the Waterfall() function will display observed mutation frequencies from the input data prior to any filtering that the function itself does. However, this can be misleading due to variances in the genomic space sequenced within the cohort. This issue can be resolved by calculating the tumor mutation burden (TMB), which normalizes for covered space. In this protocol, we examine how to instruct Waterfall() to output a TMB instead of a frequency for the top panel.\nNecessary Resources\nHardware\nA modern compute environment capable of running R/Rstudio > 3.5.0\nSoftware\nR/Rstudio, GenVisR\nFiles\nAn example dataset containing coverage data from a Phase1 clinical trial is available at: http://genomedata.org/gen-viz-workshop/GenVisR/bkm120_coverage[href=http://genomedata.org/gen-viz-workshop/GenVisR/bkm120_coverage]\nmyVars (see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0001])\nmyHierarchy (see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0001])\n1. First, read in the coverage data from a custom TSV file. The file contains a sample column and the number of bases covered to at least 20×.\n         \nmutationBurden <-\nfread(\"http://genomedata.org/gen-viz-workshop/GenVisR/bkm120_coverage.txt\")\n2. The sample column must match the sample identifiers used in the main plot. We use a regular expression here so the identifiers match between the data in the mutationBurden and myVars objects.\n         \nmutationBurden[,sample := gsub(\"WU0+\", \"\", sample)]\n3. The parameter in Waterfall() that specifies the coverage space for each sample requires a named vector. Here we create that object.\n         \nmyMutBurden <- as.numeric(mutationBurden$coverage)\nnames(myMutBurden) <- mutationBurden$sample\n4. The Waterfall() function will plot mutation burden instead of mutation frequency if we set the “burden” flag for the “plotA” parameter. We also supply the named vector holding the coverage space so Waterfall() can properly calculate this for each sample using the parameter “coverage”.\n         \nplotData <- Waterfall(myVars, mutationHierarchy = myHierarchy, coverage=myMutBurden, plotA = \"burden\")\n5. Finally, we output the plot (Fig. 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-fig-0003]) to a PDF device, as done in prior protocols.\n         \npdf(file=\"Figure_3.pdf\", height=8, width=12)\ndrawPlot(plotData)\ndev.off()\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/e484ed4f-985d-47b6-93e5-55ab2ea80090/cpz1252-fig-0003-m.jpg</p>\nFigure 3",
    "Calculated tumor mutation burden (TMB) for a sample with normalized covered space utilizing the Waterfall() function.",
    "GenVisR functions are designed to be user friendly, with many aesthetic options exposed to the end user. However, exposing all aesthetic options as parameters is unfeasible. To get around this, all GenVisR plots can add layers conforming to the ‘grammar of graphics’ paradigm used by ggplot2 (Wickham, 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-bib-0014]). With knowledge of ggplot2 syntax, virtually any aesthetic element in a plot can be manipulated. In this protocol, we use some of the Waterfall() function exposed features to add greater detail to the mutation subplot (top sub-panel; plotA) and the gene subplot (left sub-panel; plotB). We also will limit the size of the display to 10 genes, and add labels to plot cells. We then go on to use ggplot to manipulate additional aesthetic features of the main plot (main panel; plotC). Specifically, we change the color and rotation of the x-axis labels as well as increase their size. These parameters are a small subset of options available to users: additional parameters include additional aesthetic changes, data filtering options, and annotation parameters. A full list of parameters is available within the R documentation of the GenVisR library.\nNecessary Resources\nHardware\nA modern compute environment capable of running R/Rstudio > 3.5.0\nSoftware\nR/Rstudio, GenVisR\nFiles\nmyVars (see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0001])\nmyHierarchy (see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0001])\n1. The waterfall function can tabulate counts per mutation type for both the sample and gene subplots; these are controlled by switching the plotATally and plotBTally parameters to from “simple” to “complex”. With these parameter settings, the top and side plots now show a more complex view of mutation frequency colored by mutation type.\n         \nplotData <- Waterfall(myVars, mutationHierarchy = myHierarchy, plotATally = \"complex\", plotBTally = \"complex\")",
    "2. A common request is to add additional information to waterfall plot cells in addition to mutation type. GenVisR supports this if there is a column in the original input from which to pull additional annotations. Here we modify the labels in the “amino acid change” column of myVars (see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-prot-0001]), and set up Waterfall() to pull these annotations.\n         \nmyVars[,`amino acid change` := gsub(\"p.\", \"\", `amino acid change`)]\nplotData <- Waterfall(myVars, labelColumn=\"amino acid change\", mutationHierarchy = myHierarchy, plotATally = \"complex\", plotBTally = \"complex\")\n3. It is often useful to view only a subset of available data. Here, we will use the geneMax parameter to specify that only the top 10 most common genes should be displayed.\n         \nplotData <- Waterfall(myVars, labelColumn=\"amino acid change\", mutationHierarchy = myHierarchy, plotATally = \"complex\", plotBTally = \"complex\", geneMax=10)\n4. Adding ggplot2 layers to a plot allows control over aesthetic elements. Here we adjust the axis text of the main plot to be horizontal, bigger, and colored red. We load the ggplot2 library first, then use ggplot2 syntax and save the resulting object into a list. This is then passed into the Waterfall() function via the parameter “plotCLayers”.\n         \nlibrary(ggplot2)\nnewLayer <- list(theme(axis.text.x=element_text(angle=0, color=\"tomato1\", size=16)))\nplotData <- Waterfall(myVars, labelColumn=\"amino acid change\", mutationHierarchy = myHierarchy, plotATally = \"complex\", plotBTally = \"complex\", geneMax=10, plotCLayers = newLayer)\n5. Save and view the plot (Fig. 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.252#cpz1252-fig-0004]) as before. In order to fit the text of the cell labels onto the plot, we slightly increase the width of the graphics device to 20.\n         \npdf(file=\"Figure_4.pdf\" height=8, width=20)\ndrawPlot(plotData)\ndev.off()\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/999bd1d0-f9ea-4560-ac77-61c04d8a80d5/cpz1252-fig-0004-m.jpg</p>\nFigure 4\nDemonstration of the Waterfall() function, which can be used to expose features to add greater detail to the mutation subplot (top sub-panel; plotA) and the gene subplot (left sub-panel; plotB).",
    "A brief guide for installing R/Rstudio and supporting software. We recommend installing GenVisR via Bioconductor.\nNecessary Resources\nHardware\nA modern compute environment capable of running R/Rstudio > 3.5.0\nSoftware\nR/Rstudio\nFiles\nNone\n1. Download R from https://www.r-project.org/[href=https://www.r-project.org/], open the installer, and follow the installation prompts.\n2. Download Rstudio Desktop from https://www.rstudio.com[href=https://www.rstudio.com], open the installer, and follow the installation prompts.\n3. Open Rstudio and type the following command:\n         \nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\ninstall.packages(\"BiocManager\")\nBiocManager::install(\"GenVisR\")\nThis will install the Bioconductor package manager “BiocManager” if it is not already installed, and will then install GenVisR from Bioconductor."
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}