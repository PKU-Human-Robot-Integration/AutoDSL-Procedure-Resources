{
  "id": 3508,
  "origin_website": "Cell",
  "title": "Computational protocol for the identification of X-linked genes contributing to X chromosome upregulation from RNA-sequencing datasets",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nDownload and prepare the expression matrix for analysis\nTiming: 30 min\nThis step describes the preparation of expression matrix.\nYou can download the expression matrix and phenotypic/grouping data matrix from GEO according to the accession number, then integrate them together. For convenience, you can download the RData of integrated expression matrix and grouping information we prepared in our GitHub repository.\nNote: In GEO website, the sample grouping information and gene expression matrix is separately archived in a text file.\nDownload sample grouping information through a hyperlink “Series Matrix File(s)”. And download gene expression matrix through a hyperlink “http” (Figure 1[href=https://www.wicell.org#fig1]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3080-Fig1.jpg\nFigure 1. Screenshots of the expression matrix\n(A) Screenshots of a hyperlink of “Series Matrix File(s)” in GEO.\n(B) A screenshot of “allcount”, which contains reads-count of all samples.\n(C) A screenshot of “allgroup”, which contains group information.\nExtract the grouping information from the series matrix.\nOnce acquired, integrate them into RStudio.\nAlternatives: Download the prepared RData (prepared_sample_data_of_GSE71442.RData) from our GitHub repository, which contains reads-count of all samples, named as “allcount” (Figure 1[href=https://www.wicell.org#fig1]B), and grouping information, named as “allgroup” (Figure 1[href=https://www.wicell.org#fig1]C). The group and reads-count information are organized as matrices, respectively.\n> #An example of how to integrate gene expression matrix and grouping information into RStudio,\n> #download GSE69970_htseq_counts.txt from https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc= GSE69970[href=https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=%20GSE69970].\n> #download GSE75951_htseq_counts.txt from https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc= GSE75951[href=https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=%20GSE75951].\n> #download GSE86400_cast.counts.txt from https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc= GSE86400[href=https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=%20GSE86400].\n>GSE69970 = read.table('GSE69970_htseq_counts.txt',header = T)\n>GSE75951 = read.table(‘GSE75951_htseq_counts.txt’,header = T)\n>GSE86400 = read.table('GSE86400_cast.counts.txt',header = T)\n>colnames(GSE69970)[1]\n>colnames(GSE75951)[1]='symbol'\n>colnames(GSE86400)[1]='symbol'\n>allcount = merge(GSE69970,GSE75951,by.x ='symbol',all.x = T)\n>allcount = merge(allcount,GSE86400,by.x ='symbol',all.x = T)\n>allcount = allcount[-1:-5,]\n>allgroup = read.table('allgroup.txt',header = T)\n>allgroup$stage_genotype_sex = paste(allgroup$stage,allgroup$genotype,allgroup$sex,sep = '_')\n>allgroup$genotype_sex = paste(allgroup$genotype,allgroup$sex,sep = '_')\n>rownames(allcount)=allcount$symbol\n>save(allcount,allgroup,file = 'prepared_sample_data_of_GSE71442.RData')\n># ‘allcount’ variable is the reads-count of all samples, and ‘allgroup’ is the corresponding group information.",
    "Normalize gene expression\nTiming: 30 min\nThis step describes the normalization of gene expression.\nDue to the differences in transcript length among genes and total sequencing reads among samples, raw read counts cannot be used directly to compare gene expression levels between samples.24[href=https://www.wicell.org#bib23] To address this issue, normalization methods such as RPKM (reads per kilobase of transcript per million reads mapped), FPKM (fragments per kilobase of transcript per million reads mapped), and TPM (transcript per million) have been developed for RNA-seq data analysis. TPM directly normalizes for differences in gene length and sequencing depth without relying on a normalization factor, providing more accurate estimates of gene expression levels, particularly for lowly expressed genes. Here we normalize the reads-count to TPM.\nPrepare gene information, including gene length, gene symbol, chromosome start location, and end location.\nUse R package “TxDb.Mmusculus.UCSC.mm10.knownGene” to acquire non-overlapping exon length of each gene, which is defined as gene length. Troubleshooting 2[href=https://www.wicell.org#sec6.3].\n> library(\"TxDb.Mmusculus.UCSC.mm10.knownGene\")\n> txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene\n> exon_txdb=exons(txdb)\n> genes_txdb=genes(txdb)\n>\n> overlap_list = findOverlaps(exon_txdb,genes_txdb)\n> overlap_list\n> t1=exon_txdb[queryHits(overlap_list)]\n> t2=genes_txdb[subjectHits(overlap_list)]\n> t1=as.data.frame(t1)\n> t1$geneid=mcols(t2)[,1]\n> gene_length = lapply(split(t1,t1$geneid),function(x){\n+ head(x)\n+ tmp=apply(x,1,function(y){y[2]:y[3]})\n+ length(unique(unlist(tmp)))})\n> gene_length =data.frame(gene_id=names(gene_length),length=as.numeric(gene_length))\n> head(gene_length)\n#The outcome should be the data.frame of gene length and gene ID\nUse R package “org.Mm.e.g.,.db” to acquire the corresponding information of gene length and gene symbol. Troubleshooting 3[href=https://www.wicell.org#sec6.5].\n> library(org.Mm.eg.db)\n> #Gene symbol and gene_ID\n> Gene_symbol=toTable(org.Mm.egSYMBOL)\n> #Gene chromosome and gene_ID\n> Gene_start = toTable(org.Mm.egCHRLOC)\n> Gene_end = toTable(org.Mm.egCHRLOCEND)\n> Gene_start_end = merge(Gene_start, Gene_end[,-3], by='gene_id', all.x = T)\n> Gene_start_end = Gene_start_end[!duplicated(Gene_start_end$gene_id),]\n> #merge information\n> gene_information=merge(gene_length,Gene_symbol,by='gene_id')\n> gene_information=merge(gene_information,Gene_start_end,by='gene_id', all.x = T)\n> head(gene_information)\n# The outcome is the matrix including gene_id, length, symbol, start_# location, end_location, and chromosome.\nMerge the matrix of gene_information and allcount.",
    "> merge_allcount = na.omit(merge(allcount, gene_information, by='symbol', all.x = T))\nCalculate normalized gene expression (TPM). Troubleshooting 4[href=https://www.wicell.org#sec6.7].\n> #define a countToTPM function\n> countToTpm = function(counts, genelength)\n+ {\n+ rate = log(counts) - log(genelength)\n+ denom = log(sum(exp(rate)))\n+ exp(rate - denom + log(1e6))\n+ }\n> #calculate TPM by countToTPM function\n> alltpm = merge_allcount\n> alltpm[,2:ncol(alltpm)] = apply(alltpm[,2: ncol(alltpm)],2,function(x){countToTpm(counts = x,genelength = alltpm$length)})\nCalculate contribution value of each X-linked gene to X/A\nTiming: 1 h\nThis step describes the calculation of X-linked genes’ contribution value.\nX/A has been widely used to profile the XCU at the scale of a whole chromosome.13[href=https://www.wicell.org#bib13],25[href=https://www.wicell.org#bib24] As described in our publication,1[href=https://www.wicell.org#bib1] to identify the features of X-linked genes, we propose the index of contribution value of each X-linked gene to X/A. The contribution value of a X-linked gene is determined by dividing its TPM by the average TPM expression of all autosomal genes (Figure 2[href=https://www.wicell.org#fig2]). And the average contribution value of X-linked genes represents the normalized X/A ratio.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3080-Fig2.jpg\nFigure 2. Algorithm development for characterizing XCU\n“GeneX” represents a gene located in X chromosome, and “GeneA” represents a gene located in autosomes. Normalized X/A is defined as the ratio of the average TPM of all X-linked genes to the average TPM of all autosomal genes. Through the equivalent transformation of mathematical formulas, the normalized X/A can be obtained as average contribution value of X-linked genes.\nCalculate contribution value of each X-linked gene.\nClean the data: the genes expressed (TPM > 0) in more than three samples are retained.\nNote: After this filtering step, we analyzed 324 samples with 19995 genes (795 X-linked genes, 13 Y-linked genes and 19187 autosomal genes). Troubleshooting 5[href=https://www.wicell.org#sec6.9].\n> #retain the genes located in autosomes and sex chromosomes\n> table(alltpm$Chromosome)\n> chromosome = c(1:19,\"X\",\"Y\")",
    "> alltpm = alltpm[alltpm$Chromosome %in% chromosome,]\n> table(alltpm$Chromosome)\n> #retain the genes expressed at least in three samples\n> table(apply(alltpm[,2: ncol(alltpm)],1,function(x)sum(x>0)>2))\n> alltpm = alltpm[apply(alltpm[,2: ncol(alltpm)],1,function(x)sum(x>0)>2),]\n> dim(alltpm)\n> table(alltpm$Chromosome)\nCalculate contribution value of each X-linked gene.\n> table(allgroup$sample==colnames(alltpm)[2: ncol(alltpm)])\n> X_number = sum(alltpm$Chromosome == 'X')\n> A_number = sum(alltpm$Chromosome %in% chromosome[1:19])\n> allgroup$meanA = apply(alltpm[alltpm$Chromosome %in% chromosome[1:19],2: ncol(alltpm)],2, function(x)sum(x)/ A_number)\n> contribution_value = alltpm[alltpm$Chromosome=='X',]\n> contribution_value[,2: ncol(alltpm)] = as.data.frame(t(apply(contribution_value[,2: ncol(alltpm)],1,function(x) x / allgroup$meanA)))\nNote: Please make sure that the sample names in the allgroup matrix correspond to those in the alltpm matrix when storing the calculated results into the allgroup matrix.\nPlot the dynamic changes of normalized X/A ratio in each group (Figure 3[href=https://www.wicell.org#fig3]).\nNote: This is an optional step depending on your variables and analysis. Average contribution value of expressed X-linked genes represents normalized X/A ratios.\n> allgroup$X_A = apply(contribution_value[,2: ncol(alltpm)],2, function(x)sum(x)/ X_number)\n> library(dplyr)\n> group_means = allgroup[allgroup$genotype != “RlimKO”,] %>% group_by(stage, genotype_sex) %>%\nsummarize(mean_X_A = mean(X_A), sd_X_A = sd(X_A), se_X_A = sd_X_A / sqrt(n()))\n> library(ggplot2)\n> library(ggthemes)\n> plot = ggplot(group_means,\n  aes(x = stage ,y = mean_X_A, color = genotype_sex, group = genotype_sex)) +\ngeom_line(size = 1)+\ngeom_errorbar(aes(ymin = mean_X_A - se_X_A, ymax = mean_X_A + se_X_A), width = 0.2) +\ngeom_point(size=2) + labs(x = ' ', y = 'normalized X/A')+\ntheme_base()\n> ggsave(plot, filename = \"normalized X_A ratios.pdf\")\nCalculate contribution increment of each X-linked gene. Here we use male embryos of 4-cell and E3.5 stages as examples.\n#extration of 4cell and E3.5 WT male samples\n> groupWTmale = allgroup[allgroup$stage_genotype_sex %in% c('4cell_WT_male','E3.5_WT_male'),]\n#calculation of contribution increment of each genes from 4cell to E3.5\n> XCU_gene = data.frame(symbol= contribution_value$symbol,\n        mean4cell = apply(contribution_value[,groupWTmale$sample[groupWTmale$stage=='4cell']],1,mean),\nmeanE3.5 = apply(contribution_value[,groupWTmale$sample[groupWTmale$stage=='E3.5']],1,mean)\n)\n> XCU_gene$contribution_increment = XCU_gene$meanE3.5 - XCU_gene$mean4cell\n> XCU_gene = XCU_gene[order(XCU_gene$contribution_increment,decreasing = T),]\nIdentify XCU-contributing genes\nTiming: 30 min",
    "This step aims to identify the X-linked genes significantly contributing to XCU. Here we use male embryos of 4-cell and E3.5 stages as examples to profile XCU-contributing genes.\nPerform differential gene expression analysis.\n#Differential gene expression analysis by DESeq2\n> library(DESeq2)\n> #extract expression matrix of male 4-cell and E3.5 embryos, as well as corresponded group information\n> allcount_WTmale = allcount[,c('symbol',groupWTmale$sample)]\n> colData = groupWTmale[,c(1,4)]\n> colData$stage = factor(colData$stage)\n> #construct differential analysis matrix\n> dds = DESeqDataSetFromMatrix(countData = allcount_WTmale[,2:40], colData = colData, design = ∼ stage)\n> #DEG analysis and acquire the results\n> dds = DESeq(dds)\n> colData$stage\n> DEG = results(dds, contrast = c('stage','E3.5','4cell'))\n> #rank according to Padj\n> DEG = as.data.frame(DEG[order(DEG$padj),])\n> DEG$symbol = rownames(DEG)\n> DEG = DEG [,6:7]\n> DEG [,1][is.na(DEG [,1])] = 1\n> colnames(DEG)[1] = 'padj4_E3.5'\n> XCU_gene = merge(XCU_gene, DEG, by = 'symbol', all.x = T)\nNote: The integrated data from different datasets should consider the batch effect when doing differential gene expression analysis. Add the batch information into the constructed differential analysis matrix, such as DESeqDataSetFromMatrix (countData, colData, design = ∼ batch + stage). In this way, any test statistics that you derive for “stage” will be adjusted for “batch”.\nIdentify XCU-contributing genes.\n> XCU_contributing_genes =\nXCU_gene[XCU_gene$padj4_E3.5<0.05 & XCU_gene$contribution_increment > 0,'symbol']\nNote: When the false discovery rate (FDR) is less than 0.05 and the contribution increment is greater than 0, X-linked genes are regarded as XCU-contributing genes.\nVisualization of contribution changes of X-linked genes (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3080-Fig3.jpg\nFigure 3. Example of dynamic changes of normalized X/A ratios\nDynamic changes of normalized X/A ratios. Normalized X/A ratio: total contribution value of X-linked genes was divided by total number of annotated genes on the X chromosome. Data are represented as mean ± SEM.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3080-Fig4.jpg\nFigure 4. Identification of XCU-contributing genes",
    "Volcano plot depicts different contribution increment to XCU of each X-linked gene in male E3.5 embryos relative to that in 4-cell embryos. The x axis is the contribution increment of the genes in later stages relative to 4-cell, the y axis is -Log10 transformed of the statistical significance level with false discovery rate (FDR) value.\n> library(ggpubr)\n> library(ggthemes)\n> XCU_gene$change = ifelse(XCU_gene$padj4_E3.5<0.05,\n          ifelse(XCU_gene$contribution_increment>0,'UP','DOWN'),'stable')\n> df = XCU_gene\n> df$lgpadj = -log10(df$padj4_E3.5)\n> #label genes\n> df = df[order(df$contribution_increment),]\n> df = df[order(df$change),]\n> labelname = c(as.character(tail(df$symbol[which(df$change == 'UP')],10)))\n> plot2 = ggscatter(df, x = \"contribution_increment\", y = \"lgpadj\", color = \"change\",size = 1,\n  label = 'symbol',\n  label.select = labelname, repel = T,\n  ylab = '-Log10 FDR', xlab = 'contribution increment',\n  palette = c(\"#2F5688\", \"grey\", \"#CC0000\"))+theme_base()+\ngeom_vline(xintercept = 0,linetype = 'dashed')+\ngeom_hline(yintercept = 1.3,linetype = 'dashed')\n> ggsave(plot2,filename = \"XCU-contributing genes.pdf\")\nFeatures of XCU-contributing genes\nTiming: 30 min\nThis step describes the exploration of X-contributing genes’ features.\nProfile the chromosomal location and contribution percentage of XCU-contributing genes. Here we continuously use male embryos of 4-cell and E3.5 stages as examples to profile the features of XCU-contributing genes.\nProfile the distribution of XCU-contributing genes (Figure 5[href=https://www.wicell.org#fig5]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3080-Fig5.jpg\nFigure 5. Features of XCU-contributing genes in E3.5 VS. 4-cell male embryos\n(A) XCU-contributing genes dispersing across the X chromosome. The x axis represents the genomic position of the X chromosome, and the y axis represents log2 transformed and normalized contribution increment.\n(B) Pie charts showing contribution percentage of XCU-contributing genes in the male embryos of E3.5 relative to 4-cell.\n> XCU_gene$start_location = abs(gene_information[match(XCU_gene$symbol,gene_information$symbol),'start_location'])\n> XCU_gene$Mlocation = XCU_gene$start_location / 1000000\n> UP_XCU_gene = XCU_gene[XCU_gene$change=='UP',]\n> UP_XCU_gene$log2contribution = log2(UP_XCU_gene$contribution_increment +1)\n> # plot distribution\n> plot3 = ggscatter(UP_XCU_gene,x = \"Mlocation\", y = \"log2contribution\",\n  color = \"red\",\n  size=2,\n  repel = T,",
    "ylab = 'Log2(contribution increment +1)', xlab = 'Genomic position on X chromosome (Mb)')+\ntheme_base()+\ngeom_hline(yintercept = 0,linetype = 'dashed')\n> ggsave(plot3,filename = \"distribution.pdf\")\nProfile the contribution percentage of each XCU-contributing gene (Figure 5[href=https://www.wicell.org#fig5]B).\n> UP_XCU_gene = UP_XCU_gene[order(-UP_XCU_gene$contribution_increment),]\n> UP_XCU_gene$percentages = UP_XCU_gene$contribution_increment / sum(UP_XCU_gene$contribution_increment)\n> df = c(UP_XCU_gene$percentages[1:7],sum(UP_XCU_gene$percentages[8:143]))\n> plot4 = pie(df, labels = c(UP_XCU_gene$symbol[1:7],'other'),col = c(rainbow(7,end = 4/6),\"white\"),\nmain = 'contribution percentage')\n> ggsave(plot4,filename = \"contribution percentage.pdf\")"
  ],
  "subjectAreas": [
    "Evolutionary Biology",
    "Developmental Biology",
    "Bioinformatics",
    "Cancer"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}