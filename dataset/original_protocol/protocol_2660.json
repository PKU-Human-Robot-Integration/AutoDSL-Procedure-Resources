{
  "id": 2809,
  "origin_website": "Cell",
  "title": "Chromatin-bound protein colocalization analysis using bedGraph2Cluster and PanChIP",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nAlignment of ChIP-seq reads\nTiming: 1 day\nType: Memory-intensive.\nIn this section, we will discuss how to trim adapter sequences, perform genome indexing, align reads to the reference genome, and filter to keep only high-quality reads. From FASTQ files, we will generate BAM files that contain high-quality deduplicated reads from the ChIP-seq experiment. While this protocol mainly discusses ChIP-seq datasets generated from a single-end short-read sequencing, we also provide users with commands that can be used for paired-end short-read sequencing experiments. This section describes a protocol that contains a memory-intensive task.\nTrim adapter sequences from FASTQ reads using trim_galore: {Bash}\n# single-end reads (this protocol)\n  > mkdir -p trimgalore && trim_galore --illumina --fastqc -j 8 -o trimgalore/${fileID} fastq/${fileID}.fq.gz\n# paired-end reads\n  > mkdir -p trimgalore && trim_galore --illumina --fastqc -j 8 --paired -o trimgalore/${fileID} fastq/${fileID}_R1_001.fq.gz fastq/${fileID}_R2_001.fq.gz\n--illumina: Illumina universal adapter sequence will be trimmed.\n--fastqc: FastQC reports will be generated for each FASTQ file after trimming.\n-j: number of CPU threads. Set as “8” in the example.\n-o: output directory: Set as “trimgalore/${fileID}” in the example.\nNote: ${fileID} indicates the identifier for each sample in the project and acts as a placeholder in this protocol. The variable can be replaced by the file names provided by the user, which excludes the file extension. Parallelization of the protocol can be performed by a bash script using a parallelized FOR loop on the variable.\nNote: If the adapter sequence is unknown, the user can remove the --illumina flag to direct the trim_galore algorithm to auto-detect the adapter sequence.",
    "Open trimgalore/${fileID}/${fileID}.fq.gz_trimming_report.txt and verify that the reads with adapters were successfully recognized by the algorithm by viewing its summary table presented in lines 24–32. After trimming adapter sequences, the FASTQC report file trimgalore/${fileID}/${fileID}_trimmed_fastqc.html should show no evidence of adapter content.\nIndex the human reference genome FASTA file using the Burrows-Wheeler Aligner:\n{Bash}\n> bwa index genome/Homo_sapiens_assembly19.fasta\nNote: The index building of the reference genome only needs to be performed once and can be skipped if the index files are already available.\nNote: While this section assumes the pipeline to be based on the hg19 human reference genome assembly, the code can be interchangeably used for other human reference genome assemblies, including hg38 and T2T-CHM13.17[href=https://www.wicell.org#bib17]\nAlign trimmed FASTQ reads to the human reference genome using the Burrows-Wheeler Aligner and generate coordinate-sorted BAM files using samtools: {Bash}\n# single-end reads (this protocol)\n  > mkdir -p bam\n  > bwa mem -t 8 genome/Homo_sapiens_assembly19.fasta trimgalore/${fileID}/${fileID}_trimmed.fq.gz | samtools sort -@ 8 -o bam/${fileID}.sorted.bam -\n# paired-end reads\n  > mkdir -p bam\n  > bwa mem -t 8 genome/Homo_sapiens_assembly19.fasta trimgalore/${fileID}/${fileID}_R1_001_val_1.fq.gz trimgalore/${fileID}/${fileID}_R2_001_val_2.fq.gz | samtools sort -@ 8 -o bam/${fileID}.sorted.bam -\n-t/-@: number of CPU threads. Set as “8” in the example.\n-o: output file. Set as “bam/${fileID}.sorted.bam” in the example.\nIndex coordinate-sorted BAM files using samtools: {Bash}\n> samtools index -@ 8 bam/${fileID}.sorted.bam\n-@: number of CPU threads. Set as “8” in the example.\nGenerate coordinate-sorted deduplicated BAM files using sambamba: {Bash}\n> sambamba sort -p -t 8 -o bam/${fileID}.sambamba_sorted.bam bam/${fileID}.sorted.bam\n> sambamba markdup -p -t 8 -r bam/${fileID}.sambamba_sorted.bam bam/${fileID}.deduplicated.bam\n-p: progress bar will be shown in stderr.\n-t: number of CPU threads. Set as “8” in the example.\n-r: marked duplicate reads will be removed in the output file.\n-o: output file. Set as “bam/${fileID}.sambamba_sorted.bam” in the example.",
    "Critical: Deduplication in ChIP-seq alignment is a critical step that removes PCR duplicates from the aligned reads. Without deduplication, peak calling algorithms often generate false-positive peaks, which may mislead users and the scientific community. Hence, we strongly recommend users include the -r flag as in the example.\nNote: The two coordinate-sorted BAM files (i.e., bam/${fileID}.sorted.bam, bam/${fileID}.sambamba_sorted.bam) can be removed at the user’s discretion.\nIndex coordinate-sorted deduplicated BAM files using sambamba: {Bash}\n> samtools index -@ 8 bam/${fileID}.deduplicated.bam\n-@: number of CPU threads. Set as “8” in the example.\nFilter to keep only high-quality reads from the coordinate-sorted deduplicated BAM files using sambamba: {Bash}\n> sambamba view -F \"not (duplicate) and [NM] <= 2 and mapping_quality >= 30\" -f bam -t 8 -o bam/${fileID}.filtered.bam bam/${fileID}.deduplicated.bam\n-F: filtering criteria. Set as “not (duplicate) and [NM] <= 2 and mapping_quality >= 30” in the example.\nnot (duplicate): only deduplicated reads will pass the filter.\n[NM] <= 2: only reads with edit distance18[href=https://www.wicell.org#bib18] less than or equal to 2 will pass the filter.\nmapping_quality >= 30: only reads with mapping quality greater than or equal to 30 will pass the filter.\n-f: format of the output file. Set as “bam” in the example.\n-t: number of CPU threads. Set as “8” in the example.\n-o: output file. Set as “bam/${fileID}.filtered.bam” in the example.\nNote: The deduplicated BAM file (i.e., bam/${fileID}.deduplicated.bam) can be removed at the user’s discretion.\nConvert filtered deduplicated BAM files into bigWig files of normalized ChIP-seq read counts using deeptools. The counts per million (CPM) normalization method will be utilized for the generation of bigWig files. {Bash}\n> mkdir -p bigwig\n> bamCoverage -b bam/${fileID}.filtered.bam --normalizeUsing CPM --outFileFormat bigwig --binSize 1 -o bigwig/${fileID}.CPM.bigWig\n-b: input BAM file. Set as “bam/${fileID}.filtered.bam” in the example.\n--normalizeUsing: normalization method. Set as “CPM” in the example.",
    "--outFileFormat: output file format for the coverage profile. Set as “bigwig” in the example.\n--binSize: size of the bins for the coverage profile in bases. Set as “1” in the example.\n-o: output file. Set as “bigwig/${fileID}.CPM.bigWig” in the example.\nNote: The primary purpose of bigWig file generation in this protocol is to visualize the ChIP-seq profile. Hence, we chose the bin size of 1 bp for BAM-to-bigWig conversion. For other purposes (i.e., generation of heatmaps), users can utilize its default value, which is set as 50 bp by the software.2[href=https://www.wicell.org#bib2]\nPeak calling and k-means clustering using bedGraph2Cluster\nTiming: 4 h\nType: Memory-intensive.\nIn this section, we describe the protocol for the normalization, peak calling, and clustering of ChIP-seq data using bedGraph2Cluster. Using this algorithm, users can perform k-means clustering on ChIP-seq profiles to uncover the heterogeneity in chromatin binding. This section describes a protocol that contains a memory-intensive task.\nConvert filtered deduplicated BAM files into 200-bp-binned bedGraph count files using bedtools. Troubleshooting 2[href=https://www.wicell.org#sec6.3]. {Bash}\n> mkdir -p bedgraph\n> sed 's/chr//g' bed/hg19.200bp.bed > bed/hg19.200bp.nochr.bed\n> bedtools coverage -a bed/hg19.200bp.nochr.bed -b bam/${fileID}.filtered.bam | awk '{if($1!∼/chr/) {printf \"chr\"; print $0} else {print $0}}' > bedgraph/${fileID}.bedgraph\n-a: bed file for the 200-bp bins of the human genome. Set as “bed/hg19.200bp.bed” in the example.\n-b: filtered deduplicated BAM file. Set as “bam/${fileID}.filtered.bam” in the example.\nNote: We provide users with bedGraph count files that were utilized to generate figures in this protocol. Download the bedGraph count files via gdown:\nNote: {Bash}\n> mkdir -p bedgraph\n> gdown -O bedgraph/bedgraphs.tar.gz https://drive.google.com/uc?id=129xjcSm2B6KxIrEbngZQc6Bii9sOdUha&export=download&confirm=t[href=https://drive.google.com/uc?id=129xjcSm2B6KxIrEbngZQc6Bii9sOdUha&export=download&confirm=t]\n> tar -xvzf bedgraph/bedgraphs.tar.gz -C bedGraph\n> rm bedgraph/bedgraphs.tar.gz\nNote: While this section assumes the pipeline to be based on the hg19 human reference genome assembly, the code can be interchangeably used for other human reference genome assemblies, including hg38.",
    "bedGraph2Cluster is a MATLAB-based algorithm with 11 required positional arguments (i.e., (bedGraphs_Signal, bedGraphs_Control, bedGraphs_Cluster, bedGraphs_Heatmap, outdir, bed_bin, fold_change, normalization_method, k, distance_method, and clustering_method) and 1 optional positional argument (i.e., workingdir). Perform bedGraph2Cluster runs via run_matlab: {Bash}\n> run_matlab run -d run_matlab -v R2018b -r 9.5 bedGraph2Cluster bedGraph2Cluster bedGraphs_Signal bedGraphs_Control bedGraphs_Cluster bedGraphs_Heatmap outdir bed_bin fold_change normalization_method k distance_method clustering_method [workingdir]\n-d: run_matlab directory. Set as “run_matlab” in the example.\n-v: MATLAB version. Set as “R2018b” in the example.\n-r: MATLAB Compiler Runtime version. Set as “9.5” in the example.\nbedGraphs_Signal: comma-delimited list of bedGraph files that will be surveyed for signal above baseline controls during peak calling. For most applications, this would be the ChIP-seq profiles for immunoprecipitated proteins.\nbedGraphs_Control: comma-delimited list of bedGraph files to be used as controls during peak calling. For most applications, this would be the ChIP-seq profiles for the input DNA. Peaks are identified as those bins whose counts in one or more of the “signal” bedGraphs exceed those in each of the “control” bedGraphs by at least the factor specified in the fold_change parameter.\nbedGraphs_Cluster: comma-delimited list of bedGraph files to be included during k-means clustering. For most applications, these would include some or all of the “signal” bedGraphs. They may also include additional bedGraphs that were not used in identifying peaks, but that are intended to help direct the assortment of peaks into clusters sharing meaningful colocalization patterns.\nbedGraphs_Heatmap: comma-delimited list of bedGraph files to be included in the graphical heatmap produced by the software. For most applications, these would include some or all of the “signal” and “cluster” bedGraphs. Files listed only in this parameter do not influence the peak calling or clustering but are merely projected alongside the clusters visualized in the heatmap as additional information.\noutdir: path to the output directory.",
    "bed_bin: path to the BED file used for binned bedGraph generation.\nfold_change: threshold for the fold change of signal over control during peak calling (e.g., 2 or 4).\nnormalization_method: normalization method to utilize. For most applications, we recommend the QNorm method, as it provides the more robust solution for clustering analysis of samples with varying signal-to-background ratios.\nCPM: counts-per-million.\nQNorm: two-parameter normalization with linear and exponential components.\nk: number of clusters to find during k-means clustering. For the determination of k, users can start from k = 50 to qualitatively identify the number of distinct clusters. We recommend the final value for k to be in between 2 and 10 to prevent potential overfitting of the data during clustering.\ndistance_method: distance metric for k-means clustering. For clustering analyses of highly analogous data sets (e.g., biological replicate experiments or ChIP-seq profiles for different phospho-isoforms of a protein), we recommend the sqeuclidean method. In contrast, for clustering analyses of non-analogous data sets (e.g., ChIP-seq profiles for histone marks), we recommend the cosine method, which is robust to differences in the magnitude of the vector.\nsqeuclidean: squared Euclidean distance.\ncityblock: sum of absolute differences.\ncosine: one minus the cosine of the included angle between points.\ncorrelation: one minus the sample’s Pearson correlation between points.\nclustering_method: clustering method to utilize. For most applications, we recommend the symmetry-collapsed profile and scalar method.\n1: profile.\n2: profile and scalar.\n3: symmetry-collapsed profile and scalar.\nworkingdir: path to the working directory.\nNote: bedGraph2Cluster runs can be performed on the MATLAB Command Window as well in the following format:\n{MATLAB}\n> bedGraph2Cluster(bedGraphs_Signal, bedGraphs_Control, bedGraphs_Cluster, bedGraphs_Heatmap, outdir, bed_bin, fold_change, normalization_method, k, distance_method, clustering_method, [workingdir])",
    "Note: For the peak calling, we will utilize the fold change between the ChIP-seq profiles of the immunoprecipitated protein and the input DNA as our primary metric, and neighboring bins that belong to a broader signal will be merged.\nNote: QNorm is a two-parameter normalization method that is inspired by S3norm.19[href=https://www.wicell.org#bib19] While both QNorm and S3norm utilize a two-parameter normalization with linear and exponential components, they use different methods of solving for the optimal parameters. QNorm shifts and stretches each sample’s histogram of counts onto the same reference curve, taken to be that of the sample listed first in the bedGraphs_Signal list.\nNote: bedGraph2Cluster uses pseudocounts20[href=https://www.wicell.org#bib20],21[href=https://www.wicell.org#bib21] to reduce the introduction of noise during peak calling. The algorithm assumes the top 0.5% of counts per bin as signals and the bottom 99.5% of counts per bin as potential noise. In this protocol, the threshold for counts per bin thus defined was 16 and was used as the pseudocount during the peak calling.\nPerform normalization, peak calling, and k-means clustering on ChIP-sequencing data on RB and histone marks using bedGraph2Cluster. Troubleshooting 3[href=https://www.wicell.org#sec6.5]. {Bash}\n> run_matlab run -d run_matlab -v R2018b -r 9.5 bedGraph2Cluster bedGraph2Cluster \\\nbedgraph/RB.dCDK.bedgraph,bedgraph/RB.WT.bedgraph,bedgraph/RB.S230.bedgraph,bedgraph/RB.S249.bedgraph,bedgraph/RB.T252.bedgraph,bedgraph/RB.T356.bedgraph,bedgraph/RB.T373.bedgraph,bedgraph/RB.S608.bedgraph,bedgraph/RB.S612.bedgraph,bedgraph/RB.S780.bedgraph,bedgraph/RB.S788.bedgraph,bedgraph/RB.S795.bedgraph,bedgraph/RB.S807.bedgraph,bedgraph/RB.S811.bedgraph,bedgraph/RB.T821.bedgraph,bedgraph/RB.T826.bedgraph \\\nbedgraph/INPUT.WT.bedgraph,bedgraph/INPUT.dCDK.bedgraph,bedgraph/notag.WT.bedgraph,bedgraph/notag.dCDK.bedgraph \\\nbedgraph/RB.WT.bedgraph,bedgraph/RB.dCDK.bedgraph,bedgraph/H3K4me3.WT.bedgraph,bedgraph/H3K4me3.dCDK.bedgraph,bedgraph/H3K4me.WT.bedgraph,bedgraph/H3K4me.dCDK.bedgraph,bedgraph/H3K27ac.WT.bedgraph,bedgraph/H3K27ac.dCDK.bedgraph \\\nbedgraph/INPUT.WT.bedgraph,bedgraph/INPUT.dCDK.bedgraph,bedgraph/notag.WT.bedgraph,bedgraph/notag.dCDK.bedgraph,bedgraph/RB.WT.bedgraph,bedgraph/RB.dCDK.bedgraph,bedgraph/RB.S230.bedgraph,bedgraph/RB.S249.bedgraph,bedgraph/RB.T252.bedgraph,bedgraph/RB.T356.bedgraph,bedgraph/RB.T373.bedgraph,bedgraph/RB.S608.bedgraph,bedgraph/RB.S612.bedgraph,bedgraph/RB.S780.bedgraph,bedgraph/RB.S788.bedgraph,bedgraph/RB.S795.bedgraph,bedgraph/RB.S807.bedgraph,bedgraph/RB.S811.bedgraph,bedgraph/RB.T821.bedgraph,bedgraph/RB.T826.bedgraph,bedgraph/E2F1.bedgraph,bedgraph/H3K4me3.WT.bedgraph,bedgraph/H3K4me3.dCDK.bedgraph,bedgraph/H3K4me.WT.bedgraph,bedgraph/H3K4me.dCDK.bedgraph,bedgraph/H3K27ac.WT.bedgraph,bedgraph/H3K27ac.dCDK.bedgraph \\\nfigure_1 bed/hg19.200bp.bed 2 QNorm 3 sqeuclidean 3 $PWD\nbedGraphs_Signal: Set as bedGraph count files for RB ChIP-seq data in the example.\nbedGraphs_Control: Set as bedGraph count files for input and no-tag ChIP-seq data in the example.\nbedGraphs_Cluster: Set as bedGraph count files for RB and histone marks ChIP-seq data in the example.\nbedGraphs_Heatmap: Set as bedGraph count files for RB, input, no-tag, histone marks, and E2F1 ChIP-seq data in the example.\noutdir: Set as “figure_1” in the example.\nbed_bin: Set as “bed/hg19.200bp.bed” in the example.\nfold_change: Set as “2” in the example.\nnormalization_method: Set as “Qnorm” in the example.",
    "k: Set as “3” in the example.\ndistance_method: Set as “sqeuclidean” in the example.\nclustering_method: Set as “3” in the example.\nworkingdir: Set as “$PWD” in the example.\nEvaluate output files that are generated after step 12 (Figure 1[href=https://www.wicell.org#fig1]A):\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2316-Fig1.jpg\nFigure 1. Heatmap of k-means clustering by bedGraph2Cluster (k = 3)\n(A) Heatmap for RB, E2F1, histone marks, and input ChIP-seq signals for the k-means clusters of RB ChIP-seq peaks. All ChIP-seq profiles presented are QNorm-normalized and without pseudocounts. Cluster 1 is RB-enhancer peaks with low E2F1 signal and clusters 2–3 are RB-promoter peaks with high E2F1 signal. Rows labeled with RB followed by amino acid notations indicate monophosphorylated RB isoforms. WT, wild-type RB; dCDK, an allele of RB that is mutated in all of the CDK-consensus sites that are phosphorylated in vivo. Genomic regions of 10 kb centered at the peak center are presented.\n(B) CPM-normalized ChIP-seq profiles for RB, E2F1, H3K4me3, H3K4me, and H3K27ac for the three k-means clusters of RB ChIP-seq peaks. Genomic regions of 3 kb centered at the peak center are presented. Top panel, line plots for the CPM-normalized profiles averaged over RB ChIP-seq peaks; bottom panel, heatmap for the CPM-normalized profiles. Color bar for the heatmap is presented on the right.\n{Bash}\n> ls figure_1/∗\ntiles_200_data.mat: MATLAB variable for the entire dataset.\ntiles_200_data_peak.mat: MATLAB variable for only the peak set.\npeaks.bed: BED file of the peak set.\npeaks.clust3.${1–3}.bed: BED file of the peak set for each cluster.\nclustering_heatmap.pdf: heatmap visualizing the k-means clustering.\ndpi: 300.",
    "Note: Loading of tiles_200_data.mat in the MATLAB environment is a memory-intensive task. A minimum of 64 GB and a recommended 128 GB of RAM is required. For most purposes, including peak evaluations, tiles_200_data_peak.mat is a more lightweight version that would be the better fit for the task. Each file stores a container structure “X” (i.e., analogous to a class object in object-oriented programming) with the following four fields:\nX.samp: contains information on the raw and normalized ChIP-seq profiles. In tiles_200_data_peak.mat, the 200-bp-binned matrices on these ChIP-seq profiles are removed to further reduce the memory consumption.\nX.hist: contains information on the histogram used in Qnorm two-parameter normalization.\nX.peak: contains information on the peaks and their cluster assignments.\nX.pixel: contains information on the heatmap for the k-means clustering.\nCompute matrix for each k-means cluster using deeptools: {Bash}\n> computeMatrix reference-point -S bigwig/RB.WT.CPM.bigWig bigwig/E2F1.CPM.bigWig bigwig/H3K4me3.WT.CPM.bigWig bigwig/H3K4me.WT.CPM.bigWig bigwig/H3K27ac.WT.CPM.bigWig -R figure_1/peaks.clust3.1.bed figure_1/peaks.clust3.2.bed figure_1/peaks.clust3.3.bed --beforeRegionStartLength 3000 --afterRegionStartLength 3000 --referencePoint center -o figure_1/heatmap.mat.gz\n-S: bigWig files to plot. Set as bigWig files for RB, E2F1, and histone marks ChIP-seq data in the example.\n-R: bed files of regions to plot. Set as bedGraph2Clutser output bed files in the example.\n--beforeRegionStartLength: length of the genomic region to plot before the reference point in the unit of bp. Set as “3000” in the example.\n--afterRegionStartLength: length of the genomic region to plot after the reference point in the unit of bp. Set as “3000” in the example.\n--referencePoint: reference point for each bed file. Set as “center” in the example.\n-o: output matrix file. Set as “figure_1/heatmap.mat.gz” in the example.\nVisualize the computed matrix for each k-means cluster using deeptools (Figure 1[href=https://www.wicell.org#fig1]B): {Bash}\n> plotHeatmap -m figure_1/heatmap.mat.gz --dpi 300 -out figure_1/heatmap.pdf\n-m: input matrix file. Set as “figure_1/heatmap.mat.gz” in the example.",
    "--dpi: resolution of the output heatmap file in the unit of dpi. Set as “300” in the example.\n-out: output heatmap file. Set as “figure_1/heatmap.pdf” in the example.\nPerform normalization, peak calling, and k-means clustering on ChIP-sequencing data on RB, E2F1, CTCF, c-Jun, and histone marks using bedGraph2Cluster. Troubleshooting 3[href=https://www.wicell.org#sec6.5]. {Bash}\n> run_matlab run -d run_matlab -v R2018b -r 9.5 bedGraph2Cluster bedGraph2Cluster \\\nbedgraph/RB.dCDK.bedgraph,bedgraph/RB.WT.bedgraph,bedgraph/RB.S230.bedgraph,bedgraph/RB.S249.bedgraph,bedgraph/RB.T252.bedgraph,bedgraph/RB.T356.bedgraph,bedgraph/RB.T373.bedgraph,bedgraph/RB.S608.bedgraph,bedgraph/RB.S612.bedgraph,bedgraph/RB.S780.bedgraph,bedgraph/RB.S788.bedgraph,bedgraph/RB.S795.bedgraph,bedgraph/RB.S807.bedgraph,bedgraph/RB.S811.bedgraph,bedgraph/RB.T821.bedgraph,bedgraph/RB.T826.bedgraph \\\nbedgraph/INPUT.WT.bedgraph,bedgraph/INPUT.dCDK.bedgraph,bedgraph/notag.WT.bedgraph,bedgraph/notag.dCDK.bedgraph \\\nbedgraph/RB.WT.bedgraph,bedgraph/RB.dCDK.bedgraph,bedgraph/E2F1.bedgraph,bedgraph/H3K4me3.WT.bedgraph,bedgraph/H3K4me3.dCDK.bedgraph,bedgraph/H3K27ac.WT.bedgraph,bedgraph/H3K27ac.dCDK.bedgraph,bedgraph/H3K4me.WT.bedgraph,bedgraph/H3K4me.dCDK.bedgraph,bedgraph/c-Jun.shRB1.bedgraph,bedgraph/c-Jun.shSCR.bedgraph,bedgraph/CTCF.shRB1.bedgraph,bedgraph/CTCF.shSCR.bedgraph \\\nbedgraph/RB.WT.bedgraph,bedgraph/RB.dCDK.bedgraph,bedgraph/H3K4me3.WT.bedgraph,bedgraph/H3K4me3.dCDK.bedgraph,bedgraph/H3K4me.WT.bedgraph,bedgraph/H3K4me.dCDK.bedgraph,bedgraph/H3K27ac.WT.bedgraph,bedgraph/H3K27ac.dCDK.bedgraph,bedgraph/E2F1.bedgraph,bedgraph/c-Jun.shSCR.bedgraph,bedgraph/c-Jun.shRB1.bedgraph,bedgraph/CTCF.shSCR.bedgraph,bedgraph/CTCF.shRB1.bedgraph,bedgraph/RB.GFP.1.bedgraph,bedgraph/RB.GFP.2.bedgraph,bedgraph/RB.A-FOS.1.bedgraph,bedgraph/RB.A-FOS.2.bedgraph,bedgraph/RB.DNDP1.1.bedgraph,bedgraph/RB.DNDP1.2.bedgraph \\\nfigure_2 bed/hg19.200bp.bed 2 QNorm 8 cosine 1 $PWD\nbedGraphs_Signal: Set as bedGraph count files for RB ChIP-seq data in the example.\nbedGraphs_Control: Set as bedGraph count files for input and no-tag ChIP-seq data in the example.\nbedGraphs_Cluster: Set as bedGraph count files for RB, E2F1, CTCF, c-Jun, and histone marks ChIP-seq data in the example.\nbedGraphs_Heatmap: Set as bedGraph count files for RB, E2F1, CTCF, c-Jun, and histone marks ChIP-seq data in the example.\noutdir: Set as “figure_2” in the example.\nbed_bin: Set as “bed/hg19.200bp.bed” in the example.\nfold_change: Set as “2” in the example.\nnormalization_method: Set as “Qnorm” in the example.\nk: Set as “8” in the example.\ndistance_method: Set as “cosine” in the example.\nclustering_method: Set as “1” in the example.\nworkingdir: Set as “$PWD” in the example.\nEvaluate output files that are generated after step 16 (Figure 2[href=https://www.wicell.org#fig2]A):\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2316-Fig2.jpg\nFigure 2. Heatmap of k-means clustering by bedGraph2Cluster (k = 8)\n(A) Heatmap for RB, E2F1, CTCF, c-Jun, and histone marks ChIP-seq signals for the k-means clusters of RB ChIP-seq peaks. Clusters 1–3, 7 are RB-promoter peaks with high E2F1 signal, clusters 4–5, 8 are RB-enhancer peaks with high c-Jun signal, cluster 6 is RB-insulator peaks with high CTCF signal. WT, wild-type RB; dCDK, mutant allele of RB lacking CDK-phosphorylation sites. Genomic regions of 10 kb centered at the peak center are presented.",
    "(B) CPM-normalized ChIP-seq profiles for RB, E2F1, CTCF, c-Jun, H3K4me3, H3K4me1, and H3K27ac for the eight k-means clusters of RB ChIP-seq peaks. Genomic regions of 3 kb centered at the peak center are presented. Top panel, line plots for the CPM-normalized profiles averaged over RB ChIP-seq peaks; bottom panel, heatmap for the CPM-normalized profiles. Color bar for the heatmap is presented on the right.\n{Bash}\n> ls figure_2/∗\ntiles_200_data.mat: MATLAB variable for the entire dataset.\ntiles_200_data_peak.mat: MATLAB variable for only the peak set.\npeaks.bed: BED file of the peak set.\npeaks.clust8.${1–8}.bed: BED file of the peak set for each cluster.\nclustering_heatmap.pdf: heatmap for the k-means clustering.\ndpi: 300.\nCompute matrix for each k-means cluster using deeptools: {Bash}\n> computeMatrix reference-point -S bigwig/RB.WT.CPM.bigWig bigwig/E2F1.CPM.bigWig bigwig/CTCF.shSCR.CPM.bigWig bigwig/c-Jun.shSCR.CPM.bigWig bigwig/H3K4me3.WT.CPM.bigWig bigwig/H3K4me.WT.CPM.bigWig bigwig/H3K27ac.WT.CPM.bigWig -R figure_2/peaks.clust8.1.bed figure_2/peaks.clust8.2.bed figure_2/peaks.clust8.3.bed figure_2/peaks.clust8.4.bed figure_2/peaks.clust8.5.bed figure_2/peaks.clust8.6.bed figure_2/peaks.clust8.7.bed figure_2/peaks.clust8.8.bed --beforeRegionStartLength 3000 --afterRegionStartLength 3000 --referencePoint center -o figure_2/heatmap.mat.gz\n-S: bigWig files to plot. Set as bigWig files for RB, E2F1, CTCF, c-Jun, and histone marks ChIP-seq data in the example.\n-R: bed files of regions to plot. Set as bedGraph2Clutser output bed files in the example.\n--beforeRegionStartLength: length of the genomic region to plot before the reference point in the unit of bp. Set as “3000” in the example.\n--afterRegionStartLength: length of the genomic region to plot after the reference point in the unit of bp. Set as “3000” in the example.\n--referencePoint: reference point for each bed file. Set as “center” in the example.\n-o: output matrix file. Set as “figure_2/heatmap.mat.gz” in the example.\nVisualize the computed matrix for each k-means cluster using deeptools (Figure 2[href=https://www.wicell.org#fig2]B): {Bash}\n> plotHeatmap -m figure_2/heatmap.mat.gz --dpi 300 -out figure_2/heatmap.pdf\n-m: input matrix file. Set as “figure_2/heatmap.mat.gz” in the example.",
    "--dpi: resolution of the output heatmap file in the unit of dpi. Set as “300” in the example.\n-out: output heatmap file. Set as “figure_2/heatmap.pdf” in the example.\nCalculate average ChIP-seq signal of RB and putative RB colocalization partners over each RB ChIP-seq peak using deeptools (Figure 3[href=https://www.wicell.org#fig3]):\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2316-Fig3.jpg\nFigure 3. Redistribution of RB upon cell-cycle-dependent activation\n(A) Scatter plot of CPM-normalized ChIP-seq signals of RBΔCDK (cells enriched in G1 phase) and wild-type RB (cells enriched in S phase) in RB ChIP-seq peaks. Color code represents CPM-normalized ChIP-seq signals for E2F1.\n(B) Scatter plot of CPM-normalized ChIP-seq signals of RBΔCDK and RB wild-type in RB ChIP-seq peaks. Color code represents CPM-normalized ChIP-seq signals for CTCF.\n(C) Scatter plot of CPM-normalized ChIP-seq signals of RBΔCDK and RB wild-type in RB ChIP-seq peaks. Color code represents CPM-normalized ChIP-seq signals for c-Jun. CPM, counts per million.\n{Bash}\n> mkdir -p figure_3\n> multiBigwigSummary BED-file -b bigwig/RB.WT.CPM.bigWig bigwig/RB.dCDK.CPM.bigWig bigwig/E2F1.CPM.bigWig bigwig/CTCF.shSCR.CPM.bigWig bigwig/c-Jun.shSCR.CPM.bigWig --BED figure_2/peaks.bed -o figure_3/bigWigSummary.npz --outRawCounts figure_3/bigWigSummary.tsv\n-b: bigWig files to calculate average ChIP-seq signals. Set as CPM-normalized bigWig files for RBWT, RBΔCDK, E2F1, CTCF, and c-Jun in the example.\n--BED: bed peak file over which the ChIP-seq signals will be assessed. Set as “figure_2/peaks.bed” in the example.\n-o: output compressed NPZ NumPy archive. Set as “figure_3/bigWigSummary.npz” in the example.\n--outRawCounts: tab-delimited output file. Set as “figure_3/bigWigSummary.tsv” in the example.\nProtein colocalization analysis using PanChIP algorithm\nTiming: 6 h\nType: Compute-intensive.",
    "PanChIP is a pan-ChIP-seq analysis toolkit that assesses the overlap of peak sets using a library of 7,903 ChIP-seq experiments on 915 DNA-bound proteins.1[href=https://www.wicell.org#bib1] The primary goal of a PanChIP run is to predict additional colocalization partners for a specific set of peak clusters that might otherwise be neglected in bulk analyses. The colocalization is assessed through the overlap of peak regions, with stronger weights given to peaks with greater scores. This section describes a protocol that contains a compute-intensive task.\nPanChIP is an algorithm designed around a set of reference data based on the hg38 reference genome. To remap the peak set bed files onto the hg38 reference genome, we will utilize the UCSC liftOver software. Install UCSC liftOver via the UCSC Genome Browser utilities directory:\n{Bash}\n> mkdir -p ucsc && wget -O ucsc/liftOver http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/liftOver[href=http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/liftOver]\nDownload the map.chain file required for the remapping of the data via the UCSC Genome Browser utilities directory:\n{Bash}\n> wget -O ucsc/hg19ToHg38.over.chain.gz https://hgdownload.soe.ucsc.edu/gbdb/hg19/liftOver/hg19ToHg38.over.chain.gz[href=https://hgdownload.soe.ucsc.edu/gbdb/hg19/liftOver/hg19ToHg38.over.chain.gz]\n> gunzip ucsc/hg19ToHg38.over.chain.gz\nRemap the bed peak files generated by bedGraph2Cluster onto the hg38 reference genome using the UCSC liftOver software:\n{Bash}\n> chmod u+x ucsc/./liftOver\n> mkdir -p figure_4 figure_4/input_8\n> for clusterID in $(seq 1 1 8)\n> do\n> ucsc/./liftOver figure_2/peaks.clust8.${clusterID}.bed ucsc/hg19ToHg38.over.chain figure_4/input_8/peaks.clust8.${clusterID}.bed /dev/null\n> done\nNote: Steps 21–23 are unnecessary if the alignment and bedGraph2Cluster runs were performed on the hg38 genome assembly. These steps were implemented merely to reproduce the figures and findings of Sanidas et al.,1[href=https://www.wicell.org#bib1] which utilized the hg19 genome assembly for the alignment and the k-means clustering.\nConcatenate bed peak files for clusters that exhibit similar ChIP-seq profiles in the heatmap: {Bash}\n> mkdir -p figure_4/input_3\n> cat figure_4/input_8/peaks.clust8.1.bed figure_4/input_8/peaks.clust8.2.bed figure_4/input_8/peaks.clust8.3.bed figure_4/input_8/peaks.clust8.7.bed > figure_4/input_3/RB.promoters.bed\n> cat figure_4/input_8/peaks.clust8.6.bed > figure_4/input_3/RB.insulators.bed\n> cat figure_4/input_8/peaks.clust8.4.bed figure_4/input_8/peaks.clust8.5.bed figure_4/input_8/peaks.clust8.8.bed > figure_4/input_3/RB.enhancers.bed",
    "RB.promoters.bed: RB ChIP-seq peaks with H3K27ac, H3K4me3, and E2F1 signals.\nRB.insulators.bed: RB ChIP-seq peaks with CTCF signals.\nRB.enhancers.bed: RB ChIP-seq peaks with H3K27ac, H3K4me, and c-Jun signals.\nPerform PanChIP analysis on the remapped bed peak files. Troubleshooting 4[href=https://www.wicell.org#sec6.7]. {Bash}\n> panchip analysis -t 24 -r 3 panchip figure_4/input_3 figure_4/analysis_3\n> panchip analysis -t 24 -r 3 panchip figure_4/input_8 figure_4/analysis_8\n-t: number of CPU threads. Set as “24” in the example.\n-r: number of repeated iterations. Set as “3” in the example.\npanchip: directory wherein the PanChIP library was stored.\nfigure_4/input_${3/8} : input directory wherein bed peak files are located.\nfigure_4/analysis_${3/8}: output directory wherein output files will be stored.\nCritical: The input directory should only contain bed peak files. Please remove files other than the input bed peak files before running each PanChIP run.\nNote: PanChIP utilizes the 5th column of each bed peak file as the weight for the calculation of the overlap. We strongly recommend that users utilize a standard BED6 format that denotes a score between 0 and 1,000 in the files’ 5th column.13[href=https://www.wicell.org#bib13] Non-numeric values are not accepted by the software. The bed peak files generated by bedGraph2Cluster, which this protocol uses as the input for PanChIP analysis, follow the standard BED6 convention.\nNote: While a single iteration of PanChIP run provides users with a great resource for preliminary analysis, we recommend that users utilize at least three repeated iterations for publication purposes per the PanChIP guidelines.1[href=https://www.wicell.org#bib1]\nEvaluate output files that are generated after step 25: {Bash}\n> ls figure_4/analysis_?/∗.tsv\nfigure_4/analysis_${3/8}/primary.output.tsv: tab-delimited matrix of normalized overlap between input bed peak files and peak files from the PanChIP library consisting of 7,903 ChIP-seq experiments on 915 DNA-bound proteins.",
    "Note: Among k-means clusters with k = 3, cluster 1 corresponds to “non-promoters” cluster of Sanidas et al.1[href=https://www.wicell.org#bib1] Clusters 2 and 3 correspond to “promoters-2” and “promoters-1”, respectively. Among k-means clusters with k = 8, clusters 1 and 2 correspond to “A–B” clusters of Sanidas et al. Clusters 3 and 7 correspond to “C–D” clusters, clusters 4, 5, and 8 to “F–H” clusters, and cluster 6 to “E” cluster of Sanidas et al. Clusters 1–3 and 7 represent RB-bound promoter peaks, clusters 4, 5, and 8 represent RB-bound enhancer peaks, and cluster 6 represents RB-bound insulator peaks.\nNote: Normalized overlap is a metric that represents positive library-level colocalization in PanChIP. The mathematical definition of normalized overlap was previously described1[href=https://www.wicell.org#bib1] and is also included in the PanChIP manual available for download at the PanChIP GitHub repository[href=https://github.com/hanjunlee21/PanChIP].\nStatistical analysis of protein colocalization using PanChIP filter\nTiming: 4 h\nType: Compute-intensive.\nWhile the normalized overlap calculated by the PanChIP algorithm in the previous section provides users with the primary metric that enables preliminary assessment on the colocalization, the metric alone lacks the statistical significance measures that would allow users to assess the significance of the colocalization. PanChIP filter allows users to perform statistical analysis on these colocalization events, providing users with Bonferroni-corrected p-values calculated from a two-tailed Welch’s t-test and signal-to-noise ratios. The PanChIP guideline on these measures is as follows: Bonferroni-corrected p-value < 0.05 and signal-to-noise ratio > 2.1[href=https://www.wicell.org#bib1] This section describes a protocol that contains a compute-intensive task.\nNote: The mathematical description of the statistical analysis, including the definition on the signal-to-noise ratio and the details on the two-tailed Welch’s t-test that was utilized in the analysis, was previously described1[href=https://www.wicell.org#bib1] and is also included in the PanChIP manual available for download at the PanChIP GitHub repository[href=https://github.com/hanjunlee21/PanChIP].",
    "Perform PanChIP filter on the remapped bed peak files. Troubleshooting 5[href=https://www.wicell.org#sec6.9]. {Bash}\n> mkdir -p figure_4/filter_3 figure_4/filter_8\n> for file in RB.promoters RB.insulators RB.enhancers\n> do\n> panchip filter -t 24 panchip figure_4/input_3/${file}.bed figure_4/filter_3/${file}\n> done\n> for clusterID in $(seq 1 1 8)\n> do\n> panchip filter -t 24 panchip figure_4/input_8/peaks.clust8.${clusterID}.bed figure_4/filter_8/ peaks.clust8.${clusterID}\n> done\n-t: number of CPU threads. Set as “24” in the example.\npanchip: directory wherein the PanChIP library was stored.\nfigure_4/input_${3/8}/∗.bed: input bed peak files of which statistical significance for each overlap will be measured.\nfigure_4/filter_${3/8}/∗: output directory wherein output files will be stored.\nEvaluate output files that are generated after step 27 (Figure 4[href=https://www.wicell.org#fig4]):\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2316-Fig4.jpg\nFigure 4. Histogram of individual overlap between three groups of k-means clusters and E2F1, CTCF, and c-Jun\nTop panel, individual overlap between RB promoter clusters (clusters 1–3, 7) and 7,619 ChIP-seq experiments from the PanChIP library. Individual overlap is a metric that measures the overlap between the query and each ChIP-seq experiment from the PanChIP library (Sanidas et al.1[href=https://www.wicell.org#bib1]). Center panel, individual overlap between RB insulator clusters (cluster 6) and 7,619 ChIP-seq experiments from the PanChIP library. Bottom panel, individual overlap between RB enhancer clusters (clusters 4–5, 8) and 7,619 ChIP-seq experiments from the PanChIP library. For each histogram, the distribution of individual overlaps for each RB colocalization partners is also presented with p-values from the two-sample two-tailed Welch’s t-test.\n{Bash}\n> ls figure_4/filter_?/∗/∗.tsv\nfigure_4/filter_${3/8}/primary.output.tsv: tab-delimited matrix of individual overlap between input bed peak files and peak files from the PanChIP library consisting of 7,619 ChIP-seq experiments on 639 DNA-bound proteins.\nfigure_4/filter_${3/8}/statistics.tsv: tab-delimited matrix of statistical measures on all 915 DNA-bound proteins in the PanChIP library.\nTF: gene symbol for the DNA-bound protein.",
    "Mean: mean for the set of individual overlap values measured for each biological replicate experiment in the PanChIP library.\nStandard Deviation: standard deviation for the set of individual overlap values measured for each biological replicate experiment in the PanChIP library.\nSignal-to-noise ratio: mean divided by the standard deviation.\nAdjusted P: Bonferroni-corrected p-value.\nFilter: whether the DNA-bound protein passes statistical significance thresholds.\nNote: The PanChIP library for PanChIP filter is smaller compared to that used for PanChIP analysis, as it only assesses DNA-bound proteins with at least two biological replicate experiments available in the library for statistical analyses. figure_4/filter_${3/8}/statistics.tsv shows NA (i.e., not applicable) in rows that represent DNA-bound proteins that were filtered out when running PanChIP filter due to the lack of biological replicate experiments. figure_4/analysis_${3/8}/primary.output.tsv and figure_4/filter_${3/8}/statistics.tsv have the identical row order.\nNote: Individual overlap is a metric that represents positive sample-level colocalization in PanChIP. The mathematical definition of individual overlap was previously described1[href=https://www.wicell.org#bib1] and is also included in the PanChIP manual available for download at the PanChIP GitHub repository[href=https://github.com/hanjunlee21/PanChIP].\nPaste the statistics.tsv file from step 27 to primary.output.tsv from step 25: {Bash}\n> paste figure_4/analysis_3/primary.output.tsv figure_4/filter_3/RB.promoters/statistics.tsv figure_4/filter_3/RB.insulators/statistics.tsv figure_4/filter_3/RB.enhancers/statistics.tsv > figure_4/panchip_3.tsv\n> paste figure_4/analysis_8/primary.output.tsv figure_4/filter_8/ peaks.clust8.1/statistics.tsv figure_4/filter_8/ peaks.clust8.2/statistics.tsv figure_4/filter_8/ peaks.clust8.3/statistics.tsv figure_4/filter_8/ peaks.clust8.4/statistics.tsv figure_4/filter_8/ peaks.clust8.5/statistics.tsv figure_4/filter_8/ peaks.clust8.6/statistics.tsv figure_4/filter_8/ peaks.clust8.7/statistics.tsv figure_4/filter_8/ peaks.clust8.8/statistics.tsv > figure_4/panchip_8.tsv\nfigure_4/panchip_?.tsv: tab-delimited file with normalized overlap values and statistical significance measures.\nCritical: Interpretation of PanChIP results is done through their normalized overlap values. Sort panchip_?.tsv files on the basis of the normalized overlap column for the sample and filter to keep only rows for DNA-bound proteins that satisfy the thresholds (i.e., signal-to-noise ratio > 2 and Bonferroni-corrected p-value < 0.05).",
    "For ENCODE-listed ChIP-seq experiments in the library, cell line information is available at the PanChIP GitHub repository[href=https://github.com/hanjunlee21/PanChIP/blob/main/lib/cellLine.tsv] and is automatically downloaded during the initialization step of PanChIP. For cell-type-specific interpretation of PanChIP results, run the following command:\n{Bash}\n> for file in RB.promoters RB.insulators RB.enhancers\n> do\n> paste panchip/PanChIP-v.∗.∗.∗/lib/cellLine.tsv figure_4/filter_3/${file}/statistics.tsv > figure_4/panchip_cellLine_3_${file}.tsv\n> done\n> for clusterID in $(seq 1 1 8)\n> do\n> paste panchip/PanChIP-v.∗.∗.∗/lib/cellLine.tsv figure_4/filter_8/peaks.clust8.${clusterID}/primary.output.tsv > figure_4/panchip_cellLine_8_peaks.clust8.${clusterID}.tsv\n> done\nCritical: Interpretation of cell-type-specific PanChIP results is done through their individual overlap values. Filter rows that represent ChIP-seq experiments from the cell type of interest and sort panchip_cellLine_∗.tsv files on the basis of the individual overlap column for the sample.\nNote: The order of the cellLine.tsv file is identical to that of the primary.output.tsv generated by PanChIP filter."
  ],
  "subjectAreas": [
    "Sequence Analysis",
    "Chipseq",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}