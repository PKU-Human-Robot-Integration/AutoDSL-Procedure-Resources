{
  "id": 2369,
  "origin_website": "Cell",
  "title": "Protocol for using Ciclops to build models trained on cross-platform transcriptome data for clinical outcome prediction",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nDownload Ciclops and install prerequisites\nTiming: 5 min\nObtain the latest version of Ciclops, which can be found on PyPI or our GitHub (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1857-Fig1.jpg\nFigure 1. Model installation using pip or git and the main dependencies\nInstall Ciclops via pip:\npip install ciclops\nor use the following command to clone the protocol directory from our GitHub repository to your local directory:\ngit clone https://github.com/GuanLab/ciclops.git[href=https://github.com/GuanLab/ciclops.git]\nCritical: Refer to the key resources table[href=https://www.wicell.org#key-resources-table] to ensure your local environment is compatible with all the package’s dependencies, in case installation errors occur (troubleshooting 1[href=https://www.wicell.org#troubleshooting]).\nOptional: Once installed, you can run the following command to see if Ciclops was installed properly:\nciclops --help\nIf any errors or warnings occur due to clashing package versions, see troubleshooting 2[href=https://www.wicell.org#troubleshooting].\nAdditionally, if you are cloning the GitHub repository, you can download the example data from GEO using the Python script in the external_data/ directory:\npython3 getGEO.py\nThis script obtains two transcriptomic datasets: 1) in vitro data of P. falciparum (GEO: GSE151189) (Mok et al., 2021[href=https://www.wicell.org#bib10]), used as the training set in our example; and 2) ex vivo data of P. falciparum from a different study (GEO: GSE59098) (Mok et al., 2015[href=https://www.wicell.org#bib9]), used as the test set in our example. In this protocol, these data are used only for illustrative purposes.\nPrepare data\nTiming: 10 min\nIn this step, format the data so that it will be suitable for use with Ciclops (Table 2[href=https://www.wicell.org#tbl2]). The data should be in csv format.\ntable:files/protocols_protocol_1857_2.csv\nNote that the label can be categorical or continuous.\nSelect datasets and preprocess the data.\nSelect at least two transcriptomic datasets that you wish to build a predictive model with: one training set and at least one test/validation set.",
    "Ensure the labels are somewhat consistent between the training and test set based on the biological context of the problem you are trying to solve.\nNote: As an example, in our original study, the training set’s labels were fast or slow clearance rate of the parasite after introduction of the drug in question and the test set’s labels were the drug’s IC50. Since lower IC50 should correspond to faster clearance rate, ‘fast’ was labeled as 0, and ‘slow’ was labeled as 1.\nFormat both datasets such that the features and labels are arranged correctly (Table 2[href=https://www.wicell.org#tbl2]).\nEnsure the columns are gene expression levels for each gene and that the rows are samples.\nPut the sample names or numbers in the first column.\nIf the datasets being used do not contain sample numbers, put a column of numbers in the first column as a placeholder.\nPut the labels in the last column.\nCritical: 1.) All datasets used with Ciclops should follow the format above, as Ciclops assumes the first and last column are sample numbers and labels respectively. 2.) While these datasets can be collected from different platforms and/or use different clinical outcome metrics (e.g., the training set and test set are transcriptome profiles measured using different platforms; or the labels are different metrics for measuring a similar clinical outcome), they must share a set of common genes in order to build a model (troubleshooting 3[href=https://www.wicell.org#troubleshooting]).",
    "Optional: 1.) If the datasets you have selected still contain raw data, preprocess both training and test data, following standard protocol according to their respective platforms. For transcriptomic datasets, this often involves feature extraction, QC, and some form of normalization, among other preprocessing steps. For example, while we use the processed data from GEO as our example files, we could have also elected to use the raw data the authors provided instead. In that case, we would have preprocessed the datasets individually as described in the methods of our original study (Zhang et al., 2022[href=https://www.wicell.org#bib15]). Subsequently, Ciclops will perform imputation and cross-platform quantile normalization to normalize the training and test data with respect to each other. 2.) In the case of missing values in the datasets, it is recommended that researchers enter ‘NaN’ in those positions rather than leaving them blank. 3.) At this stage, imputing missing values is not necessary, as Ciclops performs gene-wise imputation before training the models, i.e., a sample’s missing value is replaced with the relevant gene’s average expression level. Users can perform different imputation methods in this step if they so wish.\nTrain models, evaluate results, and visualize top contributing features\nTiming: ∼ 0.5 h (depending on data size and model)\nWith a one-line command, Ciclops allows the user to preprocess the data (imputation and quantile normalization), perform ten-fold cross-validation on the training set, and perform the transfer learning on the test set (Figure 2[href=https://www.wicell.org#fig2]). Additionally, if specified, Ciclops will carry out SHAP analysis with a visualization report of top contributing features for both training and test sets.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1857-Fig2.jpg\nFigure 2. Workflow",
    "Using a one-line command, Ciclops first preprocesses both training and testing datasets by performing gene-wise imputation and quantile normalization. The program then trains the specified machine learning model using ten-fold cross-validation. Finally, it evaluates these models on the provided test set. This workflow does not include SHAP analysis.\nRun Ciclops using the following command:\nciclops --train_path [TRAIN_PATH] --valid_path [VALID_PATH] -m [MODEL_TYPE] --no_quantile --shap -n [TOP_GENES]\nThe arguments are defined as follows:\n--train_path [TRAIN_PATH]: the path to the csv file containing the training data prepared in the previous steps. For example, if using the example data, enter the path to the file in_vitro_GSE151189.csv.\n--valid_path [VALID_PATH]: the path to the csv file containing the transfer validation or test data prepared in the previous steps. For example, if using the example data, enter the path to the file ex_vivo_GSE59098.csv.\n-m [MODEL_TYPE]: the machine learning model to use. The default is LightGBM; however, the user can specify that one of the following models be used instead, using the specified argument:\nlgb: LightGBM.\nxgb: XGBoost.\nrf: Random Forest.\ngpr: Gaussian Process Regression.\nlr: Linear Regression.\n--no_quantile: if this argument is used, Ciclops will not perform quantile normalization on the training and test data. The user should exclude this argument if they wish to perform quantile normalization on the data.\n--shap: if this argument is specified, Ciclops will perform SHAP analysis on the training and test data.\n-n [TOP_GENES]: if using the --shap argument, users can set the number of top-contributing genes to compare between the training and test set with the -n flag. The default is 20.",
    "Note: 1.) When deliberating what model type to use, LightGBM would generally be a good place to start since it performs well in our experience and is very efficient for training large datasets such as transcriptomic data that Ciclops is intended for (Ke et al., 2017[href=https://www.wicell.org#bib6]). While XGBoost is not as fast in that regard (Ke et al., 2017[href=https://www.wicell.org#bib6]), comparing your LightGBM model to models trained by XGBoost and Random Forest can give you insight into the performance of tree-based learners versus kernel-based algorithms such as GPR and linear regression, which have more straightforward interpretability. 2.) If testing Ciclops with the example data, which is relatively small, running the command in step 4 should take no more than five minutes. Since we anticipate Ciclops being used for much larger datasets, as was done in our original study, the timing estimate given above is based on our original study. As mentioned in the materials and equipment[href=https://www.wicell.org#materials-and-equipment] section, running Ciclops on a computing cluster with multiple cores and larger RAM will shorten the runtime. 3.) Unless both datasets have been jointly normalized during your preprocessing step, it is recommended to exclude the --no_quantile argument, as quantile normalization played a key role in building a successful prediction model in our original publication. 4.) In Ciclops, SHAP can only be used with tree-based models (i.e., LightGBM, Random Forest, XGBoost) as that is mainly what SHAP is designed for. It is infeasible to perform SHAP analysis on regression models with the thousands of features that transcriptome data usually comes with. 5.) At the time of writing, the shap package utilizes the IPython.core.display module for creating interactive plots. Since storing SHAP values and generating SHAP summary plots was sufficient in our original study, Ciclops only makes use of the non-interactive plot functions of the shap package.",
    "Therefore, if applicable, users can ignore the warning, \"IPython could not be loaded!\" and do not need to have IPython installed.",
    "Critical: 1.) In order for Ciclops to run, ensure the paths to both training and test data files are correct. 2.) Unless you intend on using a tree-based model (e.g., LightGBM, Random Forest, XGBoost), exclude or minimize the number of features that are categorical, as most models implemented in Ciclops were designed to operate on ordinal, numeric values. If you wish to include categorical features, encode them as ordinal, numeric values before training. 3.) While the parameters of the five models implemented in Ciclops worked for our original study and allowed us to win the 2019 Dream Malaria challenge (Table 3[href=https://www.wicell.org#tbl3]), we encourage users to tune the hyperparameters in order to obtain the best model fit for their datasets (see troubleshooting 4[href=https://www.wicell.org#troubleshooting]). 4.) While both example datasets use binary labels, Ciclops can also build models where the labels of one or both datasets are continuous values. Use evaluation metrics that are suitable to assess the outcomes you are trying to predict with your model (see quantification and statistical analysis[href=https://www.wicell.org#quantification-and-statistical-analysis]).\ntable:files/protocols_protocol_1857_3.csv"
  ],
  "subjectAreas": [
    "Genomics",
    "Clinical Protocol",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}