{
  "id": 13932,
  "origin_website": "Jove",
  "title": "Measuring Neural and Behavioral Activity During Ongoing Computerized Social Interactions: An Examination of Event-Related Brain Potentials",
  "procedures": [
    "NOTE: The following protocol was developed in accordance with ethical standards approved by the Institutional Review Board at Illinois Wesleyan University.\n1. Cyberball Stimulus Preparation\nDownload the Cyberball paradigm12,18 and install it on the computer (the current protocol utilized images from Cyberball version 3.0). Alternatively, create computerized images to recreate the Cyberball paradigm to meet specific needs.\nCreate individual images for each portion of the throws within Cyberball by using a photo-editing program. For example, break down each of the throws from player to player into the individual throw frames that are shown one after another to create the image of a ball being thrown from player to player on the computer screen (see Figure 1).\nAdd any labels, names, or pictures to each individual throw frame in the photo-editing program, including anything to represent the human participant as the bottom player on the screen (represented by the hand at the bottom of the screen in Figure 1) to create a series of throw frames that are identical except for the movement of the ball from player to player.\nNote which frame in each throw sequence is the “informational frame” for that throw, or the first frame within the throw sequences that provides information to the players about the specific destination of the throw (i.e., which other player will receive the ball).\nEnsure that there are throw sequences creating a throw from each player to each other player on the screen (including throws from the human participant to the other players), that each throw sequence has the same number of throw frames, and the informational frame within each throw sequence has been noted.\n2. Cyberball Social Interaction Programming\nCreate a sequence file using stimulus presentation software to detail the exact sequence of events within the Cyberball social interaction.",
    "For the sequence file, specify the specific throw frames (in order), the timing of the frames on the screen, the sequencing of the frames, the nature of the event (throw from whom to whom), the response required by the human participant (when necessary), and the overall order of events to create the desired interaction. Explicitly enter all of these specifications into the proper rows, columns, and spaces within the programming code during the creation of the sequence file.\nSpecify all of the above-mentioned specifics within the programming code for each event within the sequence file and repeat the steps for each sequence file created (e.g., inclusion, exclusion).\n\t\t\nOrder each of the throw frames in the correct sequence within the sequence file so that the first ball toss is completed without error from one player to the other. Create similar ordered sequences in the file for each type of throw among the players so that each type of throw is represented in the sequence file (e.g., a three-player game consists of six different possible throws).\nSpace the timing of each throw frame 450 msec apart. In this method, ensure that each frame appears for 450 msec before being replaced by the next frame, which provides an image of motion on the screen for the participant and creates a throw event that lasts a total of 2,700 msec.",
    "Insert an event-related marker each time an informational frame is presented in the sequence file so that the presentation of the informational frame can be marked in time in the file saving the participants’ neural activity. Code this marker to represent the nature of the event by using numbers to represent the players (left player is player “1,” the bottom player is player “2,” the right player is player “3”), which would allow the code “13” to represent a throw from the player on the left to the player on the right.\nCopy the entire set of six different throw sequences within the file so that each throw sequence is represented at least twice within the sequence file. This will provide programming flexibility to change the order of events within each block so that they do not look pre-determined.\nCreate “if, then” statements within the sequence file to allow the human participant to freely select which player will receive the next throw following the human participant. Give the human participant a response pad or mouse to select the next action after receiving a ball toss; potentially using the right mouse button to throw to the player on the right and using the left mouse button to throw to the player on the left in a three-player game.\nEnsure that the “if, then” statements lead to the appropriate next throw sequence so that the game play appears seamless (i.e., a human throw to the player on the left should be followed by a throw from the player on the left to another player).\nCreate loops and “if, then” statements within the sequence file to represent the desired game action and allow the program to appropriately move to the next event regardless of the selections of the human participant.",
    "Initiate counters within the program to change the nature of the game so that the program does not become apparent to the human player (i.e., the same computerized player does not always make the same throw). Use these counters to switch the game action and remove patterns of play throughout the game after the repeated occurrence of a specific event or pattern of events to better give the appearance of spontaneous live play among players on the sides of the screen, not just the actual human participant represented on the bottom of the screen.\nDevelop different sequence files in order to study different types of social interactions. Make these interactions largely inclusive or exclusive, or even partially inclusive or exclusive, for the human participant depending on the nature of the research question by varying the proportion and order of inclusionary events and exclusionary events within each sequence file.\nEnsure that the event markers appear in the EEG files when collecting neural data to create event-related brain potentials (ERPs) for each event type within each of the different social interactions. These markers should appear in the EEG file as the informational frame is presented to the participant.\n3. Neuroelectric Recording\nPrepare participants for electroencephalography (EEG) assessment in accordance with the guidelines of the Society for Psychophysiological Research19.\nUse a lycra electrode cap embedded with 64 sintered Ag-AgCl electrodes (10 mm), arranged in a 10–10 system montage20 to collect EEG data. Fit the cap on the participant’s head and prepare each electrode using conductive gel.\n\t\nReference the electrodes online to an electrode placed at the midpoint between Cz and CPz and use AFz as the ground electrode.\n\t\tNOTE: Alternative online references may be needed depending upon the nature of the electrode cap used for data collection.",
    "Collect vertical and horizontal bipolar electrooculographic activity (EOG) to monitor eye movements using sintered Ag-AgCl electrodes placed above and below the right orbit and near the outer canthus of each eye.\nUse a digital bioamplifier to continuously digitize (500 Hz sampling rate), amplify (gain depends on the specific amplifier), and filter (70 Hz low-pass filter, including a 60 Hz notch filter) the raw EEG signal in DC mode. Choose these setting from the available options in the EEG analysis software for the amplifier prior to data collection and vary depending on the specifications of the EEG hardware and software.\nRecord EEG activity using EEG analysis software in order to further process the neural data.\n4. Offline Neuroelectric Data Processing\nCorrect eye blinks using a spatial filter, a multi-step procedure that generates an average eye blink, utilizes a spatial singular value decomposition based on principal component analysis (PCA) to extract the first component and covariance values, and then uses those covariance values to develop a filter that is specifically sensitive to eye blinks21.\nCreate stimulus-locked epochs relative to the event marker that was inserted in the continuous EEG file in the EEG analysis software by selecting this function from the choices of data transformation options. Run these epochs from -900 msec to 1,800 msec relative to inserted marker, which is equivalent to the entire duration of each six-frame throw and has a timepoint of 0 msec where the event marker was inserted as displayed in Figure 1.\nCorrect for baseline difference between the epochs by removing the average pre-stimulus baseline activity from each epoch (i.e., the 900 msec time window that runs from -900 msec to 0 msec prior to the event marker). This function can be selected or initiated from the data transformation options available in the EEG analysis software.",
    "Low-pass filter (30 Hz; 24 dB/octave) the epochs and reject any epochs with electrical artifacts that exceed +75V. Choose these setting from the available options in the EEG analysis software allowing the transformation of EEG data following data collection and vary depending on the specifications of the EEG software.\nAverage the neural responses together for each event type within the Cyberball task blocks.\n\tNOTE: This averaging process can be adapted to only average the first 20, middle 20, or even last 20 events of a similar type within each interaction to examine dynamic patterns of neural activation over the course of the social interaction13.\n\t\nCombine the various events types to create three major event categories: throws to the participant from either other player, throws from the participant to either other player, and throws not including the participant between the two other players. For example, combine throws from the human to the left player and to the right player into one average waveform.\nCombine the events from the computerized players into the event types of most interest: throws to the human participant (inclusionary) and throws away from the human participant (exclusionary).\nIf applicable, quantify the N2 component as the average amplitude in the discrete latency window running from 200 - 320 msec after the event marker at FCz.\nIf applicable, quantify the P3 component as the average amplitude in the discrete latency window running from 320 - 450 msec following the event marker at Pz.\nIf applicable, quantify ERP components to throw frames following the informational frame to examine ongoing differences among patterns of neural activity to different event types with the social interaction.\nSubscription Required. Please recommend JoVE to your librarian."
  ],
  "subjectAreas": [
    "Behavior"
  ],
  "bigAreas": [
    "Ecology & Environmental Biology"
  ]
}