{
  "id": 3498,
  "origin_website": "Cell",
  "title": "Brain Registration and Evaluation for Zebrafish (BREEZE)-mapping: A pipeline for whole-brain structural and activity analyses",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\n      Here, we provide a step-by-step approach to BREEZE-mapping. We describe in\n      detail the following four major steps (Figure 1[href=https://www.wicell.org#fig1],\n      Table S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3071-Mmc1.pdf]): (1) Pre-processing: This step converts the image\n      files to the format required for registration; (2)\nRegistration: This step involves the non-linear\n      registration22[href=https://www.wicell.org#bib21] of larval zebrafish\n      whole-brain z-stack images labeled with a uniform marker (e.g., tERK) to a\n      standard zebrafish reference brain16[href=https://www.wicell.org#bib16] using\n      transformation-based deformation,23[href=https://www.wicell.org#bib22],24[href=https://www.wicell.org#bib23] followed by re-slicing\n      and registration of other fluorescent channels (e.g., pERK or other\n      cell-specific markers) using the same geometric transformation file;\n      (3) Quantification: In this step, brain volume,\n      activity, or cell-specific markers are quantified within regions of\n      interest designated by zebrafish brain atlases;16[href=https://www.wicell.org#bib16]\n(4) Visualization: In this step, 3D maps are used to\n      visualize differences in brain volume, activity, or cell-specific markers\n      between experimental and control groups by applying statistical testing\n      for multiple comparisons. Overall, this protocol provides a user-friendly\n      pipeline for the analysis of whole-brain volume and activity phenotypes in\n      larval zebrafish.\n    \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3071-Fig1.jpg\n          Figure 1. Flowchart of major steps in the BREEZE-mapping pipeline\n        \n          The pipeline includes the following major steps: 1) Pre-processing; 2)\n          Registration; 3) Quantification; 4) Visualization. In Pre-processing\n          (Steps 1-4), images are organized, oriented, and quality-assessed in\n          preparation for registration. Images then undergo Registration (Steps\n          5-8), where they are co-registered to a standard zebrafish reference\n          brain image, and normalized intensity of cell-specific markers to the\n          uniform marker and localized brain volume (Jacobian values) are\n          calculated. In Quantification (Steps 9-11), standard zebrafish brain\n          atlases are applied to quantify regional differences in intensity and\n          volume. In Visualization (Steps 12-18), image values are normalized\n          and family-wise error (FWE) correction is applied to visualize\n          statistically significant differences between experimental and control\n          groups. A list of input and output files and scripts utilized at each\n          step are shown in\n          Table S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3071-Mmc1.pdf].",
    "Pre-processing\nTiming: 30 min - 1 h\n    \n      The objective of this major step is to ensure that whole-brain confocal\n      images are in the correct orientation and data format for registration.\n      Specifically, z-stack image files (e.g., .lif, .czi) are first\n      converted to .tif and .nrrd format and then to\n      .nii (“optfixed”) format.\n    \n        Organize confocal microscope files in preparation for pre-processing. In\n        a folder, create the following three subfolders, which will be used in\n        the major steps below:\n        \ntif containing all .tif files\nnrrd containing all .nrrd files\noptfixed containing .nii (“optfixed”) files\n          \nCritical: The optfixed folder name is\n      required because the scripts use “optfixed” as a keyword for image\n      location.\n    \n        For quality assessment, visualize maximum projections of all z-stack\n        images prior to registration. Using the ImageJ scripts, convert\n        whole-brain confocal z-stack images (.lif files) to max\n        projection files (.tif) and converted images (.nrrd) in\n        the correct orientation for registration.\n        \n            Run max_nrrd_2.ijm or\n            max_nrrd_3.ijm from the pre_processing\n            folder. These scripts are written for 2- or 3-channel images,\n            respectively.\n          \n            To run these scripts in ImageJ:\n            \n                Open the script (File → Open →\n                max_nrrd_2.ijm or max_nrrd_3.ijm → Run).\n              \n            Input folder locations of images as prompted in the following\n            sequence: lif (location of .lif files) →\n            tif (folder for max projection .tif files to be\n            created) → nrrd (folder for .nrrd files to be\n            created).\n          \n            The script will generate a max projection image and the user will be\n            prompted to rotate the image to the optimal orientation for image\n            visualization, which is anterior (forebrain) facing up.\n            \n                The script provides a drop-down menu with options to rotate the\n                image: 0 = no rotation; 1 = 90 degrees clockwise; 2 = 180\n                degrees clockwise; 3 = 270 degrees clockwise.\n              \n            A .nrrd file will simultaneously be generated 90 degrees",
    "clockwise to the orientation of the .tif. This file will be\n            in the correct orientation for registration, which is anterior\n            facing right. It is important to verify that the acquisition\n            orientation is correct for your dataset/microscope.\n          \nCritical: The scripts are written to\n      account for C0, C1, and C2 as keywords, where “C1” represents the uniform\n      neuronal label (i.e., tERK), and “C0” and “C2” are different cell-specific\n      markers. Z-stack files must be named according to this convention (e.g.,\n      gene_exp#_genotype_fish#_C0.nrrd,\n      gene_exp#_genotype_fish#_C1.nrrd).\n    \n        Visualize all confocal images as max projections to assess image\n        quality. Scripts for use in Adobe Illustrator are provided to facilitate\n        this process.\n        \n            Run summary_2.js, summary_3.js from the pre-processing folder.\n            These scripts are written for 2- or 3-channel images, respectively.\n          \n            To run these codes in Adobe Illustrator:\n            \n                Create a new template (any size template may be used; Color\n                Mode: RGB).\n              \nOpen the script (File → Scripts → Other Scripts).\n                The script will prompt the user to open the tif folder\n                containing the max projection files.\n              \n                The script will automatically display the max projection images\n                organized by genotype on the template.\n              \nCritical: It is important to check\n      image quality and exclude any samples with obvious inconsistencies in\n      dissecting, staining, or mounting. Excessively rotated (i.e., roll, pitch,\n      and yaw relative to the standard reference brain), damaged, or\n      inconsistently stained samples may cause unnatural warping of images,\n      resulting in inaccurate registration. In such cases, it may be necessary\n      to exclude a sample from analysis.\n    \n        Convert whole-brain z-stack images from .nrrd to\n        .nii (“optfixed”) format using BioImage Suite Web.\n        \n            Open the BioImage Suite Web App:\n            https://bioimagesuiteweb.github.io/webapp/viewer.html#[href=https://bioimagesuiteweb.github.io/webapp/viewer.html]\n            In Bioimage Suite, navigate to “Help” and select “Enable Internal\n            Feature.” Once enabled in a given browser, this step is no longer\n            required for subsequent analyses.\n          \n            Navigate to “Image Processing” and select “Fix Zebrafish Images.”",
    "Using the side bar, set the following parameters: Select\n            RAS and resample; unselect\n            biascorrect, normalize, and mask; set Smooth sigma = 1\n            and Resample Factor = 1.\n          \n            Load each nrrd file individually in Bioimage Suite Web,\n            select “Execute,” and save each file. Images will be saved as\n            optfixed images (∗_optfixed.nii.gz).\n          \n            In preparation for registration, upload the optfixed folder\n            containing all converted images (∗_optfixed.nii.gz) to a\n            dedicated experiment folder on an HPCC.\n          \nNote: It is not recommended to automate\n      this step because it serves as a checkpoint for image orientation and\n      allows users to visualize the converted images prior to registration.\n    \nNote: This is the transition point from\n      processing files locally to running analyses on an HPCC.\n    \nRegistration\nTiming: ∼15 h\n      The objective of this major step is to standardize the geometry of imaged\n      zebrafish brains to a standard reference brain image. This step generates\n      a geometric transformation file for each image labeled with a uniform\n      marker (e.g., tERK), which is used to register other channels from the\n      same sample to the standard reference and to calculate volume differences.\n      For voxel-based quantification of a cell-specific marker, the intensity of\n      the cell-specific marker is divided by the uniform/pan-neuronal marker\n      (e.g., pERK/tERK) for normalization.\n    \nCritical: For the following steps,\n      please ensure that the scripts and software packages listed in “materials and equipment[href=https://www.wicell.org#materials-and-equipment]” above with an asterisk (∗) are installed on the HPCC.\n    \n        In a bash terminal, execute the script, reg.sh. This will\n        register the uniformly labeled zebrafish brain images\n        (∗_optfixed.nii.gz) to a standard zebrafish reference brain.16[href=https://www.wicell.org#bib16]\n            To execute reg.sh, change directories to the experiment folder containing the\n            optfixed folder. In the command line, enter\n            bash reg.sh.\n            \n                Successful execution of reg.sh will generate a\n                list of submitted registration jobs.\n              \n            Input: specify the following parameters within reg.sh:\n            \nBINDIR=\"/usr/local/bin\"\nSTANDARD REFERENCE=\"standard ref.nii.gz\"\nSTANDARD_RSP_REFERENCE=\n                  \"standard_ref_rsp.nii.gz\"\nNON_PARAM_FILE=\"nonlinearRegistration.param\"\nDIS_ATLAS_MASK_FILE=\"dis_atlas_mask.nii.gz\"",
    "BINDIR: Path of bin directory containing all files and scripts.\n              \n                STANDARD_REFERENCE: Standard zebrafish reference brain. This\n                allows the dataset to be registered and resampled to a standard\n                reference coordinate system. standard_ref.nii.gz, derived from Randlett et al. (2015),16[href=https://www.wicell.org#bib16]\n                is the default reference image used in the pipeline.\n              \n                STANDARD_RSP_REFERENCE: Downsampled version of the standard\n                zebrafish reference brain. This is used to generate the\n                determinant of the Jacobian image (subsequently referred to as\n                the Jacobian). standard_ref_rsp.nii.gz is the default\n                resampled image.\n              \n                NON_PARAM_FILE: This file (nonlinearregistration.param)\n                contains a set of parameters for image registration to be\n                interpreted by biswebnode. The biswebnode command line tools are\n                available via the node package manager (npm) of node.js.\n              \n                DIS_ATLAS_MASK_FILE: This file (dis_atlas_mask.nii.gz) is\n                a binary indication of voxels corresponding to the standard\n                zebrafish reference brain, which is used as a “dissected” mask\n                for the Jacobian file.\n                \nCritical: The location of\n                  the bin folder must be specified in reg.sh. Please ensure that the bin folder is uploaded to the\n                  HPCC.\n                \n            Output: reg.sh generates an intermediate\n            .bisxform file for each uniformly labeled (i.e., C1, tERK)\n            brain image containing the information necessary to register all\n            channels of the same image to the reference brain.\n            \n                These files will appear in a new xform subfolder in the\n                following format: ∗_C1__optfixed__nlr.bisxform.\nbiswebnode nonlinearregistration --paramfile\n                      ${NON_PARAM_FILE} -r ${STANDARD_REFERENCE} -t\n                      ∖${input_cl_file}\nPause point: Using an\n                  HPCC will allow multiple jobs to run simultaneously. Each job\n                  is an image from one fish. After jobs are submitted, we\n                  recommend checking their status to ensure that jobs are\n                  running appropriately.\n                \n        Reslice images with cell-specific labels to the coordinate system of the\n        standard reference.\n        \n            The script, reg.sh applies the geometric\n            transformation file (.bisxform) to both the uniformly labeled\n            brain image in the C1 channel (tERK) and the cell-specific marker(s)\n            in the C0 and C2 channels. The script uses the",
    "resliceimage command in BioImage Suite to reslice the\n            image in each channel and align it with the standard reference\n            brain.\n          \n            Input:\n            \ninput_c0_file=\"optfixed/${file}_C0_optfixed.nii.gz\"\ninput_cl_file=\"optfixed/${file}_Cl_optfixed.nii.gz\"\ninput_c2_file=\"optfixed/${file}_C2_optfixed.nii.gz\"\n                input_C0_file (∗_C0__optfixed.nii.gz): Pre-processed\n                first cell-specific marker image.\n              \n                input_C1_file (∗_C1__optfixed.nii.gz): Pre-processed\n                uniform marker image.\n              \n                input_C2_file (∗_C2__optfixed.nii.gz): Pre-processed\n                second cell-specific marker image.\n              \n            Output: The registered files for all channels will appear in a new\n            registered subfolder in the following format:\n            r_∗_C0__optfixed.nii.gz, r_∗_C1__optfixed.nii.gz.\nbiswebnode resliceimage -r ${STANDARD_REFERENCE} -i\n                  ∖${input_cl_file} -x ∖${bisxform_file} -o\n                  ∖${registered_cl_file}\nbiswebnode resliceimage -r ∖${registered_cl_file}\n                  -i∖${input_c0_file} -x ∖${bisxform_file} -o\n                  ∖${registered_c0_file}\n        To determine regional differences in the cell-specific label (e.g., pERK\n        for active neurons), normalize the intensity of the cell-specific label\n        to the uniform label (e.g., tERK for total neurons). This step is\n        performed by the script, reg.sh.\nreg.sh divides the three-dimensional whole-brain\n            z-stacks labeled with the cell-specific marker in the C0 or C2\n            channels with those labeled by the uniform marker in the C1 channel.\n            reg.sh uses the -div option in the\n            fslmaths command to divide the intensity value of each\n            voxel in the cell-specific image with the intensity value of the\n            corresponding voxel in the uniformly labeled image.\n          \n            Input:\n            \nregistered_c0_file=\"r_${file}_CO_optfixed.nii.gz\"\nregistered\n                  cl_file=\"r_${file}_Cl_optfixed.nii.gz\"\nregistered_c2_file=\"r_${file}_C2_optfixed.nii.gz\"\n                registered_c0_file (r_∗_C0__optfixed.nii.gz): Registered\n                first cell-specific marker image.\n              \n                registered_c1_file (r_∗_C1__optfixed.nii.gz): Registered\n                uniform marker image.\n              \n                registered_c2_file (r_∗_C2__optfixed.nii.gz): Registered\n                second cell-specific marker image.\n              \n            Output: This step generates a new file for each image\n            (r_∗C0divC1.nii.gz) representing the voxel-by-voxel division\n            of the two z-stacks. These files will appear in a new\n            divided subfolder, which contains subfolders for each\n            cell-specific marker (e.g., C0divC1, C2divC1).\n            \nmkdir -p divided/C0divCl\ndivided_file=\"r_${file}_C0divC1.nii.gz\"\nfslmaths ∖${registered_c0_file} -div\n                  ∖${registered_cl_file}\ndivided/C0divCl/∖${divided_file}\nmkdir -p divided/C2divC1\ndivided_file =\"r_${file}_C2divCl.nii.gz\"\nfslmaths ∖${registered_c2_file} -div\n                  ∖${registered_cl_file}\ndivided/C2divC1/∖${divided_file}\nNote: As described above, the\n              scripts are written to account for C0, C1, and C2 as keywords,\n              where “C1” represents the uniform neuronal label (tERK), and “C0”",
    "and “C2” are two different cell-specific markers. If only one\n              cellular marker is used, the script will only generate\n              calculations for the image channel that is used (e.g., C0 or C2).\n            \n        To quantify differences in brain volume, perform a Jacobian calculation\n        using the .bisxform transformation files\n        (standard_ref∗C1_optfixed_nlr.bisxform). This file describes the\n        degree of stretch or compression required to map the test brain to the\n        standard reference brain. This step is performed by the script,\n        reg.sh.\n            By using the jacobianimage function of the BioImage\n            Suite package, reg.sh calculates the ratio between the\n            test brain and a 2 × 2 × 2 resampled version of the standard\n            reference brain. This ratio reflects whether the test brain is\n            larger or smaller than the reference in specific regions (i.e., 1 =\n            no volume change, > 1 = individual subject is larger than the\n            template and < 1 = individual subject is smaller than the\n            template).23[href=https://www.wicell.org#bib22]\n            Input:\n            \n                STANDARD_RSP_REFERENCE: Downsampled version of the standard\n                zebrafish reference brain. This is used to generate the\n                Jacobian. standard_ref_rsp.nii.gz is the default\n                resampled reference brain image.\n              \n                DIS_ATLAS_MASK_FILE: This file (dis_atlas_mask.nii.gz) is\n                a binary indication of voxels corresponding to the standard\n                zebrafish reference brain, which is used as a “dissected” mask\n                for the Jacobian file.\n              \n            Output: The Jacobian calculation generates the following files for\n            each uniformly-labeled (i.e., C1, tERK) image: ja_∗.nii.gz\n            and mask_ja∗.nii.gz, which will appear in a new\n            jacobian subfolder.\n          \nbiswebnode jacobianimage -x ∖${bisxform_file} -i\n${BINDIR}/${STANDARD_RSP_REFERENCE} -o\n          jacobian/∖${jacobian_file}\nbiswebnode maskimage -i jacobian/∖$ {jacobian_file} -m\n${BINDIR}/${DIS_ATLAS_MASK_FILE} -o jacobian/∖${mask_file}\nNote: The Jacobian image file contains all\n      values irrespective of the location in the fish. To include only values\n      corresponding to the fish brain, the mask_ja∗.nii.gz file is\n      generated using a binary mask file corresponding only to regions of the\n      Z-Brain atlas within the brain.\n    \nCritical: Because Jacobian",
    "calculations are performed on the geometric transformation files, which\n      are a different dimensionality compared to the registered images, these\n      calculations require the use of a 2 × 2 × 2 resampled version of the\n      zebrafish standard reference brain (standard_ref_rsp.nii.gz). To\n      confirm that the image and the standard reference have the same\n      dimensions, use the headerinfo tool by typing\n      biswebnode headerinfo in terminal followed by the name of\n      the image. This will output the x,y,z dimensions of the image as well as\n      the orientation space (right or left, anterior or posterior, superior or\n      inferior).\n    \nNote: Checkpoint: Confirm that\n      reg.sh generated the following subfolders containing the\n      expected files: (i) xform: files containing the mapping\n      calculations for the non-linear registration of each image\n      (.bisxform); (ii) registered: registered versions of\n      each channel to the standard reference for each image\n      (r_∗_C0__optfixed.nii.gz, r_∗_C1__optfixed.nii.gz);\n      (iii) divided: normalized files (r_∗C0divC1.nii.gz, r_∗C2divC1.nii.gz); (iv) jacobian: the Jacobian files\n      (ja_∗.nii.gz, mask_ja∗.nii.gz); and (v)\nlogs. The logs subfolder provides a record of the jobs run and any\n      errors encountered.\n    \nQuantification\nTiming: 5–10 min\n      The objective of this major step is to quantify regional image intensities\n      representing brain activity (pERK) or other cell-specific markers and\n      brain volume across multiple fish in each experimental group using\n      zebrafish brain atlases to define regions of interest.\n    \n        To quantify regional differences in brain size and/or activity, we\n        provide multiple versions of the zebrafish brain atlas adapted from\n        Randlett et al. (2015)16[href=https://www.wicell.org#bib16] and Thyme\n        et al. (2019)17[href=https://www.wicell.org#bib17] (as described in\n        Weinschutz Mendes et al. (2023)1[href=https://www.wicell.org#bib1]).\n        \n4-region (Zbrain_atlas_4region.nii.gz,\n            Zbrain_atlas_4region_rsp.nii.gz): An atlas for quantifying\n            phenotypes across four major subdivisions of the zebrafish brain:\n            (i) telencephalon; (ii) diencephalon;\n            (iii) mesencephalon; (iv) rhombencephalon.\n          \n8-region (Zbrain_atlas_8region.nii.gz,\n            Zbrain_atlas_8region_rsp.nii.gz): An atlas for quantifying\n            phenotypes across eight major brain regions: (i) forebrain\n            (telencephalon); (ii) optic tectum; (iii) thalamus;\n            (iv) hypothalamus; (v) cerebellum;\n            (vi) hindbrain; (vii) habenula;",
    "(viii) posterior tuberculum.\n          \n149-region (Zbrain_atlas_149region.nii.gz): A\n            149-region atlas derived from the Z-Brain atlas developed by\n            Randlett et al. (2015),16[href=https://www.wicell.org#bib16] excluding\n            the external features or ganglia. This atlas is optimized for the\n            analysis of dissected brain images.\n          \nOptional: To generate custom-designed\n      atlases, we provide the zbrain_universal_script.m, which allows users to integrate ROIs derived from the Z-Brain atlas to\n      create new atlases for subpopulations of interest.\n    \nCritical: Jacobian calculations\n      require the use of 2 × 2 × 2 resampled versions of zebrafish brain atlases\n      (∗_rsp.nii.gz). The dimensions of these atlases can be verified\n      using the biswebnode headerinfo command.\n    \n        To quantify regional differences in pERK (brain activity) or other\n        cell-specific markers, execute the bash script, roi.sh in\n        the experiment folder.\n        \nroi.sh generates .csv files containing the\n            average intensity values (pERK/tERK) per brain region depending on\n            the atlas selected. In addition to generating .csv files for\n            each fish individually, roi.sh integrates the\n            normalized intensity values for all fish in the experiment into a\n            combined .csv file (∗_C0divC1_combined.csv). To run\n            roi.sh, type roi.sh in the terminal command line followed\n            by the number designating the desired atlas (e.g.,\n            roi.sh 4, roi.sh 8, roi.sh 149 for the four-, eight-, and 149-region\n            zebrafish atlases, respectively, as separate commands).\n          \n            Input:\n            \nBINDIR=\"/usr/local/bin\"\nDIV_TYPE=\"C0divCl C2divC1\"\nATLAS_4=\"Zbrain_atlas_4region.nii.gz\"\nATLAS_8=\"Zbrain_atlas_8region.nii.gz\"\nATLAS_149=\"Zbrain_atlas_149region.nii.gz\"\nHEADER_4=\"roi_4region_header.csv\"\nHEADER_8=\"roi_8region_header.csv\"\nHEADER_149=\"roi_149region_header.csv\"\n                BINDIR: Path of bin directory containing all files and scripts.\n              \n                DIV_TYPE (r_∗C0divC1.nii.gz, r_∗C2divC1.nii.gz):\n                Normalized/divided files generated by reg.sh.\n                ATLAS_4 (Zbrain_atlas_4region.nii.gz): 4-region atlas.\n              \n                ATLAS_8 (Zbrain_atlas_8region.nii.gz): 8-region atlas.\n              \n                ATLAS_149 (Zbrain_atlas_149region.nii.gz): 149-region\n                atlas.\n              \n                HEADER_4 (roi_4region_header.csv): Header for the\n                4-region atlas.\n              \n                HEADER_8 (roi_8region_header.csv): Header for the\n                8-region atlas.\n              \n                HEADER_149 (roi_149region_header.csv): Header for the 149-region\n                atlas.\n                \nCritical: The location of\n                  the bin folder must be specified in roi.sh.\n                \n            Output: This script uses the computeroi function of",
    "BioImage Suite, the files in the divided subfolders (r_∗C0divC1.nii.gz, r_∗C2divC1.nii.gz), and a zebrafish brain atlas to calculate the average intensity\n            values of the ratio of the cell-specific marker to tERK within the\n            regions of interest (ROIs) designated by the atlas. These files are\n            deposited in a new roi_∗ subfolder, which is named according\n            to which atlas is used and contains subfolders for each\n            cell-specific marker (e.g., C0divC1, C2divC1).\n            \nfor file in ∖$(cd divided/∖${div_type} 2> /dev/null;\n                  ls\nr_∗∖${div_type}.nii.gz 2> /dev/null)\ndo\nzbrain_file=\"${BINDIR}/${ATLAS}\"\nroi_csv_file=∖$(echo ∖$file | sed\n's/.nii.gz/_${region}_roi.csv/g')\nbiswebnode computeroi -i divided/∖${div_type}/∖$file -r\n∖${zbrain_file} -o ∖${roi folder}/∖${roi_csv_file}\ndone\n        To quantify regional differences in brain volume, execute the bash\n        script, vol.sh in the experiment folder.\n        \nvol.sh generates .csv files containing the\n            average Jacobian values for each brain region depending on the brain\n            atlas selected. In addition to generating .csv files for each\n            fish individually, vol.sh integrates the Jacobian\n            values for all fish in the experiment into a combined\n            .csv file (mask_ja∗_combined.csv). To run\n            vol.sh, type vol.sh in the terminal command line followed\n            by the number designating the desired atlas (e.g.,\n            vol.sh 4, vol.sh 8 for the four- and eight-region zebrafish\n            atlases, respectively, as separate commands).\n          \n            Input:\n            \nBINDIR=\"/usr/local/bin\"\nJACOBIANDIR=\"jacobian\"\nATLAS_4=\"Zbrain_atlas_4region_rsp.nii.gz\"\nATLAS_8= \"Zbrain_atlas_8region_rsp.nii.gz\"\nHEADER_4=\"vol_4region_header.csv\"\nHEADER_8=\"vol_8region_header.csv\"\n                BINDIR: Path of bin directory containing all files and scripts.\n              \n                JACOBIANDIR: (mask_ja∗.nii.gz): Masked Jacobian files\n                generated by reg.sh.\n                ATLAS_4 (Zbrain_atlas_4region_rsp.nii.gz): Resampled\n                4-region atlas.\n              \n                ATLAS_8 (Zbrain_atlas_8region_rsp.nii.gz): Resampled\n                8-region atlas.\n              \n                HEADER_4 (vol_4region_header.csv): Header for the\n                4-region atlas.\n              \n                HEADER_8 (vol_8region_header.csv): Header for the\n                8-region atlas.\n                \nCritical: The location of\n                  the bin folder must be specified in vol.sh.\n                \nCritical: Due to the\n                  downsampling required for volume measurements, we do not\n                  recommend using the 149-region atlas when analyzing brain\n                  volume, because small ROIs may not accurately reflect regional\n                  volume differences. Furthermore, downsampling may remove small\n                  regions entirely, such that their activity and volume may not",
    "be directly comparable.\n                \n            Output: This script uses the computeroi function of\n            BioImage Suite, the files in the jacobian subfolder\n            (mask_ja∗.nii.gz), and a resampled zebrafish brain atlas to\n            calculate the Jacobian values within the regions of interest (ROIs)\n            designated by the atlas.\n            \nfor file in ∖$ (cd ${JACOBIANDIR} 2> /dev/null; ls\nmask_ja∗.nii.gz 2> /dev/null)\ndo\nzbrain_file= \"${BINDIR}/${ATLAS}\"\nvol csv_file=∖$ (echo∖$file | sed\n's/.nii.gz/_${region}_vol . csv/g ')\nbiswebnode computeroi -i $JACOBIANDIR/∖$file -r\n∖${zbrain_file} -o ∖${vol_folder}/∖${vol_csv_file}\ndone\nCritical: To analyze\n              significant differences in regional brain activity\n              (∗_C0divC1_combined.csv) and volume\n              (mask_ja∗_combined.csv) between wild-type and mutant\n              groups, we utilized linear mixed models, because this statistical\n              method accounts for variability associated with the day of testing\n              (described below in\n              quantification and statistical analysis[href=https://www.wicell.org#quantification-and-statistical-analysis]).\n            \nPause point: Due to the\n              highly automated nature of the pipeline, quality assessment for\n              individual images may be necessary should statistical outliers\n              arise. BioImage Suite Editor (https://bioimagesuiteweb.github.io/webapp/editor.html[href=https://bioimagesuiteweb.github.io/webapp/editor.html]) may be used to validate individual values generated by\n              roi.sh and vol.sh. To do this, first, load each image (r_∗C0divC1.nii.gz or\n              mask_ja∗.nii.gz) in BioImage Suite (File → Load Image).\n              Next, load the desired zebrafish brain atlas in the viewer as the\n              “Objectmap” (Objectmap → Load Objectmap). Finally, perform a “VOI\n              Analysis” (Objectmap → VOI Analysis) (“VOI” is used\n              interchangeably with “ROI”), which may be exported as a\n              comma-separated value (.csv) file using the “Export as CSV”\n              option. We recommend that images generated in future steps, such\n              as those generated by zscore.sh and\n              afni_roi.sh, be visualized in the same manner to assess for statistical\n              outliers.\n            \nVisualization\nTiming: ∼ 1 day\n      The objective of this major step is to visualize differences in brain\n      activity, cell-specific markers, or volume between experimental and\n      control groups. To identify significant voxels for brain activity, a 3-D\n      t-test and cluster filtering are performed using the AFNI 3dClustSim\n      version (16.3.05, October 2016) program.20[href=https://www.wicell.org#bib24]",
    "These steps generate files and datasets used to cluster filter significant\n      voxels. The BioImage Suite WebApp Viewer Tool is used for image\n      visualization.\n    \n        To generate a z-scored image for either cell-specific markers (e.g.,\n        pERK) or volume datasets, execute the script zscore.sh in\n        the experiment folder.\n        \n            To run the z-score quantification script, type\n            zscore.sh in the terminal command line followed by a\n            list of the experimental groups and control group.\n            \n                To compare homozygous (hom) and heterozygous (het) mutants to\n                wild-type (wt) samples, type zscore.sh wt het hom, where the group names correspond to the genotypes in the\n                image file names. The script assumes that “wt” is the control\n                group unless otherwise specified and the group names may be\n                written in any order.\n              \nzscore.sh incorporates a MATLAB script (zscore.m) that uses the fslmaths command in FSL to\n                generate a z-score image file for all samples in the\n                experimental group(s) that represents the z-score of each voxel\n                with respect to the standard deviation and mean of the control\n                group.\n              \nzscore.m uses the files in the\n                divided subfolder (∗_C0divC1.nii.gz) for brain\n                activity or other cell-specific markers and the files in the\n                jacobian subfolder (mask_ja∗.nii.gz) for brain\n                volume.\n              \nzscore.m also requires mean\n                (avg_∗_wt.nii.gz) and standard deviation\n                (stdev_∗_wt.nii.gz) files for the control group and two\n                text files (∗fishlist.txt) containing a list of the image\n                names in the experimental and control groups. These files are\n                generated automatically by zscore.sh based on the\n                genotypes specified in the command line.\n                \nNote: This is the first point\n                  at which the pipeline directly quantifies differences between\n                  experimental groups.\n                \n            Input:\n            \nFSLDIR='/usr/local/bin'\nBINDIR=\"/usr/local/bin\"\nDIV_TYPE=\"C0divCl C2divC1\"\nJACOBIAN_REFERENCE\n                  _FISH=\"${BINDIR}/standard_ref_rsp.nii.gz\"\nDIVIDED_REFERENCE_FISH=\"${BINDIR}/standard_ref.nii.gz\"\nFSLDIR: Path of directory containing FSL.\n                BINDIR: Path of bin directory containing all files and scripts.\n              \n                DIV_TYPE: Normalization type/variable (“C0divC1, C2divC1”).\n              \n                JACOBIAN_REFERENCE_FISH: Resampled standard reference brain\n                (standard_ref_rsp.nii.gz).\n              \n                DIVIDED_REFERENCE_FISH: Standard reference brain\n                (standard_ref.nii.gz).",
    "Critical: The location of\n                  the bin folder must be specified in\n                  zscore.sh.\n            Output: The z-score, mean, standard deviation, and text files\n            specifying the experimental groups will appear in two subfolders:\n            divided_zscore (activity or cell-specific marker) and\n            jacobian_zscore (volume).\n            \nfslDirectory = '${FSLDIR}'\nreferenceGroupList = textread\n                  ('${referenceGroupList}', '%s')\ncomparisonGroupList =\n                  textread('${comparisonGroupList}', '%s')\nmeanRefimageName = '${meanRefimageName}'\nsdimageName = '${sdimageName}'\nreferenceFishimage = '${referenceFishimage}';\nPause point: For quality\n              assessment, we recommend visualizing z-scored images for each\n              genotype using BioImage Suite Editor (https://bioimagesuiteweb.github.io/webapp/editor.html[href=https://bioimagesuiteweb.github.io/webapp/editor.html]), as described above.\n            \nCritical: To visualize\n              statistically significant voxel intensities for brain activity or\n              other cell-specific markers, multiple-comparisons corrections are\n              performed in BioImage Suite and AFNI, as described in Steps 13–15\n              below.\n            \n        To perform statistical testing on the z-scored activity or cell-specific\n        marker images, execute the script afni_roi.sh in the\n        experiment folder followed by a list of the experimental and\n        control groups. In the command line, enter\n        bash afni_roi.sh wt het hom.\n        \n            Input:\n            \nPWD=$(basename `pwd`)\nBINDIR=\"/usr/local/bin\"\nZBRAIN BINARY\n                  FILE=\"Zbrain_binary_mask_rsp_roi.nii.gz\"\nDIV_TYPE=\"C0divCl C2divCl\"\nGENO_TYPE=\"$@\"\nGENO_TYPE=\"${GENO_TYPE//[wW][tT]/}\"\n                BINDIR: Path of bin directory containing all files and scripts.\n              \n                ZBRAIN_BINARY_FILE: Binary mask indicating voxels that are\n                within the fish (Zbrain_binary_mask_rsp_roi.nii.gz).\n              \nDIV_TYPE: C0divC1; C2divC1 folders.\n                GENO_TYPE: Genotype (e.g., heterozygous, homozygous, wild-type).\n                \nCritical: The location of\n                  the bin folder must be specified in\n                  afni_roi.sh.\n                \nafni_roi.sh uses the z-score files\n            (r_∗C0divC1_zscore.nii.gz) and first runs the following steps\n            using BioImage Suite:\n            \nSmoothing (biswebnode smoothimage): Images are initially smoothed to reduce background\n                noise. Individual z-score files are smoothed by a sigma factor\n                of 3.\n              \nResampling (biswebnode resampleimage): Images are downsampled by a factor of 2 × 2 × 2 to\n                account for the computationally intensive nature of the\n                calculation.\n              \n                After the z-score files are smoothed and resampled, they will be\n                placed into subfolders within the folder, afni_roi,\n                distinguished by genotype: hom_smoothed_rsp,\n                het_smoothed_rsp, and wt_smoothed_rsp.\nConcatenation (biswebnode concatenateimage): Within each subfolder,",
    "afni_roi.sh concatenates the smoothed and\n                resampled files and outputs a concatenated file\n                (∗_concatenation.nii.gz) for each genotype in the\n                respective ∗_smoothed_rsp folders.\n                \nbiswebnode smoothimage -i\n                      divided_zscore/${div_type}/∖$file -o ∖$tmpfile --sigma 3.0\n                      --inmm true\nbiswebnode resampleimage -i ∖$tmpfile -o\n                      ∖${sm_folder}/∖$file xsp 2.0 --ysp 2.0 --zsp 2.0\nbiswebnode concatenateimages -o\n                      ∖${sm_folder}/∖${genotype} concatenation.nii.gz -i\n                      ∖${sm_folder)/r_∗.nii.gz\n            Next, afni_roi.sh runs the following steps using AFNI:\n            \n3D t-test (3dttest++): a 3D, voxel-by-voxel t-test is\n                performed to establish voxels of fluorescence intensity that are\n                statistically significant between experimental and control\n                groups.\n                \nNote:\nafni_roi.sh performs the\n                  3dttest++ calculation using the concatenated files\n                  (∗_concatenation.nii.gz) in the\n                  ∗_smoothed_rsp folders.\n                \n                Output: A residual file (∗_vs_wt_roi_resid_C0divC1.nii.gz) representing the\n                difference between the data values of the comparison group from\n                the set mean, and a six-frame t-test file (∗_vs_wt_roi_ttest_C0divC1.nii.gz) are generated. The six\n                frames are as follows: Frame0: SetA-SetB_mean =\n                difference of means; Frame1: SetA-SetB_Zscr;\n                Frame2: SetA_mean = mean of SetA;\n                Frame3: SetA_Zscr; Frame4: SetB_mean = mean of\n                SetB; Frame5: SetB_Zscr.\n                \n3dttest++ -prefix\n∖${dttest_folder}/∖${genotype}_vs_wt_roi_ttest_${div_type}.nii.gz\n-resid\n∖${dttest_folder}/∖${genotype}_vs_wt_roi_resid_${div_type}\n                      .nii.gz\n-setA ∖${sm_folder}/∖${genotype}_concatenation.nii.gz\n                      -setB\n∖${wt_folder}/wt_concatenation.nii.gz -toz\n3D full-width at half max (3DFWHMx): The spatial\n                autocorrelation of the data is performed to estimate the\n                approximate spatial noise distribution of the data.\n                \nNote: The\n                  3dFWHMx command (3dFWHMx) uses the residual file\n                  (∗_vs_wt_roi_resid_C0divC1.nii.gz) generated in the\n                  3dttest step.\n                \n3dFWHMx -input\n∖${dttest_folder}/∖${genotype}_vs_wt_roi_resid_${div_type}.nii.gz\n-mask ${ZBRAIN_BINARY_FILE} -acf -detrend | (tee\n∖${dClustSim_folder}/∖${genotype}.num >&2 )\ncp 3dFWHMx.1D\n                      ∖${dFWHMx_folder}/∖${genotype}_3dFWHMx.1D\ncp 3dFWHMx.1D.png\n                      ∖${dFWHMx_folder}/∖${genotype}_3dFWHMx.1D.png\n                Output: The 3dFWHMx step outputs a regression plot file\n                (∗_3dFWHMx.1D.png) and three model parameters of the\n                autocorrelation data in a separate file (∗_3dFWHMx.1D)\n                for each comparison group (e.g., hom_3dFWHMx.1D,\n                het_3dFWHMx.1D) in the subfolder, 3dFWHMx.\n3D cluster simulation (3dClustSim): Based\n                on the noise parameters determined by 3DFWHMx, critical\n                sizes of spatial clusters of intensity are determined. Depending\n                on the statistical threshold used, any cluster of statistically\n                significant intensity smaller than this critical size is deemed\n                to be noise.",
    "Note:\nafni_roi.sh applies the\n                  3dClustSim command (3dClustSim) and uses the three model parameters generated by the\n                  3dFWHMx step to estimate the probability of false\n                  positive clusters. The three model parameters are stored in\n                  the file, genotype.num and are saved in the\n                  3dClustSim subfolder.\n                \n                The 3dClustSim step outputs nine text files per\n                comparison group (∗.1D), each with different thresholding and\n                clustering approaches in the subfolder, 3dClustSim.\nNUMBER=∖$(tail -1 ∖${dClustSim_folder}/∖${genotype}.num | awk\n'{print ∖$1,∖$2,∖$3}')\n3dClustSim -mask ${ZBRAIN BINARY_FILE} -acf ∖${NUMBER}\n                      -\nprefix\n∖${dClustSim_folder}/∖${genotype}_${div_type}_wt_roi_nomask\nrm -f 3dFWHMx.1D 3dFWHMx.1D.png\n                Output: The output files for afni_roi.sh will\n                appear in the subfolders: C0divC1 or C2divC1.\n        In preparation for visualizing differences between groups using AFNI,\n        extract Frame 1 (SetA-SetB_Zscr) from the six-frame image generated by\n        3dttest++ in Step 13c. This frame contains the difference in\n        z-score between the experimental and control groups. This is done\n        locally using the BioImage Suite WebApp Viewer Tool (https://bioimagesuiteweb.github.io/webapp/viewer.html#[href=https://bioimagesuiteweb.github.io/webapp/viewer.html]).\n        \n            Load (File → Load Image) the standard reference fish\n            (standard_ref.nii.gz) and the t-test file (∗_vs_wt_roi_ttest_C0divC1.nii.gz) generated in the\n            3dttest++ step as an overlay (File → Overlay → Load Overlay).\n          \n            In the “Image Processing” drop-down menu, select “Extract Frame.”\n          \n            In the “Viewer Controls” menu, scroll to the “Extract Frame” tab.\n          \n            To extract Frame 1, select “Overlay” for both “Input” and “Output,”\n            type “1” in the “Frame” box, and select the “Execute” button. Do not\n            edit the advanced settings.\n          \n            Save the Frame 1 file by selecting “Overlay” → “Save Overlay.”\n          \n            Load the Frame 1 file (∗roi_ttest_Frame_001_C0divC1.nii.gz)\n            into the afni_roi folder.\n          \nCritical: The frames generated by\n      3dttest++ are zero-indexed. Therefore, the first frame is\n      designated as Frame 0, and the second, as Frame 1. BioImage Suite accounts\n      for zero-indexing, and entering 1 into the Frame option as described above\n      will extract the appropriate frame.\n    \nNote: Each experimental group (homozygous",
    "and heterozygous) will have a Frame 1 file and should be labeled with the\n      naming convention:\n      experimentalgroup_vs_wt_roi_ttest_Frame_001_C0divC1.nii.gz. For\n      example, “het_vs_wt_roi_ttest_Frame_001_C0divC1.nii.gz.”\n    \nNote: Checkpoint: In the\n      afni_roi folder, there should be two subfolders (C0divC1,\n      C2divC1) and the Frame 1 file.\n    \n        To identify significant clusters for activity and cell-specific marker\n        images, perform cluster filtering using the values generated by AFNI and\n        the BioImage Suite WebApp Viewer Tool (https://bioimagesuiteweb.github.io/webapp/viewer.html#[href=https://bioimagesuiteweb.github.io/webapp/viewer.html]) locally.\n        \n            To perform cluster filtering on activity or cell-specific marker\n            images, execute the bash script,\n            clusterfilter.sh. After uploading Frame 1 to the\n            afni_roi folder, open the terminal and change directories to\n            the experiment folder and type\n            bash clusterfilter.sh in the terminal command line\n            followed by the number designating the desired p-value threshold\n            (e.g., bash clusterfilter.sh 0.05, clusterfilter.sh 0.02, clusterfilter.sh 0.0001).\n          \n            After running the script, clusterfilter.sh, the thresholded files (e.g., ttest_∗ _C0divC1.nii.gz) will\n            appear in a subfolder called thresholded (e.g.,\n            afni_roi > C0divC1 > thresholded).\n            \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3071-Fig2.jpg\n                  Figure 2. Representative brain activity images visualized at\n                  different statistical thresholds generated by cluster\n                  filtering in AFNI\n                \n                  (A) Example of an output table generated by AFNI\n                  (3dClustSim). The vertical axis represents a critical\n                  p-value for a voxel-by-voxel t-test, and the horizontal axis\n                  represents the critical p-value for a given noise cluster.\n                  Note that minimum permissible cluster sizes decrease with a\n                  more stringent critical p-value on the vertical axis (as more\n                  noise voxels are eliminated by the threshold), as shown in the\n                  colored boxes, but increase with a more stringent p-value on\n                  the horizontal axis (as larger clusters are required to be\n                  deemed non-noise).\n                \n                  (B) Brain activity map of scn1labΔ44/Δ44 mutant zebrafish shown at various\n                  critical p-values. Colors correspond to the boxes shown in\n                  (A).\n                \nCritical: To determine which\n      statistical thresholds to use, we recommend visualizing images at multiple\n      statistical thresholds generated by AFNI (Figure 2[href=https://www.wicell.org#fig2])",
    "and comparing these images to the results of the statistical analysis of\n      regional differences in brain activity using linear mixed models (see\n      quantification and statistical analysis[href=https://www.wicell.org#quantification-and-statistical-analysis]). The p-values and cluster sizes for filtering the data will appear in\n      one of the nine 3dClustSim tables generated, one for each type of\n      simulation performed, based upon nearest neighbor clustering degree (face,\n      edge, or vertex) and significance tests (two-tailed, one-tailed, or\n      bi-sided). We recommend simulating cluster sizes using a second-degree\n      nearest neighbor clustering with a bi-sided significance test (cluster\n      sizes detailed in ∗_nomask.NN2_bisided.1D).\n    \nNote: The thresholded files are named by\n      the following convention: ttest_expfolder_Frame001_roi_genotype_p-value_clustersize_cellspecificmarker.nii.gz, where expfolder is the experiment folder; Frame001 is the\n      extracted frame 1; genotype is homozygous or heterozygous;\n      p-value refers to the z-scored p-value (e.g., p-value of 0.05\n      corresponds to a z-score of 1.96); clustersize refers to the\n      corresponding critical cluster size in the ∗.1D file;\n      cellspecificmarker refers to either\n      C0divC1 or C2divC1. For example, “ttest_scn1lab_exp1_Frame001_roi_hom_1.96_23.7_C0divC1.nii.gz.”\nCritical: Because brain volume images\n      are downsampled, cluster filtering may mask biologically relevant\n      differences in brain size. Therefore, we recommend applying cluster\n      filtering only to activity and cell-specific datasets. Alternatively, AFNI\n      may be used to generate the Frame 1 (z-score) image for Jacobian images\n      (mask_ja∗.nii.gz), as described in Steps 16–17 below, which may be\n      visualized directly. For this reason, the cluster filtering script\n      described in the previous step is only used for visualizing brain activity\n      datasets. Significant regional differences in brain volume may be\n      determined using linear mixed modeling, as described in\n      quantification and statistical analysis[href=https://www.wicell.org#quantification-and-statistical-analysis].\n    \n        In a bash terminal, execute the script afni_vol.sh in the\n        experiment folder. This will generate the statistical files for\n        brain volume followed by a list of the experimental and control groups.\n        In the command line, enter bash afni_vol.sh wt het hom.\n        \n            Input:\n            \nPWD=$(basename `pwd`)\nBINDIR=\"/usr/local/bin\"\nZBRAIN_BINARY_FILE=\"Zbrain_binary_mask_rsp.nii.gz\"\nGENO_TYPE=\"$@\"",
    "GENO_TYPE=\"${GENO_TYPE//[wW][tT]/} \"\n                BINDIR: Path of bin directory containing all files and scripts.\n              \nZBRAIN_BINARY_FILE: Zbrain_binary_mask_rsp.nii.gz.\n                GENO_TYPE: Genotype (e.g., heterozygous, homozygous, and\n                wild-type).\n                \nCritical: The location of\n                  the bin folder must be specified in\n                  afni_vol.sh.\n                \nafni_vol.sh uses the z-score files\n            (mask_ja∗_zscore.nii.gz) and runs the smoothing steps in\n            Bioimage Suite. As these files are generated, they are placed in the\n            subfolder, afni_vol, separated by genotype.\n            \nNote: Because the volume images\n              are already downsampled, no further downsampling is required in\n              this step (unlike in afni_roi.sh) to maintain the computational feasibility of the\n              multiple-comparisons correction process.\n            \nafni_vol.sh performs the same smoothing,\n            3dttest, 3dFWHMx, and 3dClustSim steps as described\n            above in Steps 13b‒13c.\n            \nNote: The Jacobian map calculation\n              is inherently smooth because it is computed off a smooth tensor\n              spline non-linear transformation. Due to this smoothness, even\n              large clusters of changes may be falsely deemed as noise because\n              methods such as 3dClustSim assume that each voxel represents an\n              independent measurement. This, while true for fMRI data (which is\n              what AFNI was developed for), is an overly conservative assumption\n              for Jacobian maps where adjacent voxels are highly correlated due\n              to the inherent smoothness of the underlying transformation.\n              Therefore, a 3-dimensional t-test alone may suffice for\n              visualizing biologically relevant differences in brain volume.\n            \nbiswebnode smoothimage -i jacobian_zscore/∖$file -o\n∖${sm_folder}/∖$ {file} --sigma 3.0 --inmm true\nbiswebnode concatenateimages -o\n∖${sm_folder}/∖${genotype}_concatenation.nii.gz -i\n∖${sm_folder}/mask_ja_∗.nii.gz\n3dttest++ -prefix\n∖${dttest_folder}/∖${genotype} vs_wt_volume_ttest.nii.gz\n                  -resid\n∖${dttest_folder}/∖${genotype}_vs_wt_volume_resid.nii .gz -\n                  setA\n∖${sm_folder}/∖${genotype} concatenation.nii.gz -setB\n∖${wt_folder} /wt_concatenation.nii.gz -toz\n3dFWHMx -input\n∖${dttest_folder}/∖${genotype} _vs_wt_volume_resid.nii.gz\n                  -mask\n${ZBRAIN_BINARY_FILE} -acf -detrend | (tee\n∖${dClustSim_folder}/∖${genotype}.num >&2 )\ncp 3dFWHMx.1D ∖${dFWHMx_folder}/∖${genotype}\n                  _3dFWHMx.1D\ncp 3dFWHMx.1D.png ∖${dFWHMx_folder}/∖${genotype}\n                  3dFWHMx.1D.png\nNUMBER=∖$ (tail -1 ∖${dClustSim_folder}/∖${genotype}.num |\n                  awk\n'{print ∖$1,∖$2,∖$3}')\n3dClustSim -mask ${ZBRAIN_BINARY FILE} -acf ∖${NUMBER}\n                  -prefix\n∖${dClustSim_folder}/∖${genotype}_wt_vol_nomask\nrm -f 3dFWHMx.1D 3dFWHMx.1D.png\n            Output: The output files for afni_vol.sh will appear\n            in the folder, afni_vol.\n        To visualize volume differences between groups using AFNI, extract Frame",
    "1 (SetA-SetB_Zscr) from the six-frame image generated by\n        3dttest++. This frame contains the difference in z-score between\n        the experimental and control groups. This is done locally using the\n        BioImage Suite WebApp Viewer Tool, as described above for activity or\n        cell-specific datasets in Step 14.\n        \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3071-Fig3.jpg\n              Figure 3. BREEZE-mapping scripts and output folder structure\n            \n(A) Scripts utilized at each major step in the pipeline.\n              (B) Structure of output folders and subfolders generated at each\n              major step.\n            \nNote: Checkpoint: Confirm that all files\n      and subfolders have been generated correctly by the BREEZE-mapping\n      pipeline (Figure 3[href=https://www.wicell.org#fig3]). The scripts used at each step are\n      shown in Figure 3[href=https://www.wicell.org#fig3]A and the corresponding file\n      structure generated by the pipeline is shown in\n      Figure 3[href=https://www.wicell.org#fig3]B.\n    \n        Use the BioImage Suite WebApp Overlay Viewer (https://bioimagesuiteweb.github.io/webapp/overlayviewer.html?load=https://bioimagesuiteweb.github.io/webapp/images/viewer.biswebstate[href=https://bioimagesuiteweb.github.io/webapp/overlayviewer.html?load=https://bioimagesuiteweb.github.io/webapp/images/viewer.biswebstate]) locally to visualize both activity/cell-specific marker\n        cluster-filtered images and z-scored volume images.\n        \n            To visualize cluster-filtered brain activity or cell-specific marker\n            images, download the folder, thresholded, in the\n            afni_roi folder. Here, we describe how to visualize images\n            using the Overlay Viewer.\n            \n                Using the Overlay viewer, select the “Orthogonal” tab and load\n                the standard reference image (File → Load Image →\n                standard_ref_rsp.nii.gz).\n              \n                Next, load the Frame 1 image cluster-filtered at the appropriate\n                threshold (e.g., Overlay → Load Overlay →\n                ∗Frame_001_C0divC1.nii.gz.)\n              \n                To set the minimum (Min) and maximum (Max) values for\n                visualization, use the z-score of the p-value threshold as the\n                Min (e.g., p-value of 0.01 would have a minimum of 2.58). Users\n                may select the Max based on characteristics of the specific\n                dataset.\n              \n                To change the color scheme, locate the “Viewer Control” and go\n                to the drop-down menu, “Overlay Color Mapping.” Select\n                “Overlay2” for the “Overlay Type.”\n              \n                The crosshairs can be used to navigate the zebrafish brain and\n                locate changes in intensity slice-by-slice. To identify the\n                exact coordinates, locate the ‘I’ ‘J’ ‘K’ coordinates in the",
    "menu control, which are equivalent to X, Y, Z.\n              \n            To visualize z-scored brain volume images (not cluster filtered),\n            download the extracted Frame 1 files in the afni_vol folder.\n            Z-scored volume images may be visualized using the Overlay Viewer,\n            as described above, with some modifications.\n            \n                Select the “Orthogonal” tab and load the standard resampled\n                reference image (File → Load Image →\n                standard_ref_rsp.nii.gz).\n              \n                Next, load the Frame 1 image at the appropriate threshold (e.g.,\n                Overlay → Load Overlay → ∗volume_ttest_Frame_001.nii.gz).\n              \n                Users may select the Min and Max z-score values for\n                visualization based on characteristics of the specific dataset.\n              \n            Another viewing tool available in BioImage Suite is the Dual Viewer\n            (https://bioimagesuiteweb.github.io/webapp/dualviewer.html[href=https://bioimagesuiteweb.github.io/webapp/dualviewer.html]), which allows two images to be viewed side-by-side, or for an\n            image to be viewed alongside the zebrafish brain atlas.\n            Figure 4[href=https://www.wicell.org#fig4] shows the brain activity phenotype in\n            scn1labΔ44/Δ44 mutants viewed alongside the\n            8-region atlas using the BioImage Suite Dual Viewer. The Dual Viewer\n            may also be used to visualize brain volume images.\n            \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3071-Fig4.jpg\n                  Figure 4. Representative BioImage Suite Web Dual Viewer window\n                \n                  The BioImage Suite Web Dual Viewer provides the ability to\n                  compare two images side by side. The scn1labΔ44/Δ44 brain activity phenotype (left) is\n                  shown alongside the eight-region zebrafish brain atlas (right)\n                  in “Slices+3D″ mode, which displays images in axial, coronal,\n                  sagittal, and 3D orientations. (#1) A standard reference image\n                  is loaded initially as an image (File → Load Image; Image2 →\n                  Load Image), after which brain images and atlases may be\n                  viewed as overlays (Overlay → Load Overlay; Overlay2 → Load\n                  Overlay). (#2) Individual positions may be specified along the\n                  x, y, and z axes (i.e., i., j., and k), which will be\n                  reflected in both images. (#3) Color mapping for images may be\n                  specified with the Overlay Type parameter. Images in this",
    "protocol are typically visualized with the “Overlay2” color\n                  mapping. (#4) Color map thresholding may be performed with the\n                  “Min Overlay” (intensity value below which a voxel is not\n                  shown) and “Max Overlay” (intensity value above which a\n                  maximum saturation will be shown) options. (#5) A snapshot of\n                  both viewers may be taken with the “Take Snapshot” option.\n                \n                In “Viewer 1,” load the standard reference image (File → Load\n                Image → standard_ref_rsp.nii.gz).\n                Next, in “Viewer 1,” load the Frame 1 image as an overlay\n                (Overlay → Load Overlay → ∗Frame_001_C0divC1.nii.gz or\n                ∗volume_ttest_Frame_001.nii.gz).\n              \n                Set the Min and Max values as described above for the\n                Overlay/Orthogonal Viewer (see Step 18a). For activity or\n                cell-specific marker thresholded images, use the z-score of the\n                p-value threshold as the minimum (Min) (e.g., p = 0.01 would\n                have a minimum of 2.58) and maximum (Max) based on strictest\n                p-value threshold limit. For volume Frame 1 (z-score images),\n                the minimum and maximum can be determined by additional\n                statistical testing performed on the raw “vol” data generated in\n                Step 11c.\n              \n                In “Viewer 2,” load the standard reference image (File → Load\n                Image → standard_ref_rsp.nii.gz).\n                Next, in “Viewer 2,” load the atlas file (e.g.,\n                Zbrain_atlas_149region.nii.gz) as an overlay (File → Load\n                Overlay2 → Zbrain_atlas_∗region.nii,gz).\n              \n                To visualize the atlas in “Viewer Control 2,” go to the\n                drop-down menu, “Overlay Color Mapping” and select “Objectmap”\n                for the “Overlay Type.” No Min/Max adjustments are required in\n                “Viewer Control 2.”\n              \n                The cross hairs will be in sync for both viewers, giving users\n                the ability to hover over and navigate regions of image\n                intensity changes.\n              \n            Another viewing tool available in BioImage Suite is the Mosaic\n            Viewer (same URL as Overlay Viewer), which allows users to visualize\n            the data as a collection of z-slices.\n            \n                To visualize images using the Mosaic Viewer, select the “Mosaic”\n                tab.",
    "The “Viewer Control” tab is used to change parameters to\n                visualize specific brain slices.\n              \n                The “Rows” and “Columns” can be used to select a specific number\n                of slices that best displays the phenotype.\n              \n                The option “First” indicates the starting slice and “Increment”\n                is the difference in slices between the first and second slices."
  ],
  "subjectAreas": [
    "Computer Sciences",
    "Microscopy",
    "Neuroscience",
    "Genetics",
    "Model Organisms"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Bioengineering & Technology",
    "Molecular Biology & Genetics"
  ]
}