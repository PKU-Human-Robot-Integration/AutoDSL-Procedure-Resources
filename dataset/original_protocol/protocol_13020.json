{
  "id": 15810,
  "origin_website": "Jove",
  "title": "High-Resolution Neutron Spectroscopy to Study Picosecond-Nanosecond Dynamics of Proteins and Hydration Water",
  "procedures": [
    "1. Prepare the deuterated buffer for proteins in the liquid state\nDissolve all components of the buffer in pure D2O.\nIf the pH electrode was calibrated in H2O, adjust the pD according to the formula pD = pH + 0.4 using NaOD or DCl34.\n\tNOTE: The use of D2O instead of H2O might affect protein solubility and the buffer conditions might need to be adapted, (e.g., by a slight change in salt concentration).\n2. Prepare the H2O-hydrated powders of perdeuterated protein\nPrepare the sample holder.\n\t\nThoroughly clean a flat aluminum sample holder with its indium wire seal and screws with water and ethanol and let it dry.\n\t\tNOTE: A flat sample holder is used such that the powder can be homogenously distributed over the surface. The amount of powder should be sufficient such that it can be maintained between the walls and does not fall when the sample holder is placed vertically.\nWeigh the different parts of the sample holder-bottom, lid, and indium wire-separately on a precision balance.\nPlace the 1 mm indium wire seal in the groove of the bottom part of the sample holder, leaving a small overlap where the two ends join (Figure 2A).\nPlace an appropriate amount of lyophilized protein (typically ~100 mg of protein) such that it fills the inner surface of the bottom part of the sample holder.\nHydrate the protein powder.\n\t\nPlace the sample holder in a desiccator with a Petri dish containing P2O5 powder for 24 h to completely dry the protein powder35 (Figure 2B). Weigh the dry bottom part of the sample holder containing the indium seal and the dry powder to obtain mdry.\n\t\tCAUTION: P2O5 powder is very corrosive.",
    "Remove the P2O5 from the desiccator and put a Petri dish with D2O inside. Control the mass of the powder regularly to check the hydration level h = mhyd / mdry where mhyd and mdry are the mass of the hydrated powder and dry powder, respectively.\n\t\tNOTE: For highly hydrophobic proteins such as insulin, it might be necessary to increase the temperature inside the desiccator to get a higher vapor pressure and reach the desired hydration level h.\nRepeat steps 2.2.1 and 2.2.2 at least three times to properly convert all exchangeable hydrogens to deuterons.\n\t\tNOTE: Alternatively, cycles of freeze-drying and dissolution in pure D2O might be used for better H/D exchange provided that the protein is not affected by it.\nHydrate the powder to slightly above the desired level, let the bottom part of the sample holder with the indium wire and hydrated powder remain on the precision balance, and wait for the mass to decrease slowly to the desired value to get the target h (typically 0.2-0.4 if a medium sized globular protein is to be covered by one complete hydration layer).\nQuickly put the lid on the bottom part and close the sample holder first with four screws to stop the vapor exchange (Supplemental Figure S3A).\nPlace and tighten all remaining screws until no gap is visible between the bottom part and the lid (Supplemental Figure S3B).\nWeigh the sealed sample holder to check for any potential hydration loss via leaks after the neutron experiment.\n3. Perform the incoherent neutron scattering experiment\nDiscuss and double-check the configuration of the instrument needed for the experiment with the local contact some weeks before the assigned beamtime.\nPrepare the liquid state sample.\n\t\nDissolve the protein in the deuterated buffer.",
    "Determine the appropriate volume of liquid to be put in the sample holder using water (ensure there is no overflow when the sample holder is closed; Figure 2C).\n\t\tNOTE: The following steps (3.3 and 3.4) describe an experiment conducted on the NBS spectrometer IN16B at the ILL8,9, using a cryofurnace as a sample environment. The instrument control system will change from one instrument to the other, but the working principles remain the same.\nInsert the sample.\n\t\nThoroughly dry the sample stick (Figure 2D), and remove the previous sample, if any, after checking that the ionizing radiation dose is lower than 100 µSv/h before handling any material (at the ILL).\nPlace the sample, check for proper centering relative to the beam center (Supplemental Figure S4), and insert the sample stick in the cryofurnace (Figure 2D). Turn on the vacuum pump to reach less than 10-3 bar, and flush out the air inside the cryofurnace by repeating the following three times: fill the cryofurnace with helium gas until atmospheric pressure is reached, and remove the gas again using the vacuum pump.\n\t\tNOTE: In case of a flat sample holder, the sample holder must be oriented at a 45° angle relative to the incoming beam. The useful momentum transfer range could be reduced due to absorption and scattering by the cell. A strong neutron absorber such as cadmium can be used to mask certain parts of the sample holder (e.g., screws, thick parts).\nIntroduce some helium gas in the cryofurnace such that the pressure is ~0.05 bar.",
    "Acquire data (e.g., using NOMAD on IN16B at the ILL, it is assumed that the user prefers a temperature of 200 K before acquiring a quasielastic neutron spectrum (QENS) spectrum, then E/IFWS during a temperature ramp to 310 K at 0.5 K per min and finally a QENS at 310 K).\n\t\nUsing NOMAD, in the execution tab, drag and drop a FurnaceCryostat controller in the Launch Pad. Set the temperature to 200 K. Use the fast mode and a timeout of 30 min such that the temperature has time to stabilize. Click on the rotating arrows icon to run it in the background such that data can be acquired during the temperature decrease.\nDrag and drop the IN16DopplerSettings controller, set the speed profile to Accurate velocity set by Max ΔE, a value of 0.00 µeV and 128 channels to obtain an EFWS configuration.\nDrag and drop a Count controller, fill the Subtitle field with a name that allows easy identification of the data, and set 60 repetitions of 30 s scans (Supplemental Figure S5A).\nDrag and drop an IN16DopplerSettings controller, set the speed profile to Sine set by Speed with a value of 4.5 m/s and 2,048 channels to obtain a QENS configuration.\nDrag and drop a Count controller with 4 repetitions of 30 min scans (Supplemental Figure S5B).\nFor the temperature ramp, drag and drop a FurnaceCryostat controller, set the temperature to 310 K, set Ramp to SetPoint with Δ = 0.05 K and 6 s. Use a time out of 220 min (Supplemental Figure S6A).",
    "Use a for loop with 65 repetitions. Inside, insert an IN16DopplerSettings controller as in step 3.4.2, followed by a single count of 30 s. Subsequently, insert IN16DopplerSettings, as described previously but using an energy offset of 1.5 µeV and 1,024 channels followed by a single count of 3 min (Supplemental Figure S6B).\nTo acquire the last QENS at 310 K, drag and drop IN16DopplerSettings and Count controllers configured as described in steps 3.4.4 and 3.4.5, respectively.\nPress the start button (right triangle on the bottom of the window) to run the script.\n\t\tNOTE: Every experiment will require the acquisition of calibration data; that is, the empty cell for subtraction or absorption corrections, the buffer alone at the different temperatures used to model the background, and a measurement of vanadium (or equivalently, the sample at a temperature of 10 K or lower) to obtain the resolution function of the instrument.\n4. Data analysis - QENS\nImport the dataset using the 'IN16B_QENS.process()' method in the Python software nPDyn v3.x36\n>>>> from nPDyn.dataParsers import IN16B_QENS\n\t>>> sample = IN16B_QENS(\n\t...<path to data files>\n\t... [detGroup=<integer or detector grouping file in XML\n\t...format>]\n\t... ).process()\n\t>>> sample = sample.get_q_range(0.3, 1.8)\nPerform data corrections (optional) with the following commands (see the documentation of nPDyn for more information, Figure 3):\n#it is assumed that data for empty cell, vanadium, and buffer\n\t# were imported already in dataset called 'empty_cell', 'vanadium',\n\t# and 'buffer', respectively.\n\t# for empty cell subtraction with a scaling factor\n\t# (errors are propagated automatically)\n\t>>> sample = sample - 0.95 * empty_cell\n\t# for correction using Paalman-Ping coefficient\n\t# (mutually exclusive with the example above)\n\t>>> sample = sample.absorptionCorrection(empty_cell)\n\t# for normalization\n\t>>> sample = sample.normalize(vanadium)\n\t# for binning along observable axis\n\t# observable is the aggregation time here",
    ">>> sample = sample.bin(3, axis=0)\nFit the calibration data. The dataset-samples, empty cell, deuterated buffer (if needed), and vanadium-can be fitted using built-in models or a user-defined model (see nPDyn documentation):\n>>> from nPDyn.models.builtins import (\n\t... modelPVoigt,\n\t... modelWater,\n\t...modelCalibratedD2O,\n\t... )\n# builtin models use a column vector of the momentum\n\t# transfer q values\n\t>>> q = vanadium.q[:, None]\n\t# the vanadium is fitted using a pseudo-Voigt profile\n\t>>> vanadium.fit(modelPVoigt(q))\nUse the built-in model for hydration water called 'modelWater'. This model reads as shown by Eq (4)17\nimgsrc://cloudfront.jove.com/files/ftp_upload/63664/63664eq04.jpg (4)\n\tWhere a0, ar, and at are scalars accounting for the relative contribution of elastic signal, rotational motions, and translational motions, respectively; j1(qd) is the lth order spherical Bessel function, with q being the momentum transfer; d the O-H distance in the water molecule; δ(ω) is the Dirac delta, which is multiplied by the EISF here; N is the highest order of the spherical Bessel function used (typically ~5); imgsrc://cloudfront.jove.com/files/ftp_upload/63664/63664eq05.jpg and imgsrc://cloudfront.jove.com/files/ftp_upload/63664/63664eq11.jpg are the Lorentzian rotational and translational motions, respectively; b(q) is a flat background term. The spherical Bessel functions give the relative contribution of each angular momentum state of the water molecules, and the number N is determined based on the momentum transfer q-range. In the case of a typical NBS spectrometer, the terms up to N = 4 almost entirely explain the signal (Supplemental Figure S7).\n# here, equation 2 is used for hydration water\n\t# convolution with resolution function and addition of\n\t# D2O background is done automatically with the\n\t# provided arguments\n\t>>> sample.fit(modelWater(q),\n\t... res=vanadium,\n\t... bkgd=buffer,\n\t... volume_fraction_bkgd=0.95\n\t... )",
    "NOTE: The contributions of rotational and translational motions should be convoluted to be perfectly rigorous. The success of an additive model is to be attributed to the presence of distinct populations of water on the protein surface and the limited energy range accessible.\nUse the following to plot the data (Figure 4):\n>>> from nPDyn.plot import plot\n\t>>> plot(sample)\n5. Data analysis - temperature ramp, elastic fixed-window scans (EFWS)\nUse a procedure similar to section 4 to normalize the temperature ramp data by the signal at the lowest temperature (typically 10 K):\n>>> from nPDyn.dataParsers import IN16B_FWS\n\t>>> sample = IN16B_FWS(\n\t... <path to data files>,\n\t... detGroup=[detGroup=<integer or detector grouping file in XML format>]\n\t... ).process()\n\t# normalization with the 5 first points on the observable\n\t# axis, which correspond to the temperature\n\t>>> sample /= sample[:5].mean(0)\n\t# the momentum transfer q range used here is smaller\n\t# as the model used is valid for low q only\n\t>>> sample = sample.get_q_range(0.2, 0.8)\nUse a simple Gaussian model to start, the width of which is given by the so-called mean squared displacement (MSD). Build and fit the model using the following commands:\n>>> import numpy as np\n\t>>> from nPDyn.models import Parameters, Model, Component\n\t# a is a scaling factor\n\t>>> params = Parameters(\n\t... a={'value': 1, 'bounds': (0, np.inf)},\n\t... msd={'value': 1, 'bounds': (0, np.inf)}\n\t... )\n\t>>> model = Model(params)\n\t>>> model.addComponent(Component(\n\t… 'gaussian',\n\t… lambda x, a, msd: a * np.exp(-x ** 2 * msd / 6)\n\t… ))\n\t>>> sample.fit(model, x=sample.q[:, None])\n\t>>> plot(sample)\n\tNOTE: The Gaussian approximation always holds for q2MSD << 1, but wider momentum transfer range can be used for relative comparison between samples. More sophisticated models, which go beyond the Gaussian approximation, have been developed37,38,39.",
    "6. Data analysis - elastic and inelastic fixed-window scans (E/IFWS)\nSimilar to step 4, import the dataset but using the 'IN16B_FWS' class:\n>>> from nPDyn.dataParsers import IN16B_FWS\n\t>>> sample = IN16B_FWS(\n\t...<path to data files>\n\t... [detGroup=<integer or detector grouping file in XML format>]\n\t... ).process()\n\t>>> sample = sample.get_q_range(0.3, 1.8)\nFit the calibration data and sample data.\n\t\nAnalyze the E/IFWS data using a generalized MSD40 or by considering them as coarse-QENS spectra (having only a few data points on the energy axis). When E/IFWS is viewed as coarse-QENS, models used for QENS are used to fit the whole E/IFWS dataset at once (global fit of energy transfers and momentum transfers).\n\t\tNOTE: The latter solution-using models for QENS on E/IFWS data-is used here where the momentum transfer dependence of center-of-mass diffusion and protein internal dynamics are imposed.\nModel protein dynamics in liquids using the following Eq (5) ('modelProteinJumpDiff' in nPDyn):\nimgsrc://cloudfront.jove.com/files/ftp_upload/63664/63664eq06v2.jpg (5)\n\t\tWhere R(q,ω) is the resolution function; β a scalar independent for each momentum transfer q; a0 is the elastic incoherent structure factor (EISF); imgsrc://cloudfront.jove.com/files/ftp_upload/63664/63664eq07.jpg a Lorentzian accounting for center-of-mass diffusion with a width given by Eq (6); imgsrc://cloudfront.jove.com/files/ftp_upload/63664/63664eq12.jpg is a Lorentzian that includes center-of-mass diffusion and a contribution following the jump-diffusion model14 accounting for internal dynamics (Eq (7); imgsrc://cloudfront.jove.com/files/ftp_upload/63664/63664eq08.jpg being the fitted signal from D2O rescaled by its volume fraction in the sample.\n\t\tγ = Dsq2  (6)\n\t\tDs being the self-diffusion coefficient.\nimgsrc://cloudfront.jove.com/files/ftp_upload/63664/63664eq09.jpg (7)\nDi being the apparent diffusion coefficient for internal dynamics and τ a relaxation time for diffusive motions.\n>>> from nPDyn.models.builtins import (\n\t\t... modelPVoigt,\n\t\t... modelProteinJumpDiff,\n\t\t...modelCalibratedD2O,\n\t\t... )\n\t\t# builtin models use a column vector of the momentum\n\t\t# transfer q values\n\t\t>>> q = vanadium.q[:, None]\n\t\t# the vanadium is fitted using a pseudo-Voigt profile\n\t\t>>> vanadium.fit(modelPVoigt(q))",
    "# for pure D2O, a model with calibrated linewidth\n\t\t# for different temperatures is included in nPDyn\n\t\t>>> buffer.fit(modelCalibratedD2O(q, temp=363))\n\t\t# here, equation 3 is used for liquid samples\n\t\t# convolution with resolution function and addition of\n\t\t# D2O background is done automatically with the# provided arguments\n\t\t>>> sample.fit(modelProteinJumpDiff(q),\n\t\t... res=vanadium,\n\t\t... bkgd=buffer,\n\t\t... volume_fraction_bkgd=0.95\n\t\t... )\nPlot the fitted data using:\n>>> from nPDyn.plot import plot\n\t>>> plot(sample)\nSubscription Required. Please recommend JoVE to your librarian."
  ],
  "subjectAreas": [
    "Biochemistry"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}