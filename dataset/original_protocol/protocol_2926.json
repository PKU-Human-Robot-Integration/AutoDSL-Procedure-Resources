{
  "id": 3097,
  "origin_website": "Cell",
  "title": "Protocol to acquire time series data on adverse reactions following vaccination using a smartphone or web-based platform",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nPart one: Set up a smartphone/web-based platform\nTiming: One week\nThis step prepares a smartphone/web-based platform using a web server, an MVC web framework, and a DB server. Following the configuration, the platform interacts with a mail application programming interface (API) and a messaging API to communicate with users.\nConstruct a smartphone/web-based platform on a VPC.\nSet up an EC2 instance.\nNote: To enhance the security level, encrypted data via a VPC are recommended for this platform. The system is composed of a web server nginx, an MVC web framework (Laravel), and a MySQL-compatible DB server (Amazon Aurora), along with a mail API and messaging API for communication with users (Figure 1[href=https://www.wicell.org#fig1]).\nInstall Nginx.\nNote: To conduct an installation, enter commands such as the following example.\n$ sudo amazon-linux-extras enable nginx1.\n$ sudo yum install nginx -y.\nInstall PHP.\n$ sudo amazon-linux-extras enable php7.4.\n$ yum install php-cli php-pdo php-fpm php-json php-mysqlnd.\nInstall Composer to install Laravel.\n$ curl -sS https://getcomposer.org/installer[href=https://getcomposer.org/installer] | sudo php.\nInstall Laravel using Composer.\n$ composer create-project --prefer-dist laravel/laravel [project name]\nConfigure Nginx, PHP, and Aurora to suit the scale and environment of the system.\nNote: Subsequent to the configuration of MVC web framework, the following processes can be implemented on the web/database server.\nCreate the administrator’s contents in the controller and the model for operating the system and display the detailed information of vaccine recipients, including age, sex, contact e-mail addresses or accounts in messenger applications, and identification numbers (Figure 2[href=https://www.wicell.org#fig2]).\nNote: The contents are also built into the controller and the model, and then the controller relays the data to the view. This view is responsible for providing administrators with a browser interface for management.",
    "Design the contents of the questionnaire to obtain information about health conditions, including body temperature, symptoms, and attendance at work.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2671-Fig3.jpg\nFigure 3. List of the time series symptoms registered on the database server\n(A and B) Main database tables of the system tracking sequential symptoms (A) or specific timing (B). To monitor the vaccination schedule and any subsequent adverse reactions of participants, an organized database (A) should be established. To track the progression of adverse reactions over time, another database (B) should be created on the specific timing following the vaccination.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2671-Fig4.jpg\nFigure 4. Notification system for collecting data on health problems\n(A) When questionnaires are sent to recipients through a smartphone/web-based platform following vaccination, the recipients will receive a notification e-mail containing the Uniform Resource Locator (URL) (A).\n(B and C) The entry screen to reply to the questionnaire using a smartphone is shown as a first page (B) and a second page (C).\n(D) When questionnaires are sent to recipients through a smartphone/web-based platform following vaccination, the recipients will receive a notification e-mail containing (D).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2671-Fig5.jpg\nFigure 5. Administrator’s page displaying vaccination status and health information\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2671-Fig6.jpg\nFigure 6. List of vaccine recipients and health management\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2671-Fig7.jpg\nFigure 7. Health status management based on groups\ntable:files/protocols_protocol_2671_1.csv\nNote: In this example, the symptoms included joint pain, fatigue, fever, chills, headache, and nausea (Figures 3[href=https://www.wicell.org#fig3]A and 3B). The survey content is listed in Table 1[href=https://www.wicell.org#tbl1]. The contents are formulated within the controller and the model, and then the controller transmits the data to the view. Through the cooperative action of the view, users can browse the display and answer a questionnaire about the adverse reactions to the vaccine (Figures 4[href=https://www.wicell.org#fig4]A–4C). The collected data were stored on the DB server via the model.",
    "Construct a mail API and messaging API for communication to enable users and a web server or MVC web framework to interact.\nNote: The message (Figure 4[href=https://www.wicell.org#fig4]D) contains a URL, which directs the participants to the questionnaire page on the MVC web framework to report their health problems. Users access the web server and view the browser display to answer the questionnaire (Figures 4[href=https://www.wicell.org#fig4]B and 4C). The URL contains a parameter specifying the day so that the user can access the questionnaire page on the correct date.\nCheck the system is functioning.\nNote: If the system performs correctly, administrators can check the answers as soon as they submit the responses to the questionnaire (Figure 5[href=https://www.wicell.org#fig5]). In addition, administrators can browse the list of recipients (Figure 6[href=https://www.wicell.org#fig6]) and organize sequentially collected data based on the group (Figure 7[href=https://www.wicell.org#fig7]).\nPart two: Upload the list of recipients\nTiming: <10 min\nThis step prepares to upload a list of recipients on a web server.\nBefore the vaccination date, administrators must manage the list of vaccine recipients.\nObtain a list of recipients scheduled to be vaccinated from a person in charge of organizing the vaccination two days prior to the vaccination date.\nUpload the list of vaccine recipients on a web server.\nNote: The list contains employee numbers, vaccination dates, and contact e-mail addresses or accounts in messenger applications in a comma-separated value (CSV) format.\nCritical: The uploaded list of recipients should be matched with the original list of vaccine recipients. If it does not match the original list, verification must be conducted prior to further processes.\nPart three: Send notifications\nTiming: <10 min\nThis step prepares notifications containing a URL for the survey.\nFollowing vaccination, questionnaires are sent to recipients through a smartphone/web-based platform.",
    "Note: On the day after vaccination, notifications are sent to the smartphones or other devices owned by staff members via e-mail or messaging applications (Figure 4[href=https://www.wicell.org#fig4]C).\nCritical: The notifications contain a URL for the survey form asking questions about any adverse reactions within a few hours of vaccination and maintaining health observation diaries (Figures 4[href=https://www.wicell.org#fig4]B and 4C). The responsible codes to display the adverse reaction report form when the generated URL is clicked are as follows.\n{\n    $report = HealthcareReport::select('healthcare_reports.∗', DB::raw('DATE(healthcare_reports.created_at) as date'), 'hospitals.id as hospital_id',\n    'hospitals.name as hospital_name', 'hospitals.show_work_restriction_end_date as show_work_restriction_end_date',\n    'hospitals.vaccine_tracking as vaccine_tracking','users.name as user_name', 'infection_controls.current_infection_status', 'work_restriction_end_dates.end_date')\n    ->join('users', 'healthcare_reports.user_id', 'users.id')\n    ->join('hospitals', 'users.hospital_id', 'hospitals.id')\n    ->leftjoin('infection_controls', 'healthcare_reports.id', 'infection_controls.healthcare_report_id')\n    ->leftjoin('work_restriction_end_dates', 'users.id', 'work_restriction_end_dates.user_id')\n    ->where('healthcare_reports.hash', $hash)\n    ->first();\n    if(empty($report))\n    {\n        abort(403, 'Unauthorized action.');\n    }\n    $hospital_id = $report->hospital_id;\n    $data['temperature'] = 36;\n    $data['temperature_s'] = 0;\n    if(!empty($report->temperature))\n    {\n        $temperature = explode('.', $report->temperature);\n        $data['temperature'] = $temperature[0];\n        if(isset($temperature[1]))\n        {\n        $data['temperature_s'] = $temperature[1];\n      }\n    }\n    $data['blood_oxygen_saturation'] = empty($report->blood_oxygen_saturation)?'':$report->blood_oxygen_saturation;\n    $infection_control_info['current_infection_status'] = empty($report->current_infection_status)?'':$report->current_infection_status;\n    $data['infection_control_info'] = $infection_control_info;\n    $data['work_restriction_end_date'] = empty($report->end_date)?'':$report->end_date;\n    // Get option data to build form\n    $q1 = Attendance::select(DB::raw(\"'attendances' as table_name\"), 'id', 'name')\n        ->where('hospital_id', $hospital_id)\n        ->where('status', 1);\n    $q2 = CurrentCondition::select(DB::raw(\"'current_conditions' as table_name\"), 'id', 'name')\n        ->where('hospital_id', $hospital_id)\n        ->where('status', 1);\n    $q3 = AbsenceReason::select(DB::raw(\"'absence_reasons' as table_name\"), 'id', 'name')\n        ->where('hospital_id', $hospital_id)\n        ->where('status', 1);\n    $options = CurrentInfectionStatus::select(DB::raw(\"'current_infection_statuses' as table_name\"), 'id', 'name')\n    ->where('hospital_id', $hospital_id)\n    ->where('status', 1)\n    ->union($q1)\n    ->union($q2)\n    ->union($q3)\n    ->get()\n    ->groupBy('table_name');\n    $attendances = $options['attendances'];\n        $current_conditions = $options['current_conditions'];\n        $absence_reasons = $options['absence_reasons'];\n    $report_dt = date_create($report->date);\n    $week = array(\"Sunady\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n    $w = (int)date_format($report_dt, 'w');\n    $date = date_format($report_dt, 'Y_year, m_month, d_day').'('.$week[$w].')';\n    $infection_statuses = $options['current_infection_statuses']->pluck('name', 'id')->toArray();\n    $infection_statuses = ['0'=>''] + $infection_statuses;\n    if($hospital_id == getenv('OSAKA_KYUSEIKI_ID')) // Osaka_kyuseiki\n    {\n      $view = 'healthcare/report_form/osaka_kyuseiki';\n    }\n    else\n    {\n      $view = 'healthcare/report_form/base';\n    }\n    // Vaccine side effect tracking\n    $vac_data = [];\n    $show_vaccine_side_effect_day0_form = false;\n    $show_vaccine_side_effect_form = false;\n    if($report->vaccine_tracking == 1)\n    {\n      $v_dates = VaccineDate::where('user_id', $report->user_id)->first();\n      $covid19_date1 = $v_dates['covid19_date1']??'';\n      $covid19_date2 = $v_dates['covid19_date2']??'';\n      $covid19_date3 = $v_dates['covid19_date3']??'';",
    "$covid19_date4 = $v_dates['covid19_date4']??'';\n      if($this->switch_side_effect_form($covid19_date1, $report->date) || $this->switch_side_effect_form($covid19_date2, $report->date) ||\n      $this->switch_side_effect_form($covid19_date3, $report->date) || $this->switch_side_effect_form($covid19_date4, $report->date))\n      {\n        $tracking_data = VaccineSideEffectTracking::where('user_id', $report->user_id)\n        ->whereDate('date', $report->date)\n        ->first();\n        $vac_data['joint_pain'] = $tracking_data['joint_pain']??'';\n        $vac_data['fatigue'] = $tracking_data['fatigue']??'';\n        $vac_data['cold'] = $tracking_data['cold']??'';\n        $vac_data['headache'] = $tracking_data['headache']??'';\n        $vac_data['muscle_pain'] = $tracking_data['muscle_pain']??'';\n        $vac_data['nausea'] = $tracking_data['nausea']??'';\n        $vac_data['flare'] = $tracking_data['flare']??'';\n        $vac_data['swelling'] = $tracking_data['swelling']??'';\n        $vac_data['pain'] = $tracking_data['pain']??'';\n        $vac_data['use_painkiller'] = $tracking_data['use_painkiller']??'';\n        $vac_data['other_symptoms'] = $tracking_data['other_symptoms']??'';\n        $vac_data['medical_checkup'] = $tracking_data['medical_checkup']??'';\n        $show_vaccine_side_effect_form = true;\n      }\n    // Show/hide questions for vaccine day0\n    if($this->switch_side_effect_day0_form($covid19_date1, $report->date) || $this->switch_side_effect_day0_form($covid19_date2, $report->date) ||\n    $this->switch_side_effect_day0_form($covid19_date3, $report->date)|| $this->switch_side_effect_day0_form($covid19_date4, $report->date))\n    {\n      $tracking_data = VaccineSideEffectDay0Tracking::where('user_id', $report->user_id)\n      ->whereDate('date', $report->date)\n      ->first();\n      $vac_data['day0_flare'] = $tracking_data['day0_flare']??'';\n      $vac_data['day0_hives'] = $tracking_data['day0_hives']??'';\n      $vac_data['day0_itching'] = $tracking_data['day0_itching']??'';\n      $vac_data['day0_redness_itching_eyes'] = $tracking_data['day0_redness_itching_eyes']??'';\n      $vac_data['day0_dyspnea'] = $tracking_data['day0_dyspnea']??'';\n      $vac_data['day0_wheezing'] = $tracking_data['day0_wheezing']??'';\n      $vac_data['day0_mouth_throat_swelling'] = $tracking_data['day0_mouth_throat_swelling']??'';\n      $vac_data['day0_persistent_cough'] = $tracking_data['day0_persistent_cough']??'';\n      $vac_data['day0_sneezing'] = $tracking_data['day0_sneezing']??'';\n      $vac_data['day0_low_blood_pressure'] = $tracking_data['day0_low_blood_pressure']??'';\n      $vac_data['day0_tachycardia'] = $tracking_data['day0_tachycardia']??'';\n      $vac_data['day0_disturbance_consciousness'] = $tracking_data['day0_disturbance_consciousness']??'';\n      $vac_data['day0_diarrhea'] = $tracking_data['day0_diarrhea']??'';\n      $vac_data['day0_stomach_ache'] = $tracking_data['day0_stomach_ache']??'';\n      $vac_data['day0_nausea'] = $tracking_data['day0_nausea']??'';\n      $vac_data['day0_vomiting'] = $tracking_data['day0_vomiting']??'';\n      $vac_data['day0_administered_bosmin_epipen_adrenaline'] = $tracking_data['day0_administered_bosmin_epipen_adrenaline']??'';\n      $vac_data['day0_hospitalized'] = $tracking_data['day0_hospitalized']??'';\n      $show_vaccine_side_effect_day0_form = true;\n      }\n    }\n    return view($view, compact('data', 'date', 'report', 'attendances', 'current_conditions', 'absence_reasons',\n    'infection_statuses', 'vac_data', 'show_vaccine_side_effect_form', 'show_vaccine_side_effect_day0_form'));\n}\nThe administrator can review the replies through the administrator’s window.\nNote: A login process is not needed to reply to the questionnaire, which would be an advantage of this system, increasing participants’ convenience and promoting the chances of replying.\nCritical: The URL contains a hash key that identifies the individual, survey contents, and date of the survey, allowing participants to access the appropriate survey form with a single click and without a login process (patent registration No. 6166114). The responsible codes to generate the URL are as follows.\npublic function send_initial_request()\n{\n    // Create initial request\n    // Get hospitals using helthcare report\n    $hospitals = DB::table('hospitals')\n    ->where('healthcare_management', 1)\n    ->where('status', 1)\n    ->get();\n    foreach($hospitals as $hospital)\n    {\n      $email_settings = DB::table('healthcare_email_settings')\n      ->where('hospital_id', $hospital->id)\n      ->first();\n      if(!empty($email_settings)) // Ignore if setting is not found\n      {\n        // Run at sending time\n        if(strtotime(date('H:i')) == strtotime($email_settings->sending_time))\n        {\n          // Get target members",
    "$users = User::select('users.∗', DB::raw('group_concat(fcm_tokens.token) as fcm_tokens'))\n          ->join('jobs', 'users.job_id', 'jobs.id')\n          ->leftjoin('fcm_tokens', 'users.id', 'fcm_tokens.user_id')\n          ->where('users.hospital_id', $hospital->id)\n          ->where('users.status', 1)\n          ->where('jobs.status', 1)\n          ->where('jobs.enable_healthcare', 1)\n          ->where('users.admin_role', '<>',5)\n          ->groupBy('users.id');\n          if($email_settings->send_limit_from_vaccine_date > 0)\n          {\n            $limit_day = $email_settings->send_limit_from_vaccine_date;\n            $users->join('vaccine_dates', 'users.id', 'vaccine_dates.user_id')\n            ->whereRaw('((DATE(NOW()) between CAST(vaccine_dates.covid19_date1 AS DATE) + INTERVAL 1 DAY and CAST(vaccine_dates.covid19_date1 AS DATE) + INTERVAL '.$limit_day.' DAY) OR\n            (DATE(NOW()) between CAST(vaccine_dates.covid19_date2 AS DATE) + INTERVAL 1 DAY and CAST(vaccine_dates.covid19_date2 AS DATE) + INTERVAL '.$limit_day.' DAY) OR\n            (DATE(NOW()) between CAST(vaccine_dates.covid19_date3 AS DATE) + INTERVAL 1 DAY and CAST(vaccine_dates.covid19_date3 AS DATE) + INTERVAL '.$limit_day.' DAY) OR\n            (DATE(NOW()) between CAST(vaccine_dates.covid19_date4 AS DATE) + INTERVAL 1 DAY and CAST(vaccine_dates.covid19_date4 AS DATE) + INTERVAL '.$limit_day.' DAY))');\n            }\n          $users = $users->get();\n          if($users->isEmpty())\n          {\n            Log::debug('NO USERS TO SEND: '.print_r($email_settings, true));\n          }\n          else\n          {\n            // Save report request\n            $request = new HealthcareReportRequest(); $request->hospital_id = $hospital->id;\n            $request->follow_email_interval = $email_settings->interval;\n            $request->follow_email_limit = $email_settings->limit;\n            $request->follow_email_sent_count = 0; $request->email_last_sent_time = Carbon::now();\n            $request->save();\n            $request_id = $request->id;\n            // Store members in healthcare_reports table\n            $data = [];\n            $records = []; foreach($users as $user)\n            {\n              $hash = bin2hex(random_bytes(20));\n              $records[] = ['user_id' => $user->id,\n                'healthcare_report_request_id' => $request_id,\n                'hash' => $hash,\n                'created_at' => Carbon::now(),\n                'updated_at' => Carbon::now()];\n                // Build parameters for email\n                $user_data['hash'] = $hash;\n                $user_data['name'] = $user->name;\n                if($hospital->healthcare_email == 1)\n                {\n                  $user_data['to'] = $user->email;\n                  $user_data['to2'] = $user->email2;\n                }\n                else\n                {\n                  $user_data['to'] = '';\n                  $user_data['to2'] = '';\n                }\n                $user_data['line_account'] = $user->line_account;\n                $user_data['lw_account'] = $user->line_works_account;\n                $user_data['fcm_tokens'] = $user->fcm_tokens;\n                $data['user_data'][] = $user_data;\n              }\n              HealthcareReport::insert($records);\n              // Send email\n              $data['type'] = \"healthcare_report_request\"; $data['subject'] = $hospital->name.' A request of a health status report'; $data['fcm_message'] = ' Please complete a questionnaire about your health status after vaccination.'; $data['template'] = 'email/healthcare_request_initial'; $data['template_text'] = 'email/text_healthcare_request_initial'; $data['follow_email_limit'] = $email_settings->limit;\n              $data['hospital_id'] = $hospital->id;\n              $data['hospital_name'] = $hospital->name;\n              $data['url'] = url('/').'/healthcare/report_form'; $this->send_requests($data);\n            }\n        }\n      }\n    }\n}\nPart four: Send notifications for two weeks\nTiming: <10 min\nThis step describes repeated notifications for recipients.",
    "At regular times each day, notifications are sent to members with a URL.\nNote: The vaccine recipients then fill out questionnaires on their body temperature, physical condition, and health observation diaries.\nThe notifications are repeatedly sent to the participants for two weeks.\nNote: If the URL is opened multiple times, the input form for the date specified by the URL is displayed with the previously entered values. The user can update this value. The previously entered value is overwritten.\nOptional: The administrator can add a reminder function to send participant notifications repeatedly if replies are not sent until the defined time.\nPart five: Organize the replied data in the database\nTiming: <10 min\nThis step describes automated data management.\nStore and automatically manage respondent data on a central server.\nNote: This eliminates the need for recipients to fill out and submit forms and input data onto a server, thereby streamlining health-management operations."
  ],
  "subjectAreas": [
    "Bioinformatics",
    "Computer Sciences",
    "Health Sciences",
    "Microbiology",
    "Clinical Protocol"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}