{
  "id": 19669,
  "origin_website": "Wiley",
  "title": "A Computational Workflow for Analysis of 3′ Tag-Seq Data",
  "procedures": [
    "In the following section, we describe in detail our 3′ Tag-Seq analysis workflow. Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#cpz1664-fig-0001] provides a summary of the computational workflow. Briefly the pipeline begins with the processing of raw RNA-seq FASTQ files and ends with a table output of differential gene expression (Love et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#cpz1664-bib-0009]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/076cd0fc-ec05-421b-9797-b8e64b382e66/cpz1664-fig-0001-m.jpg</p>\nFigure 1\n3′ Tag-Seq analysis workflow. (i) Adapters added to raw RNA-seq reads are trimmed using BBDuk. (ii) A quality control report is generated for trimmed reads using FastQC. (iii) Reads passing the QC check are aligned to the reference genome using STAR and a gene count table is created. (iv) The gene count table is used to run differential gene expression analysis using DESeq2, and the DESeq2 output is saved as a table to a file for downstream usage.\nNecessary Resources\nHardware\nAn internet-connected machine running Linux 64-bit Ubuntu version 20.04.1 with at least 32 GB RAM. The number of threads can be provided by the user, but 16 threads is recommended.\nSoftware\nThe workflow uses the Conda command line tool environment to install all required software and tools. Conda software can be accessed at https://docs.conda.io/en/latest/miniconda.html[href=https://docs.conda.io/en/latest/miniconda.html]. The workflow is saved in a bash script file called pipeline.sh. The source code and documentation can be found on GitHub at https://github.com/akshayparopkari/RNAseq/wiki[href=https://github.com/akshayparopkari/RNAseq/wiki]. The Conda environment file is provided in Supplemental file 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#support-information-section] (see Supporting Information[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#support-information-section]).\nOther requirements\nAccess to a computational cluster and login information\nBasic knowledge of Unix\nRaw FASTQ sequencing data\nSample metadata\nDownload the RNA-seq workflow on a local machine\nIn Linux and MacOS, use the built-in Terminal application. In Windows, download and use Git Bash (https://gitforwindows.org/[href=https://gitforwindows.org/]).\n1. Navigate to the desired directory to download this folder on your machine.\n         \ngit clone https://github.com/akshayparopkari/RNAseq.git",
    "Alternatively, click on the green “Code” button on the GitHub page https://github.com/akshayparopkari/RNAseq[href=https://github.com/akshayparopkari/RNAseq] and then click the “Download ZIP” option. Unzip the downloaded folder and save it to a relevant location on your local machine.\n2. Make script files executable.\n         \ncd RNAseq/\nchmod u+x pipeline.sh\nchmod u+x format_counts_table.py\nLoad the Conda virtual environment\nConda enables virtual environments that contain the required software packages/libraries to be installed and set up. In this instance, the RNA-seq Conda environment contains the BBMap suite, STAR alignment software, and FASTQC tool (Bushnell, 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#cpz1664-bib-0001]; Dobin et al., 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#cpz1664-bib-0005]). Additionally, required Python and R libraries and their dependencies are also installed.\n3. Create Conda environment using Supplemental File 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#support-information-section].\n         \nconda env create -f Supplemental_file_1.yml -n RNAseq\nThe environment only needs to be created once. For subsequent analysis, the environment can be activated to run the analysis using the command:\nconda activate RNAseq\nCreate an input data folder\n4. The main script of 3′ Tag-Seq is the pipeline.sh file. This single bash script contains all the preprocessing steps: QC filtering with BBDuk, generating QC summaries with FastQC, and alignment and gene counting with STAR. The pipeline.sh script takes in a single input, which is a folder/directory containing:\n         \nall raw FASTQ sequence files\nthe sample metadata Excel file",
    "The raw FASTQ sequence files may be either compressed (using gzip) or uncompressed. The file names must start with the sample ID, followed by an underscore and the rest of the file name. For example, projectname_date_L001.fastq.gz should be named sampleid_projectname_date_L001.fastq.gz. The first part of the file name before the first underscore dictates the sample the script is processing. The sample metadata file contains all metadata associated with the input samples including sample ID, genotype, condition, treatment, time, etc. For this repository, the sample metadata file must contain at least two columns: SampleID and Condition. Table 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#cpz1664-tbl-0001] is an example of a sample metadata file, where the first two columns (SampleID and Condition) are required and the third and subsequent columns (e.g., FASTQ_file) are optional but highly recommended. A comprehensive metadata file also enables convenient sample submission to a sequence read archive (SRA) once your manuscript is published.\nThe input directory must contain raw FASTQ files and a sample metadata Excel file. Users may implement a user-defined project structure to organize their RNA-seq data. Please see Cookiecutter Data Science project (https://cookiecutter.readthedocs.io/en/1.7.2/[href=https://cookiecutter.readthedocs.io/en/1.7.2/]) for ideas on how to best organize computational data.\nTable 1.\n                Sample Metadata File\ntable:\n﻿SampleID,Condition,FASTQ_file,Other_Sample_Info\nSample1A,WT,Sample1A_S8_L001_R1_001.fastq.gz,…\nSample1B,Mutant,Sample1B_S8_L001_R1_001.fastq.gz,…\nSample2A,WT,Sample2A_S8_L001_R1_001.fastq.gz,…\nSample2B,Mutant,Sample2B_S8_L001_R1_001.fastq.gz,…\nSample3A,WT,Sample3A_S8_L001_R1_001.fastq.gz,…\nSample3B,Mutant,Sample3B_S8_L001_R1_001.fastq.gz,…\n…,…,…,…\nThis file can be used as a template to generate a metadata file.\nTransfer data to/from a cloud computing resource to a local machine via command line\n5. Below is a common usage of the secure copy scp function, which is one of the commands used to transfer files to/from a cloud computing resource. The other command is a secure file transfer protocol sftp. Please refer to the cloud computing resource wiki for detailed instructions on sftp function.\n         \nscp FROM TO\nwhere FROM is the source location and TO is the destination location.",
    "Third party GUI apps: A third party client can also be used to transfer files to/from a local computer. FileZilla (https://filezilla-project.org/[href=https://filezilla-project.org/]) for Linux and Windows or Cyberduck (https://cyberduck.io/download[href=https://cyberduck.io/download]) for MacOS and Windows are alternatives to using scp or sftp to transfer files with drag-and-drop.\nRun the RNA-seq pipeline\nThe RNA-seq Conda environment must be activated before attempting to execute the pipeline.\n6. Run the RNA-seq pipeline.\n         \nINPUTFOLDER=“path/to/your/input/folder” # enter your data folder with FASTQ files here\nbash pipeline.sh \"$INPUTFOLDER\" <num_og_threads_to_use> > \"$INPUTFOLDER\"/preprocess.log\nOutput files:\n         \npipeline.sh creates multiple output files, which can be useful to gain insights into specific samples to address any discrepancy in the data. The three important files to check are:\ngene_raw_counts.txt: a tab-separated file of raw gene counts for all samples, with gene names as rows and samples as columns\ndeseq2_lfc.txt: a tab-separated file from the DESeq2 analysis\nMA_plot.pdf: a .pdf file depicting volcano plots of log fold changes against mean gene expression\nAdditional information about other output files:\n         \nAll files ending “_trimmed.fastq” are trimmed sequences from BBmap and are saved in the trim_log directory\nAll files ending “.bam” are alignment files generated by STAR and are saved in the STAR_log directory\nAll files ending “ReadsPerGene.out.tab” are gene count files for each sample generated by STAR and are saved in the STAR_log directory\nAll files ending “Log.out”, “Log.final.out”, and “Log.progress.out” are intermediary alignment files generated by STAR and are saved in the STAR_log directory\nVisualize overlaps in multiple experimental conditions",
    "7. Use the overlap_upsetR.R script to visualize overlaps in genes for multiple experimental conditions. The overlap is represented as an UpSet plot (Lex, Gehlenborg, Strobelt, Vuillemot, & Pfister, 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#cpz1664-bib-0008]). UpSet plots are an extension of Venn diagrams and are useful when there are more than three categories/sets of conditions/samples to consider. The overlap_upsetR.R takes one input (either “up” or “down”) to calculate overlap between various samples/conditions. Users need to supply an input directory in the code on line 38 and run the following command to get the output UpSet plot:\nTo visualize genes upregulated in multiple conditions/samples:\n         \noverlap_upsetR.R up\nTo visualize genes downregulated in multiple conditions/samples:\n         \noverlap_upsetR.R down\nFigure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#cpz1664-fig-0002] is an example of an UpSet plot output of Candida albicans RNA-seq data showing upregulated genes overlapping various conditions.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/6b773319-9480-43c3-8895-8fb870475606/cpz1664-fig-0002-m.jpg</p>\nFigure 2\nExample UpSet plot output. UpSet plot output of example C. albicans RNA-seq data for the wildtype (WT) strain and three knockout (KO) strains (NRG1_KO, RFG1_KO, and ZCF8_KO). The bar plot on the top represents the overlap of upregulated genes in each condition. The horizontal bar on the left represents the number of significantly upregulated genes in each condition. The black circles and lines at the bottom show the categories for which overlap is calculated as indicated in the bar chart on the top. For example, the fourth bar on the top represents 199 significantly upregulated genes observed between the WT and NRG1-KO conditions. The blue bar highlights the overlap of significantly upregulated genes observed in the three KO conditions.",
    "During the alignment step, STAR utilizes genome index files for mapping sequenced reads to a reference genome. This protocol describes how to generate genome indices for the C. albicans assembly 21 genome as an example. These steps can be used to generate genome indices for your reference genome of choice.\nNecessary Resources\nSee Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#cpz1664-prot-0001].\n1. In your home folder, download C. albicans chromosomal sequences from the Candida Genome Database (CGD; http://www.candidagenome.org/[href=http://www.candidagenome.org/]; Skrzypek et al., 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.664#cpz1664-bib-0015]).\n         \nwget http://www.candidagenome.org/download/sequence/C_albicans_SC5314/Assembly21/current/C_albicans_SC5314_A21_current_chromosomes.fasta.gz\ngunzip C_albicans_SC5314_A21_current_chromosomes.fasta.gz\n2. Download the C. albicans genome annotation GTF file from the CGD.\n         \nwget http://www.candidagenome.org/download/gff/C_albicans_SC5314/Assembly21/C_albicans_SC5314_A21_current_features.gtf\ngunzip C_albicans_SC5314_A21_current_features.gtf\n3. Activate the 3′ Tag-Seq Conda environment.\n         \nmodule load anaconda3\nsource activate RNA-seq\n4. Generate STAR genomes.\n         \nmkdir ca_genome/\ncd ca_genome/\nSTAR --runMode genomeGenerate --genomeDir./ --genomeFastaFiles ∼/ C_albicans_SC5314_A21_current_chromosomes.fasta\nSTAR will generate output index files in the ca_genome folder."
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}