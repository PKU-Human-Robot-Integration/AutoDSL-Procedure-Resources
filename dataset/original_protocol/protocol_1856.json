{
  "id": 1967,
  "origin_website": "Cell",
  "title": "Protocol for condition-dependent metabolite yield prediction using the TRIMER pipeline",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nIn this section, a comprehensive step-by-step protocol is laid out for applying TRIMER to a typical metabolic model of E.coli iAF1260 based on the EcoMac dataset. Interconnections of the main computational modules of TRIMER are shown in Figure 3[href=https://www.wicell.org#fig3]. All steps described are case-specific, but they can easily be adapted to any gene expression and TF-gene interaction dataset or metabolic model that the users wish to analyze. All the implemented MATLAB functions in TRIMER are well documented. Users can resort to MATLAB’s help command for more details about function usages. Demo MATLAB code illustrating the complete procedure of applying TRIMER for biomass and indole flux prediction with TF-knockouts are accessible at the following paths:\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1449-Fig3.jpg\nFigure 3. TRIMER workflow\nA workflow summarizing the interconnections between the main computational modules in TRIMER (Modified based on two figures in the original publication (Niu et al., 2021[href=https://www.wicell.org#bib16]), which is an open access article under the CC BY-NC-ND license: http://creativecommons.org/licenses/by-nc-nd/4.0/[href=http://creativecommons.org/licenses/by-nc-nd/4.0/]).\n>TRIMER\\flux_biomass.m,\n>TRIMER\\flux_indole.m.\nConstruct TF-regulated gene network (TRN)\nTiming: 30–60 min\nWe call the set of TF-gene regulations as TF-Regulated gene Network (TRN). In TRIMER, TRN is modeled by a Bayesian network, which is trained from pre-binarized data since TRN concerns ‘on\\off’ states of TFs and genes. Step 2 below can be skipped if users just want to model TRN in the way of PROM (The TRN in PROM is just the filtered TF-gene list).\n(Under MATLAB environment) Gene expression data and TF-gene interaction list should be preprocessed before being used to learn a Bayesian network. Running the function data_preprocessing.m in TRIMER, the following steps will be completed:\nQuantile normalizes the raw expression data.",
    "Binarize the normalized data given a threshold. When writing this protocol, the authors chose the threshold to be 0.33 as suggested in the original PROM paper. In practice, the range of threshold is determined by evaluating PROM’s performance. As PROM is computationally efficient and supported in TRIMER, the best threshold range for PROM can be chosen as the threshold for TRIMER.\nPerform Kolmogorov-Smirnov (KS) test over expression data for each TF-gene pair and prune out the ones that are tested to be independent.\nHere is an example of using data_preprocessing.m:\n    >%expression ->microarray data\n    >%regulator,targets ->TF-gene pair list\n    >%expressionid -> list of TF/genes name\n    >[expression_b,regulator_f,targets_f]=data_preprocessin\ng(expression,expressionid,regulator,targets,'thresh_value',0.33);\nCritical: The binarization threshold is a very important hyperparameter, affecting TF-gene pair selection and thereafter Bayesian network modeling of TRN.\n(Under R environment) In TRIMER, bnlearn is used to learn Bayesian networks based on binary expression data and TF-gene interaction lists. Network learning is comprised of two steps: structure learning and parameter fitting:\nFinding the global optimal structure by checking all possible directed acyclic graphs (DAGs) is computationally expensive as the cost grows exponentially with the number of nodes. Two structure learning strategies are implemented in TRIMER: Chow-Liu tree algorithm and Tabu search.\nChow-Liu tree algorithm gives the optimal tree structure.\nTabu search is a greedy searching method to learn general network structure. To further reduce the computation cost, TRIMER requires TF-gene pair as the searching space of Tabu search.\nDemo code for learning a Bayesian network using the EcoMac dataset is provided at the following path:\n>TRIMER\\BN_Module\\bnlearn.R.\nThe learned network is saved in the .bif format and will be used for further metabolic analysis in MATLAB. More details about .bif format can be found in the documents provided by the bnlearn package. A demo model is provided at the following path:\n>TRIMER\\BN_Module\\learned_network.bif",
    "Infer conditional probabilities\nTiming: 3–10 min\nOnce we have learned a BN, we can make inference of all the relevant conditional probabilities which are in the form of Pr(gene(s)|TF(s)) and identified based on the TF-gene interaction list for one or multiple TFs. These probabilities are then used to compute the regulatory values used for building new flux constraints in the metabolic reaction models.\nFunction prob_estimation_R.m allow two ways for computing regulatory values based on conditional probabilities inferred from BNs (Please refer to the TRIMER paper, , for more detail). Given a set of conditions where TF(s) are knocked out, this function returns the indices of reactions affected and the corresponding regulatory values under each KO condition considered. [Troubleshooting 2[href=https://www.wicell.org#sec7.3]]\nUsers can choose either of the two ways by setting the argument ‘method’ to be ‘CN’ or ‘BN’, corresponding to the one adopted in PROM and the new one supported by TRIMER. It can happen that for a reaction, many genes controlling this reaction are affected simultaneously. This may cause computation problems when using the second way for probability inference. [Troubleshooting 3[href=https://www.wicell.org#sec7.5]]\nThe default choice of performing inference over Bayesian networks is an approximate inference method called logic sampling (please resort to bnlearn documents for more details). For exact inference, package gRain (Højsgaard, 2012[href=https://www.wicell.org#bib11]) is required besides bnlearn. It should be pointed out that exact inference may be computationally infeasible if the scale of Bayesian network model is large (e.g., hundreds of nodes). [Troubleshooting 4[href=https://www.wicell.org#sec7.7]]\nTRIMER relies on the annotated TF-gene pairs (also called TF-target interaction list) to determine the affected genes when one TF or multiple TFs are knocked out. Here the TF-gene pair list filtered by KS test during step 1 is utilized again.",
    "Here is the demo code for using prob_estimation.m. (exemplary results are shown in Figures 4[href=https://www.wicell.org#fig4] and 5[href=https://www.wicell.org#fig5]):\n    >%R_path->the directory of R software installed in\n    your computer\n    >%R_path->the directory of R functions of TRIMER\n    package\n    >%R_model_path->the path of a BN model saved in .bif\n    format.\n    >%ko_tf ->knock-out conditions. (list of TFs)\n    >%rxn_affected_ko -> the list of reaction affected\n    under each\n    >%KO condition.\n    >%rxn_prob_ko -> the list of conditional\n    probabilities for reactions affected under each KO\n    condition.\n    >R_path=['\"C:\\Program Files\\R\\R-\n4.0.3\\bin\\Rscript.exe\"'];\n    >Rfun_path=[pwd,'\\BN_Module'];\n    >Rmodel_path=[pwd,'\\learned_network.bif'];\n    >[rxn_affected_ko,rxn_prob_ko]=prob_estimation_R(trim\ner,ko_tf,regulator,targets,R_path,Rmodel_path,'Rfun_path',Rfun\n_path,'mode','BN');\nOptional: TRIMER supports users to compute the conditional probabilities by relative frequencies of TF-gene state pairs as in PROM by calling the function prob_estimation.m.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1449-Fig4.jpg\nFigure 4. An example list of affected metabolic reactions with the corresponding regulatory values for flux constraints after running prob_estimation.m\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1449-Fig5.jpg\nFigure 5. Intermediate displayed output when running the function prob_estimation.m\nConstruct transcriptional constraints\nTiming: 1–5 min\nWith the list of affected genes and the associated regulatory values, new flux constraints can be derived for each TF KO condition. In this way, regulatory relationships between TFs and genes are integrated into predicting formulations (e.g., FBA).\nRegulatory flux constraints are constructed by calling the function regulatory_bound.m. New flux constraints are obtained by multiplying the regulatory values computed from inferred conditional probabilities in the previous major step with the max/min flux values estimated via flux variability analysis (FVA) (Mahadevan and Schilling, 2003[href=https://www.wicell.org#bib14]). For stability, flux constraints with values smaller than a threshold value (e.g., 10-6 ) set by users are treated as zero.\nDemo code for building new flux constraints is shown below:\n>% Threshold value is set to be 1e-6\n>% lb_est/ub_est -> constructed flux bounds\n>% vmax -> maximum/minimum flux values estimated by FVA\n>[lb_est,ub_est,vmax]=regulatory_bound(trimer,ko_tf,rxn_\naffected_ko,rxn_prob_ko,'thresh',1e-6);",
    "TRIMER allows users to refine the regulatory flux bounds by calling the function regulatory_bound.m. Setting a minimum growth rate (biomass flux) requirement, this function returns the minimum set of regulatory flux constraints that cannot be satisfied when finding a feasible solution. This helps users to remove or adjust the bounds that over-constrained metabolic models.\nDemo code for flux constraint refinement is shown below:\n>% the minimum growth rate is 0.1 times the Wildtype\nrate\n>% lb_est/ub_est -> constructed flux bounds\n>% infeasible -> lists of reaction index\n>[infeasible]=find_infeasible_constrain(trimer,lb_est,ub\n_est rxn_affected,'obj_frac',0.1);\nMake flux predictions\nTiming: 1–5 min\nWith constructed additional flux constraints for each KO condition, flux prediction can be made by optimizing predicting formulations using either GLPK or CPLEX solver.\nThree kinds of metabolic predicting formulations are implemented in TRIMER, including FBA, sFBA, ROOM. sFBA denotes the formulation adopted in PROM. The main difference between sFBA and FBA is that fluxes are constrained by soft bounds in sFBA instead of hard bounds in the original FBA formulation. Users can easily implement these formulations by calling the function ko_prediction.m. [Troubleshooting 5[href=https://www.wicell.org#sec7.9]]\nDemo code for flux prediction is shown below:\n>%f ->biomass(growth rate) predictions\n>%v ->solutions (all reaction flux predictions)\n>%states -> types of solution return by solvers\n>[f,v,status]=ko_prediction(trimer,lb_est,ub_est,rxn_aff\nected_ko,vmax,'growth_pos',growth_pos,'method','sfba');\nBesides the three formulations, TRIMER provides a set of useful functions that allow users to explore other formulations. Details about function usages can be found in their MATLAB help documents. Figure 6[href=https://www.wicell.org#fig6] shows the data structure used to represent all flux constraints. In this protocol, the authors take the implementation of sFBA as an example to show how to use these functions. The implementation can be achieved by the following steps:\nAdd binary slack variables α and β:\n>%add new variable beta and alpha\n>var_beta=map(@(x) ['Beta_' x],trimer.rxns);\n>var_alpha=map(@(x) ['Aplha_' x],trimer.rxns);",
    "Initialize bounds of α and β:\n>trimerS= add_column(trimer,var_alpha,'c',0,0);\n>trimerS= add_column(trimerS,var_beta,'c',0,0);\nAdd linear constraints: α+v>0 and v-β<0:\n>lna=T_linalg({{eye(nRxns),trimerS.rxns},{eye(nRxns),va\nr_alpha}},'>',trimer.lb(1:nRxns));\n>lnb=T_linalg({{eye(nRxns),trimerS.rxns},{eye(nRxns),va\nr_beta}},'<',trimer.ub(1:nRxns));\n>trimerS=add_matrix_constraint(trimerS,{lna,lnb},{'Alph\na_','Beta_'});\nInitialize flux bounds:\n>trimerS=change_bound(trimerS,max(trimer.ub(1:nRxns)),'\nu',trimerS.rxns);\n>trimerS=change_bound(trimerS,min(trimer.lb(1:nRxns)),\n'l',trimerS.rxns);\nEstimate the wild-type reaction fluxes:\n>sol=fba(trimer); f0=sol.val;v0=sol.x(1:nRxns)\nRelax upper bounds of α and β to allow the fluxes of potentially affected reactions to exceed its bounds:\n>ub_alpha(temprxnpos(v0(temprxnpos)<0))=max(trimer.ub(\n1:nRxns));\n>ub_beta(temprxnpos(v0(temprxnpos)>0))=max(trimer.ub(1\n:nRxns));\n>trimerS=change_bound(trimerS,ub_alpha,'u' ,var_alpha)\n;\n>trimerS=change_bound(trimerS,ub_beta, 'u',var_beta);\nCompute the penalties for exceeding upper/lower flux bounds:\n>mthresh = 10ˆ(-3); %for computation stability\n>vv=abs(vm(temprxnpos));\n>vv(vv<mthresh)=mthresh;\n>vv=(kappa∗(-1)∗abs(f0))./ vv;\n>weights_alpha(temprxnpos(v0(temprxnpos)<0)) =\nvv(v0(temprxnpos)<0);\n>weights_beta(temprxnpos(v0(temprxnpos)>0)) =\nvv(v0(temprxnpos)>0);\nChange the optimizing objective:\n>trimerS=change_obj(trimerS, weights_alpha, var_alpha);\nReplace the initial constraints with new regulatory constraints\n>%lbg/ubg-> new regulatory constraints\n>lnpl=T_linalg({{eye(nRxns),trimer.rxns},{eye(nRxns),va\nr_alpha}},'>',lbg);\n>lnpu=T_linalg({{eye(nRxns),trimer.rxns},{eye(nRxns),va\nr_beta}},'<',ubg);\n>trimerS=update_matrix_constraint(trimerS,{lnpl,lnpu},{\n'Alpha_','Beta_'});\nMake predictions for TF-knockout conditions:\n>sol=fba(trimerS);\nThe data structures for constraint representations used in TRIMER are compatible with those used in TIGER. Flux constraints constructed by TRIMER can be directly added into the data structures in TIGER. This allows users to build the hybrid TRIMER-TIGER model where a part of flux constraints is constructed by TRIMER and the other part can be constructed by TIGER. This allows the modeling of the feedback effect from metabolites to genes. These feedback regulations cannot be obtained from gene expression data and are often expressed as Boolean rules. Demo code for using the TRIMER-TIGER model to predict flux phenotypes under various growth conditions can be found at the following path:\n>TRIMER\\phenotype.m.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1449-Fig6.jpg\nFigure 6. TRIMER metabolic network analysis data structure\nThe data structure used to represent flux constraints: Gray areas represent the information obtained from the metabolic model; white areas represent the information of additional flux constraints added by users (Modified based on two figures in the original publication (Niu et al., 2021[href=https://www.wicell.org#bib16]), which is an open access article under the CC BY-NC-ND license: http://creativecommons.org/licenses/by-nc-nd/4.0/[href=http://creativecommons.org/licenses/by-nc-nd/4.0/])."
  ],
  "subjectAreas": [
    "Bioinformatics",
    "Systems Biology",
    "Metabolism",
    "Cell Biology",
    "Gene Expression"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}