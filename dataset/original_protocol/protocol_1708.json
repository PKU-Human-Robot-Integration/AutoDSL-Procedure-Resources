{
  "id": 1816,
  "origin_website": "Cell",
  "title": "miRMut: Annotation of mutations in miRNA genes from human whole-exome or whole-genome sequencing",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nWe prepared a GitHub repository containing all the necessary reference files, scripts, and example inputs and outputs for the method presented below. The repository wiki pages contain information on installation and running miRMut. The repository is found at\nGitHub: https://github.com/martynaut/mirnome-mutations[href=https://github.com/martynaut/mirnome-mutations].\nTo follow the step-by-step instructions, users are encouraged to download the whole repository, including the example input files. For instructions on how to clone the repository and install the required Python libraries, please refer to the “installing prerequisites[href=https://www.wicell.org#sec1.2]” section in “before you begin[href=https://www.wicell.org#before-you-begin]”.\nIt is expected that users will run the entire process all at once, but it is also possible to run the steps independently (1 - filtering miRNA gene mutations, 2 – processing mutation list, 3 - adding miRNA-specific information to specific mutations, 4 - calculating mutation weights, 5 - generating mutation CSV summaries, and 6 - generating mutation visualizations). Here, we describe how to run the script all at once, and later how to run each step separately. For default to run the whole procedure, the user should run the following command within the repository:\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed\nTo run the script on example files provided in the repository, run the following command:\n>python3 run_mirnaome_analysis.py \\ input_files/input_vcf/example_vcf_set \\\noutput_folder/user_example_output_from_vcf \\\nreference_files/coordinates_hg38.bed \\\nreference_files/localizations_hg38.csv \\\nreference_files/coordinates_with_seq_hg38.bed\nThe already calculated output for this command can be found within the repository in the output_folder/example_output_from_vcf folder.\nNon-default values for all optional arguments used and described in each of the six steps can also be defined for a full run as follows (for parameters, please refer to Table 1[href=https://www.wicell.org#tbl1]):\ntable:files/protocols_protocol_1295_2.csv\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-m 1 -f 1",
    "If the script is run but not completed, the user may define from which step analysis should start using the “from_step” (“-s”) optional argument, e.g.,\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-s 2\nThe command will start the analysis from step 2 of the procedure.\nThe end step of the analysis can also be defined (e.g., if the full analysis is not yet wanted) using the “end_step” (“-es”) optional argument as follows:\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-s 2 \\\n-es 2\nTo run analyses of the example files, the reusable bash file with Python commands (run_test.sh, available in the repository) may be used. It can be executed by running the following command in a terminal:\n>./run_test.sh\nNote: The TCGA analysis in Urbanek-Trzeciak et al. (2020)[href=https://www.wicell.org#bib17] was run with -m, -f and -p flags. For details, please refer to the original manuscript. The descriptions of the parameters can be found in Table 1[href=https://www.wicell.org#tbl1].\nNote: For 1500 VCF.GZ files (1.61GB) on a PC with Ubuntu 20.04.3 LTS (8GB RAM; 3.20GHz CPU) it took about 2h40 to process complete miRMut analysis (step 1 took approx. 1h40, step 2 – 20s, step 3 – 5s, step 4 – 10min, step 5 – 1s, step 6 – 50min).\nFiltering miRNA gene mutations\nTiming: hours to days; factors that affect timing include the number and size of samples as well as available computing resources.\nWithin the first step from the provided VCF and/or compressed VCF.GZ files, mutations within miRNA gene coordinates are filtered and gathered in a CSV file. This is usually the longest step of the procedure. To run this step, the coordinates_{genome version}.bed reference file, which is described in the “before you begin[href=https://www.wicell.org#before-you-begin]” section, is required.",
    "Additionally, the user needs to provide a path to the folder with VCF/VCF.GZ files (all files may be in a single folder but subfolders are allowed) and a path to the folder where output files should be saved (if the folder does not exist, it will be created; and if it exists, the current content of the folder will be removed).\nTo run only the first step of the script, use one of the following commands:\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-s 1\\\n-es 1\nor\n>python3 extract_results_for_mirnaome.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed\nThere are several output files saved in the defined output folder from this part of the protocol: files_summary.csv, which summarizes files included in the analysis, depending on information included in the VCF/VCF.GZ files, it includes individual/sample names and IDs, tumor/normal sample names and IDs, and types of algorithms used for mutation detection; results_{file type}.csv, file is created for each file type, where “file type” is an algorithm name used for VCF file creation (if the information is available in the VCF file), e.g., MuTect or MuSE.\nNote: If all VCF files are created with a single algorithm, only one results file will be created. If multiple algorithms are used (e.g., 4 algorithms in TCGA data), multiple files will be created. In the second step of the procedure, the user may choose to merge mutations identified by different algorithms.\nNote: In the pipeline, it is assumed that all needed filtering has been completed during VCF/VCF.GZ files preparation. However, during this step, it is possible to filter only mutations that passed all filters (has FILTER assigned to PASS value), which can be achieved by using the optional argument “-p” as follows:\n>python3 extract_results_for_mirnaome.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/calculated/input/files/coordinates.bed \\",
    "-p 1\nAs we encourage users to filter VCF files prior to use of miRMut software, by default, the filtering of only PASS variants is disabled.\nNote: If no VCF/VCF.GZ files are found in the input directory, the pipeline will be terminated.\nIMPORTANT: Please note that if the defined output folder does exist, the current content of the folder will be removed by the script.\nProcessing mutation list\nTiming: minutes to hours; factors that affect timing include the number of found mutations and available computing resources.\nThe second step of the pipeline involves processing the mutation list, including the following two optional transformations: a merger of mutations identified by different algorithms (if more than one algorithm is used for mutation detection); and additional internal filtering of mutations as defined below. The optional transformations are disabled on default, but they may be enabled using two flags (“-m” and “-f”) as shown below. The flags might be used in a similar way when running the whole pipeline at once.\nIf the merger of algorithms is enabled, mutations are grouped by position, individual ID of patient, and mutation type (reference and alternative allele), and if the same mutation is found by different algorithms, it is treated as one mutation. This transformation prevents counting the same mutation multiple times.",
    "If additional internal filtering is enabled, the following criteria are taken into account (only if available in VCF/VCF.GZ files): SSC (Somatic Score) > 30 - parameter determined by VarScan2 and SomaticSniper; BQ (Base Quality) of an alternative allele in tumor sample > 20 - parameter determined by MuSE; QSS (Sum of base quality scores for each allele) of an alternative allele in tumor samples divided by alternative allele count in tumor samples > 20 - parameter determined by MuTect2, at least two mutation-supporting reads in a tumor sample (if no mutation-supporting read was detected in the corresponding normal sample) OR at least 5 × higher frequency of mutation-supporting reads in the tumor sample than in the corresponding normal sample.\nPlease note that some of the filtering criteria are strictly algorithm-related and are not relevant in other projects.\nTo run this step of the script, use one of the following proposed commands enabling needed options:\nSecond step without merging and filtering\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed\\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-s 2 \\\n-es 2\nor\n>python3 merge_algorithms.py /path/to/output/folder/\nSecond step of the script enabling both merger of various algorithms and filtering of mutations\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-s 2 \\\n-es 2 \\\n-m 1 \\\n-f 1\nor\n>python3 merge_algorithms.py /path/to/output/folder/ \\\n-m 1 \\\n-f 1",
    "This step generates multiple files. If filtering is enabled, for each results_{file type}.csv file, results_{file type}_eval.csv is created with an additional column “eval”, which contains information if the mutation passes filtering as defined above. Additionally, all_mutations.csv file is created, including list of mutations described by chromosome (chrom), nucleotide position (pos), reference allele (ref), alternative allele (alt), and if available, individual name (indiv_name), reference allele count in normal sample (norm_ref_count), alternative allele count in normal sample (norm_alt_count), reference allele count in tumor sample (tumor_ref_count) alternative allele count in tumor sample (tumor_alt_count), and algorithm used (alg).\nNote: If VCF/VCF.GZ files were created with multiple algorithms but the merger of algorithms is not enabled, the analysis will be terminated on this step with a relevant message. Similarly, if no mutations in miRNA genes were found in defined input files, the script will be terminated.\nIMPORTANT: If the merger of algorithms is enabled, the “indiv_name” has to be defined in the VCF/VCF.GZ files.\nAdding miRNA-specific information to specific mutations\nTiming: seconds to minutes; factors that affect timing include the number of mutations and available computing resources.\nDuring this step, miRNA mutations listed in the “all_mutations.csv” file generated in the previous steps are annotated. The annotation is based mainly on the information gathered in the “localizations_{genome version}.csv'' files. The following pieces of information are annotated based on the mutation position: miRNA ID (from miRBase and MirGeneDB), miRNA name, miRNA region (flanking sequence, loop, and mature miRNA), miRNA confidence (information if miRNA found in miRBase is believed to be true miRNA), and balance (5′miRNA or 3′miRNA depending on the main miRNA generated from a particular miRNA gene based on miRBase data). Additionally, mutation type is defined (substitution/insertion/deletion) if relevant, and substitution type is defined if relevant.",
    "Alternatively, the user may run this part of the script (and following steps) on an external CSV file. The CSV file needs to contain the following columns: chrom (with chromosome defined as, e.g., chr1), pos (with nucleotide position of a mutation in the chromosome), ref (reference allele), alt (alternative allele), and indiv_name (with sample ID; the script will accept empty values here but to enable all summaries sample ID is recommended). To execute the script on a CSV file, please see step 3 (last option). The example_csv.csv example CSV file is provided in the repository in the input_files/input_csv folder.\nTo run this step of the script, use one of the following commands:\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-s 3 \\\n-es 3\nor\n>python3 add_mirna_info.py /path/to/output/folder/ \\\n/path/to/reference/files/localizations.csv\nAlternatively, this step may be run on any CSV file fulfilling the requirements defined earlier, using option “-c”:\n>python3 add_mirna_info.py /path/to/output/folder/ \\\n/path/to/reference/files/localizations.csv \\\n-c /path/to/csv/file/with/mutations.csv\nThis step generates the all_mutations_with_localization.csv file, which includes a list of mutations based on the all_mutations.csv file (or user-defined file with mutations) with annotated information.\nNote: It is possible to run the whole script at once on a CSV file using the “-c” optional argument as follows:\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-c /path/to/csv/file/with/mutations.csv\nIn this case, the input folder argument will not be used (but needs to be defined), and the script will automatically start from step 3, skipping the first two steps.\nCalculating mutation weights and HGVS nomenclature",
    "During the fourth step, the potential functional impact of each mutation is evaluated based on the mutation characteristics and location. A mutation receives a higher score (weight) if it is located within the DROSHA or DICER1 (key endonucleases involved in miRNA biogenesis) cleavage site, is located within a miRNA duplex, especially in the seed region, and is located in binding sites of proteins known to play role in miRNA biogenesis.\nThe scoring is as follows: seed region mutation - weight 2; cleavage sites, duplex (excluding seed region) or disturbance of protein binding motif - weight 1.5; all other mutations - weight 1.\nAdditionally, during this step, mutation designation according to the HGVS nomenclature is defined. Both genomic (using chromosomal position) and noncoding DNA coordinate (using miRBase pre-miRNA coordinate) designations are calculated.\nTo run this step of the script, use one of the following commands:\n>python3 run_mirnaome_analysis.py \\ /path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-s 4 \\\n-es 4\nor\n>python3 add_weights.py \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates_with_seq.bed\nThis step generates the three files: all_mutations_with_weights.csv, which includes a list of mutations with additional information on motifs and weights; all_mutations_with_hgvs.csv, which includes all information as the previous file and genomic HGVS designation; all_mutations_with_n_hgvs.csv, which includes all information as the previous file and miRBase HGVS designation.\nNote: If a mutation is predicted to disturb more than one functional site, the highest weight is counted.\nNote: Sequence motifs analyzed within the script can be found in the add_weights_helpers.py file in the repository. The sequence motif calculations were based on previously published scripts (Urbanek-Trzeciak et al., 2018[href=https://www.wicell.org#bib16]).\nGenerating summaries\nTiming: seconds to minutes; factors that affect timing include the number of mutations and available computing resources.",
    "In this step, files summarizing mutations in miRNA genes are generated, including summaries from the miRNA gene perspective, specific mutation perspective, and complex mutation (explained below) perspective.\nTo run this step of the script, use one of the following commands:\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-s 5 \\\n-es 5\nor\n>python3 distinct_occur.py \\\n/path/to/output/folder/\nThis step generates the three files: occur.csv file, which reports the number of mutations found in each miRNA gene in the analyzed cohort, for each miRNA gene (characterized by chromosome, pre-miRNA name, and miRNA miRBase ID), the count of unique samples with at least one mutation (indiv_name_nunique), count of all mutations (indiv_name_count), and count of unique mutation positions (pos_nunique) are provided, additionally, complex mutations, if identified in a particular miRNA, are reported; distinct_mutations.csv file, which summarizes distinct mutations (genome positions with specific alteration), including the number of patients/samples with the mutation, if available, the sum of reads supporting reference and alternative alleles are also provided; complex_mutations.csv file, which includes information on complex mutations defined as multiple nucleotide alterations found in a single miRNA gene in a single sample/patient (please note: if the “indiv_name” (sample identifier) is not defined, this file will be inutile as all mutations will be treated as found within a single sample). The file shows a number of mutations (pos_count) and unique mutation positions (pos_nunique) found in each miRNA gene (characterized by chromosome, pre-miRNA name, and miRNA miRBase ID) in each sample (indiv_name) and if any of the mutations are complex.\nIMPORTANT: Do not use complex_mutations.csv if the individual name (indiv_name) is not defined (empty or nonunique) in the VCF/VCF.GZ or CSV files. In such a case, the “if_complex” column in the occur.csv file is also inutile.\nGenerating visualization of mutations",
    "Timing: minutes to hours; factors that affect timing include the number of mutations in miRNA genes and available computing resources.\nDuring this step, figures graphically presenting mutations on a schematic structure of miRNA genes are generated. For visualization of mutations and to enable examination of sequence variants in the context of miRNA precursor structures, we superimposed the identified variants on the consensus miRNA precursor structure and categorized them according to localization in the miRNA gene subregions. Generated figures depict (i) all found variants (Figure 1[href=https://www.wicell.org#fig1]A), (ii) variants found in miRNA genes with the dominant 3′ miRNA, (iii) variants found in miRNA genes with the dominant 5′ miRNA, and (iv) balanced miRNAs. Similar figures are generated separately for each miRNA gene with at least one mutation in the provided dataset (example shown in Figure 1[href=https://www.wicell.org#fig1]B). All figures are generated as Scalable Vector Graphics (SVG) files to enable further editing in graphic software.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1295-Fig1.jpg\nFigure 1. Localization of mutations detected by the script\n(A) All mutations found in the pan-cancer cohort in TCGA (Urbanek-Trzeciak et al., 2020[href=https://www.wicell.org#bib17]).\n(B) Mutations found within miR-205 in the pan-cancer cohort in TCGA (Urbanek-Trzeciak et al., 2020[href=https://www.wicell.org#bib17]). miRNA duplex positions are indicated in blue, and seed regions are indicated in dark blue. The flanking regions and terminal positions of the apical loop are indicated in gray. The numbers in the lower right corner represent the number of plotted mutations (upper) and the number of mutated miRNA genes (lower; not provided for mutations shown within a single miRNA gene). If present, sequence variants localized beyond position 22 in longer mature miRNAs are cumulatively shown at position 22. The plot shows mutations within six positions of the loop (first 3 and last 3 nucleotides). The number of the remaining loop mutations is indicated within the loop.",
    "To run the sixth step of the script, use one of the following commands:\n>python3 run_mirnaome_analysis.py \\\n/path/to/input/folder/with/vcfs \\\n/path/to/output/folder/ \\\n/path/to/reference/files/coordinates.bed \\\n/path/to/reference/files/localizations.csv \\\n/path/to/reference/files/coordinates_with_seq.bed \\\n-s 6 \\\n-es 6\nor\n>python3 mutation_loc_figures.py \\\n/path/to/output/folder/"
  ],
  "subjectAreas": [
    "Sequence Analysis",
    "Bioinformatics",
    "Systems Biology",
    "Cancer",
    "Genetics",
    "Molecular Biology",
    "High Throughput Screening"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}