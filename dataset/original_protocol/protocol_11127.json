{
  "id": 11905,
  "origin_website": "Jove",
  "title": "Three Differential Expression Analysis Methods for RNA Sequencing: limma, EdgeR, DESeq2",
  "procedures": [
    "NOTE: Open the R-studio program and load R file \"DEGs.R\", the file can be acquired from Supplementary files/Scripts.\n1. Downloading and pre-processing of data\nDownload the high-throughput sequencing (HTSeq) count data of cholangiocarcinoma (CHOL) from The Cancer Genome Atlas (TCGA). This step can be easily achieved by the following R code.\n\t\nClick Run to install R packages.\nClick Run to load R packages.\n\t\tif(!requireNamespace(\"BiocManager\", quietly=TRUE))\n\t\t + install.packages(\"BiocManager\")\n\t\tBiocManager::install(c(\"TCGAbiolinks\", \"SummarizedExperiment\"))\nSet the working directory.\n\t\tlibrary (TCGAbiolinks)\n\t\tlibrary(SummarizedExperiment)\n\t\tsetwd(\"C:/Users/LIUSHIYI/Desktop\")\nChoose the cancer type.\n\t\tcancer <- \"TCGA-CHOL\"\nRun the R code from the \"GDCquery.R\" file to download the data. The file \"GDCquery.R\" can be acquired from Supplementary files/Scripts:\n\t\tsource(\"Supplementary files/Scripts/GDCquery.R\")\n\t\thead(cnt)\n\t\t##TCGA-3X-AAVA-01A-11R-A41I-07\n\t\t##ENSG00000000003 4262\n\t\t##ENSG00000000005 1\n\t\t##ENSG00000000419 1254\n\t\t##ENSG00000000457 699\n\t\t##ENSG00000000460 239\n\t\t##ENSG00000000938 334\n\t\tNOTE: After execution, the CHOLHTSeq count data will be downloaded and named \"cnt\", where rows represent ensemble gene IDs and columns represent sample IDs. Please notice the numbers at positions 14-15 in the sample IDs; numbers ranging from 01 to 09 indicate tumors and ranging from 10 to 19 indicate normal tissues.\nConvert ensemble gene IDs to gene symbols.\n\t\nImport the annotation file into R according to its storage path. The annotation file (gencode.v22.annotation.gtf) can be acquired from Supplementary files.\n\t\t​gtf_v22 <- rtracklayer::import('Supplementary files/gencode.v22.annotation.gtf')\nRun the R code from the \"gtf_v22.R\" file, which can be acquired from Supplementary files/Scripts:\n\t\tsource(\"Supplementary files/Scripts/gtf_v22.R\")\nApply the function \"ann\" to convert the ensemble gene IDs to gene symbols.\n\t\tcnt=ann(cnt,gtf_v22)\nFiltering low-expressed genes\n\t\nClick Run to install the R package \"edgeR\".\n\t\t​BiocManager::install(\"edgeR\")\nClick Run to load the R package \"edgeR\".\n\t\t​library(edgeR)\nRun the following R code to keep genes with counts per million (CPM) values greater than one in at least two samples.\n\t\tkeep <- rowSums(cpm(cnt)>1)>=2\n\t\tcnt <- as.matrix(cnt[keep,])",
    "​NOTE: The counts per million (CPM) value is used instead of the read count to eliminate the deviation caused by different sequencing depths.\n2. Differential expression analysis through \"limma\"\nClick Run to install the R package \"limma\".\n\tBiocManager::install(\"limma\")\nClick Run to load the R packages \"limma\", \"edgeR\".\n\tlibrary(limma)\n\tlibrary(edgeR)\nRun the following R code to create the design matrix.\n\tgroup <- substring(colnames(cnt),14,15) # Extract group information\n\tgroup [group %in% \"01\"] <- \"Cancer\" # set '01' as tumor tissue\n\tgroup [group %in% \"11\"] <- \"Normal\" # set '11' as normal tissue\n\t​group <- factor (group, levels = c(\"Normal\",\"Cancer\"))\n\t\nCreate the design matrix.\n\t\tdesign <- model.matrix (~group)\n\t\trownames(design) <- colnames(cnt)\nCreate the DGEList object.\n\t\tdge <- DGEList(counts = cnt, group = group)\nNormalize the data.\n\t\tdge <- calcNormFactors(dge, method = \"TMM\")\nRun the following R code to perform the limma-trend method based differential expression analysis.\n\t\tdge\n\t\t##An object of class \"DGEList\"\n\t\t##$counts\n\t\t##TCGA-3X-AAVA-01A-11R-A41I-07\n\t\t##TSPAN6 4262\n\t\t##DPM1 1254\n\t\t##SCYL3 699\n\t\t##C1orf112 239\n\t\t##​FGR 334\nCalculate the CPM value.\n\t\t​logdge <- cpm(dge, log=TRUE, prior.count=3)\nClick Run to fit a linear model to predict the data or infer the relationship between variables.\n\t\tfit <- lmFit (logdge, design)\nCalculate the T value, F value and log-odds based on Bayesian.\n\t\tfit <- eBayes(fit, trend=TRUE)\nExtract the result table.\n\t\tres_limma<- as.data.frame(topTable(fit,n=Inf))\n\t\thead(res_limma)\n\t\t## logFC AveExpr t P.Value adj.P.Val B\n\t\t##RP11-252E2.2 -4.899493 -2.488589 -20.88052 2.386656e-25 4.931786e-21 47.28823\n\t\t##BX842568.1 -4.347930 -2.595205 -20.14532 1.082759e-24 1.118706e-20 45.83656\n\t\t##CTC-537E7.3 -5.154894 -2.143292 -19.59571 3.452354e-24 2.216114e-20 44.72001\n\t\t##RP11-468N14.3 -6.532259 -2.029714 -19.49409 4.289807e-24 2.216114e-20 44.51056\n\t\t##AP006216.5 -4.507051 -2.670915 -19.25649 7.153356e-24 2.956339e-20 44.01704\n\t\t##RP11-669E14.4 -4.107204 -2.828311 -18.93246 1.448209e-23 4.987633e-20 43.33543",
    "#The result of differential expression analysis is saved in \"res_limma\", which includes the gene id, log2 fold change value (logFC), the average log2 expression level of the gene in the experiment (AveExpr), the modified t statistic (t), relavent p value (P.Value), the false discovery rate (FDR) corrected p value (adj.P.Val) and the log-odds of differentially expressed genes (B)\n\t\t​NOTE: The function \"calcNormFactors()\" of the \"edgeR\" was used to normalize the data to eliminate the influence caused by sample preparation or library construction and sequencing. In the construction of design matrix, it is necessary to match experimental design (e.g., tissue type: normal or tumor tissues) to sample IDs of the matrix. limma-trend is suitable to data whose sequencing depth is the same, while limma-voom is suitable: (i) when the sample library size is different; (ii) data not normalized by TMM; (iii) there is a lot of \"noise\" in the data. A positive logFC means that gene is up-regulated in the experiment, while negative number means that gene is down-regulated.\nIdentify the DEGs.\n\t\tres_limma$sig <- as.factor(\n\t\t ifelse(res_limma$adj.P.Val < 0.05 & abs(res_limma$logFC) > 2,\n\t\t   ifelse(res_limma$logFC > 2 ,'up','down'),'not')) # The adj.p Value < 0.05 and the |log2FC| >= 2 are thresholds to identify the DEGs\n\t\tsummary(res_limma$sig)\n\t\t##down not up\n\t\t##1880 ​17341 1443\nOutput the result table to a file.\n\t\twrite.csv(res_limma, file = 'result_limma.csv')\nClick Run to install the R package \"ggplot2\".\n\t\tinstall.packages(\"ggplot2\")\nClick Run to load the R package \"ggplot2\".\n\t\tlibrary(ggplot2)\nRun the R code from the \"volcano.R\" to create the volcano plot. The file \"volcano.R\" can be acquired from Supplementary files.\n\t\tsource(\"Supplementary files/Scripts/volcano.R\")\n\t\tvolcano(res_limma,\"logFC\",\"adj.P.Val\",2,0.05)\n\t\tNOTE: Genes can be mapped to different positions according to their log2FC and adj-p values, the up regulated DEGs are colored in red, and the down-regulated DEGs are colored in green.\nClick Export to save the volcano plot.",
    "​NOTE: The volcano plots can be generated and downloaded in different formats (e.g., pdf, TIFF, PNG, JPEG format). Genes can be mapped to different positions according to their log2FC and adj p values, the up-regulated DEGs (log2FC > 2, adj p < 0.05) are colored in red, and the down-regulated DEGs (log2FC < -2, adj p < 0.05) are colored in green, non-DEGs are colored in grey.\n3. Differential expression analysis through \"edgeR\"\nClick Run to load the R package \"edgeR\".\n\tlibrary(edgeR)\nRun the following R code to create design matrix.\n\tgroup <-substring(colnames(cnt),14,15)\n\tgroup [group %in% \"01\"] <- \"Cancer\"\n\tgroup [group %in% \"11\"] <- \"Normal\"\n\tgroup=factor(group, levels = c(\"Normal\",\"Cancer\"))\n\tdesign <-model.matrix(~group)\n\trownames(design) = colnames(cnt)\nClick Run to create the DGEList object.\n\tdge <- DGEList(counts=cnt)\nNormalize the data.\n\tdge <- calcNormFactors(dge, method = \"TMM\")\nClick Run to estimate the dispersion of gene expression values.\n\tdge <- estimateDisp(dge, design, robust = T)\nClick Run to fit model to count data.\n\tfit <- glmQLFit(dge, design)\nConduct a statistical test.\n\tfit <- glmQLFTest(fit)\nExtract the result table. The result is saved in \"res_edgeR\", which includes the log fold change value, log CPM, F, p value and FDR corrected p value.\n\tres_edgeR=as.data.frame(topTags(fit, n=Inf))\n\thead(res_edgeR)\n\t## logFC logCPM F PValue FDR\n\t##GCDH -3.299633 5.802700 458.5991 1.441773e-25 2.979280e-21\n\t##MSMO1 -3.761400 7.521111 407.0416 1.730539e-24 1.787993e-20R\n\t##CL1 -3.829504 5.319641 376.5043 8.652474e-24 5.516791e-20\n\t##ADI1 -3.533664 8.211281 372.6671 1.067904e-23 5.516791e-20\n\t##KCNN2 -5.583794 3.504017 358.6525 2.342106e-23 9.679455e-20\n\t##GLUD1 -3.287447 8.738080 350.0344 3.848408e-23 1.194406e-19\n\t#The result is saved in \"res_edgeR\", which includes the log fold change value(logFC), log CPM, F, p value and FDR corrected p value\nIdentify the DEGs.\n\tres_edgeR$sig = as.factor(\n\tifelse(res_edgeR$FDR < 0.05 & abs(res_edgeR$logFC) > 2,\n\tifelse(res_edgeR$logFC > 2 ,'up','down'),'not'))\n\tsummary(res_edgeR$sig)\n\t##down not up\n\t##1578 15965 3121\nOutput the result table to a file.\n\twrite.csv(res_edgeR, file = 'res_edgeR.csv')",
    "Create the volcano plot.\n\tvolcano(res_edgeR,\"logFC\",\"FDR\",2,0.05)\nClick Export to save the volcano plot.\n4. Differential expression analysis through \"DESeq2\"\nClick Run to install R packages \"DESeq2\".\n\tBiocManager::install(\"DESeq2\")\nClick Run to load R packages \"DESeq2\".\n\tlibrary(DESeq2)\nRun the following R code to determine the grouping factor.\n\tgroup <-substring(colnames(cnt),14,15)\n\tgroup [group %in% \"01\"] <- \"Cancer\"\n\tgroup [group %in% \"11\"] <- \"Normal\"\n\tgroup=factor(group, levels = c(\"Normal\",\"Cancer\"))\nCreate the DESeqDataSet object.\n\tdds <-DESeqDataSetFromMatrix (cnt, DataFrame(group), design = ~group)\n\tdds\n\t##class: DESeqDataSet\n\t##dim: 20664 45\n\t##metadata(1): version\n\t##assays(1): counts\n\t##rownames(20664): TSPAN6 DPM1 ... RP11-274B21.13 LINC01144\n\t##rowData names(0):\n\t##colnames(45): TCGA-3X-AAVA-01A-11R-A41I-07 ...\n\t##colData names(1): group\nPerform the analysis.\n\tdds <- DESeq(dds)\nGenerate the result table.\n\tres_DESeq2 <- data.frame(results(dds))\n\thead(res_DESeq2)\n\t## baseMean log2FoldChange lfcSE stat pvalue padj\n\t##TSPAN6 4704.9243 -0.8204515 0.3371667 -2.433370 1.495899e-02 2.760180e-02\n\t##DPM1 1205.9087 -0.3692497 0.1202418 -3.070894 2.134191e-03 4.838281e-03\n\t##SCYL3 954.9772 0.2652530 0.2476441 1.071106 2.841218e-01 3.629059e-01\n\t##C1orf112 277.7756 0.7536911 0.2518929 2.992109 2.770575e-03 6.101584e-03\n\t##FGR 345.8789 -0.6423198 0.3712729 -1.730047 8.362180e-02 1.266833e-01\n\t##CFH 27982.3546 -3.8761382 0.5473363 -7.081823 1.422708e-12 1.673241e-11\n\tNOTE: The result is saved in \"res_DESeq2\", which includes the mean of the normalized read count (baseMean), log fold Change value(log2FoldChange), log fold change standard error (lfcSE), the Wald statistic (stat), original p value (pvalue) and corrected p value (padj)\nIdentify DEGs.\n\tres_DESeq2$sig = as.factor(\n\t ifelse(res_DESeq2$padj < 0.05 & abs(res_DESeq2$log2FoldChange) > 2,\n\t   ifelse(res_DESeq2$log2FoldChange > 2 ,'up','down'),'not'))\n\tsummary(res_DESeq2$sig)\n\t##down not up\n\t##1616 16110 2938\nOutput the result table to a file.\n\twrite.csv(res_DESeq2, file = 'res_DESeq2.csv')\nCreate the volcano plot.\n\tvolcano(res_DESeq2,\"log2FoldChange\",\"padj\",2,0.05)\nClick Export to save the volcano plot.\n5. Venn diagram\nClick Run to install the R package \"VennDiagram\".\n\tinstall.packages(\"VennDiagram\")\nClick Run to load the R package \"VennDiagram\".\n\tlibrary (VennDiagram)\nMake a Venn diagram of up regulated DEGs.\n\tgrid.newpage()\n\tgrid.draw(venn.diagram(list(Limma=rownames(res_\n\tlimma[res_limma$sig==\"up\",]),\n\t  edgeR=rownames(res_edgeR[res_edgeR$sig==\"up\",]),\n\t  DESeq2=rownames(res_DESeq2[res_DESeq2$sig==\n\t  \"up\",])),\n\t NULL,height = 3,width = 3,units = \"in\",\n\t col=\"black\",lwd=0.3,fill=c(\"#FF6666\",\"#FFFF00\",\n\t \"#993366\"),\n\t alpha=c(0.5, 0.5, 0.5),main = \"Up-regulated DEGs\"))",
    "Click Export to save the Venn diagram.\nMake a Venn diagram of down regulated DEGs.\n\tgrid.newpage()\n\tgrid.draw(venn.diagram(list(Limma=rownames(res_\n\tlimma[res_limma$sig==\"down\",]),\n\t   edgeR=rownames(res_edgeR[res_edgeR$sig==\n\t\"down\",]),\n\t   DESeq2=rownames(res_DESeq2[res_DESeq2$sig==\"down\",])),\n\t NULL,height = 3,width = 3,units = \"in\",\n\t col=\"black\",lwd=0.3,fill=c(\"#FF6666\",\"#FFFF00\",\n\t\"#993366\"),\n\t alpha=c(0.5, 0.5, 0.5),main = \"Down-regulated DEGs\"))\nClick Export to save the Venn diagram.\nSubscription Required. Please recommend JoVE to your librarian."
  ],
  "subjectAreas": [
    "Cancer Research"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research"
  ]
}