{
  "id": 3137,
  "origin_website": "Cell",
  "title": "Protocol for integrated analysis of bacterial RNA-seq and ChIP-seq data for establishing a co-expression network",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nChIP-seq analysis\nTiming: 30–50 min\n    \n      Complete the entire ChIP-seq analysis[href=https://www.wicell.org#sec2.1] process,\n      including quality control, alignment and peak-calling. The corresponding\n      test Data can be obtained from\n      Data S1-Methods S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2708-Mmc1.zip]\n      in the supplemental information[href=https://www.wicell.org#appsec2].\n    \nPerform sequence quality control by FastQC.\n> conda install fastqc\nNote: Major parameters: -o: storage path\n      of the generated report file and file name of the generated report; -t:\n      number of threads; -q progress in real time.\n    \n>fastqc ∗.gz\n        Perform alignment. ChIP-seq reads are mapped to the\n        Pseudomonas savastanoi pv. phaseolicola 1448A genome using\n        Bowtie (version 2.4.5). Only the uniquely mapped reads are retained for\n        the subsequent analyses. The test data file can be downloaded from this\n        link:\n        https://github.com/dengxinb2315/STAR-protocol-data.git[href=https://github.com/dengxinb2315/STAR-protocol-data.git].\n        \n            Construct the mapping file.\n            \nNote: Bowtie is a super-fast,\n              memory efficient tool for splicing short sequences into template\n              genomes. Bowtie2 can be installed using Conda.\n            \n> conda install bowtie2 -c bioconda\nNote: Mapping the high-throughput\n              data to the index. –threads: number of threads.\n            \n> bowtie2-build --threads 20 Pseudomonas syringae\n                  _genome.fa Pseudomonas syringae _genome\nNote: Build indexes with the\n              FASTA-format P. syringae genome files. –threads: number of\n              threads; -1: the left part of the paired-end data; -2: the left\n              part of the paired-end data; and -S: File for SAM output. More\n              information regarding the genome file can be found here: (NCBI:\n              https://www.ncbi.nlm.nih.gov/data-hub/genome/GCF_000012205.1/[href=https://www.ncbi.nlm.nih.gov/data-hub/genome/GCF_000012205.1/]\n              or http://pseudomonas.com/[href=http://pseudomonas.com/]).\n              The corresponding test Data can be obtained from\n              Data S1-Methods S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2708-Mmc1.zip]\n              in the support file.\n            \n> bowtie2 -p 20 -x Pseudomonas syringae _genome -1\n                  R1.fq -2 R2.fq -S Gene_name.bathc1.sam\nNote: Samtools is designed to\n              handle SAM/BAM format alignment files. This tool can sort and\n              merge SAM files and export BAM files. To install Samtools using\n              Conda, use the command ‘conda install samtools’. The main function\n              of the view command is to convert the input file to the output",
    "file. Typically, the SAM file post-alignment is converted to the\n              BAM file, and then various operations are performed on the BAM\n              file. -q: mapping quality >= INT; -bS: output BAM format file\n              and ignore the input format.\n            \n> samtools view -q 255 -bS ->\n                  Gene_name.bathc1.bam\n            Identify the binding peaks (p < 1 × 10-5) using MACS\n            (version 2.1.0).\n            \nNote: MACS is one of the most\n              widely used peak-calling programs. MACS can be installed using\n              Conda with the command ‘conda install macs2’. macs2_callpeak is\n              one of the main macs2 features that can find ChIP-seq peaks using\n              BAM files. -t: treatment group; -c: control group; -f: format of\n              the input file; -g: effective genome size; -n: name of the output\n              file; -B: determines whether the remaining fragment pileup,\n              control lambda, -log10pvalue, and -log10qvalue scores are saved to\n              the bedGraph file; -p: e-value; --nomodel: the bias of the peak\n              candidate region is not considered, and the background λ is used\n              as the local λ; --extsize: length of the\n              transcription-factor-binding region.\n            \n> macs2 callpeak -t Gene_name.batch1.bam -c\n                  Input.batch1.bam -f BAM -g 6264404 -n Gene_name_pval -B -p\n                  1e-5 --nomodel --extsize 75\n            Annotate the peaks (in R)\n            \nNote: Three R packages are needed.\n              The ChIPpeakAnno package includes functions to retrieve the\n              sequences around the peak; obtain the enriched GO terms; and find\n              the nearest gene, exon, miRNA, or custom features such as the most\n              conserved elements and other transcription-factor-binding sites\n              supplied by users. GenomicFeatures12[href=https://www.wicell.org#bib10] is a set\n              of tools and methods for preparing and manipulating transcript\n              centric annotations. The GenomicRanges13[href=https://www.wicell.org#bib11]\n              package defines general purpose containers for storing and\n              manipulating genomic intervals and variables defined along a\n              genome. The test data file can be downloaded from this link:\n              https://github.com/dengxinb2315/STAR-protocol-data.git[href=https://github.com/dengxinb2315/STAR-protocol-data.git]\n># In R\n>library(ChIPpeakAnno)\n>library(GenomicFeatures)\n> library(GenomicRanges)\n> ### all peak files###\n> peak_list <-\n                  list.files(\"../3narrowpeak/\")",
    "> ### import annotation files (gene location, obtained\n                  from gtf file)\n> sss <-\n                  read.delim(\"∼/workspace/DrDeng/PAVIRnet2019/ReferenceGenome/\n                  ps _NCBI.anno.txt, sep=\"\\t\",header=F)\n> sss<-sss[,c(1,4,5,7,9)]\n>\n                  colnames(sss)<-c(\"chr\",\"start\",\"end\",\"strand\",\"id\")\n> ge <- as(sss,\"GRanges\")\n> ### annotation ###\n> for(s in 1 : length(peak_list)){\npe <-\n                  read.delim(paste(\"../3narrowpeak/\",peak_list[s],sep=\"\"),sep=\"\\t\",header=F)\npeaks1 <- GRanges(seqnames=as.matrix(pe[,1]),\nranges=IRanges(start=as.numeric(as.matrix(pe[,2])),\nend= as.numeric(as.matrix(pe[,3])),\nnames=as.matrix(as.matrix(pe[,4]))))\n> annotatedPeak <- annotatePeakInBatch(peaks1,\n                  AnnotationData=ge)\n> df <- data.frame(as.data.frame(annotatedPeak)\n>\n                  as.data.frame(values(ge[as.numeric(values(annotatedPeak)$feature),])))\n> write.table(df,\npaste(\"1directly_anno/\",peak_list[s],\"_annotation.txt\",sep=\"\"),quote=FALSE,\n                  row.names=FALSE, sep=\"\\t\")\n> }\nRNA-seq analysis\nTiming: 30–50 min\n    \n      Complete the entire RNA-seq analysis process, including quality control,\n      alignment and annotation.\n    \n      The corresponding test Data can be obtained from\n      Data S2-Methods S2[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2708-Mmc1.zip]\n      in the support file.\n    \nPerform sequence quality control by FastQC.\n>fastqc ∗.gz\n        Perform alignment. RNA-seq reads are mapped to the\n        P. syringae genome using STAR, and only the uniquely mapped reads\n        are retained for the subsequent analyses. The STAR software is designed\n        to align sequenced reads to the reference genome. The software is\n        characterised by high accuracy and mapping speed (50 times those of\n        other competitive software).\n        \n            Build a genome index.\n            \nNote: --runMode: type of runs;\n              --runThreadN: number of threads; --genomeDir: index storage\n              location; --genomeFastaFiles: FASTA file for index building.\n            \n> STAR --runMode genomeGenerate --runThreadN 20 –genomeDir\n                  STAR_Index_ PS --genomeFastaFiles PS _NCBI_genome.fa\n            Perform alignment using STAR\n            \nNote: --runThreadN: number of\n              threads; --genomeDir: index storage location; --readFilesIn:\n              storage location of the paired-end FASTQ files;\n              --outFilterMultimapNmax: maximum number of multiple alignments for\n              a read that will be output to the SAM/BAM files;\n              --outFilterMismatchNmax: alignment is output only if it has no\n              more mismatches than this value.; --outSAMtype: type of SAM/BAM\n              output; --outFileNamePrefix: prefix of the output file;\n              --quantMode: type of quantification requested\n            \n> STAR --runThreadN 60 –genomeDir ./STAR_Index_PS\n                  --readFilesIn Gene_name-1_combined_R1.fastq.cutadapt.fastq\n                  Gene_name-1_combined_R2.fastq.cutadapt.fastq\n                  --outFilterMultimapNmax 1 --outFilterMismatchNmax 2\n                  --outSAMtype BAM Unsorted --\noutFileNamePrefix ./9alignment_batch2/Gene_name_1_\n                  --quantMode GeneCounts\nObtain the raw counts using HTSeq.\n      HTSeq is a Python package for analyzing high-throughput sequencing data.",
    "HTSeq-count is an application that counts the reads in a number of units\n      located on the genome, which refers to a set of locations on the\n      chromosome (commonly known as the gene exon).\n    \nNote: -f: format of the input file; -r:\n      specifies how the data is sorted; -s: specifies if the data are from a\n      chain-specific library; -t: smallest counting unit; -m: determines whether\n      specific read definitions should be counted when counting reads.\n    \n> htseq-count -f bam -r name -s no -t CDS -m intersection-strict\n          Gene_name.bam\nPS_gene.gtf > Gene_name_intersection_strict_counts_out.txt\nObtain the differentially expressed genes (DEGs).\n      Obtain the raw counts using DESeq.14[href=https://www.wicell.org#bib12] The test data\n      file can be downloaded from this link:\n      https://github.com/dengxinb2315/STAR-protocol-data.git[href=https://github.com/dengxinb2315/STAR-protocol-data.git]\n      The program outputs the DEG file of the RNA-seq result. In the subsequent\n      analysis, CSV or TXT files can be used.\n    \n># In R\n> library(DESeq2)\n> Gene_name_1 <-\n          read.delim(\"1counts/Gene_name-1_ReadsPerGene.out.tab\",header=F,sep=\"\\t\")[-\n          c(1,2,3,4),c(1,2)]\n> rownames(Gene_name_1) <- Gene_name_1[,1]\n> Gene_name_2 <-\n          read.delim(\"1counts/Gene_name-2_ReadsPerGene.out.tab\",header=F,sep=\"\\t\")[-\n          c(1,2,3,4),c(1,2)] >\nrownames(Gene_name_2) <- Gene_name_2[,1]\n> CTRL_1 <-\n          read.delim(\"1counts/PS-1_ReadsPerGene.out.tab\",header=F,sep=\"\\t\")[-\n          c(1,2,3,4),c(1,2)]\n> rownames(CTRL_1) <- CTRL_1[,1]\n> CTRL_2 <- read.delim(\"1counts/\n          PS-2_ReadsPerGene.out.tab\",header=F,sep=\"\\t\")[-\n          c(1,2,3,4),c(1,2)]\n> rownames(CTRL_2) <- CTRL_2[,1]\n> mRNA_counts <-\n          cbind(Gene_name_1,Gene_name_2[rownames(Gene_name_1),2],\n          CTRL_1[rownames(Gene_name_1),2],CTRL_2[rownames(Gene_name_1),2])\n> mRNA_counts <- mRNA_counts[,-1]\n> colnames(mRNA_counts) <-\n          c(\"Gene_name_1\",\"Gene_name_2\",\"CTRL_1\",\"CTRL_2\")\n> coldata <-data.frame(name =\n          c(\"Gene_name_1\",\"Gene_name_2\",\"CTRL_1\",\"CTRL_2\"),\n          condition =\n          c(\"Gene_name\",\"Gene_name\",\"CTRL\",\"CTRL\"))\n> cds <- DESeqDataSetFromMatrix(countData = dds, colData =\n          coldata, design = ∼condition)\n> mat <-\n          mRNA_counts[,c(\"CTRL_1\",\"CTRL_2\",\"Gene_name_1\",\n          \"Gene_name_2\")]\n> dds <- mat[ rowSums(mat==0) < 3, ]\n> coldata <-data.frame(name =\n          c(\"CTRL_1\",\"CTRL_2\",\"Gene_name_1\",\"Gene_name_2\"),\n          condition =\n          c(\"ctrl\",\"ctrl\",\"Gene_name\",\"Gene_name\"))\n> cds <- DESeqDataSetFromMatrix(countData = dds, colData =\n          coldata, design = ∼condition)\n> colData(cds)$condition <- relevel(colData(cds)$condition ,\n          \"ctrl\")\n> dds <- DESeq(cds)\n> Gene_name_res <- results(dds)\n> Gene_name_DEGs_adjp <-\n          Gene_name_res[intersect(which(abs(Gene_name_res$log2FoldChange)\n          >1),which(Gene_name_res$padj < 0.05)),]\n>\n          write.csv(Gene_name_DEGs_adjp,file=\"Gene_name_DEGs.csv\")\n>\n      Statistical results and visualization of the RNA-seq data\n    \nTiming: 30–50 min\n    \nComplete statistical analysis and visualization of RNA-seq data.\n        Prepare the stacked bar of DEGs.\n        The stacked bar is prepared using GraphPad Prism11[href=https://www.wicell.org#bib13]",
    "(version 8.00), based on the DEG data. First, the numbers of\n        downregulated and upregulated DEGs in each mutant are counted. A typical\n        process involves the following steps.\n        \n            Create a new project file by double clicking the gray area of the\n            window or the little triangle of Prism. Select the table type\n            Grouped in the pop-up wizard window.\n          \n            Copy and paste the data into the Prism table, transpose the data\n            matrix, click the Analyse button, and select Transpose X and Y as\n            the calculation method.\n          \n            Click the newly generated chart under Graphs and select the\n            corresponding chart type. The stacked chart is Grouped under Summary\n            Data.\n          \n        Make personalized adjustments to the chart, such as the colors or\n        thickness of the axes. Establish the co-expression network.\n        \n            Establish the regulatory network using Cytoscape10[href=https://www.wicell.org#bib14]\n            (version 3.6.1), based on the numbers of downregulated and\n            upregulated DEGs in each strains.\n            \n                Build a data matrix, in which the first column lists the names\n                of the strains, and the second column lists the corresponding\n                DEGs.\n              \n                Open Cytoscape and import the network by file. Select the first\n                and second columns as the source and target nodes, respectively.\n              \n            Make personalized adjustments to the chart, for instance, enclose\n            the upregulated targets and downregulated genes in red and blue\n            circles, respectively.\n          \nNote: The size of mutant circles indicates\n      the number of DEGs. The layout is set as the Grid Layout.\n    \nOverview of ChIP-seq data\nTiming: 30–50 min\n    \nComplete statistical analysis and visualization of ChIP-seq data.\n        Determine the number of target genes per cluster.\n        \n            The ChIP-seq data are classified into five clusters (NtrC-like,\n            LytR-like, OmpR-like, NarL-like, and PrrA-like). The corresponding\n            test Data can be obtained from\n            Data S3-Methods S3[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2708-Mmc1.zip]\n            in the support file.\n          \n            The number of target genes in the clusters is counted and visualized",
    "using GraphPad Prism (version 8.00). See the description above for\n            detailed steps.\n          \n        Derive the Venn plot of the gene targets between clusters.\n        \n            The overlapping target genes are shown in a Venn plot derived using\n            the VennDiagram15[href=https://www.wicell.org#bib15] package in R (version 4.1.0).\n          \n            The target genes of each cluster are incorporated in one file, in\n            which each column contains the name of the target gene.\n          \n            The test data file can be downloaded from this link:\n            https://github.com/dengxinb2315/STAR-protocol-data.git[href=https://github.com/dengxinb2315/STAR-protocol-data.git]. The R code for the Venn plot is as follows:\n          \n>##install.packages(\"VennDiagram\") ###run this code when\n          the first time.\n> library(VennDiagram)\n> Venn_data <- read.table(“venn_data.txt”,\n          header=T,row.names=1, sep = “\\t”)\n> Venn_data <- data.frame(Venn_data) > venn.diagram(x =\n          list(NtrC-like, LytR-like, OmpR-like, NarL-like, PrrA-like),\ncategory.names = c(\"NtrC-like \", \" LytR-like \",\n          \" OmpR-like \",\" NarL-like \",\"\n          PrrA-like\"),\nfilename = 'Venn_diagramm.png',\noutput=TRUE,\n#Output picture parameters, including picture type, height and width,\n          resolution, compression and so on.\nimagetype=\"png\",\nheight = 1000,\nwidth = 1000,\nresolution = 300,\ncompression = \"lzw\",\n#The setting of the ring includes the width of the edge, whether a\n          dotted line is required, and the color of the fill.\nlwd = 2,\nlty = 'blank',\nfill = c(\"#EE3B3B\", \"#6495ED\",\n          \"#8B7355\", \"#EEC900\", \"#008B8B\"),\n#Setting the number on the graph includes size, boldness, and\n          font\ncex = .6,\nfontface = \"bold\",\nfontfamily = \"sans\",\n#Adjust the name of each collection, including font size, whether\n          bold, on the outside, as well as location, font and its color\ncat.cex = 0.7,\ncat.fontface = \"bold\",\ncat.default.pos = \"outer\",\ncat.pos = c(0,-45,240,135,45),\ncat.dist = c(0.2,0.2,0.2,0.2,0.2),\ncat.fontfamily = \"sans\",\ncat.col=c(\"#EE3B3B\", \"#6495ED\",\n          \"#8B7355\", \"#EEC900\", \"#008B8B\"))\n        Obtain the histogram and heatmap to clarify the number of genes uniquely\n        targeted by mutants\n        \n            In the case of more than five datasets, it is difficult to promptly\n            extract useful information directly from the Venn plot.",
    "Use the R package UpSetR16[href=https://www.wicell.org#bib16] to explore the\n            number of genes uniquely targeted in multiple groups. First,\n            integrate the peaks of each cluster into one file, in which each\n            column contains all of the peaks of one sample.\n          \nThe R code for the Venn plot is as follows:\n>##install.packages(UpSetR) ###run this code when the first\n          time.\n> library(UpSetR)\n>\n          data<-read.table('upsetR_data.txt',header=T,sep=\"\\t\",row.names=1)\n> Upset(data,\nnset = 8,\nnintersects = 30,\norder.by = c('freq', 'degree'),\ndecreasing = c(TRUE, TRUE),\nqueries = list(list(query = intersects, params = 'c1',\n          color = '#00A087B2'),\nlist(query = intersects,\nparams = c('3220', 'GacA', '1374',\n          '0642', '1364', '1906', ‘4419’, ‘3800’),\ncolor = 'darksalmon')))\nRegulatory network and functional heatmap\nTiming: 1–2 days\n      The calculation of relevant coincidence sites and establishing network for\n      integrating ChIP-seq and RNA-seq data.\n    \n        Construct the regulatory network.\n        \n            The log2 fold change (log2FC) of the DEGs of each mutant is\n            extracted based on the RNA-seq data.\n          \nCytoscape is used to construct the regulatory network.\n            The format of the input file is the classic network style, which\n            includes the mutant names in the first column, DEG names in the\n            second column, and log2FC in the third column.\n          \n            Use Cytoscape to build the networks through the following steps:\n            \nOpen Cytoscape and import the network by file.\n                Select the first and second columns as the source and target\n                nodes, respectively.\n              \n                Make personalized adjustments to the chart, for instance,\n                enclose the upregulated targets and downregulated genes in red\n                and blue circles, respectively.\n              \n                The size of the mutant circles represents the number of\n                regulons.\n              \nThe layout is set as the Circular Layout.\nConstruct the functional heatmap.\n      Select the DEGs regulated by the cluster mutants to perform the GO\n      analysis. First, use the in-house Perl script to determine the GO terms.\n    \n>#!/usr/bin/perl\n> @a = glob(\"./∗.txt\");\n> open OUT,\">../ID.txt\";\n> foreach $a (@a)\n>{",
    ">  open IN,\"$a\"\n>  readline(IN);\n>  while($line=<IN>)\n>  {\n>      chomp $line;\n>    @line =split(/\\t/,$line);\n>      if($hash{$line[0]})\n>    {\n>        next;\n>    }\n>      else.\n>    {\n>      $hash{$line[0]} = 1;\n>    }\n>    }\n>}\n> foreach $key (keys %hash)\n>{\n>    print OUT \"$key\\n\";\n>}\n      Second, combine all of the p-values of each mutant into one matrix using\n      the in-house Perl script.\n    \n>#!/usr/bin/perl\n> open IN,\"../ID.txt\";\n> open OUT,\">../TEST.txt\";\n> while($line=<IN>)\n>{\n>    chomp $line;\n>    $hash{$line} = 1;\n>}\n>@a = glob(\"∗.txt\");\n>  foreach $a (@a)\n>{\n>      $a =∼ /(\\S+).txt/;\n>    $name = $1;\n>      open IN,\"$a\";\n>    readline(IN);\n>      while($line=<IN>)\n>    {\n>        chomp\n          $line;\n>        @line =\n          split(/\\t/,$line);\n>        $hash{$line[0]}.=\n          \"∗$name-$line[1]\";\n>    }\n>      foreach $key (keys\n          %hash)\n>    {\n>        if($hash{$key} =∼\n          /\\∗$name/)\n>      {\n>          next;\n>      }\n>        else\n>      {\n>        $hash{$key}.=\n          \"∗$name-NA\";\n>      }\n>    }\n>  foreach $key (keys %hash)\n>{\n>      print OUT\n          \"$key\\t$hash{$key}\\n\";\n>}\n      To obtain the final data for constructing the heatmap, transfer the\n      p-values of the GO terms to -log10(p-value) through an in-house\n      script.\n    \n>#!/usr/bin/perl\n> open IN,\"C:\\\\Users\\\\22896\\\\Desktop\\\\DYQ_go.txt\";\n> open\n          OUT,\">C:\\\\Users\\\\22896\\\\Desktop\\\\DYQ_go_log.txt\";\n> #$a = readline(IN);\n> #print OUT \"$a\";\n> while($line=<IN>)\n>{\n>            chomp\n          $line;\n>      @line =\n          split(/\\t/,$line);\n>        foreach $lin\n          (@line)\n>      {\n>          if($lin ==\n          0)\n>        {\n>            print\n          OUT \"$lin\\t\";\n>        }\n>          else\n>        {\n>          $a =\n          -(log($lin)/log(10));\n>          print\n          OUT \"$a\\t\";\n>        }\n>    }\n>    print OUT \"\\n\";\n>  }\n      Finally, construct the functional heatmap using the R package pheatmap.17[href=https://www.wicell.org#bib17]\n      The R code is as follows:\n    \n> #install.packages(“pheatmap”)\n> setwd(\"C:\\\\Users\\\\22896\\\\Desktop\")#set the working\n          path\n> library(pheatmap) > data<-read.table(\"yhy.txt\",\n          row.names=1, header=T, sep = \"\\t\")\n> pheatmap(data,scale=\"row\",border_color=\"black\",color=colorRampPalette(rev(c(\"red\",\"black\",\"green\")))(102),width=10,height=5,show_rownames=F)"
  ],
  "subjectAreas": [
    "Microbiology",
    "Genetics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}