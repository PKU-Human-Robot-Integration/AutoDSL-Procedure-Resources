{
  "id": 2591,
  "origin_website": "Cell",
  "title": "Implementing a global approach for efficiently simulating molecular dynamics in agent-based models of biological tissue",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nFor setting up the global method, two options are: 1) divide the microenvironment into occupied and unoccupied regions or 2) partition the microenvironment into several fixed regions. Both options were demonstrated in in Bergman et al. (2022)[href=https://www.wicell.org#bib1] to simulate a fibroblast growth factor receptor 3 (FGFR3) model and an interleukin-6 (IL-6) model, respectively. Links to the relevant lines in the GitHub repository are provided throughout. These two models involve a drug diffusing in the microenvironment of a tissue reacting with cell surface receptors to alter cell fate decisions. After setting up the ABM and before implementing the global method, see if the variability in molecular states among cells when making cell fate decisions is large enough that it ought to be captured in the model. If not, use Option 1. If there is such large variability, look for spatial dependence of this variability and use that to inform a choice or regions for Option 2.\nCreate ODEs for molecular dynamics\nTiming: 1 day\nTwo options are presented here: 1) divide the microenvironment into occupied and unoccupied regions or 2) divide the microenvironment into fixed regions, such as by distance from vasculature (see Figure 1[href=https://www.wicell.org#fig1]). If all cells in the original ABM are affected similarly by the molecular dynamics, Option 1 is appropriate. If the original ABM shows clear spatial effects of the molecular dynamics on the cellular dynamics, strongly consider using Option 2. The code here outlines how to build a single ordinary differential equation (ODE) that then captures the three differential equations—pharmacokinetics (PK), diffusion, and cellular reactions. In Bergman et al. (2022)[href=https://www.wicell.org#bib1], we solve these equations in a single system of ODEs by adding up how each state variable changes in the differential equations describing the key molecular dynamics.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2091-Fig1.jpg",
    "Figure 1. Illustrative examples of the two options for regions\nAdapted with permission from Figure 1 of Bergman et al. (2022)[href=https://www.wicell.org#bib1].\nOption 1: Occupied and unoccupied regions\nThis option divides the microenvironment into two regions: one occupied by cellular agents and the other unoccupied by cellular agents. As cells proliferate, die, and move, these regions will change. Molecular states are averaged within each region to solve the molecular dynamics.\nReplace concentration variable for the diffusing molecule with two variables: the occupied region concentration and the unoccupied region concentration.\nPK dynamics, if applicable.\nThe concentration in the two regions changes based on the proportion of those regions that contain blood vessels. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/fullGlobalODE_FGFR3.m].\n>% C_occupied = concentration at occupied lattice sites\n>% C_unoccupied = concentration at unoccupied lattice sites\n>% p_occupied = proportion of occupied region near blood vessel\n>% p_unoccupied = proportion of unoccupied region near blood vessel\n>% exchange_rate = rate of extravasation into microenvironment\n>% C_circ = concentration in circulation\n>dC_occupied_dt = p_occupied ∗ exchange_rate ∗ C_circ;\n>dC_unoccupied_dt = p_unoccupied ∗ exchange_rate ∗ C_circ;\nNote: If your ABM allows for the substrate to diffuse back across the capillary walls based on the concentration differential, use the following instead:\n>dC_occupied_dt = p_occupied ∗ exchange_rate ∗ (C_circ – C_occupied);\nAnd likewise for the unoccupied concentration.\nDiffusion dynamics.\nDiffusion depends on the proportion of the microenvironment each region compromises. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/fullGlobalODE_FGFR3.m].\n>% q_occupied = proportion of microenvironment that is occupied\n>% q_unoccupied = proportion of microenvironment that is unoccupied\n>% D = diffusion coefficient\n>% h = distance between lattice sites\n>dC_occupied_dt = 6 ∗ D ∗ q_unoccupied ∗ (C_unoccupied – C_occupied) / hˆ2;\n>dC_unoccupied_dt = 6 ∗ D ∗ q_occupied ∗ (C_occupied – C_unoccupied) / hˆ2;",
    "Note: The factor 6 can be understood as 6 = 2 × (number of dimensions). Thus, for a 2D simulation, replace 6 with 4. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/fullGlobalODE_FGFR3.m].\nNote: Division by hˆ2 above is due to diffusion being based on a second-order spatial derivative, not the dimensionality of the simulation.\nNote: If degradation of the substrate occurs in the microenvironment, this is a good place to include that. Subtract degradation_rate ∗ C_occupiedfrom the first and subtract degradation_rate ∗ C_unoccupied from the second.\nNote: Since the method retains full spatial resolution for the cells, at least up to the lattice, it is possible to use this information to arrive at a better coarse-graining of the diffusion between these two regions. Specifically, the value of q_unoccupied can be computed by looking at the actual proportion of lattice sites neighboring cells that are unoccupied rather than estimating this as the proportion of all sites that are unoccupied. Similarly for computing q_occupied. See the diffusion step in Option 2 below. Using this in Option 1 does require recomputing those proportions before each time solving the diffusion equation.\nReaction dynamics.\nAverage across all cells and use that as initial condition for the single agent reaction equation. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/simTumor_FGFR3.m].\n>% A = Nxr array of N agents and the r molecular state variables\n>A_avg = mean(A,1); % average across all agents\n>A_avg = A_avg'; % transpose to make it a column vector\n>sol = ode45(@(t,x) reaction_ode(t,x,pars),[0 dt],A_avg); % solve\n>A = repmat(sol.y(:,end)',[N,1]); % update all molecular concentrations\nCell fate effects on concentration.\nProliferation: update the occupied concentration.\nApoptosis: update the unoccupied concentration.\nMovement: update both the occupied and unoccupied concentrations.\nUse the weighted average to update the concentration(s) named above. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/updateTumor_FGFR3.m].\n>% N = number of agents\n>% V = volume of microenvironment (in lattice sites)",
    ">%% when a cell proliferates…\n>C_occupied = (N ∗ C_occupied + C_unoccupied) / (N+1);\n>%% when a cell dies…\n>C_unoccupied = ((V-N) ∗ C_unoccupied + C_occupied) / (V-N+1);\n>%% when a cell moves…\n>C_occupied_old = C_occupied;\n>C_occupied = ((N-1) ∗ C_occupied + C_unoccupied) / N;\n>C_unoccupied = ((V-N-1) ∗ C_unoccupied + C_occupied_old) / (V-N);\nOption 2: Fixed regions\nThis option divides the microenvironment into fixed regions. These are best chosen based on known geometric features of the distribution of the molecule. For example, based on proximity to vaculature. There can be as many regions as deemed necessary, but more regions requires more computational time. As cells proliferate, die, and move, these regions do not change, but the density of agents within each does change. Molecular states are averaged within each region to solve the molecular dynamics.\nDivide the microenvironment into n regions, for example level sets of the distance to vasculature.\nCreate a variable R where size(R) is the size of the lattice. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/setupSolver_IL6.m].\nThe values of R identify the region that lattice point belongs to. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/setupSolver_IL6.m].\nThese are indexes into the concentration array. Hence, use 1, 2, 3, …, n to identify the n regions with each region having a nonzero volume.\nReplace concentration variable with a vector of concentrations representing the average concentration in each region. Call it C such that size(C) is [n,1], i.e., a column vector. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/simTumor_IL6.m].\nPK dynamics, if applicable.\nThe concentration in each region changes based on the proportion of the region that contain blood vessels. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/fullGlobalODE_IL6.m].\n>% p = vector of proportions of each region containing blood vessels\n>% exchange_rate = rate of extravasation into microenvironment\n>% C_circ = concentration in circulation\n>dC_dt = p ∗ exchange_rate ∗ C_circ;",
    "Note: If your ABM allows for the substrate to diffuse back across the capillary walls based on the concentration differential, use the following instead:\n>dC_dt = p ∗ exchange_rate ∗ (C_circ – C);\nNote: We have found it works better to make each region entirely at a blood vessel or contain no blood vessel, i.e., p is a Boolean vector indicating whether a region is perivascular or not. If a region you want contains a mix, then one option is to split it into two regions: one with and one without vasculature.\nDiffusion dynamics.\nDiffusion depends on the proportion of each region’s neighbors that are in a given region. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/setupSolver_IL6.m].\nFor regions i and j, let q_ij be the proportion of region i neighbors that are in region j.\nNote: By neighbors, we mean the 6 nearby lattice sites used in the standard stencil for solving a partial differential equation (PDE) in 3D.\nInclude boundary conditions of the PDE at this step.\nNeumann conditions: consider neighboring sites that are off the lattice as belonging to the same region as the center point.\nDirichlet conditions: create your regions so that each region either only contains sites with Dirichlet conditions or contains no sites with Dirichlet conditions.\nThe boundary conditions of the PDE should be included at this step.\nCompute this one time at the start of the simulation after the regions have been defined and save for reuse throughout.\n>% q = nxn array where row i contains the proportions of region i neighbors in each region\n>% conc_diffs = nxn array of concentration differentials; row i contains the correct sign for changing region i concentration\n>% D = diffusion coefficient\n>% h = distance between lattice sites\n>conc_diffs = C' – C;",
    ">dC_dt = 6 ∗ D ∗ sum(q.∗ conc_diffs,2) / hˆ2; % add along rows\n>dC_unoccupied_dt = 6 ∗ D ∗ q_occupied ∗ (C_occupied – C_unoccupied) / hˆ2;\nNote: The factor 6 can be understood as 6 = 2 × (number of dimensions). Thus, for a 2D simulation, replace 6 with 4. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/fullGlobalODE_IL6.m].\nNote: Division by hˆ2 above is due to diffusion being based on a second-order spatial derivative, not the dimensionality of the simulation.\nNote: If degradation of the substrate occurs in the microenvironment, this is a good place to include that. Subtract degradation_rate ∗ C from dC_dt. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/fullGlobalODE_IL6.m].\nReaction dynamics.\nFor each type of cell, average across all cells of that type within each region.\nUse this as the initial condition for the differential equation describing the reaction dynamics for a single cell of this type. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/substrateSolver_IL6.m].\nMust account for the concentration representing the average across the entire region.\nThe below formulation works well if the equations are solved sequentially. That is, if these reaction equations are solved separately from the diffusion equations.\nIf they are solved simultaneously, then introduce a factor of p_i into the rate of change for C_i where p_i is the proportion of region i that is occupied by cells of the current type. See here[href=https://github.com/drbergman/GlobalVsLocal/blob/5a63e1444b9aa6ed304148f3cc19e88033006238/fullGlobalODE_IL6.m]. Specifically, if reaction_ode_free_i represents the rate of change for the free substrate in region i inside reaction_ode, then use.\n>dC_i_dt = p_i ∗ reaction_ode_free_i(A_avg,C_i);\n>% A = Nxr array of N agents in region i and the r molecular state variables\n>% C_i = average concentration of substrate in region i\n>% p = proportion of region that is occupied by the N agents\n>A_avg = mean(A,1); % average across all agents\n>A_avg = A_avg'; % transpose to make it a column vector",
    ">sol = ode45(@(t,x) reaction_ode(t,x,pars),[0 dt],[A_avg;C_i]); % solve\n>A = repmat(sol.y(1:end-1,end)',[N,1]); % update all molecular concentrations\n>C_i = p ∗ sol.y(end,end) + (1-p) ∗ C_i; % update average concentration in region i by weighted average of concentration in occupied and unoccupied volumes"
  ],
  "subjectAreas": [
    "Computer Sciences",
    "Systems Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}