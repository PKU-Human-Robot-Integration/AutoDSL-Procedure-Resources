{
  "id": 8444,
  "origin_website": "Jove",
  "title": "WheelCon: A Wheel Control-Based Gaming Platform for Studying Human Sensorimotor Control",
  "procedures": [
    "The development and application of the protocol were approved by the California Institute of Technology Institutional Review Board (IRB) and the Southern University of Science and Technology IRB. The subject provided informed consent prior to any procedures being performed.\n1. System preparation and setup\nThe recommended basic hardware is a 2 GHz dual-core processor and 4 GB of system memory.\nBuild the gaming platform under the Unity platform, while using C# programing language. The Logitech gaming wheel driver and Logitech Steering Wheel SDK are needed for gaming platform development.\nThe gaming platform executable files only support Windows 10 Operating System (OS). Therefore, on a PC running Windows 10, download and install the corresponding racing wheel driver. Then download the compressed WheelCon software (https://github.com/Doyle-Lab/WheelCon/archive/master.zip) and extract the files to the local hard drive.\nMount the racing wheel securely at the sitting level in front of a monitor, and then connect the wheel's USB cable to the PC and the power adapter to an outlet.\nStart the driver GUI to test for correct input readout and force feedback. Importantly, keep the driver GUI running in the background during the test.\nTo start the program, double-click on WheelCon.exe in the '\\WheelCon-master\\Executable & Output Files\\' directory.\nOn the configuration screen, choose settings for monitor and click Play! (Figure 2a). The main menu will appear. Make sure the display size and location are as specified.\n\tNOTE: The 'Wheel Sensitivity' value, defining cursor speed, ranges from 0 to 1, and defaults to 0.5. In case the range of motion afforded by the racing wheel does not suit specific task parameters, adjust this value. For example, decrease the sensitivity for the aging population. However, for comparing between tasks, it is necessary to keep this value constant for the battery and across groups.\n2. Task implementation",
    "Fitts' law reaching game\n\tNOTE: The Fitts’ law reaching game simulates the reaching process. The subject requires to turn the wheel to place the vertical line into the desired region (Figure 2d).\n\t\nSeat the subject comfortably behind the wheels. Adjust the wheel height if necessary.\nOn the main menu, click Fitts' Law Task (Figure 2b) and type in a name for the output file indicating subject identification and task information on the textbox.\nClick on Select File, choose Fitt's Law.txt in the '\\WheelCon-master\\ Demo Input Files\\' directory, and then click Begin Game.\nInstruct the subject to move the green vertical line with the wheel to place it within the gray zone. This task serves to familiarize the subject with maneuvering the wheel, as well as with the color convention used throughout different tasks.\nMountain bike tasks\n\tNOTE: The mountain bike task is a combination of pursuit and compensatory tracking task. It simulates riding a mountain bike down a steep, twisted and bumpy trail. The subject can see the trail and turn the wheel to track it, while a motor can torque the wheel to mimic invisible bumps in the trial (Figure 2e).\n\t\nGame 1: Testing the effect of the visual delay\n\t\tNOTE: In this game, the length of the look-ahead window (advanced warning vs. delay) is manipulated.\n\t\t\nOn the main menu, click Mountain Bike Task (Figure 2c) and type in a name for the output file indicating subject identification and task information on the textbox.\nClick on Select File, choose Vision_Delay.txt in the '\\WheelCon-master\\ Demo Input Files\\' directory, and then click on Begin Game.\nInstruct the subject to move the green vertical line with the wheel in order to track the part of the gray trail that intersects the purple horizontal line.\nGame 2: Testing the effect of action delay",
    "NOTE: In this game, a delay of various lengths is added between wheel movement and action output.\n\t\t\nOn the main menu, click on Mountain Bike Task and type in a name for the output file indicating subject identification and task information on the textbox.\nClick on Select File, choose Action_Delay.txt in the '\\WheelCon-master\\ Demo Input Files\\' directory, and then click Begin Game.\nInstruct the subject to move the green vertical line with the wheel in order to track the part of the gray trail that intersects the purple horizontal line.\nGame 3: Testing the effect of visual quantization\n\t\tNOTE: In this game, visual input is quantized to limit the data rate.\n\t\t\nOn the main menu, click on Mountain Bike Task and type in a name for the output file indicating subject identification and task information on the textbox.\nClick on Select File, choose Vision Quantization.txt in the '\\WheelCon-master\\ Demo Input Files\\' directory, and then click Begin Game.\nInstruct the subject to move the green vertical line with the wheel in order to track the part of the gray trail that intersects the purple horizontal line.\nGame 4: Testing the effect of action quantization\n\t\tNOTE: In this game, action output is quantized to limit the data rate.\n\t\t\nOn the main menu, click on Mountain Bike Task and type in a name for the output file indicating subject identification and task information on the textbox.\nClick on Select File, choose Action Quantization.txt in the '\\WheelCon-master\\ Demo Input Files\\' directory, and then click Begin Game.\nInstruct the subject to move the green vertical line with the wheel in order to track the part of the gray trail that intersects the purple horizontal line.\nGame 5: Testing the effect of bump and trail disturbance\n\t\tNOTE: This task consists of three scenarios:",
    "a) \"Bumps\", tracking a constant trail subject despite torque disturbances on the wheel that mimic hitting bumps when riding a mountain bike;\n\t\tb) \"Trail\", tracking a moving trail with random turns but without bumps;\n\t\tc) \"Trail with Bumps\", tracking a moving trail with random turns and bumps.\n\t\t\nOn the main menu, click on Mountain Bike Task and type in a name for the output file indicating subject identification and task information on the textbox.\nClick on Select File, choose Bump & Trail.txt in the '\\WheelCon-master\\ Demo Input Files\\' directory, and then click Begin Game.\nInstruct the subject to move the green vertical line with the wheel in order to track the part of the gray trail that intersects the purple horizontal line.\n3. Data output\nLocate the TXT output file in the '\\WheelCon-master\\Executable & Output Files\\MountainBikeData\\' directory, and then open with Matlab' WheelCon Data Analysis Code.m' in the '\\WheelCon-master\\Source Code' directory.\nSpecify in the MATLAB script the folder and file_names variables according to the output file directory, and then run the script (Ctrl + Enter), and the output variables will be saved as column vectors to the Workspace. The error and control policy will be exported for each sampling time. See Table 2 for the detailed description.\n4. Input file development\nOpen 'WheelCon Mntn Bike Trail Design Code.m' in the '\\WheelCon-master\\Source Code\\' directory.\nUncomment (Ctrl + T) the section for the desired game parameters and run the script (Ctrl + Enter). The input file will be saved in the '\\WheelCon-master\\Source Code\\' directory' in .txt format. Each column in the input files is one control variable. Refer to Table 1 for the list of control variables.\nSubscription Required. Please recommend JoVE to your librarian."
  ],
  "subjectAreas": [
    "Neuroscience"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research"
  ]
}