{
  "id": 2789,
  "origin_website": "Cell",
  "title": "A computational pipeline to learn gene expression predictive models from epigenetic information at enhancers or promoters",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\n      Construct the matrix of epigenomic and transcriptomic signal on the sets\n      of enhancers and promoters, and their associated target genes,\n      respectively\n    \nTiming: 1 day\n      Prior to the generation of gene expression predictive models with this\n      protocol, it is necessary to build a table or matrix linking the\n      epigenomic and transcriptomic information quantified on the regulatory\n      elements and their associated target genes, respectively. The columns in\n      this matrix will represent the variables that we will use to learn and\n      evaluate the predictive models. Each row contains one target gene and the\n      corresponding matching enhancer or promoter region (see an example below).\n      We have decided to place the expression of the target genes in the first\n      column (in FPKMs) and the count of reads of each type of epigenetic data\n      (i.e., ChIP-seq of histone modifications) normalized by the sequencing\n      depth at the regulatory regions of interest (i.e., enhancers or promoters)\n      in the following columns.\n    \nOptional: If you would like to apply\n      our protocol on your own set of transcriptomic and epigenomic experiments,\n      please follow steps 1–5 to build your matrix file linking expression and\n      epigenetic information. Alternatively, if you prefer just to see how the\n      predictive model generation and training steps work on the sample data on\n      chromosome 19 of mESCs from our GitHub repository, you can go directly to\n      point 6 of this protocol.\n    \nSelect of a collection of epigenetic experiments.\nNote: To run this protocol, users need to\n      select which types of epigenetic information (histone modifications,\n      chromatin accessibility, etc.) are more interesting for them to use as\n      predictive variables to train computational gene expression predictive\n      models. This will depend on the question we are addressing. In our case,\n      we aimed to study (i) whether enhancer epigenetic landscape is capable of",
    "predicting gene expression as previously shown for promoters, and (ii)\n      compare differences in variable contribution between enhancer and promoter\n      predictive models. As we are interested in ranking each histone\n      modification for their variable importance in the predictive models\n      obtained in mESCs, we employ a diverse set of ChIP-seq experiments from a\n      heterogeneous panel of histone modifications.\n    \nCritical: In our previous publication\n      we used up to ten different histone modifications.1[href=https://www.wicell.org#bib1]\n      Here, for the sake of clarity, we selected the following histone\n      modifications: H3K27me3, H3K27ac, H3K4me3 and H3K36me3. Remarkably, other\n      types of high-throughput information such as ChIP-seq experiments of\n      transcription factors and chromatin accessibility data13[href=https://www.wicell.org#bib13]\n,14[href=https://www.wicell.org#bib14] ,15[href=https://www.wicell.org#bib15]\n,16[href=https://www.wicell.org#bib16] proved to be effective in the\n      modelling of expression in other biological contexts. Therefore, our\n      readers are encouraged to integrate such data into predictive models\n      alternative to the one with histone marks described along this article.\n    \nCollect the files of mapped reads.\nNote: From the collection of\n      high-throughput experiments selected before, we need to obtain files of\n      reads in BAM/SAM format mapped on the appropriate genome assembly. In our\n      example, we mapped raw data files of each sample on the mm10 version of\n      the mouse genome. Precomputed files of mapped reads can be retrieved from\n      databases such as ENCODE,17[href=https://www.wicell.org#bib17] where readers will find a\n      vast catalogue of epigenetic data on mESC.\n      Troubleshooting 1[href=https://www.wicell.org#sec5.1].\n    \n        Calculate normalized count of reads at enhancers.\n        \nNote: We will use the\n          recoverChIPlevels function from SeqCode12[href=https://www.wicell.org#bib12]\n          to assign one value of signal strength (i.e., average count of reads)\n          for every ChIP-seq experiment on each element of our collections of\n          genomic regions.\n        \n            Execute the following commands on the terminal for each file of\n            mapped reads of the histone modifications of our example (step 2).\n            \nNote: Readers can apply the same",
    "commands on other BAM files of reads that could be included in the\n              analysis to determine the abovementioned values on our set of\n              enhancers:\n            \n% bin/recoverChIPlevels -vnd data/ChromInfo.txt\n                  data/H3K27me3_mESC_chr19.bam \\\ndata/Enhancer_gene_chr19.bed Enhancer_H3K27me3_chr19\n% bin/recoverChIPlevels -vnd data/ChromInfo.txt\n                  data/H3K27ac_mESC_chr19.bam \\\ndata/Enhancer_gene_chr19.bed Enhancer_H3K27ac_chr19\n% bin/recoverChIPlevels -vnd data/ChromInfo.txt\n                  data/H3K4me3_mESC_chr19.bam \\\ndata/Enhancer_gene_chr19.bed Enhancer_H3K4me3_chr19\n% bin/recoverChIPlevels -vnd data/ChromInfo.txt\n                  data/H3K36me3_mESC_chr19.bam \\\ndata/Enhancer_gene_chr19.bed Enhancer_H3K36me3_chr19\nCritical: Option\n              -d in the recoverChIPlevels command is\n              only necessary when working with our BAM/SAM files containing\n              mapped reads in only one chromosome. When dealing with the full\n              set of chromosomes users should not include this option.\n            \n            Examine the output of recoverChIPlevels SeqCode\n            command.\n            \nNote: The output consists on a new\n              BED file in which three new columns (average value, maximum value\n              and total value) have been added at each line after the\n              information regarding the identification of every enhancer and\n              target gene pair in the original input BED data. All values are\n              normalized by SeqCode for the total number of reads inside each\n              BAM file. We will use column number five (average value) for this\n              protocol.\n            \n% head -5 \\\n                  Enhancer_H3K27ac_chr19_recoverChIPlevels/PEAKsignal_Enhancer_H3K27ac_chr19.bed\nchr19   10012600   10014600\n                    Fen1         8.64\n                    18.40   1728.06\nchr19   10012600   10014600\n                    Fth1         8.64\n                    18.40   1728.06\nchr19   10012600   10014600\n                    Incenp   8.64   18.40\n                    1728.06\nchr19   10012600   10014600\n                    Tmem258    8.64   18.40\n                    1728.06\nchr19   10129000   10130600\n                    Fen1         7.12\n                    16.87   1139.26\nNote: In the example provided\n              through our GitHub repository, each line corresponds to the\n              Hi-C-top enhancer-gene associations identified in our previous\n              publication.1[href=https://www.wicell.org#bib1]\nTroubleshooting 2[href=https://www.wicell.org#sec5.3].\n            \n        Elaborate the matrix linking target gene expression and epigenomic\n        information for enhancers.\n        \nNote: Once we have calculated the\n          normalized number of reads for each epigenetic item, we need to\n          generate a matrix linking gene expression data and epigenetic signal\n          strength on each pair of enhancer-gene elements to learn the\n          predictive models later. For this purpose, we provide in our",
    "repository a python script ( prepare_matrix.py) that\n          constructs the observations matrix by combining the actual expression\n          data (RNA-seq FPKM values) and the output of each\n          recoverChIPlevels function call (ChIP-seq average signal\n          values).\n        \n            Create the parameter file named\n            ChIPlevels_enhancers.txt (see\n            Box 1[href=https://www.wicell.org#tbox1]) in the data/ folder.\n            \nNote: The parameter file named\n              ChIPlevels_enhancers.txt (see\n              Box 1[href=https://www.wicell.org#tbox1]) contains the location in the user file\n              system of the BED files generated by the\n              recoverChIPlevels commands in step 3, and a unique\n              identifier (i.e., name of the corresponding histone modification).\n              This file will have as many rows as epigenetic samples we would\n              like to utilize as variables to learn the predictive models in the\n              next steps.\n            \n            Run our Python script on the terminal to finally link expression\n            data and epigenomic ChIP-seq levels for each pair of gene-enhancer\n            record:\n            \n% ./scripts/prepare_matrix.py data/ChIPlevels_enhancers.txt\n                  \\\ndata/gene-FPKMs.txt\n                  > results/matrix_observations_enhancers.txt\n% head -5 results/matrix_observations_enhancers.txt\nexpression   H3K27me3   H3K4me3\n                    H3K27ac   H3K36me3\n47.2144   1.70   4.28   8.64\n                    2.99\n563.153   1.70   4.28   8.64\n                    2.99\n46.8749   1.70   4.28   8.64\n                    2.99\n307.058   1.70   4.28   8.64\n                    2.99\nCritical: prepare_matrix.py is\n              intended to be executed by the python2 interpreter. However, it\n              can be run under python3 by changing “python” in the first line\n              (shebang) of our script for “python3”.\n            \nNote: Both input and output files\n              on this command for chromosome 19 of mouse (mm10) are provided in\n              the data/ and results/ folders of our\n              GitHub repository, respectively. This resulting\n              matrix_observations_enhancers.txt archive will be used as input\n              data to learn predictive models in the next steps of the protocol.\n              Troubleshooting 3[href=https://www.wicell.org#sec5.5].\n            \nRepeat steps 3 and 4 for promoters.\nBox 1. Contents of the file ChIPlevels_enhancers.txt\nEnhancer_H3K27ac_chr19_recoverChIPlevels/PEAKsignal_Enhancer_H3K27ac_chr19.bed.\n          H3K27ac\nEnhancer_H3K27me3_chr19_recoverChIPlevels/PEAKsignal_Enhancer_H3K27me3_chr19.bed\n          H3K27me3\nEnhancer_H3K4me3_chr19_recoverChIPlevels/PEAKsignal_Enhancer_H3K4me3_chr19.bed.\n          H3K4me3\nEnhancer_H3K36me3_chr19_recoverChIPlevels/PEAKsignal_Enhancer_H3K36me3_chr19.bed\n          H3K36me3\nBox 2. Contents of the file ChIPlevels_promoters.txt\nPromoter_H3K27ac_chr19_recoverChIPlevels/PEAKsignal_Promoter_H3K27ac_chr19.bed\n          H3K27ac\nPromoter_H3K27me3_chr19_recoverChIPlevels/PEAKsignal_Promoter_H3K27me3_chr19.bed\n          H3K27me3\nPromoter_H3K4me3_chr19_recoverChIPlevels/PEAKsignal_Promoter_H3K4me3_chr19.bed\n          H3K4me3\nPromoter_H3K36me3_chr19_recoverChIPlevels/PEAKsignal_Promoter_H3K36me3_chr19.bed\n          H3K36me3\nNote: In previous steps, we have",
    "quantified the signal strength of each ChIP-seq experiment on the\n      enhancers previously linked to genes in mESCs. Now, to calculate the\n      accuracy of a similar predictive model for gene expression in promoters,\n      we will repeat this calculation over the promoters linked to the same set\n      of genes using the Promoter_gene_chr19.bed (provided in our\n      GitHub repository). This file contains the coordinates of the promoters of\n      chromosome 19 involved in the Hi-C-top interactions as identified in our\n      previous publication.1[href=https://www.wicell.org#bib1] After running the SeqCode\n      commands, we will generate now a parameter file called\n      ChIPlevels_promoters.txt (Box 2[href=https://www.wicell.org#tbox2]) to\n      specify the location of the normalized counts of each ChIP-seq experiment\n      processed by SeqCode.\n    \n% bin/recoverChIPLevels -vnd data/ChromInfo.txt \\\ndata/H3K27me3_mESC_chr19.bam data/Promoter_gene_chr19.bed \\\nPromoter_H3K27me3_chr19\n% bin/recoverChIPlevels –vnd data/ChromInfo.txt \\\ndata/H3K27ac_mESC_chr19.bam data/Promoter_gene_chr19.bed \\\nPromoter_H3K27ac_chr19\n% bin/recoverChIPLevels -vnd data/ChromInfo.txt \\\ndata/H3K4me3_mESC_chr19.bam data/Promoter_gene_chr19.bed \\\nPromoter_H3K4me3_chr19\n% bin/recoverChIPLevels -vnd data/ChromInfo.txt \\\ndata/H3K36me3_mESC_chr19.bam data/Promoter_gene_chr19.bed \\\nPromoter_H3K36me3_chr19\n      All output files follow the same format and layout as in the case of\n      enhancers.\n    \n% head -5 \\\nPromoter_H3K27ac_chr19_recoverChIPlevels/PEAKsignal_Promoter_H3K27ac_chr19.bed\nchr19   10202800   10205000   Fen1\n                  13.42   39.87\n            2953.20\nchr19   10202800   10205000   Tmem258\n              13.42   39.87\n            2953.20\nchr19   10239600   10241200   Myrf\n                  7.67   15.33\n            1226.66\nchr19   10304200   10305600   Dagla\n                3.68 7.67 515.20\nchr19   10456200   10458400   Lrrc10b\n               2.93 7.67 644.00\n% ./scripts/prepare_matrix.py data/ChIPlevels_promoters.txt \\\ndata/gene-FPKMs.txt > results/matrix_observations_promoters.txt\n% head -5 results/matrix_observations_promoters.txt\nexpression   H3K27me3   H3K4me3\n            H3K27ac   H3K36me3\n47.2144   1.26      153.31   \n            13.42   2.20\n307.058   1.26      153.31   \n            13.42   2.20\n12.3486   2.28      57.73\n               7.67   2.46\n0.259599 15.54    75.08      3.68\n            2.96\n      Learning the predictive models for enhancers or promoters\n    \nTiming: 1 h\n      The next part of this protocol consists in learning the predictive models\n      of gene expression by finding the optimal weight for the signal strength\n      of each epigenetic variable (i.e., H3K27ac) on each class of genomic\n      regions (enhancers and promoters, separately), that predicts a value of",
    "expression that fits better with the observed FPKM values in mESCs. We\n      will show step by step how to (i) learn an enhancer predictive model from\n      a part of the input matrix of observations (training set) and a random\n      model as a control (generated by shuffling gene expression values), and\n      (ii) evaluate the accuracy of both models on the rest of input data (test\n      set).\n    \nNote: We will focus first on the R script\n      LM_enhancer.R which contains the steps to generate the gene\n      expression predictive model based on enhancer histone decoration. Similar\n      steps will be indicated later to perform the same operation on promoter\n      histone marking.\n    \n        Prepare the workspace directory. Open RStudio and set the path of the\n        main folder of the clone of our GitHub repository inside your computer\n        (yourpath/) as workspace directory.\n      \n> setwd(\"yourpath\")\nLoad the R packages in the current RStudio session.\nNote: We load caret9[href=https://www.wicell.org#bib9] and viridis .10[href=https://www.wicell.org#bib10]\n      Moreover, caret will load the ggplot2 plotting\n      package11[href=https://www.wicell.org#bib11] as well.\n    \n> library(caret)\n> library(viridis)\nLoad the transcriptomic and epigenomic matrix of observed counts.\nNote: We load the resulting file from\n      point 5 (matrix_observations_enhancers.txt) into a variable\n      named data, and perform a log2 transformation, adding a\n      pseudocount of 0.1. We need to convert our data into a data frame.\n    \n> data <-\n          read.table(\"results/matrix_observations_enhancers.txt\",\n                                \n        header = T) # substitute by your file\n> head(data,n=5)\nexpression H3K27me3 H3K4me3 H3K27ac H3K36me3\n1     47.2144     1.70\n              4.28     8.64\n              2.99\n2     563.1530 1.70     4.28\n              8.64     2.99\n3     46.8749     1.70\n              4.28     8.64\n              2.99\n4     307.0580 1.70     4.28\n              8.64     2.99\n5     47.2144     1.01\n              4.35     7.12\n              2.39\n> data <- log2(data+0.1)\n> head(data,n=5)\nexpression H3K27me3 H3K4me3 H3K27ac H3K36me3\n1     5.564207 0.8479969 2.130931 3.127633\n          1.627607\n2     9.137639 0.8479969 2.130931 3.127633\n          1.627607\n3     5.553818 0.8479969 2.130931 3.127633\n          1.627607\n4     8.262837 0.8479969 2.130931 3.127633\n          1.627607\n5     5.564207 0.1505597 2.153805 2.851999\n          1.316146",
    "> data <- data.frame(data)\n> nrow(data)\n[1] 1426\n> ncol(data)\n[1] 5\nCritical: We provide examples of\n      expression and epigenomic observations for enhancers and promoters in\n      mESCs in our GitHub repository. Therefore, unless you are processing your\n      own high-throughput experiments, steps 1–5 can be skipped when working\n      with intermediate results from our GitHub examples.\n    \n        Create the training and test sets.\n        \nNote: We will randomly partition the\n          input matrix of enhancer-gene observations stored in the\n          data variable into two sets: 80% of the BED entries for\n          the training set and the remaining 20% for the test set.\n        \n            Choose the randomization seed. We generated our current partitioning\n            using 47.\n            \n> set.seed(47)\n            Create both partitions by permutating indexes of the elements in the\n            data structures and extracting the data associated to such indexes\n            into the dataTrain and dataTest variables.\n            \n> trainIndex <-\ncreateDataPartition(data$expression,\n                                                        \n                p = .8,list = FALSE, times = 1)\n> head(trainIndex,n=2)\nResample1\n[1,]     1\n[2,]     2\n> tail(trainIndex,n=2)\nResample1\n[1141,]     1424\n[1142,]     1425\n> dataTrain <- data[ trainIndex,]\n> dataTest <- data[-trainIndex,]\n> nrow(dataTrain)\n[1] 1142\n> nrow(dataTest)\n[1] 284\n> head(dataTrain,n=2)\nexpression H3K27me3 H3K4me3 H3K27ac H3K36me3\n1     5.564207 0.8479969 2.130931\n                  3.127633 1.627607\n2     9.137639 0.8479969 2.130931\n                  3.127633 1.627607\n> head(dataTest,n=2)\nexpression H3K27me3 H3K4me3 H3K27ac H3K36me3\n5     5.564207 0.1505597 2.153805\n                  2.851999 1.316146\n8     5.564207 1.2509616 1.815575\n                  3.412782 1.731183\nOptional: Under certain\n              circumstances, instead of partitioning the data in two sets\n              (training and test), we might be interested in learning the\n              predictive model in a particular biological context and evaluate\n              its performance on a second one (e.g., mESCs vs. a posterior cell\n              differentiated state, see our previous publication1[href=https://www.wicell.org#bib1]). In this case, readers will need to adapt this R script to load\n              two files of matrices of observations: one will be stored inside\n              the dataTrain variable, and the other one into the",
    "dataTest variable. Both files will need to be\n              previously processed with the command in the step 8.\n              Troubleshooting 4[href=https://www.wicell.org#sec5.7].\n            \nRandomize gene expression.\n> expression_rd <- sample(dataTrain$expression)\n> dataTrain_rd <- dataTrain\n> dataTrain_rd$expression <- expression_rd\n> head(dataTrain_rd,n=2)\nexpression H3K27me3 H3K4me3 H3K27ac H3K36me3\n1     9.137639 0.8479969 2.130931 3.127633\n          1.627607\n2     5.466689 0.8479969 2.130931 3.127633\n          1.627607\nNote: As a control, we will generate a\n      second predictive model in whose training set the expression data of\n      target genes coupled to enhancers from mESCs is shuffled. Performance on\n      this random model, when comparing predicted vs. observed gene expression,\n      will be useful as a reference to evaluate the results of the model trained\n      on the correct matching between expression of target genes and enhancers.\n    \nDefine the training conditions.\n> train_control <-\n          trainControl(method=\"repeatedcv\",\n                                            \n        number=10, repeats = 3)\nNote: Cross validation (CV) is a\n      statistical method to obtain better estimations when fitting a model to a\n      limited dataset. By iteratively splitting data into k parts, CV method is\n      based on using k-1 fractions of the original input for fitting k-1 models\n      to the observations leaving one part for evaluating the sample error at\n      each iteration.18[href=https://www.wicell.org#bib18] Prior to executing the learning\n      step, we will define the set of technical conditions that must be\n      followed. Thus, for both predictive models (real and random), we will\n      perform a 10× cross-validation (method=”repeatedcv” and\n      number=10), repeated three times ( repeats=3).\n      We can modify these parameters by those that best suit our needs.\n    \nLearn the predictive models.\nNote: To learn the parameters of our\n      models (real and random), we will fit gene expression values predicted\n      using the observed epigenomic read counts with the observed gene\n      expression (original or shuffled) at each enhancer-gene pair. Gene\n      expression must be always the first term of the formula. Terms after the",
    "symbol “ ∼” correspond to the counts of each piece of\n      epigenetic information we selected before. We can run several fitting\n      methods, in our case we opted for a linear model ( lm).\n    \n> model <-\n          train(expression∼H3K36me3+H3K4me3+H3K27me3+H3K27ac,\n                          \n        data=dataTrain, trControl=train_control,\n                          \n        method=\"lm\")\n> model_rd <-\ntrain(expression∼H3K36me3+H3K4me3+H3K27me3+H3K27ac,\n                            \n        data=dataTrain_rd, trControl=train_control,\n                    method=\"lm\")\nNote: Indeed, we compared linear\n      regression (lm) to other existing methods such as neural networks, support\n      vector machines, or random forests in our previous publication.1[href=https://www.wicell.org#bib1]\n      While no other approach yielded better performance, a higher amount of\n      running time was required in the other methods. Please, refer to\n      caret9[href=https://www.wicell.org#bib9] for further information on all the\n      available methodologies.\n    \nSave the resulting model.\nNote: We visualize the content of the\n      model and the model summary, and save their respective outputs. Among\n      other things, we can see the actual weight assigned to each epigenetic\n      feature and their significance, as well as the error statistics of the CV\n      method.\n    \n> model\nLinear Regression\n1142 samples\n   4 predictor\nNo pre-processing\nResampling: Cross-Validated (10 fold, repeated 3 times)\nSummary of sample sizes: 1027, 1029, 1028, 1028, 1026, 1028,\n          ...\nResampling results:\nRMSE      Rsquared   \n            MAE\n2.739144 0.1969188   2.092115\nTuning parameter 'intercept' was held constant at a value of\n          TRUE\n> model_print <- capture.output(print(model))\n> out_print <-\n          paste(\"results/Enhancer_predictive_model.txt\",\n                              \n        sep = \"\")\n> writeLines(model_print,out_print)\n> summary(model)\nCall:\nlm(formula = .outcome ∼ ., data = dat)\nResiduals:\n            \n        Min       \n        1Q   \n        Median     \n        3Q      Max\n-8.0254 -1.5536   0.0824 1.6723 8.5237\nCoefficients:\nEstimate Std. Error t value Pr(>|t|)\n(Intercept)   3.39910   0.58615   5.799\n            8.64e-09 ∗∗∗\nH3K36me3      0.08289   0.09154\n            0.906   0.365\nH3K4me3       0.05827\n            0.06853   0.850   0.395\nH3K27me3      -0.91799   0.07708\n            -11.909 < 2e-16 ∗∗∗\nH3K27ac       0.13557\n            0.14893   0.910   0.363\n---\nSignif. codes: 0 ‘∗∗∗’ 0.001 ‘∗∗’ 0.01 ‘∗’ 0.05 ‘.’ 0.1 ‘ ’ 1\nResidual standard error: 2.741 on 1137 degrees of freedom\nMultiple R-squared: 0.1978, Adjusted R-squared: 0.195",
    "F-statistic: 70.09 on 4 and 1137 DF, p-value: < 2.2e-16\n> model_sum <- capture.output(summary(model))\n> out_sum <-\npaste(\"results/Enhancer_predictive_model_summary.txt\",\n                            \n        sep = \"\")\n> writeLines(model_sum,out_sum)\nCalculate the importance of each variable.\n> varImp(model, scale = FALSE)\nlm variable importance\n                    \n        Overall\nH3K27me3   11.9091\nH3K27ac     0.9103\nH3K36me3   0.9056\nH3K4me3      0.8503\n> model_imp <- capture.output(varImp(model))\n> out_imp <- paste(\"results/Enhancer_varImp.txt\",\n          sep = \"\")\n> writeLines(model_imp,out_imp)\nNote: To define the impact of each histone\n      modification over gene expression prediction, we calculate their\n      importance into the predictive model. Importance is defined as the\n      contribution of each variable in the linear regression predictive model\n      and corresponds to the absolute value of the t-statistic for each model\n      parameter. We save the output of calculating variable importance into a\n      file.\n    \n        Calculate the correlation between predicted and measured expression.\n      \n> exp_pred <- predict(model,dataTest)\n> r <- round(cor(exp_pred,dataTest$expression),2)\n> r\n[1] 0.42\n> exp_pred_rd <- predict(model_rd,dataTest)\n> r_rd <- round(cor(exp_pred_rd,dataTest$expression),2)\n> r_rd\n[1] -0.01\nNote: Finally, once we have generated the\n      model learned on the training set, we can evaluate its performance on the\n      test set (step 9). For this purpose, we predict the expression of genes in\n      the test set using the real and the random models, and then we calculate\n      Pearson’s correlation (r) between predicted and measured expression in\n      both cases to assess predictive model’s performance.\n    \nPlot predicted vs. measured expression.\n> predicted <-c (exp_pred,exp_pred_rd)\n> measured <- c(dataTest$expression,dataTest$expression)\n> models <- c(rep(\"Model\",nrow(dataTest)),\n            \n                  \n        rep(\"Random model\",nrow(dataTest)))\n> text <- data.frame(label=c(paste(\"r = \",r),\n             \n                \n                  \n        paste(\"r = \",r_rd)),\n     \n                  \n                    \nmodels=c(\"Model\",\"Random model\"))\n> c <- data.frame(predicted,measured,models)\n> pdf(\"plots/Enhancer_prediction.pdf\", width =\n          10,height = 5)\n> ggplot(c) +\n          \n        geom_hex(aes(measured, predicted), bins = 100) +\n          \n        scale_fill_gradientn(\"\", colours =\n          rev(viridis(300)))+\n          \n        geom_smooth(aes(measured, predicted),method =\n          \"lm\",level=0)+\n          \n        labs(title=\"Expression prediction in the test\n          subset\",\n              \n        x=\"Measured expression (log(FPKMs + 0.1))\",\n              \n        y = \"Predicted expression\") +\n   geom_text(data = text,",
    "mapping = aes(x = -Inf, y = -Inf, label = label),hjust = -2,\n                    \n        vjust = -1, size=7) +\n   theme_bw() +\n   theme(legend.position=\"right\",\n          \naxis.text=element_text(size=20,face=\"bold\"),\n          \naxis.title=element_text(size=20,face=\"bold\"),\n          \nlegend.text=element_text(size=20),\n          \nlegend.title=element_text(size=20),\n          \nplot.title = element_text(size=24,face=\"bold\"),\n          \nstrip.text = element_text(size=20,face=\"bold\")) +\n   facet_wrap(∼ models)\n> dev.off()\nNote: We use the ggplots2 R\n      package to generate publication-ready plots to visualize how well our\n      predictive model perform compared to their corresponding random model (Figure 1[href=https://www.wicell.org#fig1]).\n    \n        Plot the variable importance.\n        \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2299-Fig1.jpg\n              Figure 1. Performance of the enhancer model and its corresponding\n              random model\n            \n              Predicted expression of the test subset of genes calculated by the\n              models versus their measured expression by RNA-seq. Model\n              performances are represented by the Pearson’s correlation\n              (r) between predicted and measured expression values. Color\n              scale on the right represents the density of dots in the scatter\n              plots.\n            \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2299-Fig2.jpg\nFigure 2. Variable importance\n              (A) Importance of each histone modification used to train the\n              enhancer predictive model. Importance is defined as the\n              contribution of each variable in the linear regression predictive\n              model and corresponds to the absolute value of the t-statistic for\n              each model parameter.\n            \n(B) As for A, but for promoters.\nNote: Finally, we can show in a barplot\n      the different contribution of each histone modification into the gene\n      expression prediction based in enhancer epigenetic marking (Figure 2[href=https://www.wicell.org#fig2]A).\n    \n> out_varImp <-\n          paste(\"plots/Enhancer_varImp.pdf\",sep=\"\")\n> p <- ggplot(varImp(model,scale = FALSE))+\n          \n        geom_bar(stat=\"identity\",\n          fill=\"darkviolet\")+\n          \n        labs(title=\"Enhancer model variable importance\",\n               \n        x=\"\", y = \"importance\") +\n   theme_bw() +\n   theme(legend.position=\"bottom\",\n                \n        axis.text=element_text(size=12,face=\"bold\"),\n                \n        axis.title=element_text(size=12,face=\"bold\"),\n                \n        plot.title = element_text(size=15,face=\"bold\"),\n                \n        strip.text = element_text(size=12,face=\"bold\"))\n> ggsave(out_varImp,plot=p,device = \"pdf\",width = 5,\n          height = 4)\nRepeat steps 6–17 for promoter analysis.\nNote: To generate a predictive model of\n      gene expression from epigenetic information at promoter regions, we\n      will resume from step 6 with the file of data observations in promoter\n      regions by running the R script LM_promoter.R. It follows the",
    "same steps shown in the R script LM_enhancer.R, being adapted\n      to read and output promoter files. We provide in our GitHub repository an\n      example of the file matrix_observations_promoter.txt for\n      promoters. Graphical results are shown in Figures 2[href=https://www.wicell.org#fig2]B\n      and 3[href=https://www.wicell.org#fig3].\n    \n        Comparing the variable importance of histone marks between enhancer and\n        promoter models.\n        \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2299-Fig3.jpg\n              Figure 3. Performance of the promoter model and its corresponding\n              random model\n            \n              Predicted expression of the test subset of genes calculated by the\n              models versus their measured expression by RNA-seq. Model\n              performances are represented by the Pearson’s correlation\n              (r) between predicted and measured expression values. Color\n              scale on the right represents the density of dots in the scatter\n              plots.\n            \nNote: Finally, we will compare the ranking\n      of variable importance between enhancer and promoter models to highlight\n      potential differences. Figure 2[href=https://www.wicell.org#fig2]."
  ],
  "subjectAreas": [
    "Cell Differentiation",
    "Genomics",
    "Stem Cells",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}