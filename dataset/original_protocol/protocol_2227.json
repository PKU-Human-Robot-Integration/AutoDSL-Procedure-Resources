{
  "id": 2345,
  "origin_website": "Cell",
  "title": "Using population-scale transcriptomic and genomic data to map 3â² UTR alternative polyadenylation quantitative trait loci",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nHerein we describe a step-by-step pipeline for analyzing APA events across multiple samples and mapping the associations between genetic variants and APA usage (3′aQTLs). We will start by preparing input data, then perform multi-samples APA quantification, covariates analysis, 3′aQTL mapping, and finally, the fine mapping of 3′aQTL. To illustrate these steps, we use the RNA-seq data from Geuvadis Project (Lappalainen et al., 2013[href=https://www.wicell.org#bib4]) and matched genotype data from the 1000 Genomes Project (1000 Genomes Project Consortium, 2015[href=https://www.wicell.org#bib11]) as an example. The dataset contains 89 samples from CEU populations.\nWe prepared a GitHub repository (https://github.com/3UTR/3aQTL-pipe[href=https://github.com/3UTR/3aQTL-pipe]) containing all the required scripts.\nPrepare required input data for Dapars2\nTiming: 6 h when using eight threads to process 89 bam files from the CEU population (the run time depends on sample size and the number of threads used)\nThe following steps prepare the required input data for analyzing APA with Dapars2 (as shown in the table below).\ntable:files/protocols_protocol_1835_1.csv\nExtract the RefSeq gene annotation and symbol from the UCSC table browser (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1835-Fig1.jpg\nFigure 1. Extract gene annotation and gene symbol of RefSeq from UCSC Table Browser\n(A) Extract gene annotation of the human genome (hg19) from the NCBI RefSeq database and output them into a BED format. Key options are highlighted in red boxes.\n(B) Extract the mapping between gene symbol and RefSeq ID. Select “selected fields from primary and related tables” instead of BED for the option “output format” and choose “name” and “name2” in the pop-up table after clicking on “get output”.\nNote: The two files generated in this step, as shown in Figure 1[href=https://www.wicell.org#fig1], are “hg19_refseq_whole_gene.bed” and hg19_refseq_id_to_symbol.txt”.",
    "Critical: This protocol takes human reference genome hg19 for the example dataset; if users choose other genome versions or genomes for other species, please replace “GRCh37/hg19” (see “assembly” in the highlighted box in Figure 1[href=https://www.wicell.org#fig1]) as their chosen genome version. One thing that needs to be noted is that the selected genome version should be consistent with the one used in RNA-seq reads alignment.\nGenerate all required input files for running Dapars2.\n> bash ./src/prepare_inputs_for_apa_quant.sh -s sample_list.txt \\\n-g hg19_refseq_whole_gene.bed \\\n-r hg19_refseq_id_to_symbol.txt\nNote: This command will generate multiple bedgraph files with names suffixed by “.wig” in the “./wig” directory, a file containing annotated 3′UTR regions named “refseq_3utr_annotation.bed”, and a file named “wigFile_and_readDepth.txt” includes the list of bedgraph files, and a configure file named “Dapars2_running_configure.txt”.\nCritical: This step may take a long time if hundreds of samples need to be processed. Users can assign a larger number for the option “-t” (which was 8 in default).\nIdentify and quantify APA events with DaPars2\nTiming: 4 h\nDepends on the size of each chromosome, the number of chromosomes, and the number of threads. This run time was estimated by analyzing 24 human chromosomes with eight threads.\nRun Dapars2 analysis on a specific chromosome.\n> python ./src/Dapars2_Multi_Sample.py Dapars2_running_configure.txt chr1\nNote: This command only analyzes chromosome 1. To complete the whole-genome analysis, repeat this command for all chromosomes by changing the second parameter accordingly. This will output the directories with the suffix “_chr1” and a file “Dapars2_result_temp.chr1.txt” which contains all estimated APA events in chromosome 1. Each row of this result file denotes one transcript, and column 1 to 5 involves transcript information and APA information. Column 6 to the last column represents the APA usage across samples.\nAlternatives: Users can also analyze multiple chromosomes automatically using the script “DaPars2_Multi_Sample_Multi_Chr.py”.",
    "Merge the Dapars2 results.\n> cat refseq_3utr_annotation.bed | cut -f 1|sort|uniq |grep -v “MT” > chrList.txt\n> Rscript ./src/merge_apa_quant_res_by_chr.R -c chrList.txt\nNote: This R script generates a file named “Dapars2_res.all_chromosomes.txt” by default.\nPrepare input data for 3′aQTL mapping\nTiming: 2 h\nThe following step prepares the required input data (as shown in the table below) for 3′aQTL mapping.\ntable:files/protocols_protocol_1835_2.csv\nExample of phenotype data. The format of the APA usage profile should also be a G × N matrix, where G denotes the number of transcripts and N is the number of individuals.\ntable:files/protocols_protocol_1835_3.csv\nExample of genotype data. The format should be a S x N matrix, where S denotes the number of SNPs and N denotes the number of individuals. The genotype was encoded as “0” or “1” or “2”.\ntable:files/protocols_protocol_1835_4.csv\nGenerate input files for 3′aQTL mapping.\n> bash ./src/prepare_inputs_for_3aQTL_mapping.sh -c known_covariates.txt\nNote: Option “-c” takes a tab-delimited covariate file (default is “NA” if not available). An example can be found at https://github.com/3UTR/3aQTL-pipe[href=https://github.com/3UTR/3aQTL-pipe]. Other arguments use default values, which can be checked with the option “-h”.\nCritical: This step creates intermediate files required for running Matrix eQTL to identify 3′aQTL. Input files include an APA quantile matrix, a genotype matrix, and a known covariate matrix. Sample ids in these three matrices need to be cross-referenced; therefore, please make sure the sample id in the three input matrices is consistent.\nIdentify common genetic variants that associated with APA usage\nTiming: 4 h for CEU population of GEUVADIS dataset (the run time depends on the number of genes processed and the number of SNPs, affected by window size)\nPerform the 3′aQTL mapping.\n> Rscript ./src/run_3aQTL_mapping.R\nNote: The cis 3′aQTLs “Cis_3aQTL_all_control_gene_exprs.txt” and trans 3′aQTLs “Trans_3aQTL_all_control_gene_exprs.txt” will be output in the directory “Matrix_eQTL/”.\nVisualize significant associations.\n> Rscript ./src/QTL_plot.R -s “chr7_128640188_A_G” -g “NM_001347928.2|IRF5|chr7|+”",
    "Note: The first parameter specifies the SNP for visualization. The second one specifies the related transcript. This command will generate a publication-ready plot named “chr7_128640188_A_G.IRF5.pdf”.\nIdentify potentially causal SNP\nTiming: 4 h for CEU population of GEUVADIS dataset, the run time depends on the significant genes detected by Matrix eQTL in step 6 and the number of threads\nFine mapping can narrow the genetic association signals to a few potential causal variants. We use our Susie (SUm of Single Effects) algorithm (Wang et al., 2020[href=https://www.wicell.org#bib9]) for fine-mapping analysis. susieR implements the Susie algorithm and requires individual-level genotype and phenotype data. The following codes generate the input data necessary for fine-mapping analysis.\nPrepare input files for fine-mapping.\n> bash ./src/prepare_inputs_for_finemapping.sh\nNote: This shell script requires “3UTR_location.txt”, genetic associations result (e.g. “Cis_3aQTL_all_control_gene_exprs.txt”) that generated in step 5 and step 6, respectively. And genotype data (“Genotype_matrix.txt”) are generated in step 5. It generates a directory for each significant transcript with two files named “3aQTL.vcf” and “expr.phen”.\nFine-mapping analysis.\nPerform fine-mapping analysis on all significant transcripts.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1835-Fig2.jpg\nFigure 2. Three independent signals identified by susieR in gene ACTR1B\nPIP: Posterior inclusion probability.\n> bash ./src/run_fine_mapping.sh -t 8\nNote: The option “-t” specifies the number of threads used for parallel analysis; the default value is 1.\nNote: SusieR will generate three files with names suffixed by “.pdf”, “.rds”, and “.txt” in each transcript directory. One plot describes the independent signals (Figure 2[href=https://www.wicell.org#fig2]), an R binary file contains the results of susieR fine mapping, and a text file lists all independent signals.\nSummarize the susieR output.\n> Rscript ./src/merge_finemap_results.R\nNote: This command will summarize the fine-mapping results of each significant transcript and generate two files with the names “susieR_res.all_genes.txt” and “susieR_res.stat.txt”, respectively."
  ],
  "subjectAreas": [
    "Genomics",
    "Bioinformatics",
    "Genetics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}