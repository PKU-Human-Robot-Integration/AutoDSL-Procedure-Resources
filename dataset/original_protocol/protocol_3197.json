{
  "id": 3386,
  "origin_website": "Cell",
  "title": "Enrichment of carcinogen-driven \"mitochondria-primed\" human skin stem cells and their identification using single-cell analyses",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nEnrichment of mitochondria primed neoplastic skin stem cells\nTiming: ∼ 45 days\nThe aim of this part is to accomplish enrichment of mitochondria primed stem cells in HACAT cell population by transforming them with low dose of the carcinogen TCDD.\nGrow HACAT skin keratinocytes to 80% confluency. Passage as indicated in the ‘before you begin[href=https://www.wicell.org#before-you-begin]’ section.\nResuspend cells in 1 mL of DMEM complete media and calculate the cell density of live cells using trypan blue vital dye and a cell counter.\nPlate 1,000 live HACAT cells in each well of a 6-well plate containing 1.5 mL of DMEM complete media.\nIncubate the cell plate in an incubator at 37°C with 5% CO2 for 2 days.\nAspirate media from each well of the 6-well plate.\nAdd 2 mL of 1 nM TCDD media into each 6 well plate, keeping 2-3 replicates.\nNote: For controls, use media with TCDD 10 nM and Toluene 10 nM (vehicle for TCDD) for reduced and no enrichment of mitochondria primed neoplastic stem cells, respectively.\nIncubate the cell plate at 37°C with 5% CO2 for 16–20 days.\nReplenish with the respective fresh media every 3–4 days to remove the dead cells.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2968-Fig1.jpg\nFigure 1. Neoplastic transformation with TCDD\n(A) Crystal violet of cells showing more area of the culture plate covered by cells after exposure to TCDD 1 nM and 10 nM in comparison to Toluene vehicle control.\n(B) Quantification of A, the error bar in the plot represents the standard deviation between multiple experimental replicates. An appropriate statistical test has to be followed in order to arrive at meaningful conclusions.",
    "Note: There will be substantial cell death during the process of neoplastic transformation with TCDD. However, the total number of cells detected is expected to be substantially higher after exposure to both 1 and 10 nM TCDD as a result of increased cell proliferation due to neoplastic transformation (Figure 1[href=https://www.wicell.org#fig1]).\nTrypsinize the population of the emergent transformed cells.\nCount the number of trypsinized cells and make a suspension of 1 cell per 200 μL. (troubleshooting[href=https://www.wicell.org#troubleshooting] problem 3[href=https://www.wicell.org#sec6.5]).\nSeed 200 μL cell suspension in each 96 well plate.\nIncubate the cell plate at 37°C with 5% CO2 for 16–20 days or until the single transformed colonies emerge in each of the 96 well.\nSelect as many colonies as required and grow them individually in a flask/plate, after naming them appropriately.\nNote: Not all the wells of 96 well plate will form colonies.\nCryopreserve the cultures obtained from individual clones separately.\nNote: Successful transformation can be checked by the standard techniques of in vitro colony formation assay and in vivo xenograft assay.1[href=https://www.wicell.org#bib1]\nQuantify the abundance of neoplastic stem cells using a tumorsphere assay with Extreme Limiting Dilution Analysis statistics, as described in our previously published step by step protocol.2[href=https://www.wicell.org#bib2]\nEnrichment of neoplastic stem cells in the TF1 population can be confirmed by comparing the quantified abundance of stem cells (frequency) obtained in step 15 between clones transformed with 1 nM TCDD (TF1) or 10 nM TCDD (TF10) and the Parental population.\nTo confirm the unique mitochondrial structure related to mitochondrial priming in the TF1 population, perform the single cell mitochondrial structural analyses (described in our previously published step by step mito-SinCe2[href=https://www.wicell.org#bib2] protocol4[href=https://www.wicell.org#bib4]) on Mitotracker green stained cells (described in our previously published step by step protocol5[href=https://www.wicell.org#bib5]).",
    "Note: From this step onwards TF1 population will be considered as the mpSC enriched population, while the TF10 and P populations will be considered as neoplastic and parental non-neoplastic controls, respectively.\nCritical: For any experimental manipulation with Parental or TF1 and TF10 HACAT cells, allow 2 days after seeding on the appropriate culture surface for cells to achieve their healthy cell morphology. Failing to do this may introduce cell stress induced irreproducibility in the results.\nIdentification of neoplastic stem cells using single cell transcriptomic analyses\nTiming: ∼ 8 days or more\nThe aim of this part is to accomplish identification of distinct stem cell clusters (and others) within the population of TF1 (mpSC enriched), P (parental non-neoplastic control) and TF10 (neoplastic control) HACAT cells. This step is achieved by single cell RNA-seq approach.\nGrow and process the TF1 (mpSC enriched), P (parental non-neoplastic control) and TF10 (neoplastic control) HACAT cells for performing scRNASeq on a 10× genomics platform (in house or core/outsourced facilities) as required.\nRefer to original paper1[href=https://www.wicell.org#bib1] for basic details of generation and use of the scRNASeq data.\nObtain the FASTQ files to process through the following analytical pipeline.\nGenerate count matrix objects using Cell Ranger.\nNote: This step performs alignment, filtering, barcode counting, and Unique Molecular Identified (UMI) counting. Quantitative measurements of the gene expression levels for individual cells are obtained in the form of count matrix for each sample.\nInput Files: FASTQ files for TF1, P, TF10 samples.\nNote: Make sure that the FASTQ files are saved in the respective input path.\nPATH:\n/home/scrna_seq/cellranger/create_count_files/in/fastq_files\nOutput Files: Three files- barcodes.tsv, features.tsv and matrix.mtx for each sample in\ndirectories named TF1, P and TF10 (zipped format)\nPATH:\n/home/scrna_seq/cellranger/cell_ranger_count/out/TF1/Filtered_features_by_bc_matrix/\n/home/scrna_seq/cellranger/cell_ranger_count/out/P/Filtered_features_by_bc_matrix/\n/home/scrna_seq/cellranger/cell_ranger_count/out/TF10/Filtered_features_by_bc_matrix/",
    "To obtain the count matrix for each sample, run `cellranger_count` function using the code in the box on the input files.\nfor i in 'ls /home/username/scrna_seq/cell_ranger_count/in/fastq_files/∗_L001_I1_001.fastq.gz'\ndo\nfilename='basename $i'\n#echo $filename\nsamplename='echo $filename | cut -d_ -f 1'\n#echo $samplename\nqsub -V -cwd -o $samplename.log -b y -j y -pe smp 8 \"cellranger count --id=$samplename --/home/username/scrna_seq/cellranger/refdata-gex-GRCh38-2020-A --fastqs=/home/scrna_seq/cell_ranger_count/in/H2G7JBGXH --sample=$samplename --localcores=8 --localmem=32\"\ndone\nNote: It takes 1–2 h of wall time as a function of memory for a 20k cells high-throughput dataset run by allocating more than the minimum of 64GB memory to the pipeline.\nPull up ‘filtered_feature_by_bc_matrix’ directory from the ‘out’ folder and compress the ‘outs’ folder of each sample using the code in the box on the files generated in the previous step.\nfor i in 'find . -maxdepth 1 -mindepth 1 -type d'\ndo\n  bn='basename $i'\n  rm -rf $i/_∗\n  rm -rf $i/$i.mri.tgz\n  rm -rf $i/SC_RNA_COUNTER_CS\n  #if [ ! -e /home/username/scrna_seq/cellranger/cell_ranger_count/$bn ]; then\n  #  ln -sr $i/outs/filtered_feature_bc_matrix /home/username/scrna_seq/cellranger/cell_ranger_count//$bn\n  #fi\n  cp -vr $i/outs/filtered_feature_bc_matrix $i/\n  tar -cv $i/outs/∗ | xz -T0 >$i/$i.outs.xz\ndone\nSet up unprocessed Seurat objects.\nNote: This step creates a representation of single-cell expression data for R\nInput Files: Compressed count matrix objects for each sample- TF1, P and TF10 as generated from previous step.\nPATH:\n/home/scrna_seq/cellranger/cell_ranger_count/out/TF1/outs.gz\n/home/scrna_seq/cellranger/cell_ranger_count/out/P/outs.gz\n/home/scrna_seq/cellranger/cell_ranger_count/out/TF10/outs.gz\nOutput Files: Individual Seurat objects- TF1, P and TF10 (rds format)\nPATH:\n/home/scrna_seq/Seurat/Create_individual_SeuratObject/out/TF1.rds\n/home/scrna_seq/Seurat/Create_individual_SeuratObject/out/P.rds\n/home/scrna_seq/Seurat/Create_individual_SeuratObject/out/TF10.rds\nTo create the individual Seurat objects run the following set of codes from the box on the input files.\nlibrary(Seurat)\nfiles <- list.dirs(\"/home/username/scrna_seq/cellranger/cell_ranger_count/out/\", recursive = FALSE)\ndata <- list()\nfor ( i in 1:length(files)){d <- Read10X(files[[i]])\ndata[[i]] <- CreateSeuratObject(counts = d, project = \"scrna_seq\", min.cells = 3, min.features = 200)}\nnames(data) <- basename(files)\nPre-Process the objects.",
    "Note: This step transforms raw data into a format that is suitable for downstream analysis, such as clustering, dimensionality reduction, and differential gene expression analysis.\nInput Files: Individual Seurat objects- TF1, P and TF10 generated from the previous step (rds format)\nPATH:\n/home/scrna_seq/Seurat/Create_individual_SeuratObject/out/\nOutput Files: Processed individual Seurat objects- TF1, P and TF10 (rds format)\nPATH:\n/home/scrna_seq/Seurat/Create_individual_SeuratObject/out/TF1.rds\n/home/scrna_seq/Seurat/Create_individual_SeuratObject/out/P.rds\n/home/scrna_seq/Seurat/Create_individual_SeuratObject/out/TF10.rds\nTo perform standard preprocessing, run the following set of codes from the box on the input files.\n# Filter datasets based on nFeature_RNA\nclean_data <- list()\nfor (i in 1:length(data)) {clean_data[[i]] <- subset(data[[i]], subset= nFeature_RNA > 2000 )\n#clean_data[[i]] <- data[[i]] }\n# Normalize data\nfor (i in 1:length(clean_data)) {clean_data[[i]] <- NormalizeData(clean_data[[i]],verbose = F)\n# Detection of Highly Variable Features\nclean_data[[i]] <- FindVariableFeatures(clean_data[[i]], selection.method = \"vst\", nfeatures = 2000,verbose = F)}\nnames(clean_data) <- basename(files)\n#Save individual Seurat Object as ‘rds’\nfor (i in 1:length(clean_data)) {\n  name <- names(clean_data)[i]\n    outfile <- outfile_name( paste0(name,\".rds\"))\n      saveRDS(clean_data[[i]], file =\npaste0(\"/home/username/scrna_seq/Seurat/Create_individual_Seurat/out/\",\noutfile), compress = \"xz\")}\nCritical: QC metrics can be customized based on user defined criteria, one of which is based on higher percentage coverage of mt-DNA reads in dying cells. Here, refrain from using this filter to avoid exclusion of detecting mt-DNA gene expression. Instead, use ‘nFeature_RNA’ function to filter the cells with unique feature counts over 2000. Importantly, confirm that the chosen filtering method excludes cells with >10% of mt-DNA gene expression (indicating dead cells) by using the following code in the box.\nfor (i in 1:length(data)) {data[[i]][[\"percent.mt\"]] <- PercentageFeatureSet(data[[i]], pattern=\"ˆMT-\")}\nVlnPlot(data[[1]], features = c(\"nFeature_RNA\",\"nCount_RNA\", \"percent.mt\"))\n#Repeat the step highlighted in red for each dataset (saved as compressed count file)\nDimensionality reduction and Clustering using integrated Seurat Object.\nNote: This step compresses the data to low-dimensional space to form biologically meaningful cell clusters based on the similarity of their gene expression.",
    "Input Files: Processed Seurat objects- TF1, P and TF10 from previous output (rds format).\nPATH:\n/home/scrna_seq/Seurat/Create_individual_SeuratObject/out/\nOutput Files: Integrated Seurat object for TF1, P and TF10 (rds format)\nPATH:\n/home/scrna_seq/Seurat/integrate_Seurat/out/integrate_seurat_TF1_P_TF10.rds\nTo perform dimensionality reduction, clustering upon integrated Seurat object, run the following set of codes from the box using the input file:\n# Set options for output file and caching\nknitr::opts_chunk$set(echo = TRUE)\nknitr::opts_chunk$set(cache = TRUE)\nVERSION <- 20210204 (can be changed as per user’s choice)\n# Function to create output file names with version number\noutfile_name <- function (filename) {\n  return (paste(VERSION,filename, sep = \"-\"))}\n# Function to save objects in xz format\nsaveRDS.xz <- function(object,file) {con <- pipe(paste0(\"xz -T0>\",file),\"wb\")\n  saveRDS(object, file = con)\n  close(con)}\n#Setup for output file\nknitr::opts_chunk$set(echo = TRUE)\nknitr::opts_chunk$set(cache = TRUE)\nVERSION <- 20210204\noutfile_name <- function (filename) {\nreturn (paste(VERSION,filename, sep = \"-\"))}\nsaveRDS.xz <- function(object,file) {\ncon <- pipe(paste0(\"xz -T0>\",file),\"wb\")\nsaveRDS(object, file = con)\nclose(con)}\nEVAL <- 1\nlibrary(Seurat)\nfiles <- list.files(\"./in\", full.names = T)\nnames <- basename(files)\nnames <- gsub(\"ˆ∖∖d+-\", \"\", x = names)\nnames <- gsub(\".rds\", \"\", x = names)\ndata <- list()\n#Loop function for reading the input files\nfor (i in 1:length(files)) {data[[i]] <- readRDS(files[[i]])}\nnames(data) <- names\nfor (i in 1:length(files)) {data[[i]][[\"sample\"]] <- names[[i]]}\nnames(data) <- names\nlibrary(future)\nplan(\"multiprocess\", workers= 16)\nlibrary(ggplot2)\n#Integration of processed individual Seurat Objects\nanchors <- FindIntegrationAnchors(object.list = data, dims = 1:20)\nintegrated <- IntegrateData(anchorset = anchors, dims=1:20)\nintegrated <- ScaleData(integrated, verbose = F)\n#Dimensionality Reduction\nintegrated <- RunPCA(integrated, npcs=20, verbose = F)\nintegrated <- RunUMAP(integrated, reduction = \"pca\", dims=1:20)\noutfile_name(paste0(\"integrated_seurat_TF1_P_TF10_\", i, \".Rds\")))\np <- DimPlot(integrated, reduction = \"umap\", split.by = \"sample\", label = TRUE)\nintegrated <- FindNeighbors(integrated, reduction = \"pca\", dims = 1:20)\n#Clustering\nintegrated <- FindClusters(integrated, resolution = 0.2)\nres <- c(0.1, 0.2, 0.3)",
    "for (i in res) { integrated_tmp <- FindClusters(integrated, resolution = i, verbose = F)\np <- DimPlot(integrated_tmp, reduction = \"umap\", split.by = \"sample\", label = T)\nggsave(outfile_name(paste0(\"combined_plot_relevel_\", i, \".pdf\")), plot = p, width = 11, height = 8.5)\n#Save the integrated Seurat Objects\nsaveRDS.xz(integrated_tmp, file =\nNote: In our analysis, resolution of 0.2 separated out stem cell markers in a well-defined separate cluster. If needed, resolution can be increased to identify the stem cell cluster, maximally to 0.5.\nMarker Identification for differentially expressed genes (troubleshooting[href=https://www.wicell.org#troubleshooting] problem 5[href=https://www.wicell.org#sec6.9]).\nNote: This step identifies positive and negative markers for each cluster defined by differential gene expression, compared to all other cells.\nInput Files: Integrated objects from the previous output (rds format)\nPATH:\n/home/scrna_seq/Seurat/integrate_Seurat/out/integrate_seurat_TF1_P_TF10.rds\nOutput Files: Single table of differentially expressed genes (tsv format)\nPATH:\n/home/scrna_seq/Seurat/FindAllMarkers/out/all_markers_0.2.tsv\nTo perform FindAllMarkers analysis, run the following set of code from the box on the input files.\n#FindAllMarkers\noutput_file_markers <- outfile_name(paste0(\"integrated_seurat_TF1_P_TF10_\", i, \".Rds\"))\nall_markers <- FindAllMarkers(integrated_data, return.thresh = 0.02, verbose = FALSE)\nwrite.table(all_markers, file = outfile_name(paste0(\"all_markers_TF1_P_TF10\", i, \".tsv\")), quote = FALSE, sep = \"∖t\", row.names = FALSE, col.names = TRUE)\nIdentifying the stem cell cluster identity type.\nNote: A tailored manual in-house method for cell type identity for clusters was developed as detailed below. This step identifies specific cell type identities for cell clusters.\nInput Files: all_markers (tsv format) from FindAllMarker output.\nOutput Files: Cell identity assigned to each cluster.\nFollow these steps to identify the cell type identity for each cluster.\nObtain the output of FindAllMarkers in a .tsv format.\nImport the file in excel.\nFilter out data for each cluster.\nSort the data in descending order of avg_logFC.\nCheck the functionality for topmost candidate genes. This gene set marks the cluster as ‘cell type high status.’",
    "Likewise, check the functionality for bottommost candidate genes. This gene set marks the cluster as ‘cell type low status.’\nThe screenshots show filtered data for cluster 1 arranged in descending and ascending order with their cluster identity as stem-cellhigh status and cell-cyclelow status based on functionality of topmost and bottommost genes respectively (Figure 2[href=https://www.wicell.org#fig2]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2968-Fig2.jpg\nFigure 2. Screenshot for identifying the stem cell cluster identity type\n(A) Output of FindAllMarker function from Seurat Package in descending order of average log fold change (avg_logFC) to identify lineage specific functional stem cell markers in specific cluster (boxed in red).\n(B) Output of FindAllMarker function from Seurat Package in descending order of average log fold change (avg_logFC) to identify general cell cycle markers specific cluster (boxed in red).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2968-Fig3.jpg\nFigure 3. Data visualizations for quantifying stem cell clusters\n(A) Pie chart of the percentage distribution of the scRNASeq derived clusters for TF1, P and TF10 populations with color codes.\n(B) Violin plot depicting expression of stem cell marker KRT15 for the scRNASeq derived clusters identified in (A).\n(C) Feature plot of KRT15 based on UMAP projection on the populations- TF1, P and TF10.\n(D) Heat map of significant marker genes for the color-coded scRNASeq derived clusters as obtained in (A).\nQuantifying stem cell clusters.\nNote: Quantification of stem cell clusters can be done by visualization of cell clusters, pie charts, violin, and feature plots and heatmap as detailed in this section (Figure 3[href=https://www.wicell.org#fig3]).\nCell Clusters and pie charts.\nNote: This step identifies any differences in the distribution of cell clusters across samples and provides insights into the heterogeneity and composition of cell populations within each sample.\nInput Files: Integrated Seurat object file (rds format)\nPATH:\n/home/scrna_seq/Seurat/integrate_Seurat/out/integrate_seurat_TF1_P_TF10.rds\nOutput Files: Pie chart (pdf format)\nPATH:\n/home/scrna_seq/Seurat/out/piechart/",
    "To generate cell clusters and pie charts, run the following set of code from the box using the input files:\n#Cell Clusters\n  seurat <-readRDS(\"/home/username/scrna_seq/Seurat/integrate_Seurat/out/integrate_seurat\n_TF1_P_TF10.Rds\")\np <- DimPlot(seurat, reduction = \"umap\", split.by = \"sample\", label = TRUE)\nggsave(outfile_name(\"combined_plot.pdf\"), plot = p, width = 11, height = 8.5)\n# PieCharts\n# Create count table (value for ‘integrated_snn_res’ will be same as the set resolution)\nlibrary(dplyr)\ndata <- seurat\nmetadata <- data@meta.data\ncounts <- metadata %>%\n  group_by(sample, integrated_snn_res.0.2) %>%\n  summarise(count = n())\ncounts\n#Generate Pie Chart\nlibrary(cowplot)library(scales) library(ggplot2)\n#Replace the sample names TF1, P and TF1 with the desired sample names as per your choice\nsamples <- c (\"TF1\", \"P\", \"TF10\")\nmy_color <- hue_pal()(length(levels(\n      as.factor(counts$integrated_snn_res.0.2)\n    )) + 1)\nplots <- list()\nfor (i in samples) {\n  d <- counts %>% filter (sample == i)\n  plots[[i]]<-ggplot(d, aes(x=\"\", y=count, fill=integrated_snn_res.0.2)) +\n    geom_bar(stat=\"identity\", width=1, color=\"white\") +\n    coord_polar(\"y\", start=0) + theme_void() + ggtitle(i) + labs(fill=\n\"Cluster\") + scale_fill_manual(values = my_color)\n}\ncombined_plot <- plot_grid(plotlist = plots,nrow = 1)\ncombined_plot\nsave_plot(paste0(\"out/piechart/\", outfile_name(\"pie_chart.pdf\")), plot =\ncombined_plot, base_width = 6.6)\nViolin and Feature Plots.\nNote: This step compacts visual summary of the distribution of gene expression, including the shape of the distribution and any outliers through violin plots. Also, visualization of the differentially expressed genes between different conditions or treatments through feature plots.\nInput Files: Integrated Seurat object file (rds format).\nPATH: /home/scrna_seq/Seurat/integrate_Seurat/out/integrate_seurat_TF1_P_TF10.rds.\nOutput Files: Feature plots and violin plots for a geneset (pdf format).\nPATH:\n/home/scrna_seq/out/vlnplot/\n/home/scrna_seq/out/featureplot/\nTo generate violin and feature plots, run the following set of code from the box using the input files.\n#Violin Plot and Feature Plot Generation\nmkdir /home/username/scrna_seq/Seurat/out/vlnplot/\n/home/username/scrna_seq//Seurat/out/featureplot/\nseurat <-\nreadRDS(\"/home/username/scrna_seq/Seurat/integrate_Seurat/out/integrate_seurat_TF1_P_TF10.Rds\")\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\nlibrary(Seurat)\n# Replace the ‘gene1’, ‘gene2’ with genenames of interest\ngene_list <- c(\"gene1\",\"gene2\")\ndata <- seurat\nDefaultAssay(data) <- \"RNA\"\nplot_list <- list()",
    "for (i in gene_list) {plot_list[[i]] <- FeaturePlot(data, features = i, split.by = \"sample\", cols = c(\"grey\",\"blue\"))}\nvplot_list <- list()\ndata$clusternum <- Idents(data)\nfor (i in gene_list) {vplot_list[[i]] <- VlnPlot(data, features = i, split.by = \"sample\", group.by = \"clusternum\", pt.size = 0, combine = FALSE)}\nfor (i in gene_list) {\nggsave(paste0(\"/home/username/scrna_seq/Seurat/out/featureplot/\",\"map_\", i, \"0.2_raw.pdf\"), plot = plot_list[[i]], width = 11, height = 8.5)\npdf(paste0(\"/home/username/scrna_seq/Seurat/out/vlnplot/\",\"vin\", i,\n\"_0.2_raw.pdf\"), width = 11, height = 8.5)\nprint(vplot_list[[i]])\ndev.off()}\nHeatMap.\nNote: This step identifies patterns of gene expression that are associated with different cell states or functions.\nInput Files: Integrated Seurat object file (rds format).\nPATH:\n/home/scrna_seq/Seurat/integrate_Seurat/out/integrate_seurat_TF1_P_TF10.rds\nOutput Files: Heatmap with a dynamically generated file name (pdf format).\nPATH:\n/home/scrna_seq/Seurat/heatmap/out/\nTo create a heatmap, run the following set of code from the box using the input files:\n# Heatmap Generation\nlibrary(future)\nplan(\"multicore\", workers= 16)\noptions(future.globals.maxSize = 2000 ∗ 1024ˆ2)\nmarkers <- FindAllMarkers(seurat, logfc.threshold = 0.1, return.thresh = 0.05)\nmarkers <-\nread.table(\"/home/username/scrna_seq/Seurat/FindAllMarkers/out/all_markers_0.2.tsv\",header = T)\nselected_markers <- markers[ abs(markers$avg_log2FC) > 0.5, ]\nlibrary(ggplot2)\nset.seed(1235)\nseurat_small <- subset(seurat, downsample = 500)\nhm <- DoHeatmap(seurat_small, features = unique(as.character(selected_markers$gene)))\nhm <- hm + theme(text = element_text(size = 10))\nhm <- hm + theme(axis.text.y = element_text(size = 4))\nggsave(file.path(\"out\", outfile_name(\"heatmap_all_markers.pdf\")), hm, height = 10, width = 7.5)\nNote: Using altered codes, heatmaps can be generated for specific cluster sets with select p value. The Seurat object and selected markers should be defined before running this procedure.\nIdentification of mitochondria primed neoplastic skin stem cells using single-cell microscopy\nTiming: 6–7 h\nThe aim of this part is to accomplish identification of Krt15hiSox2hi cells within the population of TF1 (mpSC enriched), P (parental non-neoplastic control) and TF10 (neoplastic control) HACAT cells. This step is achieved using single cell microscopy analyses of co-immunostained cells.\nImmunofluorescence/Immunocytochemistry",
    "Note: All the experimental procedures are done on the sub confluent culture of cells to ensure cytosolic areas do not overlap (but may touch each other). The steps described below should be followed to obtain the optimal dilution of individual antibodies that should be subsequently used for co-immunostaining. An 8-well Nunc Labtek chamber (or equivalent, see KRT) slide requires a minimum of 100 μL of any solution to cover the entire surface, while more than 300 μL is not necessary. All the incubations and washing are done by gently rocking the chamber slide on a rocker.\nPrepare the culture flasks for TF-1 (mpSC enriched), P (parental non-neoplastic control) and TF-10 (neoplastic control) HACAT cells.\nPrepare to perform 3 co-immunostaining combinations for each group of cells (TF-1/P/TF-10) as per Table for Antibody Combination mentioned in Step 14 of the before you begin[href=https://www.wicell.org#before-you-begin] section.\nLabel one 8 well Nunc Labtek chamber slide for each co-immunostaining combination (see Table for Antibody Combination in Step 14 of the before you begin[href=https://www.wicell.org#before-you-begin] section). For each chamber, label 3–4 wells for co-immunostaining with one combination of antibodies, one well for individual staining with each antibody, one well for secondary antibody control (without primary antibody) and one well for autofluorescence control.\nNote: Keeping appropriate controls may help in effective troubleshooting along the way. The individually stained samples are for optimization and thus does not need to be repeated with every experiment that uses the same samples, antibodies, and image settings.\nSeed around 8k to 10k cells in each well of 8 well Nunc Labtek chamber slide.\nAllow cells to grow and attain their healthy cell morphology for at least 2 days.",
    "Critical: It is essential to ensure that the number of cells maintained in each well is comparable (same ballpark) to avoid any inconsistencies of staining intensity that may result from stoichiometric differences in antigen-antibody interactions. This can be objectively estimated after 2 days of seeding by counting the number of cells in 5–6 representative field of views from each well using standard bright-field or transmitted light tissue culture microscope before processing further. In situations where cells of different proliferation rate are being considered, a smaller number of cells should be seeded for the cell population with higher proliferation rate to achieve the similar cell number after 2 days of seeding between all samples of interest.\nFix cells in freshly prepared pre-heated fixing solution supplemented with (4%, w/v) sucrose for 15 min at 37°C.\nNote: Preheating should be done at 37°C for no more than 5–10 min.\nCritical: Adding sucrose to the fixing solution and pre-heating it to 37°C helps in maintaining mitochondrial morphology.\nWash cells with 1×-PBS thrice for 5 min each. (troubleshooting[href=https://www.wicell.org#troubleshooting] problem 6[href=https://www.wicell.org#sec6.11]).\nPermeabilize cells in freshly prepared Triton X-100 (0.1%) for 15 min at 37°C.\nWash cells with 1×-PBS thrice for 5 min each.\nBlock cells by incubating them in freshly prepared blocking solution for at least 1 h at 37°C.\nPause point: At this point protocol can be paused and blocking can be done for 12–14 h at 4°C\nIncubate cells in appropriate primary antibody solution for 1–2 h (or as optimized) at 37°C.\nPause point: At this point, the protocol can be paused, and primary antibody incubation can be done for 16–24 h at 4°C.\nWash cells with 1×-PBS thrice for 5 min each.\nIncubate in appropriate secondary antibody solution for 1 h at 37°C.",
    "Critical: The choice of primary and secondary antibodies should be made carefully to avoid cross-reactivity between the antibodies and spectra overlapping of the fluorophores conjugated to the secondary antibody. All dilutions, incubation times, and blocking solution can vary from antibody to antibody and thus should be optimized for any other primary and secondary antibody employing necessary controls.\nWash cells with 1×-PBS thrice for 5 min each.\nRemove the chamber wells using the tool provided in the box of the chamber by following the manufacturer’s instructions.\nPut 2 to 3 drops of mounting medium on the slide and cover the slide using a coverslip.\nCritical: Ensure all the wells are properly covered by a coverslip, if not the cells on the slide might dry.\nAllow it to dry and seal the edges of the coverslip using transparent nail polish.\nAllow the nail polish to dry.\nPause point: At this point protocol can be paused and the final slide can be kept at 4°C for some days to a couple of months.\nConfocal Microscopy.\nNote: Confocal microscopy was performed on a laser scanning confocal microscope, Zeiss LSM700 microscope equipped with 40× Plan apochromat 1.4NA/Oil objective and 405 nm, 488 nm, 555 nm, and 639 nm lasers, PMT detectors with appropriate emission filters. Any other confocal microscope with the corresponding software for image acquisition can be used while maintaining the parameters described below.\nSwitch on the microscope at least 15 min before image acquisition to allow the system to stabilize.\nPrepare to perform confocal microscopy on 3 slides with 3 co-immunostaining combinations in each group of cells. (see Table for Antibody Combination in Step 14 of the before you begin[href=https://www.wicell.org#before-you-begin] section).\nPause point: Pauses can be allowed after scanning of each slide",
    "Design image acquisition parameters for 8-bit images of 512 × 512 pixel density, an optical zoom of 0.5 with 1 airy unit pinhole and about 1 μm Z interval with the total number of slices covering the cells from top to the bottom (∼10–15 μm).\nDesign 3-channel image acquisition with appropriate lasers and filters to excite the DNA dye and the two secondary antibody fluorophore conjugates for detecting the molecule of interest(s).\nThe laser intensity and detectors should be adjusted such that minimal or no signal is obtained from the autofluorescence and the secondary only control samples, and detectable signal from all the cells that is expected to vary between cells.\nAdjust offset parameters for each channel to set the baseline for signal intensity.\nEnsure minimal cross-talk and cross-excitations between channels.\nUse the optimized parameters to acquire 3D images (Z-stacks) from 5 to 10 different fields of view of the immunostained cells to include at least 600–700 cells for analysis from each experimental and control group.\nSave these acquired Z-stacked images to be used for image analysis. (troubleshooting[href=https://www.wicell.org#troubleshooting] problem 7[href=https://www.wicell.org#sec6.13] & 8[href=https://www.wicell.org#sec6.15]).\nCritical: Ensure to label each image appropriately to be able to track the source of the signal, given the same fluorophore combinations are being used for all the three co-immunostaining combinations.\nImage processing and statistical analyses.",
    "Note: Image processing and analysis of relative protein abundance and localization were performed using proprietary Zen Black and Zen Blue software and Microsoft Excel. It can also be performed using available open-source image analyses or statistical software and packages like IMAGE-J, MATLAB, R etc. and can also be automated, while maintaining the basic steps described below. The individually stained samples are for optimization and thus do not need to be repeated with every experiment that uses the same samples, antibodies, and image settings.\nPrepare to analyze 3 co-immunostaining combinations for each TF-1, P and TF-10 group, where either the cytosolic or nuclear signal must be quantified for each molecule of interest (see Table for Antibody Combination in Step 14 in before you begin[href=https://www.wicell.org#before-you-begin] section).\nMake an image subset from each of the acquired Z stack images to include 3 consecutive optical slices providing maximum coverage of the cells.\nObtain a maximum intensity projection (MIP) image of the Z subset.\nIn each MIP image, draw ROIs around single cells using a free-hand tool.\nFor each cell, draw one ROI to demarcate the nucleus based on DNA stain and one ROI to demarcate the cytosolic region (without nucleus) based on the immunostain of the cytosolic molecule of interest.\nNote: If necessary, the image intensity can be adjusted appropriately to reveal the very weak signal in cells.\nDraw a rectangular ROI anywhere between cells where there is a dark background to obtain background signals from different channels.\nObtain the mean fluorescent intensity (MFI) from each channel of each ROI, including the background ROI.\nSee example, cited (Figure 4[href=https://www.wicell.org#fig4]) for Krt-15 and Sox-2.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2968-Fig4.jpg\nFigure 4. Single cell immunofluorescence analyses of stem cell markers",
    "(A) Representative maximum intensity projections of a field of view HACAT cells co-immunostained for Krt15 and Sox2; analyses are exemplified by 4 randomly chosen cells are marked with color coded ROIs (turquoise: cytosolic without nucleus and nucleus: pink); scale bar is 20 μm.\n(B) MFI of various channels from color coded ROIs calculated from Zen-blue software. (Channel-1 Krt-15; Channel-2 Sox-2, Channel-3 Bright Field Channel-4 Hoechst/Nucleus).\n(C) Example table showing background corrected MFI along with tables used to calculate MAD values as described in the protocol.\n(D) Graph for identification of Krt-15hiSox-2hi cells generated based on calculations of only 4 randomly chosen cells along with thresholding values plotted for quadrant division (actual statistics will be obtained with analyses of all the cells from all the micrographs acquired for any co-immunostaining experiment).\nTo obtain background-corrected mean fluorescent intensity for a single channel, subtract the mean intensity of the background for that particular channel from the mean intensity from the region of interest (ROI).\nConfirm that the mean and SD of the signal intensity of individually stained samples are comparable to that in the co-stained sample.\nGenerate a scatter plot with the background corrected MFIs of marker signal in channel(s) 1 and 2.\nDecide the groups for comparative analyses for performing statistical calculations described below. The comparative groups must be considered as a single population.\nTo obtain the signal thresholding value for identifying the marker defined cell group of interest (ex: Krt15hi/Sox2hi), use the Median Absolute Deviation (MAD) value of each relevant marker channel.\nNote: MAD is the median of the absolute difference of individual value from the population median\nMAD can be calculated using the following steps.\nCalculate the median of the population for both markers of interest from background corrected mean intensity.",
    "Get the absolute difference from the median of each ROI of both the marker signals by subtracting each value from the respective population median.\nTake the median of this absolute difference for the entire population of each signal separately to get MAD values for the respective marker.\nCritical: Groups to be compared must be considered as a single population to be able to obtain and apply the same thresholding values to the scatter plot for each analytical group in comparison.\nThreshold the signal from both markers using the formulae = [Median] + 1.5× [MAD]. Based on the values, marking both axes to get the 4 quadrants in the graph.\nPerform the Chi-square analysis to obtain the p values for the distribution of the cells in the 4 quadrants using the following steps:\nOrganize data in a contingency table for the variables of interest by listing all the levels of one variable as rows and correspondingly all the levels of other variables as columns.\nCreate a table with the observed frequencies for each combination of variables.\nCalculate the expected frequencies for each cell in the contingency table using the formula: expected frequency = (row total × column total) / grand total.\nCalculate the chi-square statistic using the formula: chi-square = SUM (observed frequency - expected frequency)2/ expected frequency) to get the p-value for the chi-square test."
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Bioinformatics",
    "Metabolism",
    "Microscopy",
    "Cancer",
    "Cell Biology"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology",
    "Bioengineering & Technology"
  ]
}