{
  "id": 3469,
  "origin_website": "Cell",
  "title": "Protocol for generation of a time-resolved cellular interactome during tissue remodeling in adult mice",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nTissue digestion of skeletal muscle\nTiming: 2 h\nIn this step, skeletal muscle, specifically the TA, is enzymatically dissociated to yield a cell suspension for FACS.\nCollect TA and prepare for enzymatic digestion.\nEuthanize mice and collect their TAs in cold PBS in a petri dish placed on ice. Remove the fascia on the surface of the TA.\nNote: The TA tendon is the most lateral and anterior of the three distinctly visible tendons above the ankle. A small gauge syringe needle can be used to separate the TA tendon from the others and slide scissors underneath for an incision. Gently lifting the TA after having removed the fascia and only cutting the TA tendon allows for the muscle to be easily lifted from the leg.\nGently cut the muscle into 2 mm pieces with surgical forceps in the petri dish placed on ice.\nDigest the tissue with the collagenase type II mix.\nActivate the collagenase type II solution by adding 250 mM CaCl2 (see materials and equipment[href=https://www.wicell.org#materials-and-equipment]). For every 1 mL of enzymatic solution, add 10 μL of aqueous CaCl2 and resuspend.\nAdd 200 μL of the mix to each TA and transfer the sample to a 15 mL centrifuge tube. For each time point we pooled an X number of TAs as explained at the end of this section, therefore we prepared 200 μL of solution × the number of TAs.\nIncubate the tissue lysate at 37°C for 30 min while gently rotating using a tube rotator at 20 RPM.\nTo quench the enzymatic reaction, top up the sample to 15 mL with pre-chilled PBS and vortex.\nCentrifuge the sample at 360 g for 5 min at 4°C and decant the supernatant.\nRepeat d.-e. once.",
    "Digest the tissue with the collagenase D/dispase II mix.\nActivate the collagenase D/dispase II solution by adding 250 mM CaCl2. For every 1 mL of enzyme solution, add 10 μL of aqueous CaCl2 and resuspend.\nAdd 1 mL of the mix to each TA and mix well, as done in the point 2b.\nIncubate the tissue lysate at 37°C for 1 h while gently rotating using a tube rotator at 20 RPM. Gently vortex the samples every 15 min.\nTo quench the enzymatic reaction, top up the sample to 15 mL with pre-chilled PBS and mix by inverting the tube 2–3 times.\nFilter and wash the tissue lysate.\nPass the lysate through a 70 μm cell strainer into a 50 mL centrifuge tube.\nRepeat a. with a 40 μm cell strainer and top up the filtrate to 40 mL with cold PBS.\nLyse red blood cells (RBC) in the tissue lysate with ammonium-chloride-potassium (ACK) lysis buffer.\nCentrifuge the sample at 360 g for 5 min at 4°C.\nDecant the supernatant and lyse RBCs with 1 mL of ACK at 4°C for 1 min, followed by adding 40 mL of FACS buffer to quench the reaction.\nCentrifuge the sample at 360 g for 5 min at 4°C, remove the supernatant, and resuspend in the antibody mix as explained in the next section.",
    "Critical: According to the time point of injury, TAs were pooled from multiple animals to purify enough cells for sequencing (from 50K to 500K cells/sample). In our study,1[href=https://www.wicell.org#bib1] we had collected 16 TAs to purify cells from steady state and 14 days after injury, thereby the final volume of enzymatic buffer used was 3.2 mL. However, 6–10 TAs were sufficient for all other time points, thus we applied a volumes of enzymatic buffer of 1.2–2 mL. It is important to collect and cut the tissue within 5 minutes after euthanization to obtain good cell viability during cell purification.\nPurification of distinct cell types from skeletal muscle\nTiming: 4 h\nIn this step, the cell suspensions obtained from skeletal muscle digestions were stained with two panels of antibodies, one for the PDGFRa-eGFP and the other for the NG2-DsRed mouse reporter system. Stained samples were passed through a FACS machine where populations of interest were identified and purified.\nSample staining with antibody cocktails.\nIncubate the cell suspension at 4°C for 25–30 min in antibody mixture protected from light.\nFor each TA, add 200 μL of antibody mixture. Thus, as done in the previous section with the enzymatic buffer for the tissue digestion, calculate the antibody mixture as 200 μL × the number of TAs collected for the time point of interest.\nFor samples derived from PDGFRa-eGFP mice, first stain the cells with biotinylated anti-VCAM1, APC anti-CD31, Alexa700 anti-CD45, and Alexa750 anti-ITGA7, followed by another round of staining with streptavidin-PE.\nFor samples derived from NG2-DsRed mice, stain the cells with FITC anti-CD31, APC anti-CD45, and PE-Cy7 anti-SCA1.",
    "After the incubation, wash samples twice with an equal volume of FACS buffer as the antibody mix, spinning at 350 g for 5 min at 4°C and decanting the supernatant after each wash. Repeat the incubation steps from a. if staining with a secondary antibody mixture is required.\nReconstitute cells with 500 μL of FACS buffer containing Hoechst 33342 (4 μM).\nCell sorting with a FACS machine.\nFilter the cell suspension through a 35 μm cell strainer into a 5-mL round-bottom FACS tube.\nInsert the sample in a FACS machine and start acquiring events.\nGate cells based on their forward and side scatter and identify live cells as Hoechstmid events. We suggest to perform a single sorting with purity mode. You can check the purity of the sorted samples by taking a small fraction of the sorted cells and running it through the FACS machine.\nNote: There are typically three distributions of cells based on Hoechst signal. Hoechst- events are debris, Hoechstmid events are live singlets, and Hoechsthigh events are multiplets and dead cells (see troubleshooting 2[href=https://www.wicell.org#sec6.3]). Additional singlet gating with plotting the height (FSC-H) to area (FSC-A) measures of the forward scatter can help to eliminate multiplets as single events fall along the linear diagonal between these two parameters and anything deviating from the diagonal can be presumed as a multiplet and left outside of the singlet gate.\nSet the gating strategy as follows:\nFor samples derived from PDGFRa-eGFP mice, sort inflammatory cells (CD45-Alexa700+/CD31-APC-), endothelial cells (CD45-Alexa700-/CD31-APC+), FAPs (CD45-Alexa700-/CD31-APC-/EGFP+), and myogenic progenitors (CD45-Alexa700-/CD31-APC-/EGFP-/ITGA7-Alexa750+/VCAM1-PE+).\nFor samples derived from NG2-DsRed mice, sort inflammatory cells (CD45-APC+/CD31-FITC-), endothelial cells (CD45-APC-/CD31-FITC+/SCA1-PeCy7+),FAPs(CD45-APC-/CD31-FITC-/SCA1-PeCy7+), and pericytes (CD45-APC-/CD31-FITC-/SCA1-PeCy7-/DsRed+).\nCollect cells in a polypropylene or polystyrene 5-mL round-bottom FACS tube containing 1 mL collection media (see troubleshooting 3[href=https://www.wicell.org#sec6.5]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3045-Fig1.jpg\nFigure 1. Cell isolation from skeletal muscle using reporter system",
    "(A) Gating strategy to purify inflammatory cells (CD45+/CD31-), endothelial cells (CD45-/ CD31+), FAPs (CD45-/CD31-/eGFP+) and skeletal muscle progenitors (CD45-/CD31-/eGFP-/ITGA7+/VCAM1+) using PDGFRa-eGFP reporter mouse system.\n(B) Gating strategy to purify inflammatory cells (CD45+/CD31-), endothelial cells (CD45-/CD31+/SCA1+), FAPs (CD45-/CD31-/SCA1+) and pericytes (CD45-/CD31-/SCA1-/DsRed+) using NG2- DsRed reporter mouse system.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3045-Fig2.jpg\nFigure 2. Cell isolation from skeletal muscle without using any reporter system\n(A) Second staining and gating strategy where CD31 and CD45 are pooled in the same channel (Lin FITC) and inflammatory cells are identified as Lin+/SCA1- cells, endothelial cells as Lin+/SCA1+ cells, FAPs as Lin-/SCA1+ cells and skeletal muscle progenitors as Lin-/Sca1-/ITGA7+/VCAM1+ cells.\n(B) Alternative staining strategy to purify pericytes as CD45-/CD31-/SCA1-/CD146+ cells.\nNote: The cell gating strategy for both PDGFRa-eGFP and NG2-DsRed systems is reported in Figures 1[href=https://www.wicell.org#fig1]A and 1B, respectively. In the absence of PDGFRa and NG2 reporters, which are used to identify FAPs and pericytes respectively, other staining panels can be applied using wild type mice. FAPs can be purified by applying the staining strategy as we previously described,11[href=https://www.wicell.org#bib3] where FAPs are gated as CD45-/CD31-/CD34+/SCA-1+. Another strategy consists in pooling CD31 and CD45 staining in the same channel (Lin FITC) and, together with SCA1 marker, identifying inflammatory cells as Lin-FITC+/SCA1-PECy7- cells, endothelial cells as Lin-FITC+/SCA1-PECy7+ cells, and FAPs as Lin-FITC-/SCA1-PECy7+ cells (Figure 2[href=https://www.wicell.org#fig2]A). In this panel, the antibodies anti-ITGA7 and anti-VCAM1 are conjugated with different fluorophores (PE and eFluor660, respectively) to improve the separation of muscle progenitors (Lin-FITC-/SCA1-PECy7-/ITGA7-PE+/VCAM1-eFluor660+) from the other cells compared to Figure 1[href=https://www.wicell.org#fig1]A. Pericytes can be isolated by targeting CD146 as demonstrated by Crisan and colleagues,12[href=https://www.wicell.org#bib4] together with CD45, CD31 and SCA1. After negative selection using lineage markers (CD45-FITC and CD31-FITC), pericytes are isolated as SCA1-PECy7-/CD146-APC+ cells (Figure 2[href=https://www.wicell.org#fig2]B).",
    "Note: To apply a stringent selection of the viable cells, you can reconstitute cells with 500 μL of FACS buffer containing Hoechst 33342 (4 μM) together with propidium iodide (PI; 1 mg/mL) and gate Hoechstmid/PI- cells for your analysis (Figure 2[href=https://www.wicell.org#fig2]A).\nRNA extraction from cell types derived from skeletal muscle\nTiming: 2 days\nIn this step, RNA of sorted cells and total tissue (specifically TA) are extracted prior to library preparation.\nNote: Use sterile low adhesion pipet tips during RNA extraction.\nPreprocess cell suspension or tissue for RNA isolation.\nFor cell suspension (< 4E+6 cells):\nTop up the collection tube containing cells with DEPC PBS (see materials and equipment[href=https://www.wicell.org#materials-and-equipment]) to 4 mL.\nPellet the cells by centrifugation at 800 g for 10 min at 4°C.\nAspirate the supernatant and resuspend the pellet in 1 mL of DEPC PBS.\nTransfer the cell suspension to an RNase-free microtube.\nRepeat ii, and aspirate the supernatant.\nAdd 400 μL of RNAzol and resuspend the cell pellet.\nFor total tissue (per TA):\nImmediately after harvesting, clean the tissue in cold PBS, dry it quickly with paper towel, and directly submerge it in 500 μL of RNAzol in a 5 mL polystyrene tube.\nLyse the tissue with a homogenizer until complete disruption of the tissue on ice.\nPurify RNA with RNAzol.\nAdd 200 μL (cells) or 250 μL (tissue) of nuclease-free water and resuspend the mixture.\nStore the lysate at room temperature for 15 min.\nSpin down the lysate at 12,000 g for 15 min at 4°C.\nTransfer the supernatant into a new RNase-free microtube without disturbing the pellet.\nCritical: Sample should be cloudy blue upon the addition of nuclease-free water. If it is clear, add more nuclease-free water and resuspend.\nNote: Water induces the precipitation of non-RNA contents whereas RNA remains soluble in the supernatant.",
    "Precipitate RNA with isopropanol.\nAdd 1 μL of LPA to the sample and resuspend.\nAdd an equal volume of pre-chilled isopropanol to the sample (∼500 μL).\nResuspend the mixture well and incubate at −20°C overnight.\nSpin down the RNA at 20,000 g for 30 min at 4°C.\nWash the precipitated RNA with 70% ethanol.\nRemove the supernatant and add 1 mL of freshly made, pre-chilled 70% ethanol (see materials and equipment[href=https://www.wicell.org#materials-and-equipment]).\nGently detach the pellet from the tube and very carefully wash it by pipetting the solution slowly.\nSpin down the pellet at 20,000 g for 5 min at 4°C.\nRepeat a.-c.\nReconstitute RNA in nuclease-free water.\nRemove all supernatant from the sample tubes.\nAir dry the pellet for at least 5 min at room temperature.\nResuspend the RNA pellet with 20 μL (cells) or 50 μL (tissue) of freshly made RNA storage buffer (see materials and equipment[href=https://www.wicell.org#materials-and-equipment]).\nStore the reconstituted RNA at −80°C until use.\nCritical: Do not disturb the pellet when removing the supernatant. Start with a P200 pipet and switch over to a P10 pipet when most of the supernatant has been removed.\nNote: Keep track of the location of RNA pellet in the tube with a marker as it will become transparent after drying.\nLibrary preparation and RNA sequencing\nIn this step, we briefly outline key points and recommendations for library preparation and RNA sequencing as these services are generally provided by core facilities.\nIt is critical for RNA integrity to be assessed prior to library generation. In our manuscript,1[href=https://www.wicell.org#bib1] we had used the Agilent 2100 Bioanalyzer to estimate the RNA Integrity Number (RIN) and discarded samples with less than a score of 7.",
    "Library generation should be performed using prep kits that are compatible with sequencers. In our manuscript, we had used TruSeq Stranded mRNA Library Prep kit (Illumina) or NEBNext Ultra II Directional RNA Library Prep kit (New England Biolabs).\nThe recommended sequencing depth is at least 15 million reads per sample. In our manuscript,1[href=https://www.wicell.org#bib1] sequencing was performed on the NextSeq 500 sequencer (Illumina) with pair-end reads (43bp × 43bp) using the High Output Reagent kit (75 cycles; Illumina).\nData processing upstream of gene expression analysis is a multi-step workflow involving demultiplexing, trimming, filtering, and alignment of reads to a reference genome. In our manuscript,1[href=https://www.wicell.org#bib1] processing of raw reads was performed in accordance with Illumina’s recommendations using the RNA-seq Alignment suite.\nBase call files were de-multiplexed by bcl2fastq2. Adapter sequences were trimmed and low-quality reads (< 35 base pairs) were discarded.\nDemultiplexed read sequences were then aligned to the mm10 genome reference using STAR aligner.\nThe number of aligned reads to each annotated gene was tallied with RnaReadCounter to generate read-count matrices for all samples, which were used as inputs for downstream analyses.\nBioinformatics pipeline",
    "The Bioinformatic approach is summarized in Figure 3[href=https://www.wicell.org#fig3]. To understand the multicellular interplay that occurs during complex processes like regeneration, the user will explore the gene expression of each cell type, followed by an integrated analysis among all the cell types and the total tissue. The goal is to identify three types of genes: i) “pop-actived” genes that are expressed by a population at a specific time point during the tissue regeneration; ii) “subset-specific” genes that are associated to the expansion of a specific cell type as they are upregulated by one population and change their pattern in the total muscle over time; and iii) “constitutively-active” genes that are associated to a cell type as they are upregulated by one cell type, yet they do not change their pattern in the total muscle over time.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3045-Fig3.jpg\nFigure 3. Bioinformatics pipeline\nFigure reprinted from our previous publication Groppa et al., Cell Reports 2023. Schematic overview of the process used to identify genes modulated (DEG) during the response to damage.\n(A) Cell type specific analysis to identify DEGs for each cell type during the muscle regeneration.\n(B) Total muscle analysis to identify DEGs in the total muscle during the muscle regeneration.\n(C) Comparison across cell types to identify genes that do not change over the time, yet they are enriched in one specific cell type.\n(D) The combination of the outcomes from A, B and C leads to three categories of genes: pop-actived genes that are dynamically expressed over the time by a specific cell type, subset-specific genes that are associated to the expansion of a specific cell subset, and constitutively-active genes that are enriched in one specific cell type without changing expression during the regeneration process.\nDownload and prepare the data matrix for the analysis\nTiming: 10–20 min",
    "For this analysis, we will use the data published in the work of Groppa et al. 2023.1[href=https://www.wicell.org#bib1] Before starting, create the data matrices with raw counts. Visit Gene Expression Omnibus (GEO) at NCBI, search for GSE210748 series and download the supplementary files from this link: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE210748[href=https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE210748]. The files contain matrices with raw count in xlsx format. After removing empty columns, convert each matrix in text delimited file (File -> Save as -> text file).\nNote: To simplify the data processing, we prepared the text files in an archive in GitHub[href=https://github.com/Martini-CompBio-DMMT/muscle-regeneration-2023] (in github.com/Martini-CompBio-DMMT/muscle-regeneration-2023, the user can find a tar archive called raw-dataset.tar.gz). Download the archive and unarchive it in a directory called “expression-matrices”. An example of Bash and R code used to create the directory and download the archive is shown below.\n# Bash code\nmkdir -p expression-matrices\ncd expression-matrices\nwget -c \"https://github.com/Martini-CompBio-DMMT/muscle-regeneration-2023/raw/main/raw-dataset.tar.gz\"\ntar xf raw-dataset.tar.gz\ncd ..\n# R code\ndir.create(\"expression-matrices\", showWarnings = F)\ndownload.file(\"https://github.com/Martini-CompBio-DMMT/muscle-regeneration-2023/raw/main/raw-dataset.tar.gz\",\n  \"expression-matrices/raw-dataset.tar.gz\")\nuntar(\"expression-matrices/raw-dataset.tar.gz\",\n  exdir = \"expression-matrices\")\nThis generates count matrix files in the “expression-matrices” directory. Read and extract cell types and condition from the file names. For simplicity, name the samples with a short format (for example, endothelial cells from wild type = “ec_wt”).\n# Extract sample names and rename\ncount_files <- dir(\"expression-matrices/\",\n  pattern = \"GSE210748_Raw_counts_.+_WT.txt$\")\nsamples <- gsub(\".txt$\", \"\", count_files)\nsamples <- gsub(\"GSE210748_Raw_counts_\", \"\", samples)\nnames(samples) <- c(\"ec_wt\", \"fap_wt\", \"inf_wt\",\n                        \"mp_wt\", \"per_wt\", \"tot_wt\")\nRead in the count matrix files in a list, checking if the names of the genes are identical across each data file. This step is crucial to avoid merging matrices with different gene order or content.\n# Read count matrix and check genes’ order\ncount_cells <- lapply(paste0(\"expression-matrices/\", count_files),\nread.table, header=T, sep=\"∖t\", as.is=T, row.names=1, check.names=F)\nrn_genes <- row.names(count_cells[[1]])\nchecks <- sapply(count_cells, function(x) {\n  identical(rn_genes, row.names(x))\n})\nif (!all(checks))\n  stop(\"Row names differs\")",
    "Note: If no errors pop up, it means that the row names are matched across different expression-matrices. In this protocol, we focus only on the analysis of samples collected from wild type (WT) mice. Nevertheless, all functions are designed to be applicable for all gene-count matrices, including samples derived from CCR2 KO mouse line used in the work of Groppa et al. 2023.1[href=https://www.wicell.org#bib1]\nTo improve visualization, reformat sample names with an annotation that contains the features of each sample. For example, the sample named “ec_wt_0d-1” corresponds to the first biological replicate of endothelial cells derived from the WT condition at steady state.\n# Reformat samples’ names in count matrices\nnames(count_cells) <- names(samples)\nsamples <- samples[c(\"ec_wt\", \"fap_wt\", \"inf_wt\", \"mp_wt\", \"per_wt\", \"tot_wt\")]\ncount_cells <- count_cells[names(samples)]\nfor (celltype in names(count_cells)) {\n  colnames(count_cells[[celltype]]) <- paste(celltype, colnames(count_cells[[celltype]]), sep=\"_\")\n}\nNote: As described before, the dataset analyzed in the work of Groppa et al. 20231[href=https://www.wicell.org#bib1] includes the sequencing data of total muscles collected at the different time points of regeneration after injury. The inclusion of this dataset allows to integrate the gene expression profiles of individual cells and total tissue as described later.\nImport this data and name it as “tot”.\ntot <- count_cells$tot_wt\nCollapse the count matrix files of each cell type, except the total muscle, in a unique matrix file. The information related cell type (cell), time point during the regeneration (time), and number of replicates (rep) are saved in the column-names for each sample. Extract this information and build an annotation data frame. Alternatively, manually create a spreadsheet file (see Table 1[href=https://www.wicell.org#tbl1]).\ntable:files/protocols_protocol_3045_6.csv\n# Create sample annotation data frame for each cell type\ntype_selection <- c(\"ec_wt\", \"fap_wt\", \"inf_wt\", \"mp_wt\", \"per_wt\")\ncountData <- do.call(cbind, count_cells[type_selection])\ncolnames(countData) <- sapply(strsplit(colnames(countData), \".\", fixed = T), \"[[\", 2)\ncolData.1 <- t(sapply(strsplit(colnames(countData), \"-\"), function(x) {\n  if (length(x) == 1){",
    "c(x, \"1\")\n  } else {x}\n}))\ncolData.2 <- t(sapply(strsplit(colData.1[,1], \"_\"), function(x) {\n  if (length(x) == 1){\n    c(x, \"1\")\n  } else {x}\n}))\ncolData <- data.frame(row.names=colnames(countData),\n            cell=colData.2[,1],\n            condition=colData.2[,2],\n            time=as.numeric(gsub(\"d\", \"\", colData.2[,3])),\n            days=colData.2[,3],\n            rep=colData.1[,2])\nApply the same with total muscle data.\n# Create sample annotation data frame for total tissue\ntcolData.1 <- t(sapply(strsplit(colnames(tot), \"-\"), function(x) {\n  if (length(x) == 1){\n    c(x, \"1\")\n  } else {x}\n}))\ntcolData.2 <- t(sapply(strsplit(tcolData.1[,1], \"_\"), function(x) {\n  if (length(x) == 1){\n    c(x, \"1\")\n  } else {x}\n}))\ntcolData <- data.frame(row.names=colnames(tot),\n            cell=tcolData.2[,1],\n            condition=\"wt\",\n            time=as.numeric(gsub(\"d\", \"\", tcolData.2[,2])),\n            days=tcolData.2[,3],\n            rep=tcolData.1[,2])\nNote: The sample names are maintained as row names to create corresponding metadata information in the columns: cell as cell type, condition, time as the numeric version for the days and day as the time point after injury, and lastly the replicate’s number.\nAfter creating the raw data matrices (one with all cell-types and one with the total muscle) and metadata tables, save them as text files to avoid rerunning the aforementioned steps and restart at this point of the protocol if needed.\n# Save count matrices and relative annotation to files\nwrite.table(countData, file=\"expression-matrices/countData.txt\", sep=\"∖t\", quote=F)\nwrite.table(colData, file=\"expression-matrices/colData.txt\", sep=\"∖t\", quote=F)\nwrite.table(tot, file=\"expression-matrices/total-countD.txt\", sep=\"∖t\", quote=F)\nwrite.table(tcolData, file=\"expression-matrices/t-colData.txt\", sep=\"∖t\", quote=F)\nCell type specific analysis to identify pop-actived genes\nTiming: 25 min\nThe goal of the cell specific analysis is to define pop-actived by 1) identifying differentially expressed genes (DEGs) across time-points during regeneration in the same cell type; and 2) organizing them in clusters to infer the time point (d) when they are “active”.",
    "Note: To perform Task 1, you will use the R packages, edgeR and RUVSeq. RUV function implemented in the RUVSeq package allows removing hidden batch effects from original data and it is highly suggested with large datasets where the probability of unpredictable batch effects is higher. For convenience, we created an R package with all the handler/wrapper functions that streamlines the analysis. In fact, we provide the user with a function loads data-matrix file, extracts the cell / condition, performs pre-filtering, applies RUVSeq analysis, computes time-dependent variable genes (DEGS), and clusters time dependent genes (to identify pop-actived).\nUse the aforementioned function called “runWithParametersRpkm” from the R package cellCB (see GitHub[href=https://github.com/cavei/cellCB] github.com/cavei/cellCB) that operates with the following data and arguments:\n“dataFile”, the file containing the count matrices of all the cell types collapsed together; “annotationFile”, the file name with related samples’ annotations; “cell”, the cell type analyzed; “condition”, the condition analyzed (in this example the only condition is WT); “runWithK”, the k number of factors of unwanted variation that are estimated from the data (see RUVSeq parameters for more details); “runWithFormula”, the edgeR formula to compute DEGs (see RUVSeq and edgeR parameters for more details); “removeSamples”, optional list of samples to be removed; “varName”, the variable to be used to compute DEGs; “pADJ.thr”, the thresholds of adjusted p-value filter for DEG analysis; “logfcthr”, log2 fold change filter for DEG analysis; “rcFilter”, read count gene expression filter; “atLeastIn”, number of samples with at least “rcFilter” counts to keep a gene; “rpkmMean”, keep genes with mean RPKM/FPRM gene expression above “rpkmMean”; “clusterK\", the number of expected clusters computed from DEGs; “gene_length” the file with estimated gene length for RPKM/FPKM computation (in this example it came along with the archive of the expression matrices).",
    "All these parameters should be defined according to the specific dataset in use. With the data analyzed in the work of Groppa et al., 2023,1[href=https://www.wicell.org#bib1] we set up a gene filter to select the genes with 100 counts in at least 2 samples and mean RPKM >= 3 (recommended; these are the default values in the function). For RUVSeq analysis, you can use 3,000 empirical invariant genes (i.e., 3,000 gene with the highest p-value). The choice of RUVSeq k (runWithK) and its related formula “runWithFormula” should be tuned by exploring the diagnostic plots produced after the preliminary run. With k, user sets up the number of dimensions for unwanted variation. The computed dimensions need to be included in the edgeR linear model for DEG computation with the formula specified in the “runWithFormula” argument. To extract DEGs, you can set up the pADJ.thr to 0.01 and logfcthr = 2 because we expect a high number of DEGs and the cutoff has to be more stringent to detect reliable signals (see troubleshooting 4[href=https://www.wicell.org#sec6.7]). For the dataset of Groppa et al. 2023,1[href=https://www.wicell.org#bib1] including both the individual cell type and the total muscle in WT condition, set clusterK to 9 (see troubleshooting 5[href=https://www.wicell.org#sec6.9]).",
    "Critical: There is no gold standard in defining k unwanted weight dimensions. Given that the choice of k (runWithK argument) influences downstream analysis, the optimal approach to evaluate k is by incrementally increasing k from 1 to 10 and examine the data by diagnostic plots. Be aware that each k dimension introduces differences that could deviate from true biology; refer to RUVSeq package vignette for more details. The choice of k unwanted weight dimensions is based on the diagnostic plots of three parameters: Relative Log Expression (RLE) plot, the PCA dispersion and p-value distribution, which are briefly explained here. RLE plot investigates the distributions of read counts across samples compared to a reference sample (virtual sample obtained by the median across all samples). If each distribution is sharply peaked near zero (i.e., with low variance), we conclude that the samples do not deviate from reference. When samples deviate, it suggests that further normalization is needed (see plotRLE help from EDASeq R package for more details). PCA plot examines the degree of replicates’ similarity (samples representative of the same time point) by checking if the samples aggregate into well-defined clusters. The histogram of p-values displays the distribution of genes’ p-values after RUV correction, indicating whether the results of differential gene expression follows the expected distribution (in our case to test if RUVSeq worked or not). In the best scenario, the p-value distribution is expected to peak near zero and have a uniformly distributed right tail.5[href=https://www.wicell.org#bib5]",
    "Note: To perform Task 2, you will use The R packages, TCSeq and BoolNet. You feed TCSeq with expression data of the DEGs identified in Task 1 to cluster them and extract the time points where genes are active using the “binarizeTimeSeries” function of the BoolNet package. This method uses k-means (set to obtain 2 clusters i.e., active, and non-active) and computes a cutoff according to the centroid values to mark time points above the cutoff as active (boolean value = 1), or otherwise inactive (boolean value = 0). The activation pattern of the cluster centroid is inherited by all the genes belonging to the same cluster. You can define a gene as active in the cell type at day d (pop-actived) if its cluster is ‘‘active’’ at day d.\nCreate an output directory to store results in RData format and load cellCB and RUVSeq R packages.\n# Create a directory to store the analyses\nresDir <- \"rpkm-RDatas-padj0.01-lfc2/\"\ndir.create(resDir, showWarnings = F)\nlibrary(cellCB)\nlibrary(RUVSeq)\nRun the function to identify pop-active genes in endothelial cells while defining the optimal k evaluating the aforementioned statistics.\nRun the function using endothelial cells (ec-wt), set k = 1 and apply “runWithFormula” to “∼days + W_1” to detect the genes that change over time, corrected by one unwanted dimension.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3045-Fig4.jpg\nFigure 4. Analysis of k dimensions for RUVSeq\n(A and B) RLE-plot, PCA-plot and p-value distribution fo EC wt dataset with k = 1 i.e., one unwanted variance dimension (A) and k = 2, i.e., two unwanted variance dimensions (B).\n# RUVSeq k=1 in endothelial cell\nec_wt <- runWithParametersRpkm(\"expression-matrices/countData.txt\",\n                    \"expression-matrices/colData.txt\",\n                    \"ec\", \"wt\",\n                    runWithK = 1,\n                    runWithFormula = \"∼days + W_1\",\n                    pADJ.thr = 0.01, logfcthr = 2,\n                    clusterK = 9,\n                    gene_length = \"expression-matrices/ensembl_91_gene_length.txt\")",
    "Note: As shown in Figure 4[href=https://www.wicell.org#fig4]A, RLE-plot indicates reasonably good results. However, some sample distributions do not peak near zero, demonstrating more variance than other samples. In addition, the PCA plot displays sparsity amongst replicates (samples of the same time point) and the p-value distribution has a slight peak toward 1.\nSet k = 2 and update the edgeR formula to “∼days + W_1 + W_2” to accommodate two unwanted dimensions.\n# RUVSeq k=2 in endothelial cell\nec_wt <- runWithParametersRpkm(\"expression-matrices/countData.txt\",\n                    \"expression-matrices/colData.txt\",\n                    \"ec\", \"wt\",\n                    runWithK = 2,\n                    runWithFormula = \"∼days + W_1 + W_2\",\n                    pADJ.thr = 0.01, logfcthr = 2,\n                    clusterK = 9,\n                    gene_length = \"expression-matrices/ensembl_91_gene_length.txt\")\nsave(ec_wt, file=paste0(resDir,\"ec\",\"-\",\"wt\",\".RData\"))\nNote: As shown in Figure 4[href=https://www.wicell.org#fig4]B, two unwanted weight dimensions work better because there is a reduction in the variance (RLE), more homogeneous clusters among replicates (PCA) and the p-value distribution is less skewed toward 1.\nRun the function to identify pop-active genes in the other cell types (Figure 3[href=https://www.wicell.org#fig3]A).\nNote: For cell-specific timeseries samples in the study of Groppa et al. 2023,1[href=https://www.wicell.org#bib1] optimal runWithK values are already defined for each cell type. In the Pericyte cell-type, we excluded the sample “per_wt_3d-1” because it was identified as outlier in RLEplot and PCAplot before and after RUV correction.\n# RUVSeq runs with optimal k in remaining cell types\nfap_wt <- runWithParametersRpkm(\"expression-matrices/countData.txt\",\n                    \"expression-matrices/colData.txt\",\n                    \"fap\", \"wt\", runWithK = 1,\n                    runWithFormula = \"∼days + W_1\",\n                    pADJ.thr = 0.01, logfcthr = 2,\n                    clusterK = 9,\n                    gene_length = \"expression-matrices/ensembl_91_gene_length.txt\")\nsave(fap_wt, file=paste0(resDir,\"fap\",\"-\",\"wt\",\".RData\"))\nmp_wt <- runWithParametersRpkm(\"expression-matrices/countData.txt\",\n                    \"expression-matrices/colData.txt\",\n                    \"mp\", \"wt\", runWithK = 1,\n                    runWithFormula = \"∼days + W_1\",\n                    pADJ.thr = 0.01, logfcthr = 2,\n                    clusterK = 9,\n                    gene_length = \"expression-matrices/ensembl_91_gene_length.txt\")\nsave(mp_wt, file=paste0(resDir,\"mp\",\"-\",\"wt\",\".RData\"))\ninf_wt <- runWithParametersRpkm(\"expression-matrices/countData.txt\",\n                    \"expression-matrices/colData.txt\",\n                    \"inf\", \"wt\", runWithK = 1,\n                    runWithFormula = \"∼days + W_1\",\n                    pADJ.thr = 0.01, logfcthr = 2,\n                    clusterK = 9,\n                    gene_length = \"expression-matrices/ensembl_91_gene_length.txt\")\nsave(inf_wt, file=paste0(resDir,\"inf\",\"-\",\"wt\",\".RData\"))",
    "per_wt <- runWithParametersRpkm(\"expression-matrices/countData.txt\",\n                    \"expression-matrices/colData.txt\",\n                    \"per\", \"wt\", runWithK = 2,\n                    runWithFormula = \"∼days + W_1 + W_2\",\n                    removeSamples = \"per_wt_3d-1\",\n                    pADJ.thr = 0.01, logfcthr = 2,\n                    clusterK = 9,\n                    gene_length = \"expression-matrices/ensembl_91_gene_length.txt\")\nsave(per_wt, file=paste0(resDir,\"per\",\"-\",\"wt\",\".RData\"))\nWhole muscle analysis\nTiming: 5 min\nIn this second part of the analysis, you will identify pop-actived in the total tissue (i.e., the genes whose expression changes over time in the muscle, Figure 3[href=https://www.wicell.org#fig3]B). To achieve this, process the data for total muscle as performed with the individual cell type. The list of pop-actived in the total tissue will be integrated with the genes emerged from the inter-cellular analysis (see “comparison across cell types[href=https://www.wicell.org#sec3.9]”), allowing the distinction of cell signals that are related to cell expansion or constitutive gene programs.\nRun the function to identify pop-active genes in the other cell types.\n# Identify pop-actived in the total tissue\ntot_wt <- runWithParametersRpkm(\"expression-matrices/total-countD.txt\",\n                    \"expression-matrices/t-colData.txt\",\n                    \"tot\", \"wt\", runWithK = 1,\n                    runWithFormula = \"∼days + W_1\",\n                    pADJ.thr = 0.01, logfcthr = 2,\n                    clusterK = 9,\n                    gene_length = \"expression-matrices/ensembl_91_gene_length.txt\")\nsave(tot_wt, file=paste0(resDir,\"tot\",\"-\",\"wt\",\".RData\"))\nComparison across cell types\nTiming: 5 min\nCompute differentially expressed genes among cell types.\nNote: In this case, use the explanatory variable “cell” rather than day in the edgeR formula (runWithFormula argument).\n# Identify constitutive-active genes\nall_wt <- runWithParametersRpkm(\"expression-matrices/countData.txt\",\n                    \"expression-matrices/colData.txt\",\n                    \"ALL\", \"wt\", runWithK=1,\n                    runWithFormula=\"∼cell + W_1\",\n                    removeSamples = \"per_wt_3d-1\",\n                    varName = \"cell\", pADJ.thr = 0.01,\n                    logfcthr = 2,\n                    clusterK = 9,\n                    gene_length = \"expression-matrices/ensembl_91_gene_length.txt\")\nsave(all_wt, file=paste0(resDir,\"all\",\"-\",\"wt\",\".RData\"))\nProceed with the selection of genes that do not display any activation pattern in individual cell types over time (flat expression, i.e., not pop-actived), but are enriched in a specific cell subset.",
    "Note: We implemented an intercellular comparison that attributes a gene to a specific cell population when its expression is higher (log2 fold change >= 1.5) than all other cell types. For example, gene X is enriched in EC when it is differentially expressed in EC and its expression is higher than FAP, IC, MP and PER (log2 fold change >= 1.5) (Figure 3[href=https://www.wicell.org#fig3]C).\nlibrary(cellCB)\nresult_dir <- \"rpkm-RDatas-padj0.01-lfc2/\"\nrdata_storage <- \"rdata_storage\"\ndir.create(rdata_storage, showWarnings = F)\n# Assign genes to cell\nif (!(file.exists(\"gene2cellAssociation.RData\"))) {\n  cellExpressionTable <- getCellExpressionSignature(\n    RData = paste0(result_dir, \"/all-wt.RData\"))\n  gene2cellAssociationTables <- cellCB:::associateGeneToCells(cellExpressionTable)\n  gene2cellAssociation <- cellCB:::tables2maps(gene2cellAssociationTables)\n  file=paste0(rdata_storage, \"/gene2cellAssociation-padj0.01-lfc2-\",\n      as.character(Sys.Date()), \".RData\")\n  link=\"gene2cellAssociation.RData\"\n  save(gene2cellAssociation, file=file)\n  file.symlink(file, link)\n} else {\n  load(\"gene2cellAssociation.RData\")\n}\nnames(gene2cellAssociation)\nAssign genes to their mode-of-expression category\nTiming: 6 min\nNow you will expand the cell-specific analysis described in Figure 3[href=https://www.wicell.org#fig3]D. As previously stated, you will divide genes into i) pop-actived genes; ii) “subset-specific” genes, and iii) “constitutively-active”. The “pop-actived” genes for each cell type were identified in the above section, “cell type specific analysis to identify pop-actived genes[href=https://www.wicell.org#sec3.7]”. By combining both the analysis on total tissue and individual cell types, you will identify “subset-specific” and “constitutively-active” genes for each cell type.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3045-Fig5.jpg\nFigure 5. Classification of genes during the bioinformatics analysis\nSchematic overview of the process applied to classify the genes emerged from the analysis of differentially regulated genes (DEGs) in the individual cell types, in the total tissue, and in the intercellular comparison.",
    "Note: We created an R pipeline that classifies genes in the following order for each cell population: “pop-actived” > “subset-specific” > “constitutively-active” (Figure 5[href=https://www.wicell.org#fig5]). If we consider one cell type, for example the endothelial cells, we can have this scenario: gene A is classified as “pop-actived”, and therefore subjected to ligand-receptor analysis (green light). Genes B, C, D, and E display flat expression since its expression remains unchanged within one cell type across time points. For this reason, genes B, C, D, and E need to be further investigated (yellow light). Gene B follows a temporal pattern of expression in the total tissue and its expression is higher in the endothelial cells than all other cell types (lfc >=1.5). As such, gene B is considered to be \"subset-specific\" and subjected to downstream analysis. Gene C is not temporally modulated in the total tissue nor it is upregulated by endothelial cells versus other cells types. Thus, gene C is excluded from the ligand-receptor analysis. Gene D is not temporarily modulated, but its expression is higher in endothelial cells compared to the other cells. Gene D is labeled as “constitutively-active” and is considered for the following analysis. Lastly, gene E displays a temporal pattern of expression, but it is not enriched in any cell type, thus it is stopped (red light) because we cannot associate it to any cell type. The function “extractGenesBehavious” implements these decisions.\nLoad the required packages and define the directory where the results are saved.\nlibrary(org.Mm.eg.db)\nlibrary(clusterProfiler)\nlibrary(ggplot2)\nlibrary(cellCB)\nresultsDir <- \"rpkm-RDatas-padj0.01-lfc2/\"\ntableDir = \"sif_tables\"\ndir.create(tableDir, showWarnings = F)\nExtract the list of pop-active genes at a specific time point d (=day) for all cell populations.\nNote: This results in a list of cells with each cell containing pop-actived genes across time points.",
    "# Extract only the pop-active genes for each cell type\ncells <- c(\"fap\", \"ec\", \"mp\", \"inf\", \"per\")\nactiveAtDaysCell <- lapply(cells, function(cell) {\n  cellCB:::getActiveAtDaysFromRData(paste0(resultsDir, \"/\", cell, \"-wt.RData\"),\npaste0(cell, \"_wt\"))\n})\nnames(activeAtDaysCell) <- cells\nApply the same to the total muscle.\n# Extract only the pop-active genes for total muscle\nactiveAtDaysTot <- cellCB:::getActiveAtDaysFromRData(\n  paste0(resultsDir,”/tot-wt.RData”), “tot_wt”)\nRun the function “extractGenesBehavious” that labels each gene according to the rules discussed above.\nNote: The object “genesBehavioursCell” analyzes all cell-specific and total tissue samples simultaneously and generates three lists of genes named “activeAtDays” a.k.a. pop-actived, “activeAtDaysTotCell” a.k.a. subset-specific – cell expansion, and “constitutive” a.k.a. constitutively-active genes. The list of “activeAtDays” and “activeAtDaysTotCell” are further divided according to the time point during the regeneration.\n# Extract gene behavior\ngenesBehavioursCell <- lapply(cells, function(cell) {\n  extractGenesBehavious(activeAtDaysCell[[cell]], activeAtDaysTot, gene2cellAssociation[[cell]])\n})\nnames(genesBehavioursCell) <- cells\nLigand receptor analysis\nTiming: 8 min\nTo create the intercellular interactome, extract the receptors and ligands from “genesBehavioursCell” object from each cell. In Groppa et al. 20231[href=https://www.wicell.org#bib1] analysis, we used the ligand-receptor database published by Rezza et al. 2016,13[href=https://www.wicell.org#bib6] however any other sif file (Simple interaction file – text file with at least two columns: source and destination) can be applied (see troubleshooting 6[href=https://www.wicell.org#sec6.11]). A copy of the sif file from Rezza et al. is provided here[href=https://github.com/cavei/muscle-regeneration-cell-rep/raw/main/ligands-receptor-rezza/database-mouse-sif.txt].\nDownload and read the sif file or read it directly from the url https://github.com/cavei/muscle-regeneration-cell-rep/raw/main/ligands-receptor-rezza/database-mouse-sif.txt[href=https://github.com/cavei/muscle-regeneration-cell-rep/raw/main/ligands-receptor-rezza/database-mouse-sif.txt].\n# Read the sif file into R\nurl = \"https://github.com/cavei/muscle-regeneration-cell-rep/raw/main/ligands-receptor-rezza/database-mouse-sif.txt\"\n# or download the file in your working directory and set\nurl = \"database-mouse-sif.txt\"\ndb <- read.table(url, header=F, sep=\"∖t\", quote=\"∖\"\", stringsAsFactors = F)\nrezza.db <- list(ligands=unique(db$V2), receptors=unique(db$V3))\nFilter the results of “genesBehavioursCell” with the list of ligands and receptors.",
    "Note: This operation extracts sets of ligands and receptors that are pop-active, subset-specific, or constitutively active for each cell type at every time point. The ligands and receptors that belong to any of the three categories are named active ligands and receptors.\nligandReceptorBehavioursCell <- lapply(cells, function(cell)\n  extractLigandReceptorBehaviours(genesBehavioursCell[[cell]], rezza.db))\nnames(ligandReceptorBehavioursCell) <- cells\nFor example, to find ligands and receptors present in EC at day 6 after muscle injury, run the following:\nligandReceptorBehavioursCell$ec$ligandReceptorDayBatch$d6\n## $ligandOfTheDay\n## [1] \"Igf1\" \"Csf3\" \"Clu\" \"Dll1\" \"Tnfsf10\" \"Il6\" \"Cxcl9\"\n## [8] \"Cxcl10\" \"Igf2\" \"Vegfc\" \"Il15\" \"Mmp13\"\n##\n## $receptorOfTheDay\n## [1] \"Tnfrsf11a\" \"Bdkrb2\" \"Csf2rb\" \"H2-Bl\" \"Gabbr1\" \"Aplnr\"\n## [7] \"Lepr\" \"Tnfrsf25\" \"Fgfr3\" \"Lsr\" \"F2rl3\" \"Il10ra\"\nCheck the numbers of ligand and receptor identified in EC WT.\nstats_ec <-sapply(ligandReceptorBehavioursCell$ec$ligandReceptorDayBatch, function(x) c(length(x[[1]]), length(x[[2]])))\nrow.names(stats_ec) <- c(\"ligandOfTheDay\", \"receptorOfTheDay\")\nstats_ec\n##         d0 d1 d2 d3 d4 d5 d6 d7 d10 d14\n## ligandOfTheDay 17 17 29 29 15 12 12 22 12 10\n## receptorOfTheDay 13 11 22 23 15 12 12 16 12 10\nTransform the data and collect all the ligands with their expression timing and generate the ligand info table for each cell.\ntable:files/protocols_protocol_3045_7.csv\nligandsTimingCell <- lapply(names(ligandReceptorBehavioursCell), function(cell) {\n  cdata <- ligandReceptorBehavioursCell[[cell]]\n  batch <- meltListOfVectors(lapply(cdata$ligandReceptorDayBatch,\nfunction(ddata) ddata$ligandOfTheDay))\n  names(batch)=c(\"day\", \"ligand\")\n  batch$source <- \"batch\"\n  tot <- meltListOfVectors(lapply(cdata$ligandReceptorDayTot,\n                  function(ddata) ddata$ligandOfTheDay))\n  names(tot)=c(\"day\", \"ligand\")\n  tot$source <- \"total\"\n  const <- data.frame(day = \"all\",\n              ligand= cdata$ligandReceptorConstitutive$ligandOfTheDay)\n  const$source <- \"constitutive\"\n  ltc <- rbind(batch, tot, const)\n  ltc$cell <- cell\n  ltc\n})\nnames(ligandsTimingCell) <- names(ligandReceptorBehavioursCell)",
    "Note: The expected outcome is a list of tables (see an example table in Table 2[href=https://www.wicell.org#tbl2]) where column #1 contains the day; column #2 the ligand, column #3 the mode of expression of the X gene that can be classified as batch (i.e., pop-active), total (i.e., subset-specific) or constitutive (i.e., constitutively-active), and column #4 the cell (for example EC); constitutive genes are marked as “all” in the “day column” meaning that they are always active.\nNow concatenate the tables for all cell types.\nligandMatrix <- do.call(rbind, ligandsTimingCell)\nrow.names(ligandMatrix) <- NULL\nwrite.table(ligandMatrix, file=paste0(tableDir, \"/\", \"ligandDescription.txt\"),\n          sep=\"∖t\", quote=F, row.names=F)\nReplace “all” with all the time points.\nall_idx <- which(ligandMatrix$day==\"all\")\nchrday <- c(\"d0\",\"d1\",\"d10\",\"d14\",\"d2\",\"d3\",\"d4\",\"d5\", \"d6\",\"d7\")\nexpanded <- lapply(all_idx, function(i) {\n  base <- ligandMatrix[i, 2:4]\n  data.frame(day=chrday, ligand=base$ligand, source=base$source, cell=base$cell)\n})\nexpanded <- do.call(rbind, expanded)\nligandMatrixExpanded <- rbind(ligandMatrix[-all_idx, ], expanded)\nCreate a map between ligands (and the day when they are active) and their expression mode in each cell type.\ntable:files/protocols_protocol_3045_8.csv\nday_lig <- paste(ligandMatrixExpanded$day, ligandMatrixExpanded$ligand, sep=\"_\")\nsource_cell <- paste(ligandMatrixExpanded$source, ligandMatrixExpanded$cell, sep=\"_\")\nligand.dict <- tapply(source_cell, day_lig, paste, collapse=\";\")\nNote: You have successfully created a dictionary that maps each ligand at day d to its expression mode and cell type where gene X is active, as shown in Table 3[href=https://www.wicell.org#tbl3]. Here, gene “Adm” at day “d0” is produced by cell-specific expansion of endothelial cells (“total_ec”; subset-specific) and by pericytes in a time-modulated manner (“batch_per”; pop-actived).\nBuild the interactome\nTiming: 6 min\nAt this stage, you have created “ligandReceptorBehavioursCell” that displays the activity of both ligands and receptors at each time point and in each cell type, and “ligand.dict” that associates the ligand to its cellular source, the mode of expression, and the day when the gene is active.",
    "To infer if a ligand can interact with its receptor, create the network of interaction between ligands and receptors by loading the sif from Rezza et al. 2016 into a graphNEL object (igraph R package).\nlibrary(igraph)\nlibrary(graph)\nlr.sif <- as.matrix(db[,2:3])\ncolnames(lr.sif) <- c(\"src\", \"dest\")\nreceptorGraph <- igraph::as_graphnel(igraph::graph(\n  cellCB::edgeList(lr.sif), directed=TRUE))\nNote: The “receptorGraph” object contains the graphNEL with the ligand-receptor interactions. To infer the type and time of interactions taking place during muscle regeneration, and the cell types involved, filter graphNEL (i.e., create the induced sub-network) using the lists of active ligands and receptors for each cell population and each time point.\nCreate a directory to store all results as many intermediate tables are required for this step.\nsaveFiles = TRUE\nif (saveFiles) {\n  if (!file.exists(tableDir))\n    dir.create(tableDir)}\nCreate cell type specific and time -wise sif tables from graphNEL interactome.\nNote: In the following, implement an R function to create the whole interactome sif table. The function will be applied to each cell type stored in the object “ligandReceptorBehavioursCell” using “lapply”. The cell type that expresses the receptors is considered as the reference cell. Then, the function creates a cumulative list with all ligands expressed by all cell types (including autocrine interaction and constitutive ligands) and receptors expressed by the reference cell (for each time point). Additionally, it creates the autocrine and paracrine lists of ligands where autocrine refers to ligands and receptors that are produced by reference cell and paracrine means that ligands are produced by other cell types besides the reference cell. Using this information, together with the graphNEL object “receptorGraph”, now you can create the network of intercellular interactions at any given time point, specifying whether the interaction is paracrine or autocrine.\nsifTables <- lapply(names(ligandReceptorBehavioursCell), function(cell) {\n  removeAutocrine=FALSE\n  useConstitutiveLigands=TRUE\n  cat(cell, \"∖n\")\n  condition=\"wt\"\n  receptorFrom <- cell\n  ligandsReceptorCumulative <- paraWiseMultiMergeTimePoints(",
    "ligandReceptorBehavioursCell, ligCells = cells,\n    recCell = receptorFrom,\n    removeAutocrine=removeAutocrine,\n    useConstitutiveLigands=useConstitutiveLigands)\n  autocrine <- wiseMergeTimePoints(ligandReceptorBehavioursCell[[cell]])\n  paracrine <- paraWiseMultiMergeTimePoints(ligandReceptorBehavioursCell,\n    ligCells = cells,\n    recCell = receptorFrom,\n    removeAutocrine=removeAutocrine,\n    useConstitutiveLigands=useConstitutiveLigands)\n  dailySif <- cellCB:::createSifOFLigandReceptor(\n        ligandsReceptorCumulative,\n        receptorGraph, cell, condition)\n  days <- intersect(names(autocrine), names(dailySif))\n  for (d in days) {\n    dailySif[[d]]$day <- d\n    dailySif[[d]]$feedSystem <- \"paracrine\"\n    isAutocrine <- dailySif[[d]]$src %in% autocrine[[d]]$ligandOfTheDay\n    isParacrine <- dailySif[[d]]$src %in% paracrine[[d]]$ligandOfTheDay\n    dailySif[[d]]$feedSystem[isAutocrine] <- \"autocrine\"\n    dailySif[[d]]$feedSystem[isAutocrine & isParacrine] <- \"autocrine;paracrine\"\n    dailySif[[d]]$cell <- cell\n    colnames(dailySif[[d]]) <- c(\"ligand\",\"receptor\",\"day\", \"feedSystem\", \"cell\")\n    dailySif[[d]] <- dailySif[[d]][c(\"day\", \"ligand\", \"receptor\", \"cell\", \"feedSystem\")]\n    if (saveFiles) {\n      write.table(dailySif[[d]], file = paste0(tableDir, \"/\",\n        paste(c(cell, condition, d), collapse = \"-\"), \".txt\"),\n      sep=\"∖t\", quote=F, row.names=F)\n    }}\n  dailySif})\nnames(sifTables) <- names(ligandReceptorBehavioursCell)\nCheck the format of the sifTables.\nhead(sifTables$ec$d0)\n## day ligand receptor cell feedSystem\n## 1 d0 Ctgf Itga5 ec autocrine;paracrine\n## 2 d0 Igf1 Igfbp3 ec autocrine;paracrine\n## 3 d0 Igf1 Igfbp7 ec autocrine;paracrine\n## 4 d0 Igf1 Igfbp2 ec autocrine;paracrine\n## 5 d0 Kitl Kit ec autocrine;paracrine\n## 6 d0 Pgf Flt1 ec paracrine\nNote: sifTables stores the interactome for each cell at each time point together with the annotation in the “feedSystem” column that indicates whether the interaction is autocrine or paracrine loop (or both).\nTranslate each ligand/day combination in its cell type and mode of expression.\nNote: The next step is to include the information about the source of the ligand and the expression mode (batch, total or constitutive). You will need the R object called “ligand.dict” you created earlier at the end of the “ligand receptor analysis[href=https://www.wicell.org#sec3.11]” section. This generates tables with the interactome network that can be saved in a format readable with Cytoscape or any other software used by the operator to manipulate networks.\nsifcell_day_tables <- lapply(sifTables, function(sifcell) {\n  tbls <- lapply(sifcell, function(day_table) {\n    id <- paste(day_table$day, day_table$ligand, sep=\"_\")\n    source_cell <- ligand.dict[id]\n    df <- data.frame(ligand=day_table$ligand,\n            source_cell=source_cell,\n            day = day_table$day,\n            receptor=day_table$receptor,\n            cell=day_table$cell,\n            feedSystem=day_table$feedSystem)",
    "expand_df <- lapply(seq_len(nrow(df)), function(i) {\n      base <- df[i, ]\n      sources <- strsplit(base$source_cell, \";\")[[1]]\n      data.frame(ligand=base$ligand,\n            source_cell=sources,\n            day = base$day,\n            receptor=base$receptor,\n            cell=base$cell)\n    })\n    do.call(rbind, expand_df)\n  })\n  collapsed <- do.call(rbind, tbls); row.names(collapsed) <- NULL\n  collapsed\n})\nAs final step, collapse all the tables in a unique table that contains all the interactions among the five cell populations and across the time-course of muscle regeneration.\nwhole_interactome <- do.call(rbind, sifcell_day_tables)\nrow.names(whole_interactome) <- NULL\nsource <- sapply(strsplit(whole_interactome$source_cell, \"_\"), \"[[\", 1)\ncell <- sapply(strsplit(whole_interactome$source_cell, \"_\"), \"[[\", 2)\nwhole_interactome <- data.frame(ligand=whole_interactome$ligand,\n                    l.source=source,\n                    l.cell=cell,\n                    day=whole_interactome$day,\n                    receptor=whole_interactome$receptor,\n                    r.cell=whole_interactome$cell)\nInspect the whole interactome table.\nhead(whole_interactome)\ntable:files/protocols_protocol_3045_9.csv\nNote: The expected output is a table that combines all ligands and receptors for all cell types and all time points."
  ],
  "subjectAreas": [
    "Rnaseq",
    "Sequence Analysis",
    "Bioinformatics",
    "Stem Cells",
    "Computer Sciences",
    "Cell Isolation",
    "Flow Cytometry",
    "Cell Biology",
    "Molecular Biology",
    "Sequencing"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology",
    "Bioengineering & Technology"
  ]
}