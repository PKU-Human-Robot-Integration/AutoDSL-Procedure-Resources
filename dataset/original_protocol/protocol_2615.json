{
  "id": 2761,
  "origin_website": "Cell",
  "title": "Deep learning based protocol to construct an immune-related gene network of host-pathogen interactions in plants",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nHere we describe the step-by-step methods for download the repository, download all-necessary data and their filtering process, procedure to use the repository (DLNet) from generating the score for each gene that participate to differentiate the data of two conditions (control/treatment), and construct the gene network for the identification of the target genes.\nDownloading the repository\nTiming: ∼5–10 min (for step 1)\nThis section includes the different steps to download the repository from the GitLab.\nIf the git command is not previously installed in your Debian/Ubuntu system, run the following:\n>sudo apt-get install git-all\nOtherwise, download the repository by executing the below command on the Ubuntu terminal:\n>git clone https://gitlab.com/ravisaroch/star-protocols.git[href=https://gitlab.com/ravisaroch/star-protocols.git]\nThe repository can be added directly by going to https://gitlab.com/ravisaroch/star-protocols[href=https://gitlab.com/ravisaroch/star-protocols] and clicking on the download button, then selecting “zip” to download the pipeline to your system.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Fx4.jpg\nData collection\nTiming: ∼1–2 h (for step 3)\nHere we describe the various steps for downloading gene expression and network data from different open-source databases.\nCollection of PPI interactions, gene co-expressed interactions and case-control gene expression datasets.\nCollect the experimental and predicted protein-protein interaction (PPI) data of particular species from interaction data databases:\nBiological General Repository for Interaction Datasets (BioGRID; https://thebiogrid.org[href=https://thebiogrid.org]).10[href=https://www.wicell.org#bib10]\nSearch Tool for the Retrieval of Interacting Genes/Proteins (STRING; https://string-db.org[href=https://string-db.org]).\nIn case of rice, download the interaction data from Predicted Rice Interactome Network (PRIN) databases.11[href=https://www.wicell.org#bib11]\nThe gene co-expression profile at different development and stress conditions from plant species-specific databases.\nNote: In the case of rice, download the dataset from the Rice Environment Coexpression Network (RECoN)12[href=https://www.wicell.org#bib12] via following link: https://zenodo.org/record/3257604#.YzLB_3ZBy3B[href=https://zenodo.org/record/3257604].\nDownload the gene expression profile data for particular stress condition and their respective control from the Gene Expression Omnibus (GEO) (www.ncbi.nlm.nih.gov/geo[href=http://www.ncbi.nlm.nih.gov/geo]) (Microarray Affymetrix chip data) of the National Center for Biotechnology Information.",
    "Please visit steps 5 and 6 to detail information about downloading the Affymetrix data.\nCritical: If the user wishes to analyze the gene interaction network under bacterial pathogen biotic stress conditions, the plant gene co-expression data under bacterial biotic stress conditions should not be included in the interaction data file. Similarly, if someone wants to examine the gene network under drought stress, try not to include co-expression data of drought stress in the interaction data file.\nFilter the PPI and gene co-expression interaction data\nTiming: ∼1 h (for step 4)\nThis section includes the different steps to extract the high-quality protein-protein interaction pairs and filtration process to extract the confidence gene co-expression pair.\nThe PPI and gene co-expression data undergo a filtering process to obtain high-quality pair of interactions.\nThe authenticity of interaction evaluates using the gene ontology term. The interactions consider important if genes in the pair have at least one common gene ontology (GO)13[href=https://www.wicell.org#bib13] and store the filter pair in a space-separated .txt file (i.e., Interaction_PPI). of the interaction of the genes.\nTo begin, download all genes and associated gene ontologies from the tools mentioned above and retain just the columns containing locus ids and gene ontology terms.\n>cat GO_plantGSEA | awk '{print $5, $2}' >raw && mv raw GO_plantGSEA\n>cat GO_agriGO | awk '{print $5, $2}' >raw && mv raw GO_agriGO\nNote: Please visit the file once downloaded and select the column cautiously.\nNow, concatenate the two files.\n>cat GO_plantGSEA GO_agriGO >interaction_GO\nCompare your original interaction file with the interaction_GO file. If the locus ids in the interaction pair contain at least one similar GO term, keep them; otherwise, discard them from the file.\nNote: agriGo v2.0,14[href=https://www.wicell.org#bib14] plantGSEA15[href=https://www.wicell.org#bib15] web tools were used to extract the Gene Ontology (GO) of the pair.",
    "Filter the gene co-expression profile downloaded from different databases.\nAnalyze the interaction pair and retain the pairs with a Pearson correlation coefficient (PCC) ≥ 0.7 because PCC values between 0.7 and 1.0 show strong linear relations and are identified as potential candidates for the interaction pair.\n>awk '$4 >= 2' filename | awk '{print $1, $2}' > FCO\nNote: “filename” is the file name in which interaction was stored (step 4a).\nAnalyze the output files (FCO) having PCC of the pair ≥ 0.7 and retain the interaction pairs having one of the genes in the pair corresponding to the transcription factor (TF). To do this, download the list of the TF of species of interest (Oryza sativa in the present case) from the Plant Transcription Factor Database (http://planttfdb.gao-lab.org/[href=http://planttfdb.gao-lab.org/]).\n>gunzip ∗_TF_list.txt.gz\n>mv ∗_TF_list.txt TF_file\n>awk -F\"\\t\" '{print $2}' TF_file | awk '!a[$0]++' >list_TF\nNote: The above commands decompress all the files that include a list of transcription factors from various families. The next command moves the list of transcription factors from separate files to a single concatenated file, and the final command contains each transcript factor once to remove data duplication.\nExtract the filter pair having at least one TF in the gene pair, and copy the below awk script to the Ubuntu terminal.\n>awk ' FNR==NR{a[$0]=$0\n> next\n>}{\n> for (i=1; i<=NF; i++) {\n>  if ($i in a) {\n>  print a[$i],$0 | \"sort -k1\"\n>    }\n>  }\n>}' list_TF FCO | awk '{print $2,$3}' | awk '!a[$0]++'\n>Filtered_Interaction\nConcatenate the file of filtered PPI (Interaction_PPI) and the file of filtered co-expression (Filtered_Interaction) and extract the unique pair of genes by copying the below command on the Ubuntu terminal:\n>cat Interaction_PPI Filtered_Interaction | awk '!(a[$1FS$2]++ || a[$2FS$1]++)'>Interaction",
    "Note: “Interaction” is the file that contains the final pair of interactions after the filtering process.\nDownload the Affymetrix expression profile data\nTiming: ∼ 1–2 h (depending on the number of samples) (for step 5)\nThis section includes in details for downloading the gene expression data (Treatment/Control) from the NCBI database through command-line or graphical user interface.\nDownload the expression data profiles from GEO (NCBI) using the R library GEOquery16[href=https://www.wicell.org#bib16] or download directly by accessing the GEO database.\nNote: This protocol's main aim is to identify genes expressed during the given stress condition and the network architecture of these genes in the same condition. As such, the microarray data samples are required from treatment and control conditions for the species of interest (in this case, one of the model plant organisms is Oryza sativa).\nDownload the raw .CEL files of the specific series using the GEOquery package use the below command:\n>sudo R\n>library(GEOquery)\n>getGEOSuppFiles(\"GSE69235\")\nThe above command creates the directory GSE69235, which contains another directory GSE69235 RAW.tar.\nUse the following command to decompress this directory:\n>tar -xvf GSE69235/GSE69235_RAW.tar\nIt downloads all the .CEL files of the GSE69235 series. Keep relevant .CEL data files and eliminate the remainder by manual selection.\nNow, using the commands listed below, decompress the retained files.\n>gzip -d GSE69235/ GSE69235_RAW/∗CEL.gz\nTo download the sample directly from a browser, we look for rice data samples treated with the bacterial pathogen Xanthomonas oryzae and their respective control samples in the GEO database.5[href=https://www.wicell.org#bib5]\nGEO datasets may be found at https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi[href=https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi].\nSelect platforms from the Browse Content menu.\nIn the search field, insert Affymetrix Rice Genome Array.\nNote: You may readily get the data set by inputting the accession number at https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi[href=https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi].",
    "In the GEO accession search box, enter the accession number (In the case of rice, this is GPL2025).\nThere are several GSE series providing experiment descriptions. To view the details of the control and treatment samples, click on the GSE series. To get the expression profile, click on the RAW.tar file for each series at the bottom of the page.\nPre-processing and normalization of the Affymetrix data\nTiming: ∼ 1–2 h (for step 6)\nThis section provides the detailed steps for pre-processing and normalization of the raw Affymetrix (.CEL) data, graphical representation of the individual data set, and identification of the MSU locus id for each affy id of the data set.\nDownload the multiple series of experiments of interest.\nNote: The zipped directory first needed to unzip the raw samples (.CEL files) data, and only the CEL files relevant to the research were maintained. In contrast, the remaining CEL files were deleted from the specified directory.\nNote: In the current study, we employed different series of experiments for the treatment and control samples, including GSE69235, GSE19844, GSE3341, GSE34192, GSE43050, GSE36272, GSE49242, GSE61832, GSE61833, GSE53940, and GSE34192. A complete list of samples is provided in Table S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Mmc1.xlsx]. Using GSE69235 as an example, describe the reading, normalization, and downstream steps below.\nOpen the Ubuntu terminal and run the snippet below to launch the R environment with sudo privileges.\n>sudo R\nTo access the various R libraries, use the commands listed below in the R environment.\n>library(GEOquery)\n>library(Biobase)\n>library(BiocGenerics)\n>library(parallel)\n>library(affy)\n>library(genefilter)\n>library(gcrma)\n>library(simpleaffy)\n>library(affyPLM)\n>library(preprocessCore)\n>library(RColorBrewer)\n>library(ggplot2)\n>library(biomaRt)\n>library(devtools)\n>library(inSilicoMerging)\nDownstream analysis for GSE69235 experimental series data.",
    "Note: Use the simpleaffy package, read the specific file define the phenotypic dataset of the CEL file. The format for the covdesc file for the GSE69235 series data is provided in the link described as: https://gitlab.com/ravisaroch/star-protocols/-/blob/main/RAW_FILTERED_DATA/covdesc_GSE69235[href=https://gitlab.com/ravisaroch/star-protocols/-/blob/main/RAW_FILTERED_DATA/covdesc_GSE69235].\nRead the manually generated covdesc file and the raw .CEL file from the directory (troubleshooting 3[href=https://www.wicell.org#sec6.5]).\n>GSE69235_raw <- read.affy(\"covdesc_GSE69235\", path = \"/path/to/CEL/directory/GSE69235_RAW\")\nCritical: Sample directory's covdesc files were utilize to read the data as data frame. It is a white space delimited file with the first column contain the name or entire path of the .CEL file in the directory and the second column containing the experimental factor. These are the components of the phenotypic experiment.\nCreate the expression matrix using Robust Multi-array Average (RMA) method.\n>GSE69235_rma <- call.exprs(GSE69235_raw, \"rma\")\n>GSE69235_eset <- exprs(GSE69235_rma)\nSave the normalized data in an external text file.\n>write.exprs(GSE69235_rma, file=\"GSE69235_rma\")\nPerform the quality control test for the identification of the outlier (if available).\n>GSE69235_distance <- dist(t(GSE69235_eset), method = \"maximum\")\n>GSE69235_cluster <- hclust(GSE69235_distance)\nVisualization of the series data for the quality control analysis.\nCluster formation of the GSE series data for the identification of the outlier samples (Figure 1[href=https://www.wicell.org#fig1]A)\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Fig1.jpg\nFigure 1. Graphical representation of pre-processing of the data of GSE69235\n(A) The cluster dendrogram represents the relationship within the CEL data files of GSE69235.\n(B) Heatmap of the top 200 genes to show the expression of the genes in different samples of series.\n(C and D) Boxplot shows the distribution of pre-normalized and normalized data.\n(E and F) Histogram representation of pre-normalized and normalized data.\n(G and H) Relative Log Expression (RLE) and Normalized Unscaled Standard Errors (NUSE) data distribution.\n>png(\"GSE69235_cluster.png\")\n>plot(GSE69235_cluster)\n>dev.off()\nHeatmap of all CEL files of individual series (Figure 1[href=https://www.wicell.org#fig1]B).\n>png(\"GSE69235_Heatmap.png\")\n>par(oma=c(7,0,1,0))\n>heatmap(exprs(GSE69235_rma[1:200,]), main = \"Heatmap of top 200 Genes\")\n>dev.off()",
    "A standardized way of displaying the distribution of pre-normalized and normalized data using a boxplot (Figures 1[href=https://www.wicell.org#fig1]C and 1D).\n>png(\"GSE69235_boxplot.png\")\n>par(mar=c(12,4,4,2)+0.1)\n>par(mfrow=c(1,2))\n>boxplot(GSE69235_raw, las = 2, col = brewer.pal(6,\"Set1\"), main=\"Pre Normalized Data\")\n>boxplot(GSE69235_rma, las = 2, col = brewer.pal(6,\"Set1\"), main=\"Normalized Data\")\n>dev.off()\nFrequency distribution of data using a histogram (Figures 1[href=https://www.wicell.org#fig1]E and 1F).\n>png(\"GSE69235_Histogram.png\")\n>par(mfrow=c(1,2))\n>hist(GSE69235_raw, col=brewer.pal(9, \"Set1\"), main = \"Pre Normalized Data\")\n>hist(GSE69235_rma, col=brewer.pal(9, \"Set1\"), main = \"Normalized Data\")\n>dev.off()\nIdentification of the variation in the different CEL files individual series (Figures 1[href=https://www.wicell.org#fig1]G and 1H). Unwanted data fluctuation may be pretty harmful. Box plots of Normalized Unscaled Standard Errors (NUSE)4[href=https://www.wicell.org#bib4] and Relative log expression (RLE)17[href=https://www.wicell.org#bib17] are two effective tools for visualizing variations in high-dimensional data and have been used in recent studies.18[href=https://www.wicell.org#bib18] The corrected arrays may be identified in the boxplot by being centered at 0 in the RLE plot and at 1 in the NUSE plot.\n>GSE69235.qc <- fitPLM(GSE69235_raw)\n>png(\"GSE69235_RLE.png\")\n>RLE(GSE69235.qc, col = brewer.pal(9,\"Set1\"), main = \"RLE_GSE69235\")\n>dev.off()\n>png(\"GSE69235_NUSE.png\")\n>NUSE(GSE69235.qc, col = brewer.pal(9,\"Set1\"), main = \"NUSE_GSE69235\")\n>dev.off()\nNote: Similarly performed step 9 to all data series for the downstream analysis.\nRemoval of Non-biological experimental variation. The steps include removing the batch effect using Combining Batch Effect When Batches of Gene Expression Microarray Data (Combat),19[href=https://www.wicell.org#bib19] which is part of inSilicoMerging packages.7[href=https://www.wicell.org#bib7]\nNote: Microarray data is frequently subject to significant variability due to batch effect across the multiple microarray experiments, and the task of combining the experiment to downstream analysis is difficult. So, removing the batch effect is necessary for the statistical significance of the combined data. The benefit of integrating batches of genomic data to increase statistical power is often hindered by batch effects or unwanted variation in data caused by differences in technical factors across batches.",
    "Firstly, make a list of all rma files generated from the above step 9.\n>eset_rma <- list(GSE69235_rma, GSE19844_rma, GSE3341_rma, GSE34192_rma, GSE43050_rma, GSE36272_rma, GSE49242_rma, GSE61832_rma, GSE61833_rma, GSE53940_rma, and GSE34192_rma)\nMerged the file without and with the CombBat method.\n>merged_rma_none <- merge(eset_rma, method = \"NONE\")\n>merged_rma_COMBAT <- merge(eset_rma, method = \"COMBAT\")\n>colnames(pData(merged_rma_none))\n>table(pData(merged_rma_none)[,\"sample\"])\n>table(pData(merged_rma_none)[,\"Target\"])\n>table(pData(merged_rma_none)[,\"Experiment\"])\nTo calculate the expression of the data set merged with ComBat method.\n>merged_rma_COMBAT_exprs <- exprs(merged_rma_COMBAT)\n>write.table(merged_rma_COMBAT_exprs, \"merged_COMBAT_exprs\")\nCritical: z-score transformation method can be used to remove the batch effect instead of combat, which is also part of inSilicoMerging packages.\nVisualization of the dataset without merging with specific methods (without batch effect removed) and combined with Combat methods.\nInterpret the data with the multidimensional scaling method (Figures 2[href=https://www.wicell.org#fig2]A and 2B).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Fig2.jpg\nFigure 2. Graphical representation of the merging of the different series data\n(A) Multidimensional scale (MDS) plot of two series of data merging without (without removing the batch effect) any specific technique. Huge inter-study biases can be observed, hindering further analysis of this combined data set.\n(B) MDS plot showing the data of two series merging with batch effect remove using comBat method. The Combat transformation samples are more clustered based on the target biological variable of interest (red: control, green: treated with the pathogen) instead of the study they originate from. The scale in the combat transformation is also reduced as the method tries to move the samples toward the central.\n(C and D) Data distribution in the histogram without and with the batch effect remove.\n(E and F) Relative log expression distribution of the normalized data of two series before batch effect removal and after batch effect removal.\n>png(\"MDS Plot_none.png\")\n>plotMDS(merged_rma_none, colLabel=\"Target\", symLabel=\"Experiment\", main = \"No Transformation\")\n>dev.off()\n>png(\"MDS Plot_COMBAT.png\")\n>plotMDS(merged_rma_COMBAT, colLabel=\"Target\", symLabel=\"Experiment\", main = \"COMBAT Transformation\")\n>dev.off()",
    "Relative log expression plot without or with the ComBat method (Figures 2[href=https://www.wicell.org#fig2]C and 2D).\n#No Transformation\n>png(\"No Transformation.png\", width=1000, height=400)\n>plotRLE(merged_rma_none, colLabel=\"Target\")\n>dev.off()\n#Combat Transformation\n>png(\"COMBAT Transformation.png\", width=1000, height=400)\n>plotRLE(merged_rma_COMBAT, colLabel=\"Target\")\n>dev.off()\nHistogram distribution of data before and after batch effect removal using that Combat method (Figures 2[href=https://www.wicell.org#fig2]E and 2F).\n>png(\"Histogram Before_Batch_Effect_Remove.png\")\n>hist(merged_rma_none, col=brewer.pal(9, \"Set1\"), main = \"Histogram Before Batch Effect Remove\")\n>dev.off()\n>png(\"Histogram After_Batch_Effect_Remove.png\")\n>hist(merged_rma_COMBAT, col=brewer.pal(9, \"Set1\"), main = \"Histogram After Batch Effect Remove\")\n>dev.off()\nFiltration of the low-intensity reads from the dataset matrix and saving the remaining data to the external file.\nCalculate the raw median intensity of the data.\n>library(limma)\n>merged_median <- rowMedians(exprs(merged_rma_COMBAT))\n>write.table(merged_median, file=\"merged_median\")\nGenerate the histogram of the median intensity of the expressed genes.\n>hist_res <- hist(merged_median, 100, col = \"white\", freq = FALSE, main = \"Histogram of the Median intensities\", border = \"brown\", xlab = \"Median intensities\")\n>threshold <- 4\n>png(\"merged_median.png\")\n>plot(merged_median)\n>dev.off()\nSet the cut-off threshold straight line.\n>png(\" Cutoff.png\")\n>hist_res <- hist(merged_median, 100, col= \"white\", freq = FALSE, main = \"Histogram of the Median intensities\", border = \"brown\", xlab = \"Median intensities\")\n>abline(v = threshold, col = \"coral4\", lwd = 2)\n>dev.off()\nPause point: Cut-off threshold may vary and depend on the quality dataset. The limma package of R gives the median intensity plot of the expressed genes.\nVisualize the intensity plot based on median intensity and density, set the threshold and extract the genes with median intensity greater than a threshold value.\n>no_of_samples <- table(paste0(pData(merged_rma_COMBAT)>Target))\nsamples_cutoff <- min(no_of_samples)\n>idx_threshold <- apply(merged_rma_COMBAT, 1, function(x){sum(x >threshold) >= samples_cutoff})\n>table(idx_threshold)\n>write.table(idx_threshold, \"idx_threshold\")\n>COMBAT_filtered<- subset(merged_rma_COMBAT, idx_threshold)\n>COMBAT_filtered_exprs <- exprs(COMBAT_filtered)\n>write.table(exprs(COMBAT_filtered), file=\"COMBAT_filtered\")\nReplace the Affymetrix ids with the gene or locus ids as interaction data is available in the Gene of locus ids.",
    "Note: The biomaRt,8[href=https://www.wicell.org#bib8],9[href=https://www.wicell.org#bib9] a Bioconductor package, can annotate the wide range of gene product identifiers with comprehensive gene symbol and Gene ontology information. It extracts the Rice Annotation Project (RAP) ids from the Affymetrix probe ids.\n>mart <- useEnsembl(\"plants_mart\", \"osativa_eg_gene\",host = \"plants.ensembl.org\")\n>annot<-getBM(c(\"affy_rice\",\"ensembl_gene_id\",\"external_gene_name\"),\"affy_rice\",featureNames(COMBAT_filtered), mart)\n>annot2 <- data.frame(PROBEID = featureNames(COMBAT_ filtered), annot[match(featureNames(COMBAT_ filtered), annot[,1]),])\n>write.table(annot2, \"biomart_annot2\")\nNow exit the R environment by pasting the below command in the R terminal environment.\n>quit()\nOpen the terminal in a new window or tab and paste the below command to extract the RAP ids corresponding to Affymetrix probe ids. The Affymetrix ids having no corresponding RAP ids are discarded.\n> awk '{print$0}' biomart_annot2_eti | awk '{print$2\"\\t\"$4}' | sed 's/\"//g' | sed '/NA/d' | awk '!a[$2]++' > probe_rap_raw\nIdentification of the Genome Annotation project (MSU) locus ids corresponding to the RAP ids.\n>awk '{print$0}' RAP-MSU_2019-03-22.txt | sed '/None/d' | sed '/none/d'| sed 's/\\./\\t/g'| awk '{print$1\"\\t\"$2}' > RAP-MSU_2022-09-22\n> awk 'NR==FNR{a[$2]=$1; next} $1 in a' probe_rap_raw RAP-MSU_2022-09-22 | awk '{rec[NR]=$0; key[NR]=$2; cnt[$2]++} END{for (i=1; i<=NR; i++) if (cnt[key[i]] == 1) print rec[i]}' > RAP_MSU\n> awk 'NR==FNR{a[$1]=$2; next} $2 in a {print$0, a[$2]}' RAP_MSU probe_rap_raw > probe_rap_msu_ids\nNote: The data MSU ids corresponding to the RAP id were downloaded from www.ricechip.org[href=http://www.ricechip.org/] on 2022-09-22.\nReplace the Affymetrix ids with MSU locus ids in the original data file.\n>awk '{print$3}' probe_rap_msu_eti_ids > msu_ids\n>awk 'BEGIN {for (i=1; i<= 17989; i++) print i}' > number_total\nPause point: Here total number of ids in the MSU_ids (Rice Genome Annotation Project) files is 17989. The number may vary with other datasets.\n>awk '{print$1\"\\t\"$3}' probe_rap_msu_ids > probe_msu_ids && paste number_total probe_msu_eti_ids > number_probe_msu_ids\n>sed 's/\"//g' COMBAT_filtered >COMBAT_filtered_without_quotes\n>awk 'FNR==NR{a[$1]; next}; ($1 in a)' probe_rap_msu_eti_ids COMBAT_filtered_without_quotes > probe_intensity_values\n>paste msu_ids probe_intensity_values | sed 's/\\t/ /g' > probe_locus_intensity_values",
    ">paste msu_ids probe_locus_intensity_values | awk '!($2=\"\")' | cut -d \" \" -f 1,3- > locus_intensity_values\n>awk '{$1=\"\"; print $0}' locus_intensity_values | sed 's/ˆ //g' > Input_Data_File\nNote: 'Input_Data_File' (https://gitlab.com/ravisaroch/star-protocols/-/blob/main/RAW_FILTERED_DATA/expression_with_gene_and_samples_names[href=https://gitlab.com/ravisaroch/star-protocols/-/blob/main/RAW_FILTERED_DATA/expression_with_gene_and_samples_names]) is the file containing the MSU_ids and their intensity in the different samples.\nPrepare the files as input for the deep learning algorithms (DLNet) to identify the potential gene target.\nTranspose the file matrix ‘Input_Data_File’ as algorithms use the file as sample name should be in a row and feature name in columns. Use the below code to transpose the file:\n>awk -F, '\n>{\n>  for (i=1; i<=NF; i++) {\n>    a[NR,i] = >i\n>  }\n>}\n>NF>p { p = NF }\n>END {  \n>  for(j=1; j<=p; j++) {\n>    str=a[1,j]\n>    for(i=2; i<=NR; i++){\n>      str=str\" \"a[i,j];\n>    }\n>    print str\n>  }\n>}' Input_Data_File >Raw_file\nAdd the last column as a class of the data (0 and 1).\nAt last, remove the first row (feature or locus ids) and column (sample name) from the file and save in comma-separated format. Please visit the given link for more detail (https://gitlab.com/ravisaroch/star-protocols/-/blob/main/expression[href=https://gitlab.com/ravisaroch/star-protocols/-/blob/main/expression]).\nCritical: The number of features should be the same in the expression and interaction data files.\nNow we have three files require for the implementation of the deep learning algorithm:\nGenes: Containing a list of the genes or locus_ids.\nInteraction: File containing the pair of the interaction of the above genes.\nExpression: File ‘expression’ is a comma-delimited file with p features and n samples containing the expression value of each feature in individual samples and the last column containing the class of the individual samples (0 or 1).\nImplementation of the DLNet (deep learning algorithm)\nTiming: ∼2–3 h (for step 19)",
    "In this section, we go over each step of implementing DLNet algorithm in filtered data, tuning the algorithm parameters to obtain the best classification model, and identification of the best host target genes in response to biotic stress.\nApply the DLNet algorithms on the filtered data files.\nNote: The study's primary goal is to identify the potential target gene and analyze the network architecture. Downloaded repository in step 1, containing the above three files (expression, genes, and interaction), and for script required to execute the below steps to calculate the feature importance score with 10-fold (Number of the fold change may be different as per requirement) cross-validation. Markov cluster method (MCL) is used for discerning quality functional modules from biological networks.1[href=https://www.wicell.org#bib1],6[href=https://www.wicell.org#bib6]\nOpen the terminal, change the directory to the folder where the above repository is downloaded, and paste the above three files explained in steps 17 and 18.\nNow paste the below command into the current directory (troubleshooting 4[href=https://www.wicell.org#sec6.7]).\n>chmod 755 dlnet.sh\n>./dlnet.sh expression RF Genes\nWhere dlnet.sh is the repository shell script, expression is the expression profile file, RF is the random forest method, and Genes is the list of features in the same order as in the expression profile. The detailed protocol is described in Figure 3[href=https://www.wicell.org#fig3] and our previous study Kumar et al.1[href=https://www.wicell.org#bib1]\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Fig3.jpg\nFigure 3. The complete workflow of the DLNet to construct the host genes immune related network in response to pathogen\n(A and B) (A) The pre-analyzed mRNA expression profile and (B) filtered protein-protein interaction and gene co-expression data are input in the DLNet algorithm.",
    "(C) The algorithm’s feature extraction part selects the most useful p features from the expression profile and then builds the directed feature graph with the help of the Random Forest. This algorithm-generated graph differs significantly from the previously created filtered network, including protein-protein interaction and gene co-expression profiles.\n(D) The directed features graph is used as input by the algorithm’s deep learning part. The part consists of hidden layers corresponding to hidden neurons. The hidden neuron in the first layer is the same as the features in the directed features graph. The other three hidden layers consist of 64, 16, and 2 hidden neurons, respectively. The algorithm created each feature’s gene score in accordance with its participation in the data classification.\n(E) All the genes present in the network are arranged in descending order based on their score in the data classification. The running sums were computed for all genes starting from top to bottom ranked.\n(F) The Markov Cluster (MCL) algorithm is used to construct the modular network from the filtered network (B).\n(G) The ranked genes present in the module increase the module’s enrichment score (ES); when a gene is absent, the ES for that module falls, and the running sum generates the final ES. Similarly, the ES is generated for the “n” number of modules.\n(H) The phenotypic class labels (0, 1) were permutated randomly to calculate the background ES for all modules.\n(I) Repeat all the steps (A to G) and generate the background ES for n number of modules.\n(J) Perform a student-t-test between the original and background-generated ES and extract the significant modules based on p value < 0.05.",
    "Pause point: Several parameters are used in the script and may change per requirement. Parameters for hyperparameters and model training are supplied via a Python script (dlnetRank.py). The cross-validation parameters and background enrichment scores for significant module extraction can be found in the (dlnet.sh) script (troubleshooting 5[href=https://www.wicell.org#sec6.9]).\nAfter running the above command, the information is shown in the Ubuntu terminal to enter the name interaction file.\n>Please Enter your interaction data file:\nNow enter the filename, hit enter, and wait for the analysis to complete.\n>Please Enter your interaction data file: Interaction\nAfter implementation of the DLNet algorithm, the following files are generated: Avg_feature_Imp (Table S2[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Mmc2.xlsx]), AUC_FPR_TPR (Table S3[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Mmc3.xlsx]), MCL_modules (Table S4[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Mmc4.xlsx]), Significant_modules (Table S5[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Mmc5.xlsx]), and ROC.png (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2272-Fig4.jpg\nFigure 4. The area under the ROC curve plot of the DLNet model for classification of the data (Treatment vs Control)\nThe total module constructed using the mcl algorithm is then subjected to a statistical student’s t-test. Deep learning-based enrichment analysis is carried out to get functional annotations for each module using plantGSEA.15[href=https://www.wicell.org#bib15] It will be then transferred to Cytoscape or any other program for network visualization (troubleshooting 6[href=https://www.wicell.org#sec6.11])."
  ],
  "subjectAreas": [
    "Genomics",
    "Immunology",
    "Plant Sciences",
    "Bioinformatics",
    "Systems Biology",
    "Computer Sciences",
    "Microbiology"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Ecology & Environmental Biology",
    "Bioinformatics & Computational Biology"
  ]
}