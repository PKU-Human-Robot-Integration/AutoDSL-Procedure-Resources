{
  "id": 3619,
  "origin_website": "Cell",
  "title": "Protocol for biomodel engineering of unilevel to multilevel biological models using colored Petri nets",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nModeling preparation\nTiming: hours to months based on model's complexity\nThis part describes the recommended steps before starting the actual model development.\nProblem statement.\nProvide a clear statement of the biological problem to be studied and the purpose for developing the multilevel model.\nDetermine the system boundaries, i.e., what parts should be considered in the model.\nIdentify the levels to be considered (e.g., cell, tissue and organ) and what types, if any, of spatial relationships are required to describe the system.\nCreate a detailed document Problem Description & Requirements Specification for recording all of these, including a set of requirements regarding the expected behavior at the levels of both components and system.\nInformation collection about the biological system to be studied.\nNote: According to the purpose of the modeling and identified problem domain, collect relevant information including spatial relationships from the literature and databases for inclusion in the multilevel model.\nSystem analysis and design.\nNote: Considering the purpose of the modeling and the information available, perform analysis on the biological system to determine the main model components required, their instances at each level, their interactions within and between levels, and their specific spatial relationships.\nDetermine the relationship between components.",
    "Note: Determine the structure of the model in terms of the number and name of levels, the components at each level and the connection of components between levels. Often the component structure will be strictly linear, but can also be a tree or more generally an acyclic graph. For example, considering the modeling of a Drosophila fly wing tissue,13[href=https://www.wicell.org#bib13] there are four levels, each containing one component: tissue, cell, compartment and biochemical reaction network. In our model of bacterial quorum sensing,24[href=https://www.wicell.org#bib24] there are three levels: bacterial colony, bacterium, and biochemical reaction network; the latter comprises two components (AI-2 production, and AI-2 detection triggering biofilm formation).\nDetermine the relationship between instances.\nNote: Determine the organization of the instances within and between levels, introducing the notion of spatial relationships. For example, considering a multicellular organism, at the tissue level, cell instances are organized into regular or irregular patterns in one-, two-, or three-dimensional space. At the cell level each cell generally contains instances from several intra-cellular components, for example cytosol, mitochondrion and nucleus in eukaryotes. There is only one instance of the cytosol and the nucleus, but there are several instances of the mitochondrion - the mitochondria. At the intra-cellular level, each instance of a component contains a network of biochemical reactions. The Drosophila fly wing case study presents a tissue model comprising tightly packed hexagonal cell instances, the internal structure of which is modeled by several virtual compartments.13[href=https://www.wicell.org#bib13] In the quorum sensing example,24[href=https://www.wicell.org#bib24] the two components are instantiated in a Cartesian two-dimensional space.\nComponent-level modeling\nTiming: hours to days based on model's complexity",
    "This part describes the options for obtaining a Petri net model for each component (e.g., a compartment or a cell) of the multilevel model. Obtaining each model component can be realized independently and in parallel within a collaborative team.\nComponent construction.\nNote: This can be done in either of three ways (see Section 13-15[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for software use).\nImport an existing SBML model from some library or other external sources.\nNote: Pre-existing models need to be checked carefully for semantic errors, for example mistakes in operations or spelling in biochemical equations. The reuse of an SBML model developed for FBA requires the addition of initial marking (concentrations) and rate functions; see Gilbert et al.32[href=https://www.wicell.org#bib32] for more details, including automated editing and error correction.\nOpen the Snoopy software (see Figure 7[href=https://www.wicell.org#fig7] for the main interface of Snoopy).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Fig7.jpg\nFigure 7. Modeling and simulation interface of Snoopy\n(A) Snoopy’s main interface, with which you can select a modeling element (left upper tree), display the hierarchical net organization (left middle tree), declare constants and colors (left lower tree), and check the Log window for any syntax issues.\n(B) The unfolding dialog, with which you can choose an unfolding engine and the number of threads to be used for unfolding.\n(C) The simulation dialog, with which you can configure the model involving the marking set, function set and parameter set, and configure the simulator including simulator semantics and solver, e.g., (D) gives the simulation properties of the chosen BDF solver.\n(E) The simulation dialog, with which you can manage the import and export of data, and manipulate the views to show simulation results.\n(F) Display of simulation results, where simulation traces (views) can be selected, configured and exported.",
    "(G) Node selection dialog, which appears by clicking the ‘Edit Node List’ button in (F).\nSelect the ‘Import’ item in the ‘File’ menu and pop up the ‘Import’ dialog.\nOn the ‘Import’ dialog, choose ‘Import SBML to discrete/continuous/stochastic Petri net’ and then click the ‘OK’ button.\nReuse, and if required modify, an existing model available in the Snoopy format.\nNote: Similarly, semantic error checking should be carefully performed. This can be simply done by opening a net in Snoopy by clicking the ‘Open’ button.\nConstruct a new model from scratch. See Figure 8[href=https://www.wicell.org#fig8] for an illustrative example (see the Delta Notch model in key resources table[href=https://www.wicell.org#key-resources-table]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Fig8.jpg\nFigure 8. Illustration of component modeling with the Delta Notch pathway\n(A) A CPN model of a typical Delta Notch pathway in a single cell from a multi-cellular organism; see Section 12[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for more details. To make this reduced component model work, we add an external entity Dn, which simulates the transmembrane ligand Delta (D) from neighboring cells. Dn is modeled as a constant stimulus.\n(B) The rate functions used to produce plots (D) and (E).\n(C) The constants used in the rate functions, adapted from Collier et al.35[href=https://www.wicell.org#bib35]\n(D and E) Two plots for Dn = 0.001 and Dn = 1, respectively. The increase of Dn (from 0.001 to 1) produces more NI, which has an inhibitory effect on the production of D in the same cell (reducing D from about 10 to 0 in the steady state).\nCreate a new Petri net file.\ntable:files/protocols_protocol_3184_1.csv",
    "Note: Open the Snoopy software (see Figure 7[href=https://www.wicell.org#fig7] for the main interface of Snoopy), click the ‘New’ button and choose a Petri net type (e.g., stochastic Petri net). See Table 1[href=https://www.wicell.org#tbl1] for some guidelines how to choose a suitable net class and Section 5[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for more detailed information. Then a new drawing window (canvas) appears, corresponding to the chosen Petri net type.\nDraw species as place nodes and set initial marking.\nNote: In Petri nets, places (circles in Snoopy) may represent different types of species like ions, molecules, proteins, and complexes. See Section 13[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for the Petri nets elements. To add a new species, select the place icon and click on the appropriate location on the canvas. Then edit its properties by double clicking the icon that corresponds to the species. In the properties editing dialog, add in the ‘General’ tab the name of the species, the initial marking and give a description in the ‘Comment’ field, including any related literature references. Finally, set up the graphic properties, e.g., pen and brush colors, width and height of the node. All node attributes can be made visible/invisible by selecting/deselecting the corresponding option ‘show’.",
    "Note: We can specify the initial number of tokens of a place with a constant, which facilitates the exploration of a model in different initial marking configurations. To define a constant, double click the ‘Constants’ item in the ‘Declarations’ window, and the constant definition dialog appears, where one can add, delete or check a constant. When defining a new constant, specify its name, group, type (int or double) and its value in the Main value set. Additionally, further value sets can be defined, renamed and deleted. Constants are organized in groups; there are two pre-defined groups: marking and parameter, which are subsumed by the third pre-defined group ‘all’. Further groups can be defined. A model can be configured by help of these groups and value sets, before animating, analyzing or simulating it.\nCritical: The use of constants has to obey the general syntax rules of Petri nets. Thus, which types of constants are available (int, double) depends on the net class. Discrete net classes (such as PN, SPN) permit only integer constants for arc weights and initial marking, while net classes with continuous nodes (CPN, HPN) also permit the use of double constants for arc weights and initial marking.\nDraw biological reactions as transition nodes.\nNote: In Petri nets, transitions may represent chemical reactions, state shifts, transport/diffusion etc. To add a new reaction, select the transition icon and click on the appropriate location on the canvas. Then edit its properties by double clicking the icon that corresponds to the reaction. In the properties editing dialog, modify the properties in an analogous way as for the place nodes.\nDefine rate functions for transitions (appropriate for SPN, CPN, HPN).",
    "Note: Double click a transition, and then edit its properties. In the properties editing dialog, fill in a corresponding rate function in the ‘Function’ domain in the ‘Functions’ tab. See Section 5[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for how to define rate functions for the different net classes.\nCritical: Different predefined kinetic rate functions are available, e.g., mass action or Michaelis Menten. These rate functions can be chosen with the help of the function assistant in the ‘Functions’ tab. Besides, we recommend the definition and use of (double) constants for any kinetic parameters, as this facilitates the exploration of the model using different parameter settings defined as value sets. Moreover, we can define more than one rate function for a transition in the ‘Function overview’ dialog by clicking the ‘Add function set’ button, which will add another rate function for each transition. Thus, for each transition we can specify different forms of rate functions in different function sets.\nDraw edges.\nNote: Note that we use the terms ‘edge’ and ‘arc’ interchangeably. Edges connect place nodes and transition nodes and specify the relationships between these two types of nodes. To add an edge, select an appropriate edge type (e.g., standard or read arc). Click on the source node, and move the mouse pointer, while keeping the mouse button pressed, to the target node, where the mouse button is released. Alternatively, any mouse click on the way from the source to the target node will set an auxiliary point for the edge, permitting curved edges. By double clicking an arc and opening the properties editing dialog, we can specify a multiplicity and set the graphic properties for the arc. Likewise, the multiplicity permits a constant.",
    "Critical: Arcs always connect nodes of different type (place, transition). The attempt to connect two places (transitions) is simply ignored. Different types of arcs play distinct roles, which should be properly chosen, e.g., correctly use read arcs and modifier arcs, see Section 3[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2].\nApply logical nodes (optional).\nNote: Logical nodes can improve the readability of a large network by reducing the crossing of links between nodes. To apply logical nodes, choose a set of nodes with an identical name. Enable the ‘Logic’ checkbox in the ‘General’ tab for this set, either by double clicking on each node to open its properties editing dialog one after the other, or by selecting the whole set, followed by ‘Edit selected elements’. After that, all these chosen nodes become gray and changing the properties of one node will immediately affect all the others.\nApply macro nodes (optional).\nNote: Macro nodes permit the structuring of a model into meaningful hierarchical subsets to reflect the physical structure of a biological system, e.g., compartmentalization of a cell.\nTo apply macro nodes, first construct the net as a flat net. Then select a subnet and choose the Coarse item in the ‘Hierarchy’ menu. Select an appropriate coarse element (macro place or macro transition) and click the OK button. After that, the selected subnet will be included in a macro node. Similarly, change the name of the macro node by doubling click the node, which will open its properties editing dialog.",
    "Critical: The use of logical nodes and macro nodes can greatly increase the readability of a model, and hence facilitate debugging. If appropriately applied, they should never have an influence on the underlying structure of the model, but just change the style of representation (troubleshooting 1[href=https://www.wicell.org#sec5.1]). See Section 2[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for more details on how to use these two kinds of nodes.\nAdjust model layout.\nNote: A readable model layout is imperative to reveal the model structure and facilitates further analysis.\nIn Snoopy, three automatic layout algorithms are offered -- Planarization, FMMM and Sugiyama -- which can be found in the ‘Edit/Layout’ menu. However, automatic layout may not reflect the physical structure of a component, e.g., a compartment or cell. Therefore, manual adjustment of the model layout is usually preferred. More helpful options to amend the layout can be found in the ‘Edit/Transform shapes’ menu. The layout of edges can be fine-tuned by adding auxiliary points to an existing edge by a cmd-mouse (ctrl-mouse) click.\nNote: As complementary material for component-level modeling we suggest,24[href=https://www.wicell.org#bib24],34[href=https://www.wicell.org#bib34] where we have illustrated in detail model construction by module composition. See also Section 26[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for more case studies.\nComponent-level analysis\nTiming: hours to days based on model's complexity\nThis part describes the steps for thoroughly analyzing each constructed component before instantiating them to assemble the system. Steps 5 to 9 have to consider the set of requirements contained in the Problem Statement & Requirements Specification, in order to validate the component model against them, and to modify either of them accordingly, if required.\nComponent animation (appropriate for PN, XPN, SPN).",
    "Note: Snoopy supports animation via the token game for all discrete Petri net classes to explore the model behavior by following the token flow and establish initial confidence in the model.\nIn the ‘View’ menu, click the ‘Start Anim-mode’ item, which initiates the animation dialog.\nIn the animation dialog, run animation and observe the animation result.\nNote: There are several options that can be selected (see Section 16[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for details), including manual or automatic modes. In the dialog, click the ‘Play forward’ button to get an execution of the animation or repeatedly click the ‘Step forward’ button to run the animation step by step. By playing this token game, we can observe a sequence of reachable states which corresponds to a walk through the state space of a model.\nComponent structural analysis (appropriate for all Petri nets that do not involve special arcs (inhibitor, equal, reset and self-modifying arcs, see Section 3[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2]) which bring the Turing power).\nNote: Validate the component structure using standard analysis techniques of Petri net theory by help of Charlie’s static analyses. These techniques are by their very nature exhaustive and aim at conclusions about behavioral properties, such as boundedness, liveness and reversibility (see Section 19[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2]), without constructing the state space. They permit the modeler to decide if the state space is finite or infinite, and thus may guide the choice of methods applied for dynamic analyses, see Step 8. If a model is not reversible and/or not live, then the dynamic behavior observed by deterministic simulation runs and stochastic simulation runs may diverge.",
    "Note: Structural analysis techniques, which have proved their usefulness for BioModel Engineering, include: (a) elementary graph properties, (b) place and transition invariants, and (c) Siphon Trap Property (STP). Before performing these analyses, the Petri net model constructed in Snoopy should be exported to the ANDL format, which then can be loaded into Charlie. To perform structural analyses with Charlie, follow these steps (see also Section 18[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2]).\nElementary graph properties.\nNote: To decide the properties explained in Section 20[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2], click on the bar net properties. After loading a file, all elementary graph properties are immediately decided and the results are summarized in the result vector. Green stands for YES (the property holds) and red for NO (the property does not hold). Hovering with the mouse over a specific property reveals a tool tip giving the full name of that property. More details are given in the protocol window or the output window.\nPlace and transition invariants. To compute the properties explained in Section 21[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] (first row) do:\nClick on the bar IM-based analysis (IM stands for incidence matrix).\nIf only structural boundedness should be decided, choose check structural boundedness. Alternatively, select P-invariant or T-invariant.\nIf the invariants shall be written to a file, go to options, export invariants to file and specify a target folder and file name.\nNote: By default the file name will be the same as the Petri net just loaded, extended by the suffix ‘_P.inv’ or ‘_T.inv’. Finally, close this sub-window.\nClick compute.\nNote: The current state of the invariant analysis engine is shown in the thread manager window.",
    "Note: When the computation finished, the result w.r.t. CPI or CTI is shown in the result vector (the field turns from gray to red or green), and also reported in the protocol window and output window in more detail (how many invariants have been found, which places/transitions are not covered by the invariants).\nIf the export option had been selected, all invariants have been written as plain text to the previously specified file.\nNote: This file can now be loaded with Snoopy for closer visual inspection, see Section 22[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2].\nSiphon Trap Property (STP). To compute the properties explained in Section 21[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] (second row) do:\nClick on the bar siphon/trap computation.\nSelect what should be computed (siphons, traps or the STP).\nNote: Do not forget to select compute all, if you want to obtain all siphons or traps.\nIf the results shall be written to a file, select export siphons or export traps, specify a target folder and file name.\nNote: By default the file name will be the same as the Petri net just loaded, extended by the suffix ‘_DLS.res’. Finally, close this sub-window.\nClick compute.\nNote: The current state of the siphon/trap analysis engine is shown in the thread manager window.\nNote: When the computation finished, the STP result is shown (if it had been selected) in the result vector (the field turns from gray to red or green), and also reported in the protocol window and output window in more detail. At the same time any conclusions on liveness are drawn, which are now possible based on the decided structural properties, and are shown in the result vector and reported in detail in the protocol and output window (see Section 18[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2]).",
    "If the export option had been selected, all place sets have been written as plain text to the previously specified file.\nNote: Like invariants, this file can now be loaded with Snoopy for closer visual inspection, see Section 22[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2].\nOptional: There is also a place set analyzer option, which permits the compiling of place sets, which are immediately checked whether they are trap, siphon or bad siphon.\nCritical: The computation of place/transition invariants and the STP decision may be computationally expensive. Thus, Charlie should preferably run on a separate computer to that used for the main protocol. Place (transition) invariants may overlap, and in the worst case we get exponentially many place (transition) invariants w.r.t. the size of the Petri net. Thus, the interpretation of the subnets induced by the many invariants may be hard to manage. Then, the partitioning by ADT sets may help.36[href=https://www.wicell.org#bib36]\nComponent simulation (appropriate for SPN, CPN, HPN) in order to explore the behavior of the model.\nNote: Snoopy offers a number of simulation algorithms to simulate different net classes, including SPN, CPN and HPN. To simulate a model, click the ‘Start Simulation-Mode’ item in the ‘View’ menu and the simulation dialog appears. In this dialog, you usually follow the following steps.\nModel configuration.\nNote: In the ‘Model configuration’ tab, choose a marking set for places, a rate function set for transitions, and a value set for every group of constants.\nSimulator configuration.\nIn the ‘Simulation Configuration’ tab, set up the start and end of the simulation interval, together with number of observation points in the interval (interval splitting).\nChoose an appropriate simulator type (See Table 2[href=https://www.wicell.org#tbl2]) and specify its setting under ‘Properties’ (see Section 17[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2]).\ntable:files/protocols_protocol_3184_2.csv",
    "Note: Our platform supports two CPN semantics37[href=https://www.wicell.org#bib49]: adaptive semantics according to David et al.38[href=https://www.wicell.org#bib50] and bio-semantics. The latter assumes that non-enabledness coincides with a rate of zero; thus, there is no check for enabledness, which reduces the overhead and improves the overall performance. HPN/ColHPN simulation requires advanced ODE solvers; the user can choose between ARK, BDF and ADAMS. Simulation of fuzzy Petri nets employs the simulation algorithms available for the corresponding crisp counterpart.\nCritical: Each quantitative net class can be simulated using several simulation algorithms, each of which may generate similar, different, or even contradictory results. Therefore, the careful choice of an appropriate simulation algorithm is essential.\nDefine views to show simulation results.\nNote: In the ‘Views’ tab, add a new view by clicking the ‘Add’ button, and delete a view by clicking the ‘Remove’ button. Results views need to be configured by selecting whether places or transitions are shown, and which traces are to be displayed. This can be done by clicking the ‘Edit Node List’ button and then by manual selection, or by the use of regular expressions.\nPerform simulation.\nNote: Perform simulation by clicking the ‘Start Simulation’ button. At the same time, a progressing bar will show the progress of the current simulation. When the simulation ends, the total simulation runtime will be given (troubleshooting 2[href=https://www.wicell.org#sec5.3]).\nObserve simulation results in the view dialog.\nNote: Double clicking a view in the ‘Views’ tab, a window will appear in which one can observe traces of the selected places or transitions.\nExport simulation results to file.",
    "Note: Select simulation results of interest and export them in a CSV form with separators like colon, comma, semicolon or tabulator, or export the current plot to an (e.g., png, jpeg, gif, bmp) image. Alternatively, we can export simulation results during simulation running with the setting of ‘Import/Export details’ or load previously written data for display in a view.\nComponent dynamic analysis, which aims at the validation of the behavior of a component.\nNote: It complements the structural analysis in Step 6 and formalizes the evaluation of simulation traces obtained in Step 7. It can be performed in the following three ways.\nModel checking, which is used to validate the behavior of the model against desired properties.\nNote: For a general discussion on model checking and its use in the context of our platform, see Section 23[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2].\nSelect model checker.\nNote: The following guidelines may help the user to select the appropriate tool: If the model is a bounded QPN or bounded ColQPN, then analytical model checking of CTL properties with Marcie is the recommended choice. Likewise, if the model is a bounded SPN or bounded ColSPN, then CTL model checking permits the exploration of the state space in a qualitative way. If the model is a bounded SPN or bounded ColSPN, and the state space is of moderate size, then try to use analytical model checking of CSL properties which will give exact results, if computing resources permit. Otherwise perform simulative model checking of PLTL properties with Marcie or MC2. In all other cases, simulative model checking of PLTL properties with MC2 must be used.\nPerform model checking\nOptional:  Analytical CTL model checking of QPN, ColQPN, SPN and ColSPN with Marcie with the following steps (for details see the Marcie Manual.39[href=https://www.wicell.org#bib51]):",
    "Note: Ensure that you have the ANDL file of interest (e.g., GeneGate.andl) of a QPN (in this case the bounded gene gate model given in the key resources table[href=https://www.wicell.org#key-resources-table]) or CANDL file of a ColQPN. Write CTL queries and save them in a file (e.g., properties.ctl). Perform model checking using the following command:\nmarcie --net-file = GeneGate.andl --ctl-file = properties.ctl\nand you will obtain a Boolean result: TRUE or FALSE. For example, see the property:\nAG [ [gene_b = 1 & blocked_b = 0] | [gene_b = 0 & blocked_b = 1] ]\nstands for “Forever it holds that gene b is either on or blocked”.\nOptional:  Analytical CSL model checking of SPN and ColSPN with Marcie with the following steps (for details see Marcie Manual.39[href=https://www.wicell.org#bib51]):\nNote: Ensure that you have an ANDL file of interest (e.g., GeneGate.andl) of an SPN or CANDL file of a ColSPN. Write CSL queries and save them in a file (e.g., transient.csl). Perform model checking using the following command:\nmarcie --net-file = GeneGate.andl --csl-file = transient.csl --const = k = 10,t1 = 1,t2 = 1\nand you will obtain the probability of the given property. For example, see the property:\nconst integer k;\nconst double t1;\nconst double t2;\nP = ? [ F [t1,t2] protein_b >= k ] stands for “What is the probability that there are at least k molecules of protein b between time points t1 and t2”.\nOptional:  Simulative PLTL model checking of SPN and ColSPN with Marcie: with the following steps (for details see Marcie Manual.39[href=https://www.wicell.org#bib51]):\nNote: Ensure that you have an ANDL file of interest (e.g., model.andl) of an SPN or CANDL file of a ColSPN. Write PLTL queries and save them in a file (e.g., properties.ltl). Perform model checking using the following command:",
    "marcie --net-file = GeneGate.andl --ltl-file = properties.ltl --const = t1 = 1,t2 = 1\nand you will obtain the probability of the given property. For example, see the property:\nconst double t1;\nconst double t2;\nP = ? [F [t1,t2] protein_b > $v ]\nstands for “What is the probability that the number of molecules of protein b is greater than a free variable v between time points t1 and t2”.\nOptional:  Simulative model checking of all quantitative net classes using MC2 with the following steps:\nNote: First obtain a CSV data file (e.g., traces.csv) that stores the time series traces from a simulation. Write a query file (property.queries) in terms of the syntax of PLTLc (see Donaldson et al.40[href=https://www.wicell.org#bib52] for a detailed description). Issue the following command on the command line:\n“java -jar MC2Tool.jar traces.csv property.queries -time -snoopy”\nand you will obtain on the standard output the resulting analysis comprising the probability value for each property in the file property.queries. For example the property:\nP >=1 [ F ( G( d[A] = 0 ˆ [A] > 0 ) ) ]\nstands for ‘Eventually the concentration of metabolite A is at steady state greater than zero.’\nNote that the ‘ˆ’ symbol is the logical AND operator.\nNote: In the component model of the Delta Notch pathway given in Figure 8[href=https://www.wicell.org#fig8], we use the following query to check the relative concentrations of NI and D: P >=1[ F(G([NI] > [D] v [NI] < [D]) ) ] which reads, ‘Eventually either NI is always greater than D or vice versa’.\nCritical: Note that there are some syntactic differences in the way in which PLTLc properties are written in Marcie and MC2. For example, properties for MC2 require the use of square brackets around each place or transition name (troubleshooting 3[href=https://www.wicell.org#sec5.5]).40[href=https://www.wicell.org#bib52]",
    "Time series data analytics.\nNote: The simulation output comprises time series traces of the values of place markings or transition activity, which can be saved in the form of CSV (or equivalent) files. These data can then be analyzed using standard time-series data analytic techniques using software such as MATLAB or R. The actual methods used depend on the problem being investigated; see Section 24[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for possible options.\nCross validation against data sets.\nNote: Due to the dangers of overfitting a model to data, some form of cross-validation is the standard procedure to follow. This method employs resampling, iteratively selecting subsets of the data to repeatedly test and train a model.\nComponent optimization.\nNote: It is often the case that although a component has the desired net structure, the behavior exhibited is not the expected one. In general, modification of the rate constants can be attempted in order to remedy this. The simplest method is that of exploration of the values of the kinetic rate constants, which can be either achieved manually, or via automated parameter scanning – a facility provided by the Spike tool and defined in the SPC file. However, the disadvantage of parameter scanning is that if the solution space is large and complex, it will be hard to ensure that the scanned ranges will cover the possible solution, and indeed there may be more than one solution.",
    "Note: Target driven optimization is an approach that can be employed in this situation; it is a heuristic and thus not guaranteed to find the actual solution, but the best solution in a reasonable time. Optimization algorithms that can be used include: hill climbing, restart hill climbing, simulated annealing and genetic algorithms,41[href=https://www.wicell.org#bib53] and has been used in e.g., combination with model checking.40[href=https://www.wicell.org#bib52] These algorithms will need to be run as an external harness to the Petri net software, which in this case should be the Spike simulator; modifications to the rate constants can be made directly in the corresponding ANDL file, or in the Spike SPC file. Automated optimization over the net structure itself is achievable, but more challenging computationally,42[href=https://www.wicell.org#bib54] and is best achieved manually.\nCritical: In scanning, the choice of parameter ranges and scanning intervals is important in order to identify suitable solutions.\nStore components in a library.\nNote: Components should be stored in a library, which could be flat-files in a designated folder structure, or in a database, for an example see Blätke et al.15[href=https://www.wicell.org#bib15],22[href=https://www.wicell.org#bib22] Some form of version control is preferable, and ANDL and CANDL files are ideal for this treatment; Snoopy files can also be used in order to preserve graphical and layout information, as long as they are saved in the uncompressed XML format. There are many version control systems available, and the choice of which system to use may depend on the local technical setup (troubleshooting 3[href=https://www.wicell.org#sec5.5]).\nSystem-level modeling using color\nTiming: hours to days based on model's complexity\nThis part describes how to assemble a system from components by the use of color. System-level modeling starts with retrieving components from the library; in doing so, they become instances. Their use involves a couple of steps outlined as follows.",
    "Encode multilevel aspects of the model.\nNote: Using color sets and logical expressions, we can represent different dimensional space and describe how instances are organized in space. In the following, we use the encoding of 2D space based on Cartesian coordinates as a running illustration, going into depth where necessary. In the following in (a) we describe how to encode this from scratch, and in (b) how definitions stored in a library can be reused.\nEncoding from scratch.\nEncode space with color.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Fig9.jpg\nFigure 9. Case study: Delta Notch pattern formation\n(A) The multicellular Delta Notch ColCPN, which models the lateral inhibition patterning of Delta Notch mutual inactivation,35[href=https://www.wicell.org#bib35] by coloring the component model given in Figure 8[href=https://www.wicell.org#fig8]. This model can be used to simulate the pattern formation mediated by the Delta Notch signaling pathway in 2D space, which involves three levels: tissue, cell and Delta Notch pathway. The level of NI in a cell determines the fate of the cell: a low (high) NI level leads to the adoption of the primary (secondary) fate.\n(B) The declarations of the ColCPN model. Each cell is modeled as a hexagon, and distinguished by a product color in SubGrid2D. When M = 8 and N = 16, we obtain 64 cells. In each cell, we set the initial concentration of each species (D, NT and NI) to 1 with the marking expression 1′all(), which makes in total for each colored place 64.\n(C) The rate functions and constants used to produce (d), which are adapted from Collier et al.35[href=https://www.wicell.org#bib35]\n(D) Simulation traces of Delta and Notch in all cells produced by Snoopy in the setting of (c); shown are the unfolded places of NI for the third row of the hexagonal tissue.",
    "(E) A steady-state periodical pattern of the multicellular model, derived from (D). Each hexagon has two numbers, the NI concentration on the top and the D concentration on the bottom. Cells with high NI (secondary fate) are colored, while cells with low NI (primary fate) are given in white.\nNote: We first define two constants M and N, denoting the length and width of a regular rectangular grid, respectively, and then declare two simple integer color sets, Row and Column, to represent the row and column of the grid. Based on the two simple color sets, we further define a Cartesian product color set Grid2D, where the coordinates   (  x , y  )   address a position in the grid. See Figure 9[href=https://www.wicell.org#fig9] for an example.\nOptional: Alternatively, space encoding using polar coordinates or graphs could be employed; see Section 10[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for all of these.\nRepresent instances with colors.",
    "Note: If each instance has a unique location on a Cartesian grid, we can denote each instance simply by    (  x , y  )  .   That is, each tuple color in Grid2D represents the location (address) of an instance. If each instance is located in another geometry, e.g., hexagonal, we have to adopt logical expressions to define constraints over Grid2D in order to obtain only those locations which conform to positions in hexagonal space. For example, in the Delta Notch model we can define a subset SubGrid2D by selecting the colors in Grid2D which satisfy the logical expression   x % 2 = 1 & y % 2 = 1  |  x % 2 = 0 & y % 2 = 0   (to be read as: either the row or column indices are both odd or both even), i.e., selecting all hexagons in Figure 9[href=https://www.wicell.org#fig9]D. See Section 10[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2], Figure (ci) for more explanations.\nCritical: Depending on the specific biological scenario to be represented, an appropriate spatial organization should be employed, e.g., hexagonal or rectangular organization of 2D space, see Section 10[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2].\nDefine neighborhood functions to represent interactions between instances. Take the 2D space as an example. For any two grid locations with coordinates   (  x , y  )   and   (  a , b  )  , respectively, we can use a logical expression to define a neighborhood function, i.e., whether cell   (  x , y  )   is a neighbour of cell   (  a , b  )  ; see Neighbor2D6 in Figure 9[href=https://www.wicell.org#fig9], which defines a neighborhood function on a hexagonal geometry with at most six neighbors and the periodical boundary condition. Figure 2[href=https://www.wicell.org#fig2] gives two more neighborhood functions which define at most four or eight neighbors respectively.",
    "Critical: Defining neighborhood functions is a very important issue, and care needs to be taken when doing this (troubleshooting 4[href=https://www.wicell.org#sec5.7]).\nRepresent multilevel with color sets.\nNote: Colored Petri nets permit the definition of nested color sets, which can represent multiple levels in a biological system. Consider the modeling of a piece of tissue described above. If we use Grid2D to represent cells in a tissue and define another color set, e.g., Compartment2D, in which each element   (   x 1  ,  y 1   )   represents a compartment, we then define a high-level color set, e.g., HCS = product Grid2D × Compartment2D to represent the two levels: cells and compartments. That is, each element   (   (  x , y  )  ,  (  x 1 , x 2  )   )   in HCS locates the position of an instance, where   (  x , y  )   denotes the position of a cell in the grid, and   (  x 1 , x 2  )   denotes the position of the compartment within that cell. See Section 10[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2], Figure (ci) and (cii) for an illustration and Gao et al.13[href=https://www.wicell.org#bib13] for an example.\nReuse of color definitions\nStore definitions in a CANDL file.\nNote: Color definitions in a model can be stored by exporting the model to a CANDL file, which is a text file that can be edited by any editor. This permits the careful addition of definitions from other CANDL files to this CANDL library file.\nLoad definitions from a CANDL file.\nNote: Using File → Import, select the CANDL file containing the definitions. The subsequent dialog will permit the import of all or selected constants, color sets, color functions and variables, to an existing model or to a new model.\nMultilevel model assembly.",
    "Note: Assemble a multilevel model by putting an instance on each spatial grid cell and associating appropriate neighborhood expressions to interactions among instances and across different levels. See Section 10[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for more details. For the constructed instance models (e.g., the Delta Notch instance model given in Figure 7[href=https://www.wicell.org#fig7]A), we need to perform the following steps to achieve a multilevel model.\nAssign color sets to places.\nDouble click a place, and then edit its properties.\nIn the properties editing dialog, choose an appropriate color set (e.g., SubGrid2D) and possibly define its initial marking in the ‘Markings’ tab.\nCritical: In contrast to the marking setting for uncolored Petri nets, where we only need to give a number in the marking domain, for colored Petri nets, in the ‘Markings’ tab we should give a set of colors or a guard to select a group of colors in the ‘Color(s)’ domain, and the corresponding token number for the selected colors in the ‘Marking’ domain. For example, in the Delta Notch model, we set the ‘Color(s)’ domain to ‘all()’, and insert the number 1 in the ‘Marking’ domain for place D (troubleshooting 5[href=https://www.wicell.org#sec5.9]).\nDefine guards for transitions.\nDouble click a transition, and then edit its properties.\nIn the properties editing dialog, fill in a logical expression in the ‘Guards’ tab, e.g., Neighbor2D6(x,y,a,b) for transition Bind.\nNote: We can also check a guard by clicking the ‘Check guard’ button. Besides, a guard writing assistant is offered by clicking the ‘Guard assistant’ button.\nCritical: In the guard assistant dialog, all the information for defining a guard is provided, including available variables and constants, and all the operators and built-in functions. We recommend making full use of this facility to write correct guards (troubleshooting 6[href=https://www.wicell.org#sec5.11]).\nDefine rate functions for transitions.",
    "Double click a transition, and then edit its properties.\nIn the properties editing dialog, fill in a logical expression (e.g., true) in the ‘Predicate’ domain and a corresponding rate function (e.g., kc∗D∗D/(k1+D∗D)∗NT/(k1+NT) for transition Bind) in the ‘Function’ domain in the ‘Functions’ tab.\nCritical: The logical expression in the ‘Predicate’ domain is used to select a group of transition instances for which a specific rate function is assigned. Multiple logical expressions can be defined, each occupying a row, by using the ‘Add functions’ and ‘Delete functions’ buttons. Make sure that each logical expression covers a group of appropriate transition instances, and that they are mutually exclusive. If a transition instance is not covered by any logical expression, its rate function is set to zero.\nAssign expressions to arcs.\nDouble click an arc, and then edit its properties.\nIn the properties editing dialog, fill in an expression (e.g.,   (  x , y  )  ) in the ‘Expression’ domain in the ‘Functions’ tab.\nNote: We can also check an expression by clicking the ‘Check expression’ button. Besides, an expression writing assistant is offered by clicking the ‘Expression assistant’ button (troubleshooting 7[href=https://www.wicell.org#sec5.13]).\nCheck syntax of the model.\nNote: Click the ‘Check a net’ item in the ‘Edit’ menu, and a dialog appears, in which click ‘OK’ button and you will see if the model has syntax errors or not.\nSystem-level analysis involving color\nTiming: hours to days based on model's complexity\nThis part describes the steps for thoroughly analyzing a constructed system model. All steps have to consider the set of requirements contained in the Problem Statement & Requirements Specification, in order to validate the system model against them, and to modify either of them accordingly, if required.",
    "System animation (appropriate for ColPN, ColXPN, ColSPN). Snoopy also supports animation of some classes of colored Petri nets including ColPN, ColXPN, and ColSPN.\ntable:files/protocols_protocol_3184_3.csv\nNote: This can be done basically in the same way as for uncolored Petri nets discussed above, except the following two points. (a) When the animation dialog is open, run the animation by clicking e.g., the ‘Play forward’ button; an unfolding dialog appears. When the unfolding is finished, the animation starts. This is because the animation of a colored Petri net is done on an uncolored Petri net by automatic unfolding. In the unfolding dialog (see Figure 7[href=https://www.wicell.org#fig7]B), choose an unfolding method (see Table 3[href=https://www.wicell.org#tbl3]) and click the ‘Start’ button; the unfolding will be performed with a progressing bar and the unfolding run time. Although unfolding is a combinatorial problem, which suffers from a combinatorial explosion, the use in the platform of a constraint satisfaction approach for unfolding greatly alleviates this issue. (b) In the manual mode, by clicking a transition, a binding selection dialog will appear, in which we can choose a binding for firing. See Section 16[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for more information.\nSystem structural analysis (appropriate for all Petri nets that do not involve special arcs (inhibitor, equal, reset and self-modifying arcs, see Section 3[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2]) which bring the Turing power).\nNote: Basically follow the workflow as outlined in Step 6| Component structural analysis. However, the export to the file format ANDL readable by Charlie now involves the unfolding of the colored model. Correspondingly, all analysis results produced by Charlie refer to the unfolded model. See Sections 18-22[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for how to perform structural analysis.",
    "Critical: The size of the unfolded model may exceed what Charlie can handle in reasonable time. Thus, it is advisable to configure the system model to its smallest possible size to exhibit the required behavior before exporting to ANDL (which involves unfolding). The interpretation of Charlie’s analysis results may require a good understanding of the naming conventions used for the unfolded nodes, see Section 27[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] (troubleshooting 8[href=https://www.wicell.org#sec5.15]).\nSystem simulation (appropriate for ColSPN, ColCPN, ColHPN). Explore the multilevel model using different simulation algorithms including stochastic, deterministic and hybrid simulation algorithms. See Section 17[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for how to run simulation. The simulation of colored Petri nets is slightly different from that of uncolored Petri nets. In the following, we only describe different points.\nWhen clicking the ‘Start Simulation-Mode’ item in the ‘View’ menu, an unfolding dialog appears, rather directly going to the simulation dialog.\nNote: An appropriate unfolding engine should be chosen, see Table 3[href=https://www.wicell.org#tbl3]. This is because the simulation of a colored Petri net is also performed on an uncolored Petri net by automatic unfolding.\nWhen the unfolding is done, the simulation dialog (see Figures 7[href=https://www.wicell.org#fig7]C and 7E) will be opened.\nNote: Almost all operations on the simulation for the colored Petri nets are the same as uncolored Petri nets. The only difference is that we can observe both colored and uncolored places and transitions. In the view window, click the ‘Edit Node List’ button, the node selection dialog appears, where one can select uncolored or colored places/transitions (supported by regular expressions) to be displayed in the view window. See Section 27[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2] for data about size of the unfolded models for some case studies.",
    "Critical: A ColPN usually involves a large number of unfolded places/transitions. The platform offers several ways to support the selection of appropriate nodes in the node selection dialog (see Figure 7[href=https://www.wicell.org#fig7]G), including: (a) manually choosing several nodes, (b) using the name of a colored node to obtain all of its unfolded nodes with the ‘Advanced’ dropdown list, and (c) using a regular expression in the ‘RegEx’ textbox to select nodes.\nExport simulation results (see Figure 7[href=https://www.wicell.org#fig7]F for an example) to a CSV file, if they are to be analyzed in the next step (troubleshooting 9[href=https://www.wicell.org#sec5.17]).\nSystem dynamic analysis.\nNote: Analyze the model at system level using different techniques such as the exploration of 2D/3D plots and movies, simulative model checking driven by temporal-logic formulae, and statistical analysis, e.g., clustering.\nSimulative model checking. For a general discussion on model checking and its use in the context of our platform, see Section 23[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2].\nNote: Colored Petri net models are usually large, so analytical model checking often does not apply. To use simulative model checking at the system level, follow the model checking steps described above in Step 8/A/c&d. Write a query file for colored/uncolored places or transitions and perform model checking. E.g., in our Delta Notch model, we use the property P>=1[ F(G([NI_x_y] > 9 ˆ [D_x_y] < 1) ) ] to check if a cell adopts the primary fate (yes) or the secondary fate (no). In the property, NI_x_y (or D_x_y) refers to all the uncolored places of NI (or D) obtained by unfolding. For more examples about simulative model checking at the system level, refer to Gao et al.13[href=https://www.wicell.org#bib13] and Liu et al.23[href=https://www.wicell.org#bib23]\nTime series data analytics.",
    "Note: The simulation output comprises time series traces of the values of place markings or transition activity, which can be saved in the form of CSV (or equivalent) files. As at the component level (see Step 8/b), these data can then be analyzed using standard time-series data analytic techniques using software such as MATLAB or R. The actual methods used depend on the problem being investigated; for possible options see Section 24[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2]. In particular, for a colored system model, the potentially large amount of unfolded data, including location information, introduces extra complexity to the analysis.\nNote: In particular, visualization techniques are extremely useful to gain an understating of the behavior of the multidimensional model:\nOptional: 2D plot drawing. Take the python routine as an example, which are used for drawing the pattern of the Delta Notch model (see Figure 9[href=https://www.wicell.org#fig9]D), to illustrate this analysis.\nSelect simulation results of interest (e.g., all the unfolded places of D and NI of the Delta Notch model given in Figure 9[href=https://www.wicell.org#fig9]) and export them to a CSV file with a separator.\nEdit the 2D plot routine (e.g., the python routine 2DHexagonPlot.py given in the key resources table[href=https://www.wicell.org#key-resources-table]) by modifying the data file name and separator.\nUse python to open the routine 2DHexagonPlot.py and then the 2D pattern is created and shown (e.g., see Figure 9[href=https://www.wicell.org#fig9]D).\nOptional: 2D movie generation for reaction-diffusion systems. With the Python 2D movie generation routine (see the 2D plot routine in the key resources table[href=https://www.wicell.org#key-resources-table]), we can generate a 2D movie for the simulation traces of a 2D diffusion model (see key resources table[href=https://www.wicell.org#key-resources-table] for a 2D diffusion model), which takes the following steps.",
    "Select simulation traces of interest (e.g., all the unfolded places of p of the 2D diffusion model given in Figure 2[href=https://www.wicell.org#fig2]) and export them to a CSV file (e.g., 2D_diffusion_traces.csv) with a separator, e.g., comma.\nEdit the 2D movie generation routine (e.g., the python routine 2DMovie.py given in Section 25[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2]) by modifying the data file name, separator, and the row and column of the 2D grid.\nUse Python to open the routine 2DMovie.py and then the 2D movie is created and shown. It should look like the one provided in the key resources table[href=https://www.wicell.org#key-resources-table], Movies of 2D diffusion (troubleshooting 10[href=https://www.wicell.org#sec5.19]).\nSystem optimization.\nNote: Adjust kinetic parameters and neighborhood expressions according to the whole system analysis results, against the corresponding reference traces or patterns over space and time.\nNote: E.g., in the boundary formation model of the Drosophila large intestine,23[href=https://www.wicell.org#bib23] we set most kinetic parameters to fixed values and then tune three key parameters, a, b and f by repeating simulations until the model produces the wild-type phenotype. This process can be very time consuming. Automated approaches to target driven optimization are in general preferable to parameter exploration via scanning.\nModel use\nTiming: days to years based on model's complexity\nThis part very briefly describes possible, not necessarily alternative scenarios to use a model.\nFormalizing and organizing knowledge.",
    "Note: Models can be used to formalize and organize existing knowledge about a biological system. Indeed this is often the first step in modeling a biological system; the modeler will ‘interview’ biologists and try to get them to describe the system of interest using some or all of the following: natural language, pictures and diagrams of varying degrees of formality or a possibly incomplete or flawed collection of biochemical equations. The skill of the modeler is then to represent this knowledge in a form which is meaningful to the biologists, and to hopefully get them to agree the model or suggest changes. Petri nets provide an excellent way in which to communicate with biologists in this respect because they represent the topology of a model in a very intuitive and graphical manner. Biologists very often readily accept this representation, and will suggest corrections to a model because the process of constructing the model jointly with the modeler has clarified their own understanding of the biological system. See for example Section 4[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2], which illustrates a modular and stepwise construction of a Petri net model of a repressilator.\nPrediction and hypothesis validation.\nNote: The biological systems over which predictions can be performed range from the intra/inter-cellular level to epidemic/pandemic at the level of societies59[href=https://www.wicell.org#bib60]; see Figure 1[href=https://www.wicell.org#fig1]A (systems biology). In Section 26[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2], we summarize some published case studies undertaken with our platform, ranging from gene transcription & regulatory networks via signal transduction networks and metabolic networks to population level, which all offer rich information on how to use models for prediction.\nAnalyze a new hypothesis and accordingly configure the model by modifying the marking, rate parameters, or the net structure.\nRun the simulation to obtain the simulation result.",
    "To validate a hypothesis in the form of predictions, perform in vivo experiments, or observe the changes in the modeled system as it progresses over time or is exposed to changing environments.\nNote: For example, in Liu et al.23[href=https://www.wicell.org#bib23] we want to validate the hypothesis: over-expression of Delta results in different patterns of embryos in the Drosophila large intestine. We started from the normal expression level of Delta, which produced the wild-type phenotype, and then slowly increased the over-expression of Delta by a small step, successively producing ectopic phenotype, ectopic & drop-outs phenotype and salt & pepper phenotype (see Liu et al.,23[href=https://www.wicell.org#bib23]; Figure 8[href=https://www.wicell.org#fig8]). We then performed in vivo experiments by growing embryos at different temperatures (the increase of temperature causes the over-expression of Delta signal), which produced similar patterns (see Liu et al.,23[href=https://www.wicell.org#bib23]; Figure 11) as simulation did.\nEngineering.\nNote: Synthetic biology - engineering biological systems; see Figure 1[href=https://www.wicell.org#fig1]B. In Section 26[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3184-Mmc1.pdf] of supplemental information[href=https://www.wicell.org#appsec2], some case studies such as biosensors and DNA walker circuit design have been summarized.\nNote: Assuming that a model has been constructed which has a behavior that conforms to the requirements specification: (a) Use the model as design to guide engineering of the corresponding biological system. (b) Check that the behavior of the engineered biological system conforms to the behavior of the model."
  ],
  "subjectAreas": [
    "Computer Sciences",
    "Bioinformatics",
    "Systems Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}