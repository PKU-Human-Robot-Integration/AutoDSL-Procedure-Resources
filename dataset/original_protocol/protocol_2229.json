{
  "id": 2347,
  "origin_website": "Cell",
  "title": "Protocol to predict mechanical properties of multi-element ceramics using machine learning",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nBuild the DFT calculation database\nTiming: 6–7 days\nIn this section, we conduct DFT calculations to build the database containing mechanical and bond properties of ceramics for further machine-learning model training.\nNote: The time for DFT calculations largely depends on sizes of the models, the number of cases involved in the database, and the hardware. This calculation time in this protocol is obtained using 64 CPU cores for 438 cases having 8 atoms in each unit cell, which is a reference of time arrangement for users. In most cases, the model size is the main factor influencing computational cost, so small models such as the unit cell containing 8 atoms shown in Figure 1[href=https://www.wicell.org#fig1] are recommended for the DFT calculation database construction.\nDetermine the type of ceramic for mechanical property prediction. In this protocol, the DFT calculation database contains properties of 438 rock-salt carbides, nitrides and carbonitrides, which is available on the project GitHub.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1837-Fig1.jpg\nFigure 1. Structure of the rock-salt ceramic\nThe data in the left red box are the template structure file in POSCAR format, the atomic structure on the right is the corresponding 3D model visualized in VESTA.\nGeometry optimization calculations.\nPrepare input structure “POSCAR” files. Use the structure file of VC as the template “POSCAR” file for all rock-salt ceramics as shown in Figure 1[href=https://www.wicell.org#fig1], replace m and n by metal and nonmetal element names, respectively.\nPrepare input pseudopotential “POTCAR” files. Taking the structure in Figure 1[href=https://www.wicell.org#fig1] as an example, create the “POTCAR” file for this ceramic using the command:\n>cat m1 m2 m3 m4 n1 n2 n3 n4 >> POTCAR",
    "Note: “m1”, “m2”, “m3”, “m4”, “n1”, “n2”, “n3” and “n4” are names of pseudopotential files (provided by VASP) of elements m1, m2, m3, m4, n1, n2, n3 and n4, respectively.\nPrepare input “KPOINTS” files. Use the “KPOINTS” file as follows:\n>Automatic mesh\n>0\n>Gamma\n>11 11 11\n>0 0 0\nPrepare input “INCAR” files. Use the “INCAR” file as follows:\n>ENCUT = 600\n>ISTART = 0\n>ICHARG = 2\n>ISMEAR = -5\n>SIGMA = 0.05\n>NSW = 200\n>IBRION = 2\n>ISIF = 3\n>SYMPREC = 1E-5\n>ispin =2\n>POTIM = 0.2\n>EDIFF = 1E-5\n>EDIFFG = -1E-2\n>PREC = Accurate\nPut the four input files, namely “POSCAR”, “POTCAR”, “KPONITS” and “INCAR”, in the same dictionary, and then run the calculation using the command:\n> mpirun -n number_of_cores vasp_std >& log\nBond property calculations.\nPrepare input “POSCAR” files. Rename the relaxed structure file “CONTCAR” obtained by the geometry optimization calculation by “POSCAR”.\nPrepare input “POTCAR” and “KPONITS” files. Use the same input files with those used in the optimization calculation.\nPrepare input “INCAR” files. Use the “INCAR” file as follows:\n>ENCUT = 600\n>ISTART = 0\n>ICHARG = 2\n>ISMEAR = 0\n>SIGMA = 0.05\n>LREAL = .FALSE.\n>SYMPREC = 1E-5\n>ispin = 2\n>IBRION = -1\n>ISIF = 3\n>NSW = 0\n>POTIM = 0.2\n>EDIFF = 1E-5\n>PREC = Accurate\n>LORBIT = 11\n>LAECHG = .TRUE.\n>PREC = Accurate\nPut the four input files, namely “POSCAR”, “POTCAR”, “KPONITS” and “INCAR”, in the same dictionary, and then run the calculation using the command:\n> mpirun -n number_of_cores vasp_std >& log",
    "Put the bond property DFT calculation generated files “AECCAR0”, “AECCAR2” and “CHGCAR” and the corresponding “POTCAR” file, together with the file “job_control.txt” (provided by Chargemol) and the Chargemol executable file “Chargemol_09_26_2017_linux_serial” in the same directory, and then run the density derived electrostatic and chemical (DDEC) calculation using the command:\n>./Chargemol_09_26_2017_linux_serial\nCalculate the bonding characteristic: net charge (NETM).\nNote: The file “DDEC6_even_tempered_net_atomic_charges.xyz” generated after the DDEC calculation contains the value of net charge on each atom. Taking the DDEC calculation results for VC as an example, Figure 2[href=https://www.wicell.org#fig2] shows the first few lines of the “DDEC6_even_tempered_net_atomic_charges.xyz” file, and we can have the average value for metallic (V) atoms in the red box as the net charge for the ceramic VC.\nCalculate the bonding characteristic: sum of bond order (SBO).\nNote: The file “DDEC6_even_tempered_bond_orders.xyz” generated after the DDEC calculation contains the information of sum of bond order of each atom. Taking the DDEC calculation results for VC as an example, Figure 3[href=https://www.wicell.org#fig3] shows the first few lines of the “DDEC6_even_tempered_bond_orders.xyz” file, and we can use the sum of average values respectively for V and C atoms in the red boxes as the value of sum of bond order for the ceramic VC.\nCalculate the bonding characteristic: bond length (BL).\nNote: The average bond length of the relaxed structure equals to     V ∕ 8  3   , where V is the volume of the relaxed unit cell, which is given by VESTA as shown in Figure 4[href=https://www.wicell.org#fig4] after reading the “CONTCAR” file obtained by the geometry optimization calculation.\nMechanical property calculations.\nPrepare input “POSCAR”, “POTCAR” and “KPONITS” files. Use the same input files with those used in the optimization calculation.\nPrepare input “INCAR” files. Use the “INCAR” file as follows:\n>ENCUT = 600\n>ISTART = 0\n>ICHARG = 2\n>SYMPREC = 1E-5",
    ">ispin = 2\n>ISMEAR = 0\n>SIGMA = 0.05\n>POTIM = 0.05\n>LCHARG = .TRUE.\n>LWAVE = .TRUE.\n>LREAL = .FALSE.\n>IBRION = 6\n>ISIF = 3\n>NSW = 1\n>NFREE = 4\n>EDIFF = 1E-5\n>EDIFFG = -0.01\n>PREC = Accurate\nPut the four input files, namely “POSCAR”, “POTCAR”, “KPONITS” and “INCAR”, in the same dictionary, and then run the calculation using the command:\n> mpirun -n number_of_cores vasp_std >& log\nCalculate mechanical properties: bulk (B), shear (G) and Young’s (E) moduli.\nNote: The “OUTCAR” file obtained by the mechanical property DFT calculation contains the elastic constants, based on which we can calculate the bulk, shear and Young’s moduli using the Voigt-Reuss-Hill approximation (Hill, 1952[href=https://www.wicell.org#bib2]).\nAlternatives: The commands in steps 1–4 are for case-by-case calculations. If many cases are involved in a dataset, we can prepare all input files for a case in one dictionary and run a series of jobs for all cases automatically using the script “job.sh” by: > sh job.sh, as is shown in Figure 5[href=https://www.wicell.org#fig5].\nAlternatives: The command “mpirun” is used to start the parallel version of VASP compiled with MPI. To run a serial version of VASP, it is needed to replace the “mpirun” line by “> vasp_std”. The parallel version of VASP is recommended for the higher calculation efficiency.\nNote: In this example, 438 cases are involved in the dataset. For the practical application, a small dataset containing information on simple ceramics is sufficient to build reliable machine-learning models. E.g., involving information on rock-salt ScC, TiC, VC, CrC, MnC, FeC, CoC, NiC, ZnC, YC, ZrC, NbC, MoC, HfC, TaC, WC carbides into the DFT dataset is sufficient to build reliable machine-learning models for complex rock-salt (ScTiVCrMnFeCoNiZnYZrNbMoHfTaW)C carbides.\nNote: The commands and calculations are implemented under Linux environment.",
    "Note: The parameters in “INCAR” and “KPOINTS” files are the same for different cases for the same kind of DFT calculations.\nNote: To build new DFT datasets for other rock-salt ceramics like oxides, sulfides, chlorides and fluorides, no significant modifications are required, simply replacing m and n in steps 2b and 2c by specific elements will work.\nNote: To build new DFT datasets for WC-type carbides, modifications of input files and the calculation method for average bond length are needed.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1837-Fig2.jpg\nFigure 2. Results of the net charge calculation\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1837-Fig3.jpg\nFigure 3. Results of the sum of calculated bond order\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1837-Fig4.jpg\nFigure 4. Results of calculated average bond length\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1837-Fig5.jpg\nFigure 5. File preparation and the script to run a series of jobs automatically\nTrain machine-learning prediction models\nTiming: ∼30 min\nIn this section, we train the machine-learning models to learn correlations between bonding characteristics and mechanical properties based on the DFT calculation database. The dataset for machine-learning training, the training codes and the obtained prediction models are all available on the project GitHub.\nPrepare the dataset for machine-learning model training. Store the data in a .csv file as shown in Figure 6[href=https://www.wicell.org#fig6] and then load the .csv file to MATLAB with the name “trainingData”.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1837-Fig6.jpg\nFigure 6. DFT dataset stored in a .csv file for machine learning\nPrepare the training code. Taking the training of machine-learning prediction model for bulk modulus as an example, use the training code saved in the file “trainModelB.m” as follows:\n>function [ModelB, validationRMSE] = trainModelB(trainingData)\n>inputTable = trainingData;\n>predictorNames = {'SBO', 'NETM', 'BL'};\n>predictors = inputTable(:, predictorNames);\n>response = inputTable.B;\n>isCategoricalPredictor = [false, false, false];\n>  predictors, ...\n>  response, ...\n>  'BasisFunction', 'constant', ...\n>  'KernelFunction', 'exponential', ...\n>  'Standardize', true);\n>predictorExtractionFcn = @(t) t(:, predictorNames);\n>gpPredictFcn = @(x) predict(regressionGP, x);",
    ">ModelB.predictFcn = @(x) gpPredictFcn(predictorExtractionFcn(x));\n>ModelB.RequiredVariables = {'BL', 'NETM', 'SBO'};\n>ModelB.RegressionGP = regressionGP;\n>inputTable = trainingData;\n>predictorNames = {'SBO', 'NETM', 'BL'};\n>predictors = inputTable(:, predictorNames);\n>response = inputTable.B;\n>isCategoricalPredictor = [false, false, false];\n>partitionedModel = crossval(ModelB.RegressionGP, 'KFold', 10);\n>validationPredictions = kfoldPredict(partitionedModel);\n>validationRMSE = sqrt(kfoldLoss(partitionedModel, 'LossFun', 'mse'));\nPerform the machine-learning training. Taking the training of machine-learning prediction model for bulk modulus as an example, put the training code file “trainModelB.m” and the training dataset file “trainingData” in the same workspace, and then run the command in MATLAB as follows to obtain the machine-learning prediction model “ModelB”:\n>[ModelB, validationRMSE] = trainModelB(trainingData)\nNote: As the brittleness and hardness estimated using empirical models have intrinsic analytic relations with the shear and bulk moduli, here only mechanical properties of bulk, shear and Young’s moduli are set as targeted outputs.\nNote: Machine-learning prediction models for shear and Young’s modulus can be obtained by respectively replacing the keyword “B” in the code by “G” and “E” in steps 6 and 7.\nNote: Detailed code annotations are available in the training code files provided on the project GitHub.\nNote: In step 7, only the root mean squared error (RMSE) of a 10-fold cross-validation is given as a reference for the validation of the reliability. This is because the rock-salt ceramics and WC-type carbides have been systematically investigated and the effectiveness of this protocol and the reliability of machine-learning models have been examined for the two systems. If using this protocol for ceramics other than rock-salt ceramics or WC-type carbides, more parameters should be included for the validation.\nPrepare the inputs for prediction\nTiming: ∼30 min",
    "Bonding characteristics of a multi-element ceramic are the inputs to predict its mechanical properties based on machine-learning prediction models. In this section, we calculate bond parameters of multi-element ceramics based on those of simple ceramics from the DFT dataset.\nCalculate bonding characteristics of multi-element ceramics.\nNote: Bonding characteristics of multi-element carbides, nitrides and carbonitrides equals to the weighted value of those of involved constituents (mono-carbides and nitrides) according to their atomic concentrations (Tang et al., 2021[href=https://www.wicell.org#bib7]). For instance, for the multi-element rock-salt carbonitride (VNbTaW) (CN), its bonding characteristics are average values of corresponding bonding characteristics of VC, NbC, TaC, WC, VN, NbN, TaN and WN.\nCollect bonding characteristics of all concerned multi-element rock-salt carbides, nitrides and carbonitrides in a .csv file and then load the .csv file into MATLAB by the name of “predictioninputs”.\nNote: The sum of bond order, net charge and bond length is respectively labeled as “SBO”, “NETM” and “BL”. The prediction inputs dataset is available on the project GitHub.\nBuild the machine-learning prediction database\nTiming: ∼10 min\nUsing machine-learning prediction models and empirical models, we predict mechanical properties of multi-element ceramics based on bonding characteristics to build the mechanical property database for all potential multi-element ceramics.\nPredict mechanical properties: bulk, shear and Young’s moduli. Put the prediction inputs file “predictioninputs” and the prediction model files “ModelB”, “ModelG” and “ModelE” in the same workspace, and then run the commands as follows in MATLAB to get bulk, shear and Young’s moduli stored in “fitB”, “fitG” and “fitE”, respectively:\n>fitB = ModelB.predictFcn(predictioninputs)\n>fitG = ModelG.predictFcn(predictioninputs)\n>fitE = ModelE.predictFcn(predictioninputs)\nCalculate mechanical properties: brittleness and hardness.",
    "Note: These two properties are estimated by empirical models based on predicted bulk and shear moduli. Specifically, the brittleness equals to G/B (Pugh, 1954[href=https://www.wicell.org#bib6]), the hardness equals to   2   (   k 2  G  )  0.585  − 3   (Chen et al., 2011[href=https://www.wicell.org#bib1]).\nCollect information on rock-salt carbides, nitrides and carbonitrides, including their names and predicted bulk, shear and Young’s moduli, brittleness and hardness, in one Excel file to form the machine-learning prediction database."
  ],
  "subjectAreas": [
    "Bioinformatics",
    "Systems Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}