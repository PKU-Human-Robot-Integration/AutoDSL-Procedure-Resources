{
  "id": 14876,
  "origin_website": "Jove",
  "title": "A Knowledge Graph Approach to Elucidate the Role of Organellar Pathways in Disease via Biomedical Reports",
  "procedures": [
    "1. Running the docker container\nDownload the CaseOLAP LIFT docker container by using the terminal window and typing in docker pull caseolap/caseolap_lift:latest.\nCreate a directory that will store all the program data and output (e.g. mkdir caseolap_lift_shared_folder).\nStart the docker container with the command docker run --name caseolap_lift -it -v PATH_TO_FOLDER:/caseolap_lift_shared_folder caseolap/caseolap_lift:latest bash with PATH_TO_FOLDER as the full file path for the folder (e.g., /Users/caseolap/caseolap_lift_shared_folder). Future commands from section 2 will be issued on this terminal window.\nStart the elastic search within the container. In a new terminal window, type docker exec -it --user elastic caseolap_lift bash /workspace/start_elastic_search.sh.\n\t​NOTE: In this protocol, CaseOLAP LIFT is run interactively, with every step performed sequentially. This analysis can also be executed end-to-end by passing it in as a parameters.txt file. The parameters.txt used in this study are in /workspace/caseolap_lift/parameters.txt. To access more details on each step, run the command with the --help flag, or visit the documentation on the GitHub repository (https://github.com/CaseOLAP/caseolap_lift). \n2. Preparing the diseases and proteins\nNavigate to the caseolap_lift folder with cd /workspace/caseolap_lift\nMake sure that the download links in config/knowledge_base_links.json are up-to-date and accurate for the latest version of each knowledge base resource. By default, the files are only downloaded once; to update these files and re-download, run the preprocessing step with -r in step 2.4.\nDetermine the GO term and disease categories to use for this study. Find the identifiers for all GO terms and MeSH identifiers at http://geneontology.org/ and https://meshb.nlm.nih.gov/, respectively.\nExecute the pre-processing module using command-line options. This preprocessing step assembles specified diseases, lists proteins to study, and gathers protein synonyms for text-mining. Indicate the user-defined studied GO terms using the -c flag and the disease MeSH tree numbers using the -d flag, and specify abbreviations with -a.\n\tExample command:",
    "python caseolap_lift.py preprocessing -a \"CM ARR CHD VD IHD CCD VOO OTH\" -d \"C14.280.238,C14.280.434 C14.280.067,C23.550.073 C14.280.400 C14.280.484 C14.280.647 C14.280.123 C14.280.955 C14.280.195,C14.280.282,C14.280.383,C14.280.470,\n\tC14.280.945,C14.280.459,C14.280.720\" -c \"GO:0005739\" --include-synonyms --include-ppi -k 1 -s 0.99 --include-pw -n 4 -r 0.5 --include-tfd\nExamine the categories.txt, core_proteins.txt, and proteins_of_interest.txt files from the previous step in the output folder. Ensure that all the disease categories in categories.txt are correct and that a reasonable amount of proteins are identified within core_proteins.txt and proteins_of_interest.txt. If necessary, repeat step 2.4, and modify the parameters to include a greater or fewer number of proteins.\n\tNOTE: The number of proteins included in the study is determined by --include-ppi, --include-pw, and --include-tfd flags to include protein-protein interactions, proteins with shared reactome pathways, and proteins with transcription factor dependence, respectively. Their specific functionality is specified with additional flags such as -k, -s, -n, and -r (see documentation).\n3. Text-mining\nMake sure the categories.txt, core_proteins.txt, and proteins_of_interest.txt files from the previous step are found in the output folder. Use these files as the input for the text-mining. Optionally, adjust the configurations pertaining to the document parsing and indexing in the config folder. See a previous version of the CaseOLAP protocol for more details on configuration and troubleshooting8.\nExecute the text-mining module with python caseolap_lift.py text_mining. Add the -l flag to impute the topics of uncategorized documents and the -t flag to download the full text of disease-relevant documents. Other optional flags specify a date range of publications to download (-d) and provide options to screen the protein names (described in step 3.3). A sample of a parsed document is shown in Figure 3.\n\tExample command: python caseolap_lift.py text_mining -d \"2012-10-01,2022-10-01\" -l -t",
    "NOTE: A bulk of the computational protocol time is spent on step 3.2, which can potentially span over 24 h. The runtime will depend on the size of the text corpus to be downloaded, which will also depend on the date range and whether label imputation and full-text functionality are enabled.\n(Recommended) Screen the protein names. The protein names identified in disease-relevant publications contribute to protein disease associations but are prone to false positives (i.e., homonyms with other words). To address this, enumerate possible homonyms in a blacklist (config/remove_these_synonyms.txt) so that they are excluded from the downstream steps.\n\t\nFind names to inspect: Under the result folder, find the protein names with the highest frequency under all_proteins or core_proteins (ranked_synonyms/ranked_synonyms_TOTAL.txt) and protein names with the highest scores under the folders in ranked_proteins depending on the score(s) of interest. If there are many names, prioritize the inspection of the top-scoring names.\nInspect the names: Type python caseolap_lift.py text_mining -c followed by a protein name to display up to 10 name-containing publications. Then, for each name, check if the name is protein-specific.\nRecalculate the scores: Type python caseolap_lift.py text_mining -s. Repeat step 3.1, step 3.2, and step 3.3 until the names in step 3.1 appear correct.\n4. Analyzing the results\nMake sure the text-mining results are in the result folder (e.g., result/all_proteins and result/core_proteins directories and associated files), which will be used as input for the analysis step. Specifically, a score indicating the strength of each protein-disease association is reported in the caseolap.csv results from the text-mining. Indicate which set of text-mining results to use for the analysis by specifying either --analyze_core_proteins to include only the GO-term related proteins or --analyze_all_proteins to include all the functionally related proteins.",
    "Identify the top proteins and pathways for each disease. Significant protein-disease associations are defined as those with scores exceeding a specified threshold. Z-score transform the CaseOLAP scores within each disease category, and consider the proteins with scores above a specified threshold (indicated by the -z flag) as significant.\n\t​NOTE: Biological pathways significant to each disease are identified automatically using significant proteins as input for the reactome pathway analysis. All such proteins are reported in the resulting result_table.csv in the analysis_results folder, and relevant figures and pathway analysis results are automatically generated in the analysis_results folder.\n\tExample command: python caseolap_lift.py analyze_results -z 3.0 --analyze_core_proteins\nReview the analysis results, and adjust as necessary. The number of proteins and, therefore, the enriched reactome pathways significant to each disease category depend on the z-score threshold used in the analysis. A z-score table, generated at output/analysis_results/zscore_cutoff_table.csv, indicates the number of proteins significant to each disease category to aid in the selection of a z-score threshold as high as possible while yielding several proteins significant to each disease category.\n5. Predictive analysis\nConstruct a knowledge graph.\n\t\nEnsure the required files are in the results folder, including the kg folder generated from preprocessing (step 2.4) and the caseolap.csv from the text-mining results under the all_proteins or core_proteins folders (step 3.2).\nDesign the knowledge graph. Depending on the downstream task, include or exclude components of the complete knowledge graph. The knowledge graph consists of protein-disease scores from the text-mining and connections to the knowledge base resources used in step 2.4 (Figure 4). Include the MeSH disease tree with the --include_mesh flag, the protein-protein interactions from STRING with --include_ppi, the shared reactome pathways with --include_pw, and the transcription factor dependence from GRNdb/GTEx with --include_tfd.",
    "Run the knowledge graph construction module. Indicate which set of text-mining results to use for the analysis by specifying --analyze_core_proteins to only include the GO-term related proteins or --analyze_all_proteins to include all the functionally related proteins. By default, raw CaseOLAP scores are loaded as the edge weights between the protein and disease nodes; to scale the edge weights, indicate --use_z_score, or non-negative z-scores with --scale_z_score.\n\t\tExample command: python caseolap_lift.py prepare_knowledge_graph --scale_z_score\nPredict novel protein-disease associations.\n\t\nMake sure the knowledge graph files, merged_edges.tsv and merged_nodes.tsv, are output from the previous step (step 5.1.3).\nRun the knowledge graph prediction script to predict protein-disease associations so far unreported within the scientific literature by typing python kg_analysis/run_kg_analysis.py. This is implemented with GraPE30 and uses DistMult31 to produce knowledge graph embeddings, which a multi-layer perceptron uses to predict the protein-disease associations. In the output/kg_analysis folder, predictions with a predicted probability >0.90 (predictions.csv) and model evaluation metrics (eval_results.csv) are saved.\n\t\tNOTE: In this work, the chosen model parameters (e.g., embedding method, link prediction model, hyperparameters) were tailored for the representative study. This code serves as an example and a starting point for other analyses. To explore model parameters, refer to GraPE's documentation (https://github.com/AnacletoLAB/grape)."
  ],
  "subjectAreas": [
    "Biochemistry"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}