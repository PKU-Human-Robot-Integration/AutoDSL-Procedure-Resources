{
  "id": 15091,
  "origin_website": "Jove",
  "title": "Mapping Alzheimer's Disease Variants to Their Target Genes Using Computational Analysis of Chromatin Configuration",
  "procedures": [
    "1. Workstation Setup\nInstall R (version 3.5.0) and RStudio Desktop. Open RStudio.\nInstall the following libraries in R by typing the following code into the console window in RStudio.\n\tif (!\"BiocManager\" %in% rownames(installed.packages()))\n\tinstall.packages(\"BiocManager\", repos=\"https://cran.r-project.org\")\n\tBiocManager::install(\"GenomicRanges\")\n\tBiocManager::install(\"biomaRt\")\n\tBiocManager::install(\"WGCNA\")\n\tinstall.packages(\"reshape\")\n\tinstall.packages(\"ggplot2\")\n\tinstall.packages(\"corrplot\")\n\tinstall.packages(\"gProfileR\")\n\tinstall.packages(\"tidyverse\")\n\tinstall.packages(\"ggpubr\")\nDownload files.\n\tNOTE: In this protocol, all files are required to be downloaded to ~/work directory.\n\t\nDownload the following files by clicking the links provided in Table of Materials.\n\t\t\nDownload fine-mapped credible SNPs for AD (Supplementary Table 8 from Jansen et al.14).\n\t\t\tNOTE: Before analysis, open sheet eight in 41588_2018_311_MOESM3_ESM.xlsx, remove the first three rows and save the sheet as Supplementary_Table_8_Jansen.txt with tab separated format.\nDownload 10 kb resolution Hi-C interaction profiles in the adult brain from psychencode (described as Promoter-anchored_chromatin_loops.bed below).\n\t\t\tNOTE: This file has the following format: chromosome, TSS_start, TSS_end, Enhancer_start, and Enhancer_end. In case other Hi-C datasets are used, this protocol requires Hi-C datasets processed at high resolution (5âˆ’20 kb).\nDownload single cell expression datasets from the PsychENCODE.\n\t\t\tNOTE: These are from neurotypical control samples.\nDownload developmental expression datasets from the BrainSpan (described as devExpr.rda below).\n\t\t\tNOTE: 267666527 is a zipped file, so unzip the 267666527 to extract \"columns_metadata.csv\", \"expression_matrix.csv\", and \"rows_metadata.csv\" to generate devExpr.rda (see section 3).\nDownload exonic coordinates (see Supplementary Files, described as Gencode19_exon.bed and Gencode19_promoter.bed below) from Gencode version 19.\n\t\tNOTE: Promoters are defined as 2 kb upstream of transcription start site (TSS). These files have the following format: chromosome, start, end, and gene.\nDownload gene annotation file (see Supplementary Files, described as geneAnno.rda below) from biomart.\n\t\tNOTE: This file can be used to match genes based on Ensembl gene IDs and HUGO Gene Nomenclature Committee (HGNC) symbol.\n2. Generation of a GRanges Object for Credible SNPs",
    "Set up in R by typing the following code into the console window in RStudio.\n\tlibrary(GenomicRanges)\n\toptions(stringsAsFactors = F)\n\tsetwd(\"~/work\") # This is the path to the working directory.\n\tcredSNP = read.delim(\"Supplementary_Table_8_Jansen.txt\", header=T)\n\tcredSNP = credSNP[credSNP$Credible.Causal==\"Yes\",]\nMake a GRanges object by typing the following code into the console window in RStudio.\n\tcredranges = GRanges(credSNP$Chr, IRanges(credSNP$bp, credSNP$bp), rsid=credSNP$SNP, P=credSNP$P)\n\tsave(credranges, file=\"AD_credibleSNP.rda\")\n3. Positional Mapping\nNOTE: For each step, type the corresponding code into the console window in RStudio.\nSet up in R.\n\toptions(stringsAsFactors=F)\n\tlibrary(GenomicRanges)\n\tload(\"AD_credibleSNP.rda\") # (see 2)\nPositional mapping of promoter/exonic SNPs to genes\n\t\nLoad promoter and exonic region and generate a GRange object.\n\t\texon = read.table(\"Gencode19_exon.bed\")\n\t\texonranges = GRanges(exon[,1],IRanges(exon[,2],exon[,3]),gene=exon[,4])\n\t\tpromoter = read.table(\"Gencode19_promoter.bed\")\n\t\tpromoterranges = GRanges(promoter[,1], IRanges(promoter[,2], promoter[,3]), gene=promoter[,4])\nOverlap credible SNPs with exonic regions.\n\t\tolap = findOverlaps(credranges, exonranges)\n\t\tcredexon = credranges[queryHits(olap)]\n\t\tmcols(credexon) = cbind(mcols(credexon), mcols(exonranges[subjectHits(olap)]))\nOverlap credible SNPs with promoter regions.\n\t\tolap = findOverlaps(credranges, promoterranges)\n\t\tcredpromoter = credranges[queryHits(olap)]\n\t\tmcols(credpromoter) = cbind(mcols(credpromoter), mcols(promoterranges[subjectHits(olap)]))\nLink SNPs to their putative target genes using chromatin interactions.\n\t\nLoad Hi-C dataset and generate a GRange object.\n\t\thic = read.table(\"Promoter-anchored_chromatin_loops.bed \", skip=1)\n\t\tcolnames(hic) = c(\"chr\", \"TSS_start\", \"TSS_end\", \"Enhancer_start\", \"Enhancer_end\")\n\t\thicranges = GRanges(hic$chr, IRanges(hic$TSS_start, hic$TSS_end), enhancer=hic$Enhancer_start)\n\t\tolap = findOverlaps(hicranges, promoterranges)\n\t\thicpromoter = hicranges[queryHits(olap)]\n\t\tmcols(hicpromoter) = cbind(mcols(hicpromoter), mcols(promoterranges[subjectHits(olap)]))\n\t\thicenhancer = GRanges(seqnames(hicpromoter), IRanges(hicpromoter$enhancer, hicpromoter$enhancer+10000), gene=hicpromoter$gene)\nOverlap credible SNPs with Hi-C GRange object.\n\t\tolap = findOverlaps(credranges, hicenhancer)\n\t\tcredhic = credranges[queryHits(olap)]\n\t\tmcols(credhic) = cbind(mcols(credhic), mcols(hicenhancer[subjectHits(olap)]))\nCompile AD candidate genes defined by positional mapping and chromatin interaction profiles.\n\t### The resulting candidate genes for AD:\n\tADgenes = Reduce(union, list(credhic$gene, credexon$gene, credpromoter$gene))\n\t### to convert Ensembl Gene ID to HGNC symbol\n\tload(\"geneAnno.rda\")\n\tADhgnc = geneAnno1[match(ADgenes, geneAnno1$ensembl_gene_id), \"hgnc_symbol\"]\n\tADhgnc = ADhgnc[ADhgnc!=\"\"]\n\tsave(ADgenes, ADhgnc, file=\"ADgenes.rda\")\n\twrite.table(ADhgnc, file=\"ADgenes.txt\", row.names=F, col.names=F, quote=F, sep=\"\\t\")\n4. Developmental Expression Trajectories\nNOTE: For each step, type the corresponding code into the console window in RStudio.\nSet up in R.",
    "library(reshape); library(ggplot2); library(GenomicRanges); library(biomaRt)\n\tlibrary(\"WGCNA\")\n\toptions(stringsAsFactors=F)\nProcess expression and meta data.\n\tdatExpr = read.csv(\"expression_matrix.csv\", header = FALSE)\n\tdatExpr = datExpr[,-1]\n\tdatMeta = read.csv(\"columns_metadata.csv\")\n\tdatProbes = read.csv(\"rows_metadata.csv\")\n\tdatExpr = datExpr[datProbes$ensembl_gene_id!=\"\",]\n\tdatProbes = datProbes[datProbes$ensembl_gene_id!=\"\",]\n\tdatExpr.cr= collapseRows(datExpr, rowGroup = datProbes$ensembl_gene_id, rowID= rownames(datExpr))\n\tdatExpr = datExpr.cr$datETcollapsed\n\tgename = data.frame(datExpr.cr$group2row)\n\trownames(datExpr) = gename$group\n\t\nSpecify developmental stages.\n\t\tdatMeta$Unit = \"Postnatal\"\n\t\tidx = grep(\"pcw\", datMeta$age)\n\t\tdatMeta$Unit[idx] = \"Prenatal\"\n\t\tidx = grep(\"yrs\", datMeta$age)\n\t\tdatMeta$Unit[idx] = \"Postnatal\"\n\t\tdatMeta$Unit = factor(datMeta$Unit, levels=c(\"Prenatal\", \"Postnatal\"))\nSelect cortical regions.\n\t\tdatMeta$Region = \"SubCTX\"\n\t\tr = c(\"A1C\", \"STC\", \"ITC\", \"TCx\", \"OFC\", \"DFC\", \"VFC\", \"MFC\", \"M1C\", \"S1C\", \"IPC\", \"M1C-S1C\", \"PCx\", \"V1C\", \"Ocx\")\n\t\tdatMeta$Region[datMeta$structure_acronym %in% r] = \"CTX\"\n\t\tdatExpr = datExpr[,which(datMeta$Region==\"CTX\")]\n\t\tdatMeta = datMeta[which(datMeta$Region==\"CTX\"),]\n\t\tsave(datExpr, datMeta, file=\"devExpr.rda\")\nExtract developmental expression profiles of AD risk genes.\n\tload(\"ADgenes.rda\")\n\texprdat = apply(datExpr[match(ADgenes, rownames(datExpr)),],2,mean,na.rm=T)\n\tdat = data.frame(Region=datMeta$Region, Unit=datMeta$Unit, Expr=exprdat)\nCompare prenatal versus postnatal expression levels of AD risk genes.\n\tpdf(file=\"developmental_expression.pdf\")\n\tggplot(dat,aes(x=Unit, y=Expr, fill=Unit, alpha=Unit)) + ylab(\"Normalized expression\") + geom_boxplot(outlier.size = NA) + ggtitle(\"Brain Expression\") + xlab(\"\") + scale_alpha_manual(values=c(0.2, 1)) + theme_classic() + theme(legend.position=\"na\")\n\tdev.off()\n5. Cell-type Expression Profiles\nNOTE: For each step, type the corresponding code into the console window in RStudio.\nSet up in R.\n\toptions(stringsAsFactors=F)\n\tload(\"ADgenes.rda\")\n\tload(\"geneAnno.rda\")\n\ttargetname = \"AD\"\n\ttargetgene = ADhgnc\n\tcellexp = read.table(\"DER-20_Single_cell_expression_processed_TPM_backup.tsv\",header=T,fill=T)\n\tcellexp[1121,1] = cellexp[1120,1]\n\tcellexp = cellexp[-1120,]\n\trownames(cellexp) = cellexp[,1]\n\tcellexp = cellexp[,-1]\n\tdatExpr = scale(cellexp,center=T, scale=F)\n\tdatExpr = datExpr[,789:ncol(datExpr)]\nExtract cellular expression profiles of AD risk genes.\n\texprdat = apply(datExpr[match(targetgene, rownames(datExpr)),],2,mean,na.rm=T)\n\tdat = data.frame(Group=targetname, cell=names(exprdat), Expr=exprdat)\n\tdat$celltype = unlist(lapply(strsplit(dat$cell, split=\"[.]\"),'[[',1))\n\tdat = dat[-grep(\"Ex|In\",dat$celltype),]\n\tdat$celltype = gsub(\"Dev\",\"Fetal\",dat$celltype)\n\tdat$celltype = factor(dat$celltype, levels=c(\"Neurons\",\"Astrocytes\",\"Microglia\",\"Endothelial\",\n\tOligodendrocytes\",\"OPC\",\"Fetal\"))\n\tpdf(file=\"singlecell_expression_ADgenes.pdf\")\n\tggplot(dat,aes(x=celltype, y=Expr, fill=celltype)) +\n\tylab(\"Normalized expression\") + xlab(\"\") + geom_violin() + theme(axis.text.x=element_text(angle = 90, hjust=1)) + theme(legend.position=\"none\") +\n\tggtitle(paste0(\"Cellular expression profiles of AD risk genes\"))\n\tdev.off()\n6. Gene Annotation Enrichment Analysis of AD Risk Genes\nDownload and configure HOMER by typing the commands below in terminal.\n\tmkdir homer\n\tcd homer",
    "wget http://homer.ucsd.edu/homer/configureHomer.pl\n\tperl ./configureHomer.pl -install\n\tperl ./configureHomer.pl -install human-p\n\tperl ./configureHomer.pl -install human-o\nRun HOMER by typing the commands below in terminal.\n\texport PATH=$PATH:~/work/homer/bin\n\tfindMotifs.pl ~/work/ADgenes.txt human ~/work/\nPlot the enriched terms by typing the following code into the console window in RStudio.\n\tlibrary(ggpubr)\n\toptions(stringsAsFactors=F)\n\tpdf(\"GO_enrichment.pdf\",width=15,height=8)\n\tplot_barplot = function(dbname,name,color){\n\tinput = read.delim(paste0(dbname,\".txt\"),header=T)\n\tinput = input[,c(-1,-10,-11)]\n\tinput = unique(input)\n\tinput$FDR = p.adjust(exp(input$logP))\n\tinput_sig = input[input$FDR < 0.1,]\n\tinput_sig$FDR = -log10(input_sig$FDR)\n\tinput_sig = input_sig[order(input_sig$FDR),]\n\tp = ggbarplot(input_sig, x = \"Term\", y = \"FDR\", fill = color, color = \"white\", sort.val = \"asc\", ylab = expression(-log[10](italic(FDR))), xlab = paste0(name,\" Terms\"), rotate = TRUE, label = paste0(input_sig$Target.Genes.in.Term,\"/\",input_sig$Genes.in.Term), font.label = list(color = \"white\", size = 9), lab.vjust = 0.5, lab.hjust = 1)\n\tp = p+geom_hline(yintercept = -log10(0.05), linetype = 2, color = \"lightgray\")\n\treturn(p)\n\t}\n\tp1 = plot_barplot(\"biological_process\",\"GO Biological Process\",\"#00AFBB\")\n\tp2 = plot_barplot(\"kegg\",\"KEGG\",\"#E7B800\")\n\tp3 = plot_barplot(\"reactome\",\"Reactome\",\"#FC4E07\")\n\tggarrange(p1, p2, p3, labels = c(\"A\", \"B\", \"C\"), ncol = 2, nrow = 2)\n\tdev.off()"
  ],
  "subjectAreas": [
    "Genetics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}