{
  "id": 2455,
  "origin_website": "Cell",
  "title": "An expression-based variant impact phenotyping protocol to predict the impact of gene variants in cell lines",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\neVIP2 characterization of RNF43 variants with Kallisto files as input\nTiming: 30 min\nHere, we describe how to run eVIP2 on RNA-seq gene expression data from two RNF43 variants. We recommend using Kallisto, but gene quantification from other tools can be used as well, as shown in the sections below. The use of Kallisto is required for eVIP2 pathway analysis.\nWe prepared a GitHub repository and Docker image containing all the necessary example inputs, reference files, and scripts for the method presented below.\nThe repository is found on GitHub: https://github.com/BrooksLabUCSC/eVIP2[href=https://github.com/BrooksLabUCSC/eVIP2].\nThe docker image is found at Docker Hub: https://hub.docker.com/r/althornt/evip2_env[href=https://hub.docker.com/r/althornt/evip2_env].\nThe Docker image contains all files needed to run the following tutorial commands below in the directory named “docker_tutorial_files”. Here we describe the files and how they are used.\nPreparation of RNA-seq data.\nNote: We recommend performing general quality control analysis on your data. For information on quality control for raw RNA-seq reads, refer to Conesa et al. (Conesa et al., 2016[href=https://www.wicell.org#bib5]). Based on our analysis from subsampling read depth, we recommend having at least 20 million reads per replicate.\nRun Kallisto on the RNA-seq fastq files with default parameters, or the parameters of your choice. Only default parameters have been tested. Kallisto creates an output directory for each sample, which contains various files, including ”abundance.tsv”. A directory containing a Kallisto subdirectory for each sample will be used as input to run_eVIP2.py. For this protocol, a folder of Kallisto outputs (docker_tutorial_files/RNF43_kallisto_outputs) is provided in the Docker image and can be used as a guide to structure directories for new datasets.\nPreparation of input files. To run eVIP2, users need to provide the following required files, which are located within the Docker image and in the GitHub repository:",
    "--sig_info This tab delimited file indicates which samples are replicates of which conditions. The sample names listed under distil_id must match the corresponding name of each Kallisto output directory.\ntable:files/protocols_protocol_1938_1.csv\n-r The reference file is a tab delimited file that describes which WT to mutant comparisons to do.\ntable:files/protocols_protocol_1938_2.csv\n-c The control file is a tab delimited file to list the controls in the experiment. The control name should match the “sig_id” in the -sig_info file. There must be at least one control.\nGFP\nNote: When running eVIP2 Pathways (by declaring -eVIPP) the following additional files are required and are provided on the Docker image:\n-gmt Gene set file in .gmt format. These can be downloaded from MSigDB http://www.gsea-msigdb.org/gsea/msigdb/collections.jsp[href=http://www.gsea-msigdb.org/gsea/msigdb/collections.jsp] (Liberzon et al., 2011[href=https://www.wicell.org#bib7]). Custom gene sets may also be created.\n-gtf A gtf file used to convert transcript counts to gene counts. In this tutorial we use the Ensembl GRCh38 version of the reference genome, but eVIP2 is compatible with any version (Howe et al., 2021[href=https://www.wicell.org#bib6]). The gtf file used with eVIP2 should be the same as the gtf used as input to Kallisto.\nSetting up eVIP2 repo and Docker container.\nClone the eVIP2 repo to the desired path on your machine:\n> git clone https://github.com/BrooksLabUCSC/eVIP2.git[href=https://github.com/BrooksLabUCSC/eVIP2.git]\nPull the Docker image.\n> docker pull althornt/evip2_env\nVerify the Docker image installation.\n> docker image ls\nWhich should display the althornt/evip2_env repository name.\nREPOSITORY    TAG IMAGE ID    CREATED    SIZE\nalthornt/evip2_env    latest    8f9af2abd32e    1 h ago    4.9GB\nRun the Docker container:\n-v mounts the locally cloned eVIP2 directory inside of the container.\n-ti makes the container interactive.\n> docker run -v /path/to/eVIP2:/eVIP2 -ti althornt/evip2_env\nRunning eVIP2 command from kallisto outputs.",
    "Now, we demonstrate the first of three independent eVIP2 applications. The following eVIP2 command recreates the overall and pathway analysis of the RNF43 variants presented in Thornton et al. (Thornton et al., 2021[href=https://www.wicell.org#bib11]). Enter the eVIP2 directory and run eVIP2 with pathway analysis. Table 1[href=https://www.wicell.org#tbl1] provides an explanation of all parameters of the run_eVIP2.py command:\ntable:files/protocols_protocol_1938_4.csv\n> cd eVIP2\n> python2 run_eVIP2.py \\\n        --input_dir ../docker_tutorial_files/RNF43_kallisto_outputs \\\n        --out_directory tutorial_files/eVIP2_output_from_kallisto \\\n        --sig_info tutorial_files/RNF43_sig.info \\\n        -c tutorial_files/controls.grp \\\n        -r tutorial_files/comparisons.tsv \\\n        --gmt tutorial_files/h.all.v6.0.symbols.gmt \\\n        --gtf ../docker_tutorial_files/Homo_sapiens.GRCh38.87.gtf \\\n        --num_reps 4 \\\n        --use_c_pval \\\n        --eVIPP\neVIP2 characterization of RNF43 variants with a gene expression table as input\nTiming: 1 min\nRunning eVIP2 command from gene expression table.\nFor a second eVIP2 application, we demonstrate running eVIP2 using a gene expression table as input as an alternative to using the Kallisto inputs. At this time, pathway analysis has only been tested with Kallisto input; however, you can still run eVIP2 with a generic gene expression table without pathway analysis. To run the eVIP2 pipeline without pathway analysis, the –input_gene_tpm or –input_table parameters can be used as input with run_eVIP2.py.\nSince we are using the same data and experimental setup as in the previous application, we use many of the same input files and parameters files as above. In the following command, we use a gene expression table from the RNF43 experiment to get the overall eVIP2 predictions.\npython2 run_eVIP2.py \\\n  --input_gene_tpm tutorial_files/RNF43_gene_exp.tsv \\\n  --–-out_directory tutorial_files/eVIP2_output_from_gene_exp_table \\\n  --–-sig_info tutorial_files/RNF43_sig.info \\\n  -c tutorial_files/controls.grp \\\n  -r tutorial_files/comparisons.tsv \\\n  --num_reps 4 \\\n  --use_c_pval\neVIP2 RNF43 variants JuncBASE table\nTiming: 1 min\nRunning eVIP2 command from JuncBASE table.",
    "So far, we have used gene expression as input to predict variant impact. Now we demonstrate how tables representing other biological measurements can be used as well. Junction Based Analysis of Alternative Splicing Events (JuncBASE) is a tool to identify and quantify alternative splicing in RNA-seq data (Brooks et al., 2011[href=https://www.wicell.org#bib3]).\nHere we use a table of quantification of alternative splicing events generated by JuncBASE to see how the RNF43 gene variants impact the splicing profiles using the run_eVIP2.py script. We use the --input_table parameter to use the JuncBASE table as input.\npython2 run_eVIP2.py \\\n  --input_table tutorial_files/RNF43_JuncBASE_PSI_infile.txt \\\n  --out_directory tutorial_files/eVIP2_output_from_juncBASE \\\n  --sig_info tutorial_files/RNF43_sig.info \\\n  -c tutorial_files/controls.grp \\\n  -r tutorial_files/comparisons.tsv \\\n  --num_reps 4 \\\n  --use_c_pval"
  ],
  "subjectAreas": [
    "Rnaseq",
    "Bioinformatics",
    "Cancer",
    "Genetics",
    "Gene Expression"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}