{
  "id": 2234,
  "origin_website": "Cell",
  "title": "Defining pervasive transcription units using chromatin RNA-sequencing data",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nChromatin RNA extraction with spike-in control\nTiming: ∼3–4 h\nDIS3KD chromatin RNA are extracted using S2 cells as spike-in control.\nDigest and wash cells with ice-cold PBS.\nAfter centrifugation for 3 min at 300 g with a fixed angle rotor at 4°C, lyse cell pellets with lysis buffer and incubated for 10 min on ice.\nAdd 30% cushion buffer to the lysates in centrifugation tubes and spun nuclei for 15 min at 3 500 g with a fixed angle rotor at 4°C.\nWash the isolated nuclei with ice-cold PBS with 1 mM EDTA once and resuspend the nuclei in nuclear storage buffer.\nAdd one volume of 2× NUN buffer to one volume of nuclei in nuclear storage buffer for 30 min on ice.\nAfter centrifugation for 30 min at 21 000 g with a fixed angle rotor at 4°C, wash chromatin pellets twice with 1× NUN buffer.\nResuspended the pellets in TRIzol for RNA extraction.\nAdd 0.08% Drosophila S2 cells as spike-in control.\nImmediately extract RNA, or samples can be stored at −20°C for up to a year.\nExtract high-quality RNA according to TRIzol manual. Troubleshooting 1[href=https://www.wicell.org#troubleshooting] and 2[href=https://www.wicell.org#troubleshooting].\nUse Agilent 2100 Bioanalyzer and RT-qPCR to perform quality control (Figures 1[href=https://www.wicell.org#fig1]A and 1B).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1706-Fig1.jpg\nFigure 1. Quality control of chromatin RNA\n(A) Characterization of RNA quality using the Agilent 2100 Bioanalyzer. The left profile has three peaks which stand for 5.8S and 5S (below 200 nt), 18s (around 2000 nt) and 28s (around 4000 nt) rRNAs. The right profile only has one major RNA peak at around 200 nt. The RINs are shown above.\n(B) Relative abundance of the indicated RNAs in the three cellular compartments, determined by real-time qPCR.",
    "(C) Bioanalyzer electropherograms of the sequencing libraries. The libraries are size-selected with AMPure XP beads. Error bars represent standard deviation.\nAlternatives: Cells from other species can also be used for normalization. We recommend using higher percentage of spike-in controls, such as 10%–20%.\nPause point: RNA samples can be store at −80°C for up to a year.\nNote: Chromatin RNA samples do not contain 28s and 18s rRNA bands like RNA extracted from whole cells so their RNA integrity number (RIN) is low (Figure 1[href=https://www.wicell.org#fig1]A) and they have higher level of 45s rRNA and lower level of mature mRNA (Figure 1[href=https://www.wicell.org#fig1]B).\nLibrary preparation and RNA sequencing\nTiming: ∼8–10 h\nPrepare library for chromatin RNA and do RNA sequencing.\n500 ng RNA of each sample should be used to prepare libraries.\nDeplete rRNAs and prepare total RNA-seq libraries using the VAHTS Total RNA-seq (H/M/R) Library Prep Kit for Illumina (Vazyme, NR603-01) (Figure 1[href=https://www.wicell.org#fig1]C).\nPerform 150 bp paired-end high throughput RNA sequencing on Illumina HiSeq Xten platform.\nNote: Dis3 depletion can greatly increase the RNA level of PTs which are normally at much lower abundance than mRNAs. Therefore, only around 10–20 million reads per library is sufficient.\nNote: In 1–14 steps, different samples should be processed at the same time by the same reagents and equipment to reduce batch effects.\nAcquire H3K27ac ChIP-seq data\nTiming: ∼2 h\nDownload cell-line or tissue specific H3K27ac ChIP-seq data to identify active enhancer locations.\nDownload the raw sequencing data (https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE162842[href=https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE162842]) in fq.gz format of H3K27ac ChIP-seq data generated from a primary pancreatic cancer cell line (Liu et al., 2022[href=https://www.wicell.org#bib9]).\nAlternatives: Download public tissue or cell line specific H3K27ac ChIP-seq data that fit the chromatin RNA-seq data.\nTrim and map sequencing reads\nTiming: ∼4–6 h\nAnalyses of RNA-seq and ChIP-seq data.",
    "The minimum computational requirement: this protocol requires at least 30 GB of RAM.\nDownload the mouse genome information and the gene annotation GTF file from GENCODE at https://www.gencodegenes.org/mouse/[href=https://www.gencodegenes.org/mouse/].\nDownload the fasta files from “Genome sequence (GRCm39)” in the “Fasta files” table named “GRCm39.genome.fa.gz”.\nDownload the GTF file from “Comprehensive gene annotation” in the “GTF/GFF3 files” table named “gencode.vM28.chr_patch_hapl_scaff.annotation.gtf.gz”.\nDownload the Drosophila genome information and the gene annotation GTF file from Ensembl at https://asia.ensembl.org/[href=https://asia.ensembl.org/].\nChoose the species as Drosophila melanogaster and navigate to the “fasta” folder. Navigate to the “dna” folder and download the genome file named “Drosophila_melanogaster.BDGP6.32.dna.toplevel.fa.gz”.\nNavigate to the “gtf” folder and download the gene annotation file named “Drosophila_melanogaster.BDGP6.32.105.gtf.gz”.\nUnzip genome and annotation files.\n$gunzip FILEPATH/GRCm39.genome.fa.gz\n$gunzip FILEPATH/gencode.vM28.chr_patch_hapl_scaff.annotation.gtf.gz\n$gunzip FILEPATH/Drosophila_melanogaster.BDGP6.32.dna.toplevel.fa.gz\n$gunzip FILEPATH/Drosophila_melanogaster.BDGP6.32.105.gtf.gz\nTrim adapter and low-quality reads.\n$trim_galore -q 25 --phred33 --length 50 -e 0.1 --fastqc --fastqc_args “--outdir./” -stringency 5 --paired --output_dir./\nRAWDATA_DIRECTION/sg9270_R1.fq.gz RAWDATA_DIRECTION/sg9270_R2.fq.gz\n$trim_galore -q 25 --phred33 --length 50 -e 0.1 --fastqc --fastqc_args “--outdir./” -stringency 5 --paired --output_dir./\nRAWDATA_DIRECTION/sg4841_R1.fq.gz RAWDATA_DIRECTION/sg4841_R2.fq.gz\n$trim_galore -q 25 --phred33 --length 50 -e 0.1 --fastqc --fastqc_args “--outdir./” -stringency 5 --paired --output_dir./\nRAWDATA_DIRECTION/sgDis3_1_R1.fq.gz RAWDATA_DIRECTION/sgDis3_1_R2.fq.gz\n$trim_galore -q 25 --phred33 --length 50 -e 0.1 --fastqc --fastqc_args “--outdir./” -stringency 5 --paired --output_dir./\nRAWDATA_DIRECTION/sgDis3_2_R1.fq.gz RAWDATA_DIRECTION/sgDis3_2_R2.fq.gz\n$trim_galore --fastqc --quality 20 --paired --phred33 --output_dir./\nFILEPATH/H3K27ac_R1.fq.gz FILEPATH/H3K27ac_R2.fq.gz\n$trim_galore --fastqc --quality 20 --paired --phred33 --output_dir./\nFILEPATH/Input_R1.fq.gz FILEPATH/Input_R2.fq.gz\nNote: Download the original files at https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE162829[href=https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE162829].\nBuild the mouse and Drosophila genome indexes for alignment.\n$STAR --runThreadN 16 --runMode genomeGenerate --genomeDir./--\ngenomeFastaFiles FILEPATH/GRCm39.genome.fa --sjdbGTFfile\nFILEPATH/gencode.vM28.chr_patch_hapl_scaff.annotation.gtf --sjdbOverhang 149\n$STAR --runThreadN 16 --runMode genomeGenerate --genomeDir./--\ngenomeFastaFiles\nFILEPATH/Drosophila_melanogaster.BDGP6.32.dna.toplevel.fa --\nsjdbGTFfile FILEPATH/Drosophila_melanogaster.BDGP6.32.105.gtf --\nsjdbOverhang 149\n$bowtie2-build FILEPATH/GRCm39.genome.fa mm10\nNote: “--sjdbOverhang\" value should set as ReadLength – 1.\nAlign the chromatin RNA-seq and H3K27ac ChIP-seq data. Troubleshooting 3[href=https://www.wicell.org#troubleshooting].\nAlign the chromatin RNA-seq and H3K27ac ChIP-seq data to the mouse genome.\n$for file in sg9270 sg4841 sgDis3_1 sgDis3_2\n    do",
    "STAR --runThreadN 16 --outFilterMultimapScoreRange 1 --\n    outFilterMultimapNmax 20 --outFilterMismatchNmax 10\n    --alignIntronMax 500000 --alignMatesGapMax 1000000 --sjdbScore 2 -\n    -alignSJDBoverhangMin 1 --genomeLoad NoSharedMemory --\n    limitBAMsortRAM 20000000000 -c --outFilterMatchNminOverLread\n    0.33 --outFilterScoreMinOverLread 0.33 --sjdbOverhang 149 --\n    outSAMstrandField intronMotif --outSAMattributes NH HI NM MD AS\n    XS --limitSjdbInsertNsj 2000000 --outSAMunmapped None --\n    outSAMtype BAM SortedByCoordinate --outSAMheaderHD @HD VN:1.5 --\n    twopassMode Basic --outSAMmultNmax 1 --genomeDir\n    FILEPATH/STAR_INDEX_mm10 --readFilesCommand zcat --readFilesIn\n    ${file}_R1_val_1.fq.gz ${file}_R2_val_2.fq.gz --sjdbGTFfile\n    FILEPATH/gencode.vM28.chr_patch_hapl_scaff.annotation.gtf –\n    outFileNamePrefix ./${file}_mm10_\n    done\n$bowtie2 -p 8 -x BOWTIE2_INDEX -1 H3K27ac_R1_val_1.fq.gz -2\nH3K27ac_R2_val_2.fq.gz -S H3K27ac.sam --very-sensitive -X 2000\n$bowtie2 -p 8 -x BOWTIE2_INDEX -1 Input_R1_val_1.fq.gz -2\nInput_R2_val_2.fq.gz -S Input.sam --very-sensitive -X 2000\nAlign the chromatin RNA-seq to the Drosophila genome.\n$for file in sg9270 sg4841 sgDis3_1 sgDis3_2\n    do\n    STAR --runThreadN 16 --outFilterMultimapScoreRange 1 --\n    outFilterMultimapNmax 20 --outFilterMismatchNmax 10 --\n    alignIntronMax 500000 --alignMatesGapMax 1000000 --sjdbScore 2 --\n    alignSJDBoverhangMin 1 --genomeLoad NoSharedMemory --\n    limitBAMsortRAM 20000000000 -c --outFilterMatchNminOverLread\n    0.33 --outFilterScoreMinOverLread 0.33 --sjdbOverhang 149 --\n    outSAMstrandField intronMotif --outSAMattributes NH HI NM MD AS\n    XS --limitSjdbInsertNsj 2000000 --outSAMunmapped None --\n    outSAMtype BAM SortedByCoordinate --outSAMheaderHD @HD VN:1.5 --\n    twopassMode Basic --outSAMmultNmax 1 --genomeDir\n    FILEPATH/STAR_INDEX_dm6 --readFilesCommand zcat --readFilesIn\n    ${file}_R1_val_1.fq.gz ${file}_R2_val_2.fq.gz --sjdbGTFfile\n    FILEPATH/Drosophila_melanogaster.BDGP6.32.105.gtf –\n    outFileNamePrefix ./${file}_dm6_\n    done\nRemove unmapped or unpaired reads and generate indexes of filtered bam files using Samtools.\n$for file in sg9270 sg4841 sgDis3_1 sgDis3_2\n    do\n    samtools view -b -h -F 4 -f 3\n    ${file}_mm10_Aligned.sortedByCoord.out.bam -o\n    ${file}_mm10_filter.bam\n    samtools view -b -h -F 4 -f 3\n    ${file}_dm6_Aligned.sortedByCoord.out.bam -o\n    ${file}_dm6_filter.bam\n    samtools index ${file}_mm10_filter.bam\n    samtools index ${file}_dm6_filter.bam\n    done\n$for file in H3K27ac Input\n    do\n    samtools view -b -h -F 1028 -f 3 ${flie}.sam -o\n    ${flie}_filter.bam\n    samtools sort ${flie}_filter.bam -@ 16 >\n    ${flie}_filter_sorted.bam\n    samtools index ${flie}_filter_sorted.bam\n    done\nNote: “--genomeDir\" input the path of STAR index generated in step 20.\nNote: BOWTIE2_INDEX is generated in step 20.\nNote: The input sam/bam files in step c is the output sam/bam files in step a.",
    "Calculate SizeFactor of each sample using spike-in control\nTiming: ∼1 h\nUse spike-in control to normalize samples.\nCalculate Drosophila gene counts.\n$featureCounts -p -g gene_name -a FILEPATH/Drosophila_melanogaster.BDGP6.32.105.gtf -s 2 -o dm6_Dis3_RNAseqcount.txt sg9270_dm6_filter.bam sg4841_dm6_filter.bam sgDis3_1_dm6_filter.bam sgDis3_2_dm6_filter.bam\nNote: Input trimmed bam file of each sample separated by space.\nNote: Uses strand-specific RNA-seq Library Prep Kit. Use “-s 2” to calculate strand-specific gene counts.\nCalculate sizeFactor of each sample. The sizeFactors of sg4841, sg9270, sgDis3_1 and sgDis3_2 samples are 0.9232670, 1.1442665, 0.9295284 and 1.0183166.\n>library(edgeR)\n>gene <- read.table(file = \"dm6_Dis3_RNAseqcount.txt\", sep = \"\\t\", header = T,skip =1)\n>Dis3_gene = cbind(gene[7:10])\n>Geneid <- rbind(gene[1])\n>rownames(Dis3) <- Geneid$Geneid\n>countMatrix <- as.matrix(Dis3)\n>head(countMatrix)\n>group <- factor(c(\"c\",\"c\",\"t\",\"t\"))\n>y <- DGEList(counts=countMatrix,group=group)\n>y\n#####FILTER#####\n>keep <- rowSums(cpm(y)>0) >= 2;\n>y <- y[keep,keep.lib.sizes=FALSE];\n>dim(y)\n#####sizeFactors#####\n>calcNormFactors(y)\n#sg4841 = 0.9232670\n#sg9270 = 1.1442665\n#sgDis3_1 = 0.9295284\n#sgDis3_2 = 1.0183166\nTranscription unit (TU) annotation\nTiming: ∼4 h\nUse Poisson Log-normal emission distribution to identify transcription units.\nCalculate the genome-wide coverage from each chromatin RNA-seq sample in consecutive 200 bp bins throughout the genome.\nGenerate strand-specific BW files of chromatin RNA-seq samples.\n$for file in sg9270 sg4841 sgDis3_1 sgDis3_2\n    do\n    bamCoverage --binSize 10 --normalizeUsing RPKM --bam ${file}_filter.bam --filterRNAstrand forward -o ${file}_filter_fwd.bw\n    bamCoverage --binSize 10 --normalizeUsing RPKM --bam ${file}_filter.bam --filterRNAstrand reverse -o ${file}_filter_re.bw\n    done\nUse the mean value of the two samples from Dis3 depletion to generate bedgraph files representing (+) and (-) strand.\n$bigwigCompare -b1 Dis3_1_filter_fwd.bw -b2 Dis3_2_filter_fwd.bw --skipNAs --operation mean -bs 200 -of bedgraph -o Dis3_fwd.bedgraph\n$bigwigCompare -b1 Dis3_1_filter_re.bw -b2 Dis3_2_filter_re.bw --skipNAs --operation mean -bs 200 -of bedgraph -o Dis3_re.bedgraph\nNote: Other normalization methods normalize for sequencing depth are acceptable. The aim is to define transcription unit using Dis3 depletion samples, so do not need to use spike-in control to normalize.\nNote: Use “--filterRNAstrand” to generate strand-specific BW files.",
    "Use Poisson Log-normal emission distribution to divide bins from step 24 to “transcribed” state and “untranscribed” state.\n>if (!requireNamespace(”BiocManager”, quietly = TRUE))\n> install.packages(\"BiocManager\")\n>BiocManager::install(\"STAN\")\n>library(STAN)\n>bedgraph <- read.table(\"Dis3_fwd.bedgraph\",header = F)\n>sampleNames <- c(\"Chr\",\"start\",\"end\",\"RPKM\")\n>names(bedgraph) <- sampleNames\n>head(bedgraph)\n>tmp <- list()\n>RPKM <- matrix(bedgraph$RPKM)\n>tmp$RPKM <- RPKM\n>hmm_nb <- initHMM(tmp, 2, \"PoissonLogNormal\")\n>hmm_fitted_nb <- fitHMM(tmp, hmm_nb, maxIters=10)\n>viterbi_nb <- getViterbi(hmm_fitted_nb, tmp)\n>RPKM_state <- cbind(as.vector(unlist(viterbi_nb[1])),as.vector(unlist(tmp[1])))\n>bedgraph_state <- cbind(bedgraph,RPKM_state)\n>bedgraph_state1 <- bedgraph_state[which(bedgraph_state$`1`==\"1\"),]\n#transcribed state\n>bedgraph_state2 <- bedgraph_state[which(bedgraph_state$`1`==\"2\"),]\n#untranscribed state\n>write.table(bedgraph_state1,file <- \"Dis3_fwd_state1.bed\",quote = F,\nsep = \"\\t\",row.names = F)\nNote: Use forward strand as an example.\nMerge contiguous transcribed bins within 200 bp as one TU.\n$bedtools merge -d 200 -i Dis3_fwd_state1.bed |awk '{OFS=\"\\t\"}{print\n$1,$2,$3,\".\",\".\",\"+\"}' > Dis3_fwd_state1_merge.bed\n$bedtools merge -d 200 -i Dis3_re_state1.bed |awk '{OFS=”\\t”}{print\n$1,$2,$3,\".\",\".\",\"-\"}' > Dis3_re_state1_merge.bed\nSelect intergenic TUs overlapping with H3K27ac\nTiming: ∼4–6 h\nIntergenic TUs overlapping with H3K27ac are defined as candidates of PTs.\nSelect intergenic TUs.\nConvert the mouse gene annotation file from GTF format to BED format.\n$awk -F \"\\t\" '{OFS=\"\\t\"}{match($9,\"gene_name \\\"(.+)\\\"; transcript_type\",a)}{if($3∼/gene/)print($1,$4,$5,a[1],0,$7)}' FILEPATH/gencode.vM28.chr_patch_hapl_scaff.annotation.gtf > gencode.vM28.chr_patch_hapl_scaff.annotation.bed\nRemove TUs that overlap with coding genes on the same strand. Troubleshooting 4[href=https://www.wicell.org#troubleshooting].\n$bedtools intersect -s -v -a Dis3_fwd_state1_merge.bed -b\nFILEPATH/gencode.vM21.chr.annotation.bed |uniq >\nDis3_fwd_intergenic.bed\n$bedtools intersect -s -v -a Dis3_re_state1_merge.bed -b\nFILEPATH/gencode.vM21.chr.annotation.bed |uniq >\nDis3_re_intergenic.bed\n$cat Dis3_re_intergenic.bed Dis3_fwd_intergenic.bed >\nDis3_intergenic.bed\nFind and select intergenic TUs overlapping with H3K27ac peak regions.\nPeak calling of H3K27ac ChIP-seq data.\n$macs2 callpeak -B -t FILEPATH/H3K27ac_filter_sorted.bam -c\nFILEPATH/Input_filter_sorted.bam -n H3K27ac --verbose 3 -g mm -B -q\n1e-3 -f BEDPE --broad\nFilter out TUs that do not overlap with H3K27ac peaks. Troubleshooting 4[href=https://www.wicell.org#troubleshooting].\n$bedtools intersect -wa -a Dis3_re_intergenic.bed -b\nH3K27ac.broadPeak|uniq > Dis3_re_intergenic_H3K27ac.bed\n$bedtools intersect -wa -a Dis3_fwd_intergenic.bed -b\nH3K27ac.broadPeak|uniq > Dis3_fwd_intergenic_H3K27ac.bed\nTUs start and end sites are refined to nucleotide precision.\nDefine 400 bp bins located around start and end sites of the initially assigned TUs.",
    "$awk '{OFS=\"\\t\"}{print($1,$2-200,$2+200)}'\nDis3_fwd_intergenic_H3K27ac.bed > Dis3_fwd_intergenic_H3K27ac_5end.bed\n$awk '{OFS=\"\\t\"}{print($1,$3-200,$3+200)}'\nDis3_fwd_intergenic_H3K27ac.bed > Dis3_fwd_intergenic_H3K27ac_3end.bed\n$awk '{OFS=\"\\t\"}{print($1,$2-200,$2+200)}'\nDis3_re_intergenic_H3K27ac.bed > Dis3_re_intergenic_H3K27ac_3end.bed\n$awk '{OFS=\"\\t\"}{print($1,$3-200,$3+200)}'\nDis3_re_intergenic_H3K27ac.bed > Dis3_re_intergenic_H3K27ac_5end.bed\n$samtools depth -a -b Dis3_fwd_intergenic_H3K27ac_5end.bed\nsgDis3_1_mm10_filter.bam >\nDis3_1_fwd_intergenic_H3K27ac_5end_depth.txt\n$samtools depth -a -b Dis3_fwd_intergenic_H3K27ac_3end.bed\nsgDis3_1_mm10_filter.bam >\nDis3_1_fwd_intergenic_H3K27ac_3end_depth.txt\n$samtools depth -a -b Dis3_re_intergenic_H3K27ac_5end.bed\nsgDis3_1_mm10_filter.bam >\nDis3_1_reintergenic_H3K27ac_5end_depth.txt\n$samtools depth -a -b Dis3_re_intergenic_H3K27ac_3end.bed\nsgDis3_1_mm10_filter.bam >\nDis3_1_re_intergenic_H3K27ac_3end_depth.txt\n$samtools depth -a -b Dis3_fwd_intergenic_H3K27ac_5end.bed\nsgDis3_2_mm10_filter.bam >\nDis3_2_fwd_intergenic_H3K27ac_5end_depth.txt\n$samtools depth -a -b Dis3_fwd_intergenic_H3K27ac_3end.bed\nsgDis3_2_mm10_filter.bam >\nDis3_2_fwd_intergenic_H3K27ac_3end_depth.txt\n$samtools depth -a -b Dis3_re_intergenic_H3K27ac_5end.bed\nsgDis3_2_mm10_filter.bam >\nDis3_2_reintergenic_H3K27ac_5end_depth.txt\n$samtools depth -a -b Dis3_re_intergenic_H3K27ac_3end.bed\nsgDis3_2_mm10_filter.bam >\nDis3_2_re_intergenic_H3K27ac_3end_depth.txt\nFind the locations of abrupt coverage increase or decrease within the 400 bp bins.\n>library(\"tilingArray\")\n>library(\"davidTiling\")\n#####sizeFactor#####\n>Dis3_1_sizeFactor <- 0.9295284\n>Dis3_2_ sizeFactor <- 1.0183166\n>rep_num <- 2\n>rep1_path <- \"Dis3_1_fwd_intergenic_H3K27ac_5end_depth.txt\"\n>rep2_path <- \"Dis3_2_fwd_intergenic_H3K27ac_5end_depth.txt\"\n>output_path <- \"./Dis3_fwd_intergenic_H3K27ac_5end.bed\"\n#####read input#####\n>rep1 <- read.table(rep1_path,header = F)\n>rep2 <- read.table(rep2_path,header = F)\n>Dis3$mean_count <- (rep1$V3∗Dis3_1_sizeFactor+rep2$V3∗Dis3_2_sizeFactor)/rep_num\n#####start run#####\n>test <- as.matrix(Dis3$mean_count)\n>cplist <- c()\n>cycle <- length(test)/400\n>for(i in 1:cycle-1){\n  #print(i)\n  seg = segment(test[i∗400+1:400∗(i+1)], maxk = 400, maxseg = 2)\n  cp = unlist(seg@breakpoints)\n  #print(cp)\n  cplist = c(cplist,cp)\n}\n>end5 <- data.frame()\n>start <- 0\n>for(i in cplist){\n  index = start∗400+i\n  end5 = rbind(end5, Dis3[index,])\n  start = start+1\n}\n#####output#####\n>write.table(end5,file = output_path, quote = F, sep = \"\\t\",row.names = F,col.names = F)\nNote: Use start sites of forward strand TUs as an example.\nCombine start and end sites as refined TUs.\n>end5 <- read.table(\"Dis3_fwd_intergenic_H3K27ac_5end.bed\",header = F)\n>end3 <- read.table(\"Dis3_fwd_intergenic_H3K27ac_3end.bed\",header = F)\n>end5$end3 <- end3$V2\n>intergenic_H3K27ac_transcripts <- cbind(end5[1:2],end5$end3)\n>write.table(intergenic_H3K27ac_transcripts, file = \"\nDis3_fwd_intergenic_H3K27ac_refine.bed\", quote = F, sep =\n\"\\t\",row.names = F, col.names = F)\nNote: Use forward strand as an example.\nGive each TU a unique name and remove TUs which overlap with genes.\n$awk -F “\\t” '{OFS=”\\t”}{print($1,$2,$3,”Dis3_fwd_intergenic_H3K27ac_”NR,”.”,”+”)}' Dis3_fwd_intergenic_H3K27ac_refine.bed > Dis3_fwd_intergenic_H3K27ac_refine2.bed\n$awk -F \"\\t\" '{OFS=\"\\t\"}{print($1,$2,$3,\"Dis3_re_intergenic_H3K27ac_\"NR,”.”,\"-\")}' Dis3_re_intergenic_H3K27ac_refine.bed > Dis3_re_intergenic_H3K27ac_refine2.bed\n$bedtools intersect -s -v -a Dis3_fwd_intergenic_H3K27ac_refine2.bed -b FILEPATH/gencode.vM21.chr.annotation.bed |uniq > tmp.bed\n$mv tmp.bed Dis3_fwd_intergenic_H3K27ac_refine2.bed",
    "$bedtools intersect -s -v -a Dis3_re_intergenic_H3K27ac_refine2.bed -b FILEPATH/gencode.vM21.chr.annotation.bed |uniq > tmp.bed\n$mv tmp.bed Dis3_re_intergenic_H3K27ac_refine2.bed\nPROMPT and eRNA annotation\nTiming: ∼1–2 h\nDivide candidates of PTs into PROMPTs and eRNAs.\nTUs, located within 5 kb from 5-’ends of the antisense-strand of protein-coding genes, are selected as PROMPT candidates. Troubleshooting 4[href=https://www.wicell.org#troubleshooting].\n$awk -F \"\\t\" '{OFS=\"\\t\"}{match($9,\"gene_name \\\"(.+)\\\";\nlevel\",a)}{if($9∼/protein_coding/ &&\n$3∼/gene/)print($1,$4,$5,a[1],$6,$7)}'\nFILEPATH/gencode.vM28.chr_patch_hapl_scaff.annotation.gtf > pcgene.bed\n$perl -alne '{if($F[5] eq \"+\"){$start=$F[1]-5001;$end=$F[1]-\n1;$strand=\"-\"}else{$start=$F[2]+1;$end=$F[2]+5001;$strand=\"+\"}print\njoin(\"\\t\",$F[0],$start,$end,$F[3],0,$strand)}' pcgene.bed > prompt.bed\n$bedtools subtract -s -a prompt.bed -b\nFILEPATH/gencode.vM28.chr_patch_hapl_scaff.annotation.bed -A\n>prompt_rmgene.bed\n$bedtools intersect -wa -a Dis3_fwd_intergenic_H3K27ac_refine2.bed -b\nprompt_rmgene.bed -s |uniq> Dis3_fwd_intergenic_PROMPT.bed\n$bedtools intersect -wa -a Dis3_re_intergenic_H3K27ac_refine2.bed -b\nprompt_rmgene.bed -s |uniq> Dis3_re_intergenic_PROMPT.bed\n$cat Dis3_fwd_intergenic_PROMPT.bed Dis3_re_intergenic_PROMPT.bed >\nDis3_intergenic_PROMPT.bed\nTUs, which are located farther than 1 kb upstream of 5′ends and more than 10 kb downstream from 3′ends of protein-coding genes and do not overlap with PROMPT candidates, are selected as eRNA candidates. Troubleshooting 4[href=https://www.wicell.org#troubleshooting].\n$perl -alne '{if($F[5] eq \"+\"){$start=$F[1]-1001;$end=$F[1]-1;$strand=\"+\"}else{$start=$F[2]+1;$end=$F[2]+1001;$strand=\"-\"}print join(\"\\t\",$F[0],$start,$end,$F[3],0,$strand)}' pcgene.bed > TSS1000.bed\n$perl -alne '{if($F[5] eq \"+\"){$start=$F[2]+1;$end=$F[2]+10001;$strand=\"+\"}else{$start=$F[1]-1;$end=$F[1]-10001;$strand=\"-\"}print join(\"\\t\",$F[0],$start,$end,$F[3],0,$strand)}' pcgene.bed > TTS10000.bed\n$cat TSS1000.bed TTS10000.bed > gencode.vM21.chr_patch_hapl_scaff.TSS1000TTS10000.bed\n$bedtools intersect -v -a Dis3_fwd_intergenic_H3K27ac_refine2.bed -b gencode.vM21.chr_patch_hapl_scaff.TSS1000TTS10000.bed -s |uniq > Dis3_fwd_intergenic_eRNA_candidates.bed\n$bedtools intersect -v -a Dis3_re_intergenic_H3K27ac_refine2.bed -b gencode.vM21.chr_patch_hapl_scaff.TSS1000TTS10000.bed -s |uniq > Dis3_re_intergenic_eRNA_candidates.bed\n$bedtools intersect -s -v -a Dis3_fwd_intergenic_eRNA_candidates.bed -b Dis3_fwd_intergenic_PROMPT.bed > Dis3_fwd_intergenic_eRNA.bed\n$bedtools intersect -s -v -a Dis3_re_intergenic_eRNA_candidates.bed -b Dis3_re_intergenic_PROMPT.bed > Dis3_re_intergenic_eRNA.bed\n$cat Dis3_fwd_intergenic_eRNA.bed Dis3_re_intergenic_eRNA.bed > Dis3_intergenic_eRNA.bed\nCalculate the counts of coding genes, eRNAs and PROMPTs.\n$cat Dis3_intergenic_eRNA.bed Dis3_intergenic_PROMPT.bed | awk -F \"\\t\" '{OFS=\"\\t\"}{print($1,\".\",\"exon\",$2,$3,\".\",$6,\".\",\"gene_id \\\"\"$4\"\\\";\")}' > eRNA_PRMOPT.gtf\n$cat eRNA_PRMOPT.gtf FILEPATH/ gencode.vM28.chr_patch_hapl_scaff.annotation.gtf > gene_eRNA_PRMOPT.gtf\n$featureCounts -p -g gene_name -a gene_eRNA_PRMOPT.gtf -s 2 -o mm10_Dis3_RNAseqcount.txt sg4841_mm10_filter.bam sg9270_mm10_filter.bam sgDis3_1_mm10_filter.bam sgDis3_2_mm10_filter.bam\nUse edgeR to perform the differential expression analyses of eRNAs and PROMPTs.\n>library(edgeR)\n>data <- read.table(file = \"mm10_Dis3_RNAseqcount.txt\", sep = \"\\t\", header = T,skip =1)\n>sampleNames <- c(\"C_1\",\"C_2\",\"t_1\",\"t_2\")\n>names(data)[7:10] <- sampleNames\n>head(data)\n>countMatrix <- as.matrix(cbind(data[7:10]))\n>rownames(countMatrix) <- data$Geneid\n>head(countMatrix)\n>group <- factor(c(\"c\",\"c\",\"t\",\"t\"))\n>y <- DGEList(counts=countMatrix,group=group)\n>y\n#####FILTER#####",
    ">keep <- rowSums(cpm(y)>0) >= 2;\n>y <- y[keep,keep.lib.sizes=FALSE];\n>dim(y)\n#####dm6 spike-in normalization#####\n>dm6Dis3KD <- c(0.9232670, 1.1442665, 0.9295284, 1.0183166)\n>y$samples$norm.factors <- dm6Dis3KD\n>plotMDS(y)\n>design <- model.matrix(∼ group)\n>rownames(design) <- colnames(y)\n>y <- estimateDisp(y,design)\n>plotBCV(y);\n>fit <- glmQLFit(y,design)\n>qlf <- glmQLFTest(fit,coef=2)\n>topTags(qlf)\n>top <- rownames(topTags(qlf))\n>summary(de <- decideTestsDGE(qlf))\n>detags <- rownames(y)[as.logical(de)];\n>plotSmear(qlf, de.tags=detags);\n>abline(h=c(-1, 1), col=\"blue\");\n>cpm <- cpm(y)[rownames(y),]\n>tmp <- qlf$table\n>tmp <- cbind(tmp,cpm)\n>exp <- cbind(data[2:10])\n>exp$gene <- data[,1]\n>tmp$gene <- rownames(y)\n>tmp <- merge(tmp,exp,by=\"gene\")\n>write.csv(tmp,file = \"Dis3KD_RNAseq.csv\")\nNote: “dm6Dis3KD” is a vector of sizeFactors calculated in step 23.\nSelect eRNAs and PROMPTs whose both p values are less than 0.05 and whose log2fold change (fold change, FC, is sgDis3 divided by sgControl) are greater than 1 as the final eRNAs and PROMPTs respectively.\nUse the final eRNAs and PROMPTs to make BED files named “Dis3up_eRNA.bed” and “Dis3up_PROMPT.bed”. Troubleshooting 5[href=https://www.wicell.org#troubleshooting].\nQuantify pervasive transcripts\nTiming: ∼10 min\nUse the median length to quantify PTs.\nCalculate the median length of the final PROMPTs and eRNAs. The median length is around 1.6 kb."
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Sequence Analysis",
    "Bioinformatics",
    "Crispr",
    "Chipseq",
    "Molecular Biology",
    "Gene Expression",
    "Sequencing"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}