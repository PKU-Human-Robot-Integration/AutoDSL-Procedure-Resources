{
  "id": 2592,
  "origin_website": "Cell",
  "title": "Protocol to identify functional doppelgängers and verify biomedical gene expression data using doppelgangerIdentifier",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nInstalling doppelgangerIdentifier (DI)\nTiming: 1 min\nThis section describes how to install DI on a computer that has R (>=3.5.0) installed.\nInstall all dependencies (devtools, sva, ggplot2, class, utils, dplyr) of DI.\nNote: If you encounter installation errors while installing any of the dependencies of DI (devtools, sva, ggplot2, class, utils, dplyr) via R for Linux, try installing the packages with apt-get (problem 1[href=https://www.wicell.org#sec7.1]).\nInstall DI with devtools.\n>devtools::install_github(\"lr98769/doppelgangerIdentifier\")\nCritical: For installation error relating to serialized objects that cannot be read in older versions of R, ensure that the R version installed is >= 3.5.0 (problem 2[href=https://www.wicell.org#sec7.3]).\nCritical: If met with an error message suggesting that the package is corrupted after reinstallation, restart R and check if the package is installed with the optional step below (problem 3[href=https://www.wicell.org#sec7.5]).\nOptional: To check if DI is installed, run the following code.\n>library(doppelgangerIdentifier)\nPrepare data\nTiming: 10 min\nThis step prepares the gene expression data and meta data in the correct format to be passed into the two computational functions as R data frames: getPPCCDoppelgangers() and verifyDoppelgangers().\nFormat the gene expression data set to match the data frame depicted in Table 4[href=https://www.wicell.org#tbl4].\ntable:files/protocols_protocol_2092_4.csv\nThe row names of the data frame are set to the gene labels while the column names of the data frame are set to the sample labels. Ensure that the sample labels are consistent between the column names of the gene expression R data frame and the row names of the meta data R data frame (c.f. Table 5[href=https://www.wicell.org#tbl5]). In this example data set, there are g number of genes and s number of samples.\nLoad the gene expression data set into R as a data frame.",
    "Note: Ensure each row of the data frame represents gene expression levels of a gene or probe while each column of the data frame represents gene expression levels from a sample. If the data frame has sample gene expression levels as rows, transpose the data frame with the following line of code.\n>raw_data <- as.data.frame(t(raw_data))\nSet the sample labels as the column names and the gene labels as the row names. Remove all other redundant rows or columns.\n>rownames(raw_data) <- geneLabels\n>colnames(raw_data) <- sampleLabels\nNote: Ensure that sample and gene labels are unique.\nFormat the meta data to match the data frame depicted in Table 5[href=https://www.wicell.org#tbl5].\ntable:files/protocols_protocol_2092_5.csv\nThe row names of the data frame are set to sample labels while the column names of the data frame are set to “Class”, “Patient_ID” and “Batch”. Ensure that the sample labels are consistent between the row names of the meta data R data frame and the column names of the gene expression R data frame (c.f. Table 4[href=https://www.wicell.org#tbl4]). The “Class” column describes the class label of each sample, the “Patient_ID” column denotes the patient identifier label for the sample, the “Batch” column describes the batch that the sample belongs to. The “Batch” column would be used for the batch correction steps in getPPCCDoppelgangers() and verifyDoppelgangers().\nLoad the meta data into R as a data frame.\nNote: The data frame should at least have the following 3 columns: “Class”, “Patient_ID” and “Batch”. The “Class” column describes the class label of each sample, the “Patient_ID” column denotes the patient label for the sample, the “Batch” column describes the batch that the sample belongs to. Additional meta data columns are permissible.\nSet the sample labels as the row names and “Class”, “Patient_ID” and “Batch” as the column names. Remove all other redundant rows or columns.",
    "Note: Ensure that sample labels are unique and all sample labels in the gene expression data frame can also be found in this data frame.\nCritical: Ensure that both data frames follow the format above strictly (all column names in the gene expression data frame are present in row names of meta data frame, vice versa) since the row and column names are used extensively for the splitting of the data set. Check that the information provided in the meta data is accurate as all meta data columns will be used in DI. The “Class” and “Patient_ID” columns would be used in getPPCCDoppelgangers() for data doppelgänger identification. The “Class” column would be used as the class label for model training in the verifyDoppelgangers() function. The “Batch” column will be used for batch correction in getPPCCDoppelgangers() and verifyDoppelgangers() functions.\nNote: The DI R package also includes 4 ready-to-use data sets (rc, dmd, leuk, all; gene expression count matrix and meta data in the appropriate formats for all functions in DI). In this protocol we will be using the renal cell carcinoma data set. To load the two data frames, run the following code.\n>library(\"doppelgangerIdentifier\")\n>#Import RC gene expression dataset\n>data(rc)\n>#Import metadata for RC gene expression dataset\n>data(rc_metadata)\nData doppelgänger identification\nTiming: ∼2 s for 324 sample pairs (Depends on data set size)",
    "This step identifies FD candidates. The identified sample pairs are defined as data doppelgängers (DDs). DDs are sample pairs (two samples) that are highly correlated with each other and also fulfill other meta data-based criteria. In this protocol, the correlation metric used is Pairwise Pearson’s correlation coefficient (PPCC; the Pearson’s correlation coefficient between two samples). The meta data-based criteria are explained in greater detail in Figure 1[href=https://www.wicell.org#fig1]. A brief summary of the selection criteria for PPCC DDs would be: Sample pairs from the same class but different individuals with PPCCs greater than the maximum of all PPCCs from sample pairs of different class different individual. The steps for DD identification are summarized in Figure 2[href=https://www.wicell.org#fig2]. The selection criterion was motivated by the goal to ensure equal variability in samples of the same class and samples between different classes. If real leakage pairs (same class same individual pairs) are also present in the data set, users can further reduce the number of DDs by removing DDs that are out of the PPCC range of real leakage pairs. The getPPCCDoppelgangers() function in DI carries out all the steps listed in Figure 2[href=https://www.wicell.org#fig2]. The DDs identified by the getPPCCDoppelgangers() function will be tested for inflationary effects in the next major step.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2092-Fig1.jpg\nFigure 1. Visual explanation of how PPCC DDs are derived",
    "In this pictorial example, samples from different areas of the body are defined as samples of different classes. Each arrow from a point on an individual represents a new sample derived from that section of the individual’s body. P1 is the set of sample pairs from the same class (same body part in the diagram) but different individual (from individual 1 and 2). P2 is the set of sample pairs from different classes (different body parts) and different individual (from individual 1 and 2). PPCC DDs (Pairwise Pearson’s Correlation Coefficient Data Doppelgängers) are defined in this method as sample pairs in P1 (same class different individual) with PPCCs greater than the maximum of all PPCCs of P2 (different class different individual).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2092-Fig2.jpg\nFigure 2. Steps for data doppelgänger (DD) identification with PPCC\nAll the steps listed in this figure are carried out by the function getPPCCDoppelgangers() in DI. For the definitions of P1 and P2, refer to Figure 1[href=https://www.wicell.org#fig1].\nRun data doppelganger identification with DI with the following line of R code.\nNote: If an error message mentioning the absence of a package named “locfit” is shown, install the “lockfit” package before rerunning the line of R code below (problem 4[href=https://www.wicell.org#sec7.7]).\n>doppel_results <- getPPCCDoppelgangers(\n>  raw_data,\n>  meta_data,\n>  do_batch_corr = TRUE,\n>  batch_corr_method = \"ComBat\",\n>  do_min_max = FALSE,\n>  correlation_function = cor\n>)\nHere we list the purpose of each parameter:\nraw_data: Gene expression R data frame where each column is a sample and each row is a gene. The column names are sample labels and the row names are gene labels. If the renal cell carcinoma data is used, pass in “rc” (c.f. Table 4[href=https://www.wicell.org#tbl4]).",
    "meta_data: Meta data R data frame where each row is a sample and there are 3 columns: \"Class\", \"Patient_ID\", \"Batch\", indicating the class, patient and batch label of the sample respectively. The row names are sample labels and the column names are \"Class\", \"Patient_ID\", \"Batch\" (c.f. Table 5[href=https://www.wicell.org#tbl5]). If any of the 3 columns are absent, the user would encounter an error message (problem 5[href=https://www.wicell.org#sec7.9]). Ensure that all column names in raw_data can be found in the row names of meta_data, else, an error message would be displayed (problem 6[href=https://www.wicell.org#sec7.11]). If the renal cell carcinoma data is used, pass in “rc_metadata” (c.f. Table 4[href=https://www.wicell.org#tbl4]).\ndo_batch_corr: An optional boolean parameter. If set to FALSE, the batch correction step will be skipped. The default value for do_batch_corr is “TRUE”.\nbatch_corr_method: An optional string parameter. Users can toggle between \"ComBat\" or \"ComBat_seq\" to change the batch correction method used. The “ComBat” setting should be toggled if the raw_data supplied is a microarray gene expression data. The “ComBat_seq” setting should be toggled if the raw_data supplied is an RNA-Seq gene expression data set. If an invalid batch correction method is specified (Not \"ComBat\" or \"ComBat_seq\"), the user will encounter an error message (problem 7[href=https://www.wicell.org#sec7.13]). This parameter will be ignored if “do_batch_corr” is set to FALSE. The default value for batch_corr_method is “ComBat”.\ndo_min_max: An optional Boolean parameter. If set to FALSE, min-max normalization before correlation calculation is skipped. We generally recommend setting do_min_max to “TRUE” if there exist variables in raw_data that have disproportionately large magnitudes compared to other variables. The default value for do_min_max is “FALSE”.\ncorrelation_function: An optional function parameter. Users can pass in a user-defined function that accepts 2 vector parameters: x, y and returns a single float value. The default value for correlation_function is “cor”.",
    "Optional: Though only DD identification with PPCC was demonstrated here, DI also allows users to experiment with other correlation metrics with the correlation_function parameter in getPPCCDoppelgangers().\nOptional: Though DI only provides “ComBat” and “ComBat_Seq” batch correction methods, the user can also utilize other batch correction methods by setting “do_batch_corr” to FALSE and passing in the batch corrected gene expression R data frame into the raw_data parameter.\nNote: If the meta data R data frame passed into getPPCCDoppelgangers() contains only 1 batch, this function identifies DDs within the batch. The batch correction steps will hence be skipped by default. If the meta data R data frame passed into getPPCCDoppelgangers() contains 2 batches, this function will only identify DDs between the batches. Note that this function does not support data sets with more than 2 batches. If a data set of more than 2 batches are passed into the function, an error message will be shown (problem 8[href=https://www.wicell.org#sec7.15]). getPPCCDoppelgangers() returns an R list. This list contains the following: 1) Gene expression matrix just before the calculation of sample pair correlations after the preprocessing steps, 2) Matrix of PPCC float values, 3) R data frame of PPCC values with labeled sample pairs (Labeled “Not Doppelgänger” or “Doppelgänger”), 4) The PPCC cut_off float value. The third object in the list would be used in the subsequent major step for the generation of a CSV experiment plan.\nVisualize the data doppelgänger identification results on a scatter plot with the following line of code.\n>visualisePPCCDoppelgangers(ppcc_doppelganger_results=doppel_results)\nppcc_doppelganger_results: List returned from getPPCCDoppelgangers. If the list returned from getPPCCDoppelgangers is incomplete (does not include PPCC_df or PPCC_df does not have all the necessary columns), the user will observe an error message (problem 9[href=https://www.wicell.org#sec7.17] and problem 10[href=https://www.wicell.org#sec7.19]).",
    "Optional: Graphs generated by visualisePPCCDoppelgangers() were made with the ggplot2 R package, hence, users can customize the graphs from the function (E.g., Changing the graph’s title) using any ggplot2 functions.\nFunctional doppelgänger testing\nTiming: ∼3 s Training Size: 28, Testing Size: 8, 6 Training-Validation sets, 10 random features (Depends on training, test size, number of training and validation sets and random features)\nIn the DD identification step, DDs, potential FDs were identified in the data set. In this step, we will be verifying that the DDs found overinflate random model accuracies. To test for this inflationary effect, the user will construct an experiment plan specifying the sample labels in each training-validation set. Ideally, the training-validation sets should contain increasing numbers of identified DDs between the training and validation set for easier observation of DEs. Next, the user invokes the verifyDoppelgangers() function to train and validate KNN models with random feature sets (Example of a random feature set; 10 variables sampled randomly without replacement from all variables in the data set) on the training-validation sets in the experiment plan (Steps carried out by verifyDoppelgangers() are described in greater detail in Figure 3[href=https://www.wicell.org#fig3]). Once all KNN models are validated, the results of FD testing can be viewed using the visualiseVerificationResults() function. During visualization, we compare the performances of random KNN models between the different training-validation sets and with the binomial negative control (also generated in the verifyDoppelgangers() method).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2092-Fig3.jpg\nFigure 3. Steps for functional doppelgänger (FD) verification\nAll the steps listed in this figure are carried out by the function verifyDoppelgangers() in doppelgnegrIdentifier.\nTest the DDs found in the previous major step with verifyDoppelgangers().\n>veri_results <- verifyDoppelgangers(\n>  experiment_plan_filename,\n>  raw_data,\n>  meta_data,\n>  separator = \"\\\\.\",\n>  feature_set_portion = 0.1,\n>  num_random_feature_sets = 10,\n>  seed_num = 2021,",
    ">  do_batch_corr = TRUE,\n>  batch_corr_method = \"ComBat\",\n>  k = 5,\n>  size_of_val_set = 8,\n>  neg_con_seed = 10\n>)\nexperiment_plan_filename: String file path to user-defined CSV experiment plan. Refer to Table 6[href=https://www.wicell.org#tbl6] for the format of the CSV experiment plan. If the renal cell carcinoma data is used, download its experiment plan from https://github.com/lr98769/ doppelgangerIdentifier/blob/main/tutorial/experiment_plans/rc_ex_plan.csv[href=https://github.com/lr98769/%20doppelgangerIdentifier/blob/main/tutorial/experiment_plans/rc_ex_plan.csv] and pass in the string file path to this CSV file.\ntable:files/protocols_protocol_2092_6.csv\nThe first row of the CSV file contains the names of each set of data. Each set of data is named with the following convention: The training-validation set name and the “train” or “valid” label separated by the separator (“.” in this example). For instance, the samples in the “Doppel_0.train” column belong to the training-validation set “Doppel_0” and they will be used for model training and the trained model will then be evaluated on the samples in the “Doppel_0.valid” column. If an invalid column name is used, the user will encounter an error message (problem 11[href=https://www.wicell.org#sec7.21]). Ensure that the sample names in all columns can be found in the column names of the raw_data data frame and the row names of the meta_data data frame, else an error message will be encountered (problem 12[href=https://www.wicell.org#sec7.23] and problem 13[href=https://www.wicell.org#sec7.25]).\nraw_data: Gene expression R data frame where each column is a sample and each row is a gene. The column names are sample labels and the row names are gene labels. If the renal cell carcinoma data is used, pass in “rc” (c.f. Table 4[href=https://www.wicell.org#tbl4]).",
    "meta_data: Meta data R data frame where each row is a sample and there are 3 columns: \"Class\", \"Patient_ID\", \"Batch\", indicating the class, patient, and batch label of the sample respectively. The row names are sample labels and the column names are \"Class\", \"Patient_ID\", \"Batch\" (c.f. Table 5[href=https://www.wicell.org#tbl5]). If any of the 3 columns are absent, the user would encounter an error message (problem 5[href=https://www.wicell.org#sec7.9]). If the renal cell carcinoma data is used, pass in “rc_metadata”.\nseparator: An optional character parameter, the character passed will be used as the separator for the header names. For instance, the header name for the training data in the training-validation set “0_Doppel” would be “0_Doppel.train” with the separator “.”. The default separator is \"\\\\.\".\nfeature_set_portion: An optional float parameter between 0 and 1 representing the proportion of variables to be used for feature set generation. For instance, a proportion of 0.1 means 10% of all features are used during random feature set generation. If an invalid feature set proportion is chosen, an error message will be displayed (problem 14[href=https://www.wicell.org#sec7.27]). The default feature_set_portion is “0.1”.\nnum_random_feature_sets: An optional integer parameter for the number of random feature sets generated for each training-validation set. The default num_random_feature_sets is “10”.\nseed_num: An optional integer parameter denoting the seed number for random feature set generation. The default seed_num is “2021”.\ndo_batch_corr: An optional boolean parameter. If set to FALSE, the batch correction step will be skipped. The default setting for do_batch_corr is “TRUE”.",
    "batch_corr_method: An optional string parameter. Users can toggle between \"ComBat\" or \"ComBat_seq\" to change the batch correction method used. The “ComBat” setting should be toggled if the raw_data supplied is a microarray gene expression data. The “ComBat_seq” setting should be toggled if the raw_data supplied is an RNA-Seq gene expression data set. If an invalid batch correction method is specified (Not \"ComBat\" or \"ComBat_seq\"), the user will encounter an error message (problem 7[href=https://www.wicell.org#sec7.13]). This parameter will be ignored if “do_batch_corr” is set to FALSE. The default batch_corr_method is “ComBat”.\nk: An optional integer parameter representing the k hyperparameter for KNN classification models. The default k value is “5”.\nsize_of_val_set: An optional integer parameter for the size of each validation set (We assume the size of each validation set is the same. This value would be used as the n parameter of the binomial negative control). The default size_of_val_set is “8”.\nneg_con_seed: An optional integer parameter for the seed number of the binomial negative control. The default negative control seed is “10”.\nVisualize the FD testing results from the above step on a scatter plot with the visualiseVerificationResults() function:\n>visualiseVerificationResults(\n>  verification_results = veri_results,\n>  original_train_valid_names = c(),\n>  new_train_valid_names = c()\n>)\nverification_results: List returned from verifyDoppelgangers().\noriginal_train_valid_names: Vector of strings containing the original names of training and validation pairs. This parameter is used with new_train_valid_names to change the names of the training-validation sets in the graph. The names in original_train_valid_names and new_train_valid_names should be aligned (same order). E.g., original_train_valid_names = c(“old_1”, “old_2”, “old_3”) and new_train_valid_names = c(“new_1”, “new_2”, “new_3”). The default value is an empty vector.",
    "new_train_valid_names: Vector of strings containing the new names of training and validation pairs. This parameter is used with original_train_valid_names to change the names of the training-validation sets in the graph. The names in original_train_valid_names and new_train_valid_names should be aligned (same order). E.g., original_train_valid_names = c(“old_1”, “old_2”, “old_3”) and new_train_valid_names = c(“new_1”, “new_2”, “new_3”). The default value is an empty vector.\nOptional: Graphs generated by visualiseVerificationResults() were made with the ggplot2 R package, hence, users can customize the graphs from the function (E.g., Changing the graph’s title) using any ggplot2 functions."
  ],
  "subjectAreas": [
    "Computer Sciences",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}