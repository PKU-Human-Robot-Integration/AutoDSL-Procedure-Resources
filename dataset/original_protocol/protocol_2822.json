{
  "id": 2986,
  "origin_website": "Cell",
  "title": "Preparing glycomics data for robust statistical analysis with GlyCompareCT",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nPrepare data\nTiming:  < 30 min\nWith GlyCompareCT installed, users are ready to start processing your glycomics data, once the data files are formatted correctly.\nPrepare two input files for GlyCompareCT: a glycan abundance file and a glycan annotation file, both in the csv (comma-separated values) format. For details of csv format, see https://dev.socrata.com/docs/formats/csv.html[href=https://dev.socrata.com/docs/formats/csv.html]. You will format your data into these two file types as follow:\nConstruct the glycan abundance file with the absolute or relative abundance of glycans measured. It is a csv table where each entry in the table represents the abundance of the measured glycan in the sample of interest. (Figure 3[href=https://www.wicell.org#fig3]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2527-Fig3.jpg\nFigure 3. Example input files\n(A) Example glycan abundance table.\n(B) Example Glycan annotation table with glycan names and glycan structure syntax in glycoCT format.\n(C) Glycan annotation table with glycan names and glycan compositions.\nCritical: Rows are samples and columns are glycans. The first row needs to be the glycan names, and the first column needs to be the sample names. See troubleshooting 2[href=https://www.wicell.org#sec5.3] if needed.\nConstruct the glycan annotation file (Figures 3[href=https://www.wicell.org#fig3]B and 3C) with glycan names (column Name) and glycan structure (column Glycan Structure) or composition (column Composition). If glycan structures are not resolved, use glycan composition instead (Figure 3[href=https://www.wicell.org#fig3]C).\nNote: Accepted glycan structure syntax includes IUPAC-extended,27[href=https://www.wicell.org#bib27] glycoCT,28[href=https://www.wicell.org#bib28] WURCS,29[href=https://www.wicell.org#bib29] GlyTouCan ID,30[href=https://www.wicell.org#bib30] or Linear Code.31[href=https://www.wicell.org#bib31]\nRun GlyCompareCT\nTiming:  < 20 min, on a dataset with 250 glycans and 17 samples using 2 CPUs.\nNote: The codes below are of the syntax to run Python scripts. To run executables, you can simply replace “python glyCompareCT.py” with “./glyCompareCT”.",
    "After formatting the input files, run GlyCompareCT in one of two modes depending on our data, whether it contains glycan structures or glycan composition data (common for glycoproteomics). The only difference between the input files is the inclusion of “Glycan Structure” or “Composition” columns in the glycan annotation file.\nGlycan Structure mode. In this mode, you will specify glycan format as one of “iupac_extended”, “glycoCT”, “wurcs”, “glytoucan_id”, or “linear_code”. See example code to run GlycompareCT in structure mode, with “glycoCT” format. See troubleshooting 2–5[href=https://www.wicell.org#sec5.3] if needed.\n>python glyCompareCT.py structure -a abundance.csv \\\n-v annotation.csv -o output_directory/ -p glycoCT\nComposition mode. In this mode, you will format the glycan composition as multiples of monosaccharide with its occurrence followed in parenthesis (i.e., HexNAc(2)Fuc(1)). See example code to run GlycompareCT in composition mode. See troubleshooting 5[href=https://www.wicell.org#sec5.9] if needed.\n>python glyCompareCT.py composition -a abundance.csv \\\n-v annotation.csv -o output_directory/\nNote: Monosaccharide syntax in composition mode is relaxed. Theoretically GlyCompareCT can run any text of “XX(a)YY(b)”, where a and b are integers, in composition mode. So, it is important for the users to keep naming consistency in their glycoprofiles because any minor typo would be regarded as a new glycan composition.\nNote: The “\\” at the end of the line indicates the command has not finished; It includes the next line as well. Same to all code blocks below.\nYou only need one line of code to run GlyCompareCT; however, there are optional parameters you can specify in each step of the algorithm. The remaining steps describe the internal steps of GlyCompareCT to clarify parameters through the use of an example dataset of human gastric mucin glycoprofiles,24[href=https://www.wicell.org#bib24] which contains 250 glycans across 17 samples, and has representative sparsity and correlation.",
    "Note: GlyCompareCT can run on the example dataset in both structure and composition modes. The set of optional parameters for composition mode is a subset of parameters used for the structure mode. Thus, here we walk through the parameters in structure mode.\nNote: GlyCompareCT wraps up all algorithm steps in a single package, which can be parameterized in the initial input, resulting in a single final output. The Parameter Tuning section explains the effects of optional parameters for each intermediate step.\nOptional: While GlyCompareCT by default runs on 1 CPU, it supports parallelization across multiple CPUs. The users can add “-c < CPU number>” to specify CPU number. The following command will split computation across 16 CPUs. The runtime and memory usage with varying CPU numbers are tested on the human gastric mucin glycoprofiles24[href=https://www.wicell.org#bib24] (250 glycans across 17 samples; Figure 4[href=https://www.wicell.org#fig4]). Overall, the running memory (maximum resident set size) remains consistent across different CPU numbers while runtime decreases as CPU number increases, with a diminishing time savings for larger CPU counts.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2527-Fig4.jpg\nFigure 4. Runtime and memory change with CPU number\nThe time and memory usage for running the human gastric mucin glycoprofiles24[href=https://www.wicell.org#bib24] (MO2) with varying CPU number. The test is run on Linux, specifically Ubuntu 18.04.6 LTS (GNU/Linux 4.15.0-188-generic x86_64).\n>python glyCompareCT.py structure -a abundance.csv \\\n-v annotation.csv -o output_directory/ -p glycoCT -c 16\nParameter tuning (optional)\nTiming:  < 20 min\nGlyCompareCT supports optional parameters for each intermediate step of the algorithm. To clarify these, we describe each intermediate step in their respective subsections as follow.\nTune parameter for substructure identification and decomposition.",
    "You can normalize input glycan abundance within each glycoprofile. You can specify two normalization methods: min-max or probabilistic quotient.32[href=https://www.wicell.org#bib32] The default command does not normalize input glycan abundance. To specify normalization, add “-n” followed by “min-max” or “prob-quot”.\nMin-max normalizes each element x to (x – min) / (max – min), where min is the minimum value in the glycoprofile and max is the maximum value in the glycoprofile.\nThe other normalization option is probabilistic quotient normalization.32[href=https://www.wicell.org#bib32] See Dieterle et al.32[href=https://www.wicell.org#bib32] for a detailed explanation of this method.\n>python glyCompareCT.py structure -a abundance.csv -v annotation.csv -o output_directory/ -p glycoCT \\ -n [min-max or prob-quot]\nFor each glycan, GlyCompareCT breaks one or multiple glycosidic bonds to permute all possible substructures. You can leverage (“linkage-specific”) or ignore (“structural”) glycosidic linkage information during substructure extraction depending on the application.\nThe mode defaults to “linkage-specific”.\nYou can specify the “structural” mode by adding “-s” to the command:\n>python glyCompareCT.py structure -a abundance.csv \\\n-v annotation.csv -o output_directory/ -p glycoCT \\\n-s\nGlyCompareCT then sorts the substructure monosaccharide counts. You can annotate each substructure for either its occurrences or its binary existence in each glycan.\nThe default command uses occurrences (equals to “-m integer”).\nYou can set binary existence instead of occurrences by adding “-m binary”:\n>python glyCompareCT.py structure -a abundance.csv \\\n-v annotation.csv -o output_directory/ -p glycoCT \\\n-m [binary or integer]\nNext, GlyCompareCT builds a substructure abundance table from the glycan abundance table and substructure occurrences. Each substructure can appear in multiple glycans.",
    "Note: The abundance of each substructure within the glycoprofile is calculated by summing over the products of each glycan abundance and the substructure occurrences in that glycan. Suppose the substructure occurrence of substructure i in glycan j is denoted as oij and the abundance of glycan j is aj, then the abundance of substructure i in the glycoprofile denoted as si is si = Σjoijaj. The substructure abundance values for each substructure across glycoprofiles represent the “decomposition” of glycoprofiles into substructure abundance profiles.\nThe default setting normalizes the substructure abundance to the proportions in the glycoprofile.\nYou can output the substructure abundance table without normalization by adding “-b”:\n>python glyCompareCT.py structure -a abundance.csv \\\n-v annotation.csv -o output_directory/ -p glycoCT \\\n-b\nNote: GlyCompareCT identifies related substructures and quantifies substructure abundance correlation. Related substructures are retained only if they are not correlated. Specifically, when traversing the substructure network from a root, the smaller substructure of two perfectly correlated substructures is dropped. We call the minimal substructure set ‘glycomotifs’, and the corresponding subset of substructure abundances is the glycomotif abundance table.\nNote: Glycan substructure relationships are represented in a directed acyclic substructure network where nodes are glycan substructures and edges directionally connect substructure nodes separated by the addition of one monosaccharide; therefore, edges represent known or hypothetical glycan synthesis reactions. Each node can have multiple parent nodes and multiple child nodes, since many glycans are substrate to multiple biosynthetic reactions and each yields distinct glycan products.\nTune parameters for glycomotif extraction from the substructure network.\nSpecify the substructure network root as either each monosaccharide (epitope mode) or a specific biosynthetic root. The default command is epitope mode, which does not specify one root but runs each monosaccharide as a root.",
    "Specify the biosynthetic root to focus the network reduction on biosynthetic or epitope motifs of interest. You can specify a provided root saved in GlyCompareCT, add “-r N” (N-glycan), “-r O” (O-glycan), or “-r lactose” (lactose):\n>python glyCompareCT.py structure -a abundance.csv \\\n-v annotation.csv -o output_directory/ -p glycoCT \\\n-r [N or O or lactose]\nNote: The N-glycan mode, “-r N”, specifies the root as “Man(b1-4)Glc2NAc(b1-4)Glc2NAc” in IUPAC; the O-glycan mode, “-r O”, specifies the root as “Gal2NAc” in IUPAC; the lactose mode, “-r lactose”, specifies the root as “Gal(b1-4)Glc”.\nSpecify your own root of the substructure network. To do that, add “-r custom” and “-cr root_file” to the command, where root_file is a text file containing the root glycan in glycoCT format:\n>python glyCompareCT.py structure -a abundance.csv \\\n-v annotation.csv -o output_directory/ -p glycoCT \\\n-r custom -cr root_file.txt\nNote: Specifying “-r N” equals specifying the custom root to “RES\\n1b:b-dglc-HEX-1:5\\n2s:n-acetyl\\n3b:b-dglc-HEX-1:5\\n4s:n-acetyl\\n5b:b-dman-HEX-1:5\\nLIN\\n1:1d(2 + 1)2n\\n2:1o(4 + 1)3d\\n3:3d(2 + 1)4n\\n4:3o(4 + 1)5d\\n” in glycoCT format in the root_file.txt file. This structure equals 'Mb4GNb4GNb' in Linear Code format.\nAnnotate Glycomotifs. GlyCompareCT structure mode allows optional annotation and registration of output glycomotifs to GlyTouCan (https://glytoucan.org/[href=https://glytoucan.org/]). If set to annotate, GlyCompareCT will annotate any glycomotifs with existing GlyTouCan IDs and register the rest on GlyTouCan to retrieve the GlyTouCan IDs.\nThe default command annotates the glycomotifs without GlyTouCan IDs, which is the same as adding “-e private”.\nTo annotate glycomotifs with GlyTouCan IDs while running GlyCompareCT in the structure mode, you need to add “-e register” and specify both your GlyTouCan contributor ID and API key.\n>python glyCompareCT.py structure -a abundance.csv \\\n-v annotation.csv -o output_directory/ -p glycoCT \\\n-e register -C <contributor_ID> -A <API_key>",
    "Note: GlyTouCan contributor ID and API key can be obtained upon signing up at GluTouCan (https://glytoucan.org/[href=https://glytoucan.org/]). The information is at User menus - > Profile.\nYou can also annotate glycomotifs with GlyTouCan IDs in the annotation mode. Once your glycans are registered, you can update the GlyTouCan IDs locally by running GlyCompareCT in annotation mode.\n>python glyCompareCT.py annotate -n annotation_table.cs\nNote: When you run the structure mode with “-e register”, glycomotifs without existing GlyTouCan IDs will be registered on GlyTouCan. It may take a couple of days to complete the registration by GlyTouCan.\nNote: The required annotation table can be the output glycomotif annotation csv file with suffix “_motif_annotation.csv” or a csv file with glycans in glycoCT format under “glycoCT” column or glycans in WURCS format under “WURCS” column."
  ],
  "subjectAreas": [
    "Molecular Biology",
    "Bioinformatics",
    "Systems Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}