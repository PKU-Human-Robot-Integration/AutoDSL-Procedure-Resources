{
  "id": 19681,
  "origin_website": "Wiley",
  "title": "BUSCO: Assessing Genomic Data Quality and Beyond",
  "procedures": [
    "Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001] describes the scenario in which BUSCO is used to assess a single input, either a genome, gene set, or transcriptome, with a dataset manually specified by the user. This protocol assumes that the taxonomic origin of the input sequence is known. Before running BUSCO assessments, you need to first set up the BUSCO software and its dependencies (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0005]). Users are also encouraged to visit the website and read the user guide for further details and up-to-date information (http://busco.ezlab.org[href=http://busco.ezlab.org]).\nNecessary Resources\nHardware\nA Unix-based workstation. BUSCO has been tested on several Linux platforms, and it is recommended to use a Linux machine. BUSCO and its dependencies may work on Macintosh machines and operating systems, but this has not been thoroughly tested.\nOptional, but recommended: The machine needs to have access to the Internet for downloading the BUSCO datasets and files.\nSoftware\nThe BUSCO package and its dependencies (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0005] for various ways of setting up BUSCO). For plotting scores: R, the ggplot2 library, and the script generate_plot.py from the BUSCO repository.\nFiles\nAn assembled genome or transcriptome, or an annotated protein-coding gene set in standard FASTA format.\nPreparing the input files and choosing a dataset\n1. Download the content of the testing repository (https://gitlab.com/ezlab/busco_protocol), where you can find the inputs used for the examples. You can clone the repository using Git. If not available on your system, you can easily install Git by following the instructions at https://git-scm.com/[href=https://git-scm.com/]. Run:\n         \n$ git clone https://gitlab.com/ezlab/busco_protocol.git\nIn general, a command to run a BUSCO assessment with a dataset manually specified looks like the following:\n         \n$ busco -i <SEQUENCE_FILE> -l <LINEAGE> -o <OUTPUT_NAME> -m <MODE>\n<OTHER OPTIONS>\nwith four main mandatory arguments:",
    "-i (or --in): a path to your FASTA file, which is either a nucleotide fasta file or a protein fasta file, depending on the BUSCO mode of assessment. From v5.1.0 the input argument can also be a directory containing fasta files to run the analysis on multiple inputs (see Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0003]).\n-l (or --lineage): the manually picked dataset for the assessment. It can be a dataset name, i.e., bacteria_odb10, or a relative (e.g., ./bacteria_odb10) or full (e.g., /home/user/bacteria_odb10) path. It is recommended to use the dataset name alone, as in this way BUSCO will automatically download and check the version of the dataset. In the case of a path, the dataset found in the given path will be used. Note that this argument is ignored when running with the auto-lineage workflow (see Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0002]).\n-m (or --mode): which analysis mode to run, either genome (or geno), proteins (or prot), or transcriptome (or tran).\n-o (or --out): the name of the output directory that identifies the analysis run and that contains all results, logs, and intermediate data.\nThe BUSCO command can take several additional arguments (also see Critical Parameters and Advanced Parameters in Commentary. The arguments can also be specified in a config file, which can be passed to BUSCO using the --config argument. If all parameters are set in the config.ini file, the command for launching BUSCO will look like:\n$ busco --config /path/to/config/config.ini\nThe arguments passed through the command line will overwrite the arguments in the config file. Remember to uncomment the lines in the config file to enable them (i.e., remove the semicolon in front of the line). For additional instructions on how to use the config file, see Advanced Parameters.",
    "In the following examples, we are going to analyze the genome assembly and annotated gene set of the yeast Torulaspora globosa (assembly accession: GCF_014133895.1). We first need to select an appropriate dataset according to the taxonomy of this species. The lineage datasets used for BUSCO assessments are not packaged with the software. BUSCO will automatically download the required dataset when running the assessment. On the first BUSCO run, a busco_downloads/ folder will be created, containing the necessary lineage datasets within the subdirectory lineages/ (see Critical Parameters for more details on BUSCO datasets).\n2. Manually select a dataset for the analysis. The most specific BUSCO dataset available for the yeast Torulaspora globosa is saccharomycetes_odb10. You can explore all available odb10 datasets by running:\n         \n$ busco --list-datasets",
    "Here we are using the most specific dataset to perform the assessment with the highest possible resolution. You could also assess this genome with all the other datasets matching the lineage of the organism. In this case, according to NCBI taxonomy (Schoch et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0033]), the full taxonomic lineage of Torulaspora globosa is “cellular organisms; Eukaryota; Opisthokonta; Fungi; Dikarya; Ascomycota; saccharomyceta; Saccharomycotina; Saccharomycetes; Saccharomycetales; Saccharomycetaceae; Torulaspora”. On the basis of the currently available BUSCO odb10 datasets, besides the saccharomycetes_odb10 dataset, you could use the ascomycota_odb10, fungi_odb10, or eukaryota_odb10 datasets for the assessment. As a rule of thumb, it is always better to use the most specific dataset because it allows the highest-resolution analysis (i.e., more clade-specific markers are covered and scored). For example, saccharomycetes_odb10 is made of 2137 markers, while the ascomycota_odb10, fungi_odb10, and eukaryota_odb10 datasets are made of 1706, 758, and 255 markers, respectively. However, in some cases, it is preferable or necessary to use a lower-resolution dataset, e.g., for obtaining a set of markers shared among multiple species for building a phylogenomic tree (see Support Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0007]). In such case, a less specific dataset might need to be selected, as the marker genes for building the alignments must be shared across all the species included in the tree. For example, for building a phylogenomic tree of fungal species that includes five budding yeasts (for which the most specific BUSCO dataset is saccharomycetes_odb10) and five boletales species (for which the most specific BUSCO dataset is boletales_odb10), the more general fungi_odb10 dataset could be used.\nRunning BUSCO on a single genome assembly with known taxonomy\nIn this example, we are going to assess the genome assembly of T. globosa using the saccharomycetes_odb10 dataset. In the downloaded repository, you can find this gene set at BUSCO_protocol/protocol1/Tglobosa_GCF_014133895.1_genome.fna.",
    "3. Enter the busco_protocol testing folder:\n         \n$ cd /{path_to_busco_protocol_folder}/\nwhere {path_to_busco_protocol_folder} is the path to the busco_protocol/ testing folder you downloaded.\n4. To launch an assessment of a genome assembly (which can be in the form of contigs, scaffolds, or chromosomes) the genome mode needs to be specified. Run the following command:\n         \n$ busco -i ./protocol1/Tglobosa_GCF_014133895.1_genome.fna -l saccharomycetes_odb10 -m geno -o busco_out_Tglob_genome -c 12\nYou can specify a relative or full path to the input file, e.g., if the file is located in /usr/user_name/busco_protocol/protocol1/Tglobosa_GCF_014133895.1_genome.fna, and you are in the busco_protocol/ folder, you can specify the relative path with -i ./protocol1/Tglobosa_GCF_014133895.1_genome.fna, where ./ stands for the current working directory. Otherwise, you can specify the full path with -i /usr/user_name/busco_protocol/protocol1/Tglobosa_GCF_014133895.1_genome.fna. Additional parameters can be specified to change the default values of various settings. Here, for example, we specify the number of CPUs (central processing units) to be used with the --cpu (or -c) argument. By default, the --download_path argument, with which you can specify the location on your machine where you wish to store the downloaded datasets and additional files required to run the software, and the --out_path argument with which you can specify the location on your machine where you wish to store the output folder, are set to the current working directory. Feel free to change these paths to your preferred location on your machine. For directions on using additional parameters, see the Critical Parameters and Advanced Parameters sections in Commentary.",
    "The BUSCO software and dataset versions are mutually dependent: odb10 datasets can be used with BUSCO v4 and v5. The old BUSCO odb9 datasets do not work with these more recent BUSCO versions. BUSCO automatically downloads the manually specified dataset, and thus your machine needs to have access to the Internet. You can also download a dataset or a set of datasets independently from a BUSCO run using the --download option (see the first step in Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0004] 1). If you need to download many or all datasets (e.g., when running the auto-lineage procedure, see Basic Protocols 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0002] and 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0003]), make sure you have enough disk space on your system. All extracted datasets occupy approximately 127 GB of disk space. In case your system does not allow Internet connections, you can add the --offline flag to the BUSCO command. In this case, you will need to download the dataset(s) on another machine with an Internet connection and transfer the files to the system where you want to run BUSCO. You can use the BUSCO --download option (see Critical Parameters for more details) or the Unix command wget on a machine with an Internet connection, and then transfer the files to the machine where you want to run BUSCO. For example, to download the arthropoda_odb10 dataset from the https://busco-data.ezlab.org/v5/data/lineages/[href=https://busco-data.ezlab.org/v5/data/lineages/] site with “wget”, enter:\n         \n$ wget https://busco-data.ezlab.org/v5/data/lineages/arthropoda_odb10.2020-09-10.tar.gz'\nYou then need to unpack and decompress the dataset before running BUSCO, e.g., with:\n         \n$ tar -xfv arthropoda_odb10.2020-09-10.tar.gz",
    "Running this assessment on 12 CPUs with otherwise default options should take approximately 1 min. After BUSCO has completed the run, the summary scores are printed to the standard output and reported in the short_summary*.txt file that you can find in the main output folder, in this example busco_out_Tglob_genome/. The summary file is named after the dataset used for the assessment and the output name. In this case, it will be named short_summary.specific.saccharomycetes_odb10.busco_out_Tglob_genome.txt, and will be similar to the following:\n         \n# BUSCO version is: 5.2.2\n# The lineage dataset is: saccharomycetes_odb10 (Creation date: 2020-08-05, number of genomes: 76, number of BUSCOs: 2137)\n# Summarized benchmarking in BUSCO notation for file /data/manni/busco_protocol/protocol1/Tglobosa_GCF_014133895.1_genome.fna\n# BUSCO was run in mode: genome\n# Gene predictor used: metaeuk\n***** Results: *****\nC:99.6%[S:99.5%,D:0.1%],F:0.1%,M:0.3%,n:2137\n2129    Complete BUSCOs (C)\n2126    Complete and single-copy BUSCOs (S)\n3      Complete and duplicated BUSCOs (D)\n3      Fragmented BUSCOs (F)\n5      Missing BUSCOs (M)\n2137    Total BUSCO groups searched\nDependencies and versions:\nhmmsearch: 3.1\nmetaeuk: 4.a0f584d\nThis text file contains the classification of the identified BUSCO markers into categories of Complete (C), Complete and single-copy (S), Complete and duplicated (D), Fragmented (F), and Missing (M) BUSCOs as percentages and counts, and additional information such as the dataset used and the versions of the dependencies. In our example, BUSCO evaluates this genome assembly as of high quality, i.e., containing almost all the expected single-copy genes with a low duplication score. In the output folder, you can also find the logs/ subfolder containing the logs of BUSCO and its dependencies, and the run_<odb_dataset_name>/ folder (in this case run_saccharomycetes_odb10) containing all the other outputs and intermediate files. See Guidelines for Understanding Results for details on all BUSCO outputs and their interpretation.",
    "When assessing a prokaryotic species (i.e., by using a prokaryotic dataset) or virus, BUSCO uses the gene predictor Prodigal (Hyatt et al., 2010[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0016]) to predict genes. For eukaryotic species, as in this example, two alternative workflows, BUSCO_Metaeuk and BUSCO_Augustus, employing two different gene predictors, are available. From BUSCO v5 the default genome mode uses the BUSCO_Metaeuk workflow which employs the gene predictor MetaEuk (Levy Karin, Mirdita, & Söding, 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0021]) for predicting genes. In the command above, we used the BUSCO_Metaeuk workflow by default. To use the alternative BUSCO_Augustus workflow, which employs the gene predictor AUGUSTUS (Hoff & Stanke, 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0012]), you need to add the --augustus flag:\n         \n$ busco -i ./protocol1/Tglobosa_GCF_014133895.1_genome.fna -l saccharomycetes_odb10 -m geno -o busco_out_Tglob_genome_Augustus -c 12 --augustus\nNote that this takes much longer to run (∼11 min) compared to the default workflow (∼1 min) using 12 CPUs. Feel free to use more CPUs if available on your system. The BUSCO_Augustus workflow requires a working installation of tBLASTn and AUGUSTUS (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0005] for details on these dependencies), and BUSCO needs to know the location of the AUGUSTUS configuration directory. So check that the correct path is set for this variable by typing:\n         \n$ echo ${AUGUSTUS_CONFIG_PATH}\nIf the variable is not set or you need to change it, you can declare it as follows:\n         \n$ export AUGUSTUS_CONFIG_PATH=\"/path/to/AUGUSTUS/augustus-x.x.x/config/\"\nWhen using the BUSCO_Augustus workflow, one important optional argument to consider is the choice of AUGUSTUS pretrained species-specific gene prediction parameters. Each BUSCO lineage dataset has a predefined default selection, e.g., for the diptera_odb10 dataset the default species is “fly”, meaning AUGUSTUS gene prediction parameters pretrained on the fruit fly, Drosophila melanogaster. Also see Critical Parameters and Advanced Parameters in Commentary for further details on AUGUSTUS-specific parameters.",
    "The output folder obtained from the BUSCO_Augustus workflow contains the same main output files as seen for the default BUSCO_Metaeuk workflow, and only differs for the intermediate output files generated by the different tools in the workflow. See Guidelines for Understanding Results for a detailed description of all the output files and folders generated with different workflows.\nOn medium to large eukaryotic genomes, and especially on very large genomes, e.g., greater than a few gigabase pair (Gbp), the BUSCO_Metaeuk workflow is much faster than the BUSCO_Augustus workflow. For example, running a genome assessment on the 10-Gbp genome assembly of the wheat Triticum dicoccoides with the poales_odb10 dataset (4896 markers) using 50 CPUs takes approximately 9 hr with the BUSCO_Metaeuk workflow, whereas it needs several days using the BUSCO_Augustus alternative. The two workflows yield comparable but not identical results, as they are based on different methodologies; for details see Manni et al. (2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0024]). Depending on the input size and your specific needs, you may opt for the BUSCO_Augustus workflow, e.g., if you need to obtain AUGUSTUS retraining parameters (also see Suggestions for Further Analyses).\nRunning BUSCO on a single annotated protein-coding gene set with known taxonomy",
    "The command for analyzing an annotated gene set is similar to that used for genome assemblies, except for the --mode argument, which is set to proteins (or prot). The input file is a FASTA file of the amino acid translations of the protein-coding genes. To properly evaluate the amount of BUSCO gene duplications (which can be due to technical artifacts or true duplications), isoforms must be filtered from the gene set before running the assessment. Otherwise, each BUSCO gene with isoforms will score as a duplicated BUSCO. There are different criteria to select isoforms; for our purposes we selected the longest isoform per gene (steps in Support Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0007] also describe how to select the longest isoform per gene using a GFF file and the corresponding genome).\n5. For analyzing the gene set of the yeast T. globosa using the manually specified dataset, run:\n         \n$ busco -i ./protocol1/Tglobosa_GCF_014133895.1_geneset.faa -l saccharomycetes_odb10 -m prot -o busco_out_Tglob_geneset -c 12\nThe result folder looks similar to the one obtained for assessing genome assemblies, without the intermediate files related to the gene prediction steps. The gene set analysis is faster than the analysis on the corresponding genome assembly.",
    "If you have run the BUSCO command in the previous section on the genome assembly, the saccharomycetes_odb10 dataset has already been downloaded. BUSCO will just check that the current dataset available locally is the most updated version. If not, BUSCO will run the assessment issuing a warning that a newer dataset is available, suggesting to update the data. To always update the datasets if a new version is available, you can add the --update-data flag to the command. If a new version of the dataset is available, it will be downloaded and the older one renamed by adding the .old prefix. You can remove these old datasets to save disk space if these are no longer needed. Note that updates occurring within the same dataset version (e.g., odb10) are normally minor changes, e.g., for fixing minor errors/typos in the files that do not change the outcome of the assessments (i.e., the collection of single-copy markers remains the same among these updates).\nRunning BUSCO on a single transcriptome assembly with known taxonomy",
    "Transcriptome assessments are launched with the same four mandatory options for assessing genome assemblies and gene sets. You just need to change the value of the --mode (or -m) argument to transcriptome (or tran) and provide a transcriptome assembly as input file. The transcriptome mode requires MetaEuk when assessing eukaryotes and tBLASTn when assessing prokaryotes (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0005] for more details on BUSCO dependencies). As for the gene set, to obtain true estimates of the numbers of duplicated BUSCOs for transcriptomes, these should be pre-processed to select just one representative transcript per gene. Here we analyze an assembled transcriptome from the female reproductive tract of the Asian tiger mosquito Aedes albopictus (NCBI BioProject: PRJNA223166; Boes et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0003]) using the diptera_odb10 dataset. For this analysis, the transcriptome was not pre-processed to remove isoforms, and thus we may obtain a high number of duplicated BUSCOs which just reflects the presence of different isoforms.\n6. To launch the transcriptome assessment, run:\n         \n$ busco -i ./protocol1/Aalbopictus_transcriptome.fna -l diptera_odb10 -m tran -o busco_out_Aalbopictus_transcriptome -c 12\nThe main content of the result folder is similar to the one obtained for assessing genome assemblies, with some differences (see the BUSCO output subsection in the Guidelines for Understanding Results). If the transcriptome comes from a specific organ/tissue or time point, it may contain only a fraction of the full BUSCO sets. Our test transcriptome harbors approximately 38% of the 3285 diptera_odb10 markers, which is not surprising given the specialized function of the tissue under consideration. See Guidelines for Understanding Results for details on the output files and their interpretation.\nIn v5, BUSCO takes advantage of the MetaEuk program also to find BUSCO markers in transcriptomes.\nPlotting BUSCO scores",
    "It is common to plot BUSCO scores as a bar chart from a single run, or from different runs side-by-side to visualize like-for-like comparisons, e.g., of different species/strains or assembly versions. To encourage the use of a standard and distinctive color scheme in publications, BUSCO includes a dedicated R (R Core Team, 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0031]) script to produce a figure and its source code that can be further edited, allowing one to customize the resulting bar chart (labels, fonts, axes, etc.). To run the script, Python is required. To produce the image, R and the ggplot2 library need to be available on the system. To plot the scores of one or multiple runs, it is sufficient to provide in a single folder the short_summary.txt files of each BUSCO run.\n7. Collect the short_summary*.txt files in one folder, e.g.:\n         \n$ mkdir BUSCO_summaries/\n$ cp OUT1/short_summary.*.lineage_odb10.OUT1.txt ./BUSCO_summaries/\n$ cp OUT2/short_summary.*.lineage_odb10.OUT2.txt ./BUSCO_summaries/\n8. Then, simply run the generate_plot.py script available in the BUSCO repository (https://gitlab.com/ezlab/busco/scripts[href=https://gitlab.com/ezlab/busco/scripts]), providing the path to the directory containing the summary files:\n         \n$ python3 generate_plot.py -wd BUSCO_summaries",
    "A *.png image file and the corresponding R source code file, which can be further edited to make cosmetic adjustments to the plot, will be produced in the same folder containing the BUSCO summaries. By default, the run name is used as the label for each plotted result, and this is automatically extracted from the short summary file name: so, for short_summary.generic.lineage_odb10.OUT1.txt, the label would be “OUT1”. You can modify this in the file name as long as you keep the naming convention, e.g.: short_summary.generic.lineage_odb10.[edit_name_here].txt, or you can simply edit the R source code file to change any plotting parameters and produce a personalized bar chart by running the code manually in your R environment. However, we suggest keeping the same color scheme. By adding the --no_r flag to the command, the script will simply produce the R script required to reproduce the plot, which can then run on any system with R and ggplot2 installed. Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-fig-0001] shows an example of the resulting default plot.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/ade3c6e1-fc57-4f47-bc8d-ccc4384a6ec6/cpz1323-fig-0001-m.jpg</p>\nFigure 1\nIllustration of the BUSCO bar plot as produced by the plotting script. Three genomes evaluated with 1519 BUSCO markers are depicted with varying degrees of completeness.",
    "This protocol describes the case in which you do not specify a BUSCO dataset for the assessment. Instead, BUSCO attempts to automatically select the most appropriate dataset on the basis of a phylogenetic placement onto precomputed trees of marker genes extracted from the input file. This workflow is activated by using the --auto-lineage flag, and can be applied to all data types (genomes, gene sets and transcriptomes). With this option, no assumptions are made on the taxonomic origin of the input sequences, and it can be useful for inputs with unknown taxonomic origin, as in the case of metagenome-assembled genomes (MAGs), or on large sets of inputs where specifying each dataset manually can be tedious (see Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0003] for running this workflow on multiple inputs). If the user knows the domain of origin of the input, the --auto-lineage-prok or --auto-lineage-euk flags can be specified for prokaryotic and eukaryotic species, respectively. BUSCO will run faster when one of these two options is selected instead of the full --auto-lineage. In general, if the taxonomy of the species is known, it is preferable to specify the dataset manually, as the time and resources needed increase substantially with the phylogenetic placement. Also, the placement procedure may resort to a broader, less-specific dataset for the assessment if not enough markers are placed on the tree to select the most specific one. In this case, the selection may roll back to one of the general domain datasets (i.e., archaea_odb10, bacteria_odb10, or eukaryota_odb10). See the Guidelines for Understanding Results for more details on the automatic selection of the datasets.\nNecessary Resources\nHardware",
    "As described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001]. Note that, usually, the RAM required for using the --auto-lineage option will not exceed 13 GB when assessing prokaryotic species; thus, the assessment can also run on a laptop. If the placement involves eukaryotic species, you might need more memory to run the assessment.\nSoftware\nAs described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001]. Note that for running the auto-lineage workflow you need a working installation of SEPP and pplacer.\nFiles\nAs described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001]. The auto-lineage workflow can be applied to genome assemblies, gene sets, and transcriptomes. To perform the phylogenetic placement procedure, additional files are required, e.g., the precomputed super-alignments and trees. These are automatically downloaded by BUSCO during the analysis if a connection to the Internet is available. If not, you will have to download and put these files manually in the busco_downloads/ folder as described in the annotation to step 4 of Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001].\nRunning BUSCO on one input without specifying a lineage dataset\nIn this case, you do not need to specify a lineage dataset. BUSCO will first run the three root datasets (bacteria_odb10, archaea_odb10, and eukaryota_odb10) to figure out the domain of the input file, and then attempt to phylogenetically place the markers extracted in this first run on a precomputed superalignment and phylogenetic tree.\n1. In this example, we are going to assess the same genome assembly of T. globosa assessed in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001], but this time without specifying the saccharomycetes_odb10 dataset. Enter the BUSCO_protocol testing folder downloaded in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001]:\n         \n$ cd {path_to_busco_protocol_folder}/\n2. Run the command as:\n         \n$ busco -i ./protocol1/Tglobosa_GCF_014133895.1_genome.fna -m geno -o busco_out_Tglob_genome_auto -c 12 --auto-lineage",
    "Running this assessment on 12 CPUs with otherwise default options should take approximately 4 min, which is longer than the time needed to run the assessment described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001] when the dataset was manually specified (∼1 min), as additional steps are required here for the phylogenetic placement procedure. You can enter the output directory busco_out_Tglob_genome_auto/ to check the results and inspect which dataset was automatically selected for the assessment. If the run was successful, you should find the summary file short_summary.specific.saccharomycetes_odb10.busco_out_Tglob_genome_auto.txt, named by the same rule described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001]. As you can see, BUSCO was able to select the correct and most specific dataset for the assessment (saccharomycetes_odb10), corresponding to the manual choice we made in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001]. Additionally, you will find the file short_summary.generic.eukaryota_odb10.busco_out_Tglob_genome_auto.txt, which corresponds to the short_summary file obtained by running the parent “root” domain dataset (in this case eukaryota_odb10) as the first step of the auto-lineage workflow. See Guidelines for Understanding Results for more information on the outputs produced by the auto-lineage workflow and how to interpret the results. In this example, you could specify the --auto-lineage-euk option instead of --auto-lineage, as we already know that our input file belongs to a eukaryotic species. You can apply the auto-lineage workflow to all the input types selecting the different modes covered in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001].",
    "BUSCO v5 and higher can be run in “batch” mode on a collection of input files. These must be present in a single folder and must be of the same type, i.e., being either all genomes assemblies, transcriptomes or gene sets. As for analyzing a single input file, there are two ways to run BUSCO on multiple files: a) with a BUSCO dataset manually specified (described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001]), and in this case the same dataset will be applied to all the input files, e.g., a set of insect genomes analyzed with the insecta_odb10 dataset; or b) in combination with the auto-lineage workflow (also see Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0002]). In this case each input file is analyzed independently with a specific dataset automatically selected by BUSCO, and thus can be applied on a set of taxonomically heterogeneous inputs, such as metagenomic data that include MAGs of both eukaryotic and prokaryotic origin.\nNecessary Resources\nHardware\nAs described in Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001] and 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0002].\nSoftware\nAs described in Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001] and 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0002].\nFiles\nAs described in Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001] and 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0002].\nRunning BUSCO on multiple inputs using the same dataset specified manually\nCollect all the input files you want to analyze in a folder, and simply specify this folder as input. Here we analyze a set of bacterial genomes with the mycoplasmatales_odb10 dataset. You can find the folder containing the input genomes in the subfolder ./protocol3/bact_genomes/.\n1. Open the terminal and enter the following command:\n         \n$ busco -i ./protocol3/bact_genomes -l mycoplasmatales_odb10 -m geno -o busco_out_mycoplas_genomes -c 12",
    "BUSCO will figure out automatically that it must run on multiple files. For each run, a standard BUSCO result folder named after the input file will be created in the main output folder. In the main output folder, an additional text file summarizing the score of all the runs is provided. This batch mode can be applied to the other two data types by changing the attribute of the -m option.\nRunning BUSCO on multiple inputs without specifying a lineage dataset\nAs with the previous command, collect all the input files you want to analyze in a folder. This protocol is suitable for estimating the quality of metagenomic bins or “metagenome-assembled genomes” (MAGs) of unknown taxonomic origin, e.g., obtained from binner programs such as MetaBat (Kang et al., 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0018]), MaxBin2 (Wu & Singer, 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0040]), and MEGAN (Bağcı, Patz, & Huson, 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0001]; Huson et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0014]). In such cases, the input file is a folder containing one FASTA file per bin. Here we analyze a mix of prokaryotic and eukaryotic genomes with known taxonomy, so we can compare the dataset selected by BUSCO with the ground truth represented by the taxonomic lineage of the inputs. As each input sequence can be either coming from a prokaryotic or eukaryotic species, we use the more general --auto-lineage flag to cover both cases.\n2. Uncompress the fasta files:\n         \n$ cd ./protocol3/genomes_mix/ && gunzip *.gz && cd ../../\n3. Run the auto-lineage workflow by entering:\n         \n$ busco -i ./protocol3/genomes_mix -m geno -o busco_out_mix -c 12 --auto-lineage",
    "As with the previous example, the result folders for each run are written to the specified output directory (here busco_out_mix) and named after the corresponding input file name. An additional text file summarizing the scores of all the runs is also written in the main output directory. Table 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-tbl-0001] shows an example of the summary file listing the BUSCO results for all the inputs analyzed. The first column reports the input file name; the second reports the most specific dataset that was selected by BUSCO on the basis of the placement procedure; the third to eighth columns report the standard BUSCO scores as percentages; and the ninth column reports the total number of markers for the corresponding dataset. In our example, the inputs are a mix of bacterial genomes, one green algal and two fungal genomes. The datasets selected by BUSCO are in agreement with the taxonomic lineages of the inputs. The table additionally reports the score obtained by running the three main domain datasets used to establish the most likely domain of the input file during the first step of the workflow. These scores might be useful for spotting heavy cross-domain contamination issues. However, note that these “by-products” scores need to be carefully interpreted (see Guidelines for Understanding Results for how to interpret these scores). This workflow can be run on the other data types (gene sets and transcriptomes) by changing the attribute of the -m argument (see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001]). This analysis should take approximately 30 min to complete when using 12 CPUs. On small to medium-sized genomes, increasing the number of CPUs will not speed up the analysis substantially, as the current implementation of parallelization in BUSCO is not optimized on small genomes.",
    "To speed up the analysis when analyzing a large number of prokaryotic or small eukaryotic genomes, you can take advantage of a workflow management system as described in Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0004].",
    "Table 1.\n                Example of the batch_summary.txt file Obtained by Running BUSCO Auto-Lineage Workflow on Multiple Inputs\ntable:\n﻿Input_file,Dataset,C,S,D,F,M,n,Scores_archaea_odb10,Scores_bacteria_odb10,Scores_eukaryota_odb10\nGCF_002215565.1_ASM221556v1_genomic.fna,sulfolobales_odb10,95.5,95.1,0.4,0.6,3.9,1244,\"C:95.4%[S:95.4%,D:0.0%],F:2.1%,M:2.5%,n:194\",\"C:14.5%[S:14.5%,D:0.0%],F:10.5%,M:75.0%,n:124\",\"C:7.9%[S:7.5%,D:0.4%],F:5.1%,M:87.0%,n:255\"\nGCA_900452565.1_34347_D01_genomic.fna,legionellales_odb10,95.6,95.6,0.0,2.6,1.8,772,\"C:17.0%[S:16.5%,D:0.5%],F:4.1%,M:78.9%,n:194\",\"C:91.1%[S:91.1%,D:0.0%],F:6.5%,M:2.4%,n:124\",\"C:4.7%[S:4.3%,D:0.4%],F:2.0%,M:93.3%,n:255\"\nGCA_003366055.1_ASM336605v1_genomic.fna,bacteria_odb10,63.7,63.7,0.0,8.9,27.4,124,\"C:7.2%[S:7.2%,D:0.0%],F:1.5%,M:91.3%,n:194\",\"C:63.7%[S:63.7%,D:0.0%],F:8.9%,M:27.4%,n:124\",\"C:0.8%[S:0.8%,D:0.0%],F:1.2%,M:98.0%,n:255\"\nGCA_003367175.1_ASM336717v1_genomic.fna,burkholderiales_odb10,99.5,98.5,1.0,0.4,0.1,688,\"C:18.0%[S:17.0%,D:1.0%],F:5.7%,M:76.3%,n:194\",\"C:100.0%[S:100.0%,D:0.0%],F:0.0%,M:0.0%,n:124\",\"C:5.5%[S:4.7%,D:0.8%],F:3.5%,M:91.0%,n:255\"\nGCA_003353085.1_ASM335308v1_genomic.fna,alteromonadales_odb10,99.5,99.1,0.4,0.2,0.3,820,\"C:21.1%[S:21.1%,D:0.0%],F:4.6%,M:74.3%,n:194\",\"C:99.2%[S:96.0%,D:3.2%],F:0.8%,M:0.0%,n:124\",\"C:4.7%[S:3.9%,D:0.8%],F:2.0%,M:93.3%,n:255\"\nGCF_000182965.3_ASM18296v3_genomic.fna,saccharomycetes_odb10,98.6,98.0,0.6,0.8,0.6,2137,\"C:58.8%[S:55.2%,D:3.6%],F:6.2%,M:35.0%,n:194\",\"C:30.6%[S:29.0%,D:1.6%],F:16.9%,M:52.5%,n:124\",\"C:94.9%[S:93.3%,D:1.6%],F:2.4%,M:2.7%,n:255\"\nGCF_002968355.1_ASM296835v1_genomic.fna,entomoplasmatales_odb10,95.5,94.6,0.9,1.5,3.0,332,\"C:3.6%[S:3.6%,D:0.0%],F:2.6%,M:93.8%,n:194\",\"C:81.5%[S:81.5%,D:0.0%],F:1.6%,M:16.9%,n:124\",\"C:1.2%[S:1.2%,D:0.0%],F:0.4%,M:98.4%,n:255\"\nGCF_000226975.2_ASM22697v3_genomic.fna,natrialbales_odb10,98.7,98.3,0.4,0.3,1.0,1368,\"C:99.5%[S:99.5%,D:0.0%],F:0.5%,M:0.0%,n:194\",\"C:21.0%[S:19.4%,D:1.6%],F:9.7%,M:69.3%,n:124\",\"C:7.5%[S:7.1%,D:0.4%],F:3.1%,M:89.4%,n:255\"\nGCA_001560045.1_GG12_C01_07_genomic.fna,sulfolobales_odb10,94.5,94.2,0.3,0.7,4.8,1244,\"C:93.3%[S:93.3%,D:0.0%],F:3.1%,M:3.6%,n:194\",\"C:13.7%[S:13.7%,D:0.0%],F:11.3%,M:75.0%,n:124\",\"C:7.9%[S:7.5%,D:0.4%],F:5.1%,M:87.0%,n:255\"\nGCA_900036045.1_Methanoculleus_sp_MAB1_genomic.fna,methanomicrobiales_odb10,87.3,87.2,0.1,5.8,6.9,882,\"C:88.6%[S:88.1%,D:0.5%],F:7.2%,M:4.2%,n:194\",\"C:17.7%[S:16.9%,D:0.8%],F:12.9%,M:69.4%,n:124\",\"C:5.1%[S:5.1%,D:0.0%],F:3.9%,M:91.0%,n:255\"\nGCA_003018975.1_ASM301897v1_genomic.fna,synechococcales_odb10,88.1,86.5,1.6,4.1,7.8,788,\"C:18.0%[S:17.5%,D:0.5%],F:5.7%,M:76.3%,n:194\",\"C:83.8%[S:80.6%,D:3.2%],F:12.1%,M:4.1%,n:124\",\"C:6.3%[S:5.9%,D:0.4%],F:3.9%,M:89.8%,n:255\"\nGCF_002220235.1_ASM222023v1_genomic.fna,chlorophyta_odb10,97.1,96.7,0.4,0.7,2.2,1519,\"C:54.1%[S:50.5%,D:3.6%],F:6.2%,M:39.7%,n:194\",\"C:68.6%[S:61.3%,D:7.3%],F:14.5%,M:16.9%,n:124\",\"C:76.9%[S:76.5%,D:0.4%],F:7.1%,M:16.0%,n:255\"",
    "This protocol describes the use of a workflow management system, specifically Snakemake, to increase the speed of a BUSCO auto-lineage analysis on multiple genomes, and it is an alternative to Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0003]. Currently, BUSCO parallelization is not optimized for small genomes; therefore, using a workflow management system such as Snakemake with multiple CPUs can considerably reduce the runtime for analyses involving a large number of inputs, e.g., when assessing metagenomic bins or MAGs. Note that this Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0004] is intended for analyzing prokaryotic genomes, small eukaryotic genomes, or a combination of both. It is not intended to be used on medium/large genomes, as for these the parallelization is already optimized in the standard BUSCO run.\nNecessary Resources\nHardware\nAs described in Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0003].\nSoftware\nAs described in Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0003]. Conda and Snakemake (≥ v5.30), available at https://snakemake.readthedocs.io/en/stable/getting_started/installation.html[href=https://snakemake.readthedocs.io/en/stable/getting_started/installation.html]. A clone of the BUSCO “plugins” GitLab repository is available at https://gitlab.com/ezlab/plugins_buscov5.git[href=https://gitlab.com/ezlab/plugins_buscov5.git].\nFiles\nAs described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001].\nRunning multiple BUSCO assessments with the auto-lineage workflow and Snakemake\nTo prevent collisions of simultaneous BUSCO runs attempting to write to the same location when using this alternate protocol, BUSCO will be run with the --offline flag, which does not allow BUSCO to connect to the Internet. Therefore, before running this workflow, you need to make sure to have all the required BUSCO datasets and files downloaded and updated on your machine.\nIn this example, we assess a mix of prokaryotic genomes, so we can just download the prokaryotic datasets.\n1. To download the datasets in bulk, enter the location on your machine where you want to store the them:\n         \n$ cd {/path_where_to_store_BUSCO_downloads/}\n2. And run:\n         \n$ busco --download prokaryota",
    "If you plan to analyze a mix of prokaryotic and eukaryotic genomes, you will need all the datasets. These can be downloaded with busco --download all, which will take approximately 25 min to complete. The size of all extracted datasets is ∼127 GB (∼11 GB for the prokaryotic datasets only).\n3. In the part of your system where you want to run BUSCO, clone the BUSCO “plugins” repository. Here we clone the repository into the directory of the repository you downloaded in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001]:\n         \n$ cd /{path_to_busco_protocol_folder}/\n$ git clone https://gitlab.com/ezlab/plugins_buscov5.git\n4. Then enter the BUSCO_batch_analysis_with_snakemake/ folder:\n         \n$ cd plugins_buscov5/BUSCO_batch_analysis_with_snakemake\n5. You first need to change some parameters in the YAML configuration file that, from the current working directory, you can find in ./config/config.yaml. You need to change the paths to the inputs and the busco_downloads/ folder using Vim or your preferred text editor, e.g.:\n         \n$ vim config/config.yaml # and manually edit the file\nIf you have exactly followed the previous commands, the relative paths will be as follows:\n         \nwdir_path: \".\"\ndata_path: \"../../alternate_protocol1/genomes_mix\" # specify the path to the folder\nfile_suff: \".fna\" # specify the suffix of your input files\nout_path: \"busco_out_mix_alter_protocol\" # specify the output folder\n# configuration\nBUSCO_threads: 5\nautolineage: \"--auto-lineage-prok\" # or \"--auto-lineage\" or \"--auto-lineage-euk\"\ndownload_path: \"{path/where/you/stored/BUSCO_downloads}\" # specify the path of the busco_downloads folder where the datasets and files are stored\n6. In this example, we are going to use a job submission management system to submit our Snakemake workflow to a cluster. In the following example, we use SLURM, but a similar command can be launched with other submission management systems such as PBS. From the current working directory (i.e., BUSCO_batch_analysis_with_snakemake/), you may run:\n         \n$ snakemake --cluster \"sbatch --ntasks-per-node=1 --cpus-per-task=5 --job-name=busco_runs\" --jobs 6",
    "Here the --jobs argument specifies the total number of jobs to launch simultaneously. If in the config.yaml file we specify 5 CPUs for each BUSCO analysis, the overall command will use 30 CPUs in total. We suggest restricting the number of CPUs to 5-8 for each BUSCO analysis, as it is the optimal setting for small genomes (e.g., <10 Mbp) in the majority of cases.\nIf you specify the --use-conda flag in the Snakemake command, Snakemake will download (if needed) and use the BUSCO conda version specified in the envs/busco.yaml config file. Otherwise, the BUSCO version available on your system will be used.\nAlternatively, you can run the workflow without using a job submission management system, as in the next command (where we also specify the --use-conda flag), e.g., with:\n         \n$ snakemake --cores 30 --use-conda\nHere -–cores defines the maximum number of CPUs that can be used by the workflow. With 5 CPUs per BUSCO analysis, as defined in the config.yaml file, the workflow should run six BUSCO analyses at the time.\nThe outputs of the analysis will be written to the busco_out_mix_alter_protocol/ folder. For the 25 prokaryotic genomes of this example, the analysis submitted through SLURM on a cluster using 30 CPUs completes in approximately 4 min.",
    "This protocol describes the different ways to install BUSCO and its dependencies. BUSCO was implemented using Python 3 and tested on Linux operating systems. It is therefore recommended to use a Linux machine for running BUSCO. There are currently three options to obtain BUSCO: using the Docker container, through Bioconda, or by installing BUSCO and its dependencies manually.\nNecessary Resources\nHardware\nAs described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001].\nSoftware\nPython 3.3 or higher, the BUSCO tool, and its dependencies (refer to step 4, below). Optionally, a working installation of Docker or Singularity if using the Docker container option. Optionally, a working installation of conda if using the Bioconda option.\nInstalling BUSCO from Bioconda\nTo install BUSCO through Bioconda you need a working installation of conda. See how to install conda at https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html[href=https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html]. Ensure you have a conda version >=4.8.4. Enter conda -V to check the version. If necessary, update conda by entering:\n         \n$ conda update -n base conda\n1. Install the latest BUSCO version. It is recommended to install BUSCO in a separate conda environment instead of your conda base environment. Enter:\n         \n$ conda create -n <your_env_name> -c conda-forge -c bioconda busco=x.x.x\nConda can be a bit slow sometimes. You can instead use the mamba package manager (https://github.com/mamba-org/mamba[href=https://github.com/mamba-org/mamba]), which is an extremely fast and popular conda replacement. You can install mamba with conda install -n base -c conda-forge mamba. To install BUSCO using mamba, simply replace conda with mamba in the previous command: mamba create -n <your_env_name> -c conda-forge -c bioconda busco=x.x.x.",
    "where your_env_name is the name you want to assign to your new environment, and x.x.x refers to the BUSCO version, which is 5.2.2 as of writing of this manuscript. For more updated versions, change the version number to the latest one. You can check the last BUSCO version available on Bioconda by searching for the “BUSCO” recipe on the Bioconda search bar.\nNow, in order to start working in the new environment, type:\n         \n$ conda activate <your_env_name>\nDouble check the BUSCO version with:\n         \n$ busco -v\nYou can exit the environment by typing:\n         \n$ conda deactivate\nUsing the BUSCO Docker container\nFor each new release, a BUSCO container that wraps everything required to run a BUSCO analysis is also created. Currently, the container is made available on Docker Hub. Before getting the BUSCO container, you need to have Docker installed on your system. See the Docker user guide for details on installing and using Docker (Merkel, 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0026]) (https://www.docker.com/[href=https://www.docker.com/]). Using the Docker container has the advantage of streamlining the setup and installation, and it also allows one to easily track all software versions used in the analyses (the version number, e.g., v5.2.1_cv1, identifies all components at once). It also guarantees that only dependency versions compatible with the most up-to-date BUSCO code are used.\n2. With Docker installed, just fetch the BUSCO container with:\n         \n$ docker pull ezlabgva/busco:vx.x.x_cv1\nwhere x.x.x refers to the BUSCO version and _cv1 to the container version for a given BUSCO version. There should be only one container per version unless an issue with the container was fixed without changing the BUSCO code.",
    "3. To run the BUSCO container, you will need to control the user that is run within the container. You can pass your own user id with the -u argument, e.g., -u $(id -u). Note that if you do not specify a user, the container will create files under a different user you do not control. With the mount option -v you specify the location on your filesystem on which you can write and transfer files between your filesystem and the container filesystem. In our example, we will use the current working directory from where you are launching the assessment. You could use another folder, but be careful not to specify a host folder that does not exist, as Docker will create it using the root account and without asking for confirmation. It is safer to use the current directory as in our example. Run the container as follows:\n         \n$ docker run -u $(id -u) -v $(pwd):/busco_wd ezlabgva/busco:vx.x.x_cv1 busco -i genome.fna <OTHER_OPTIONS>\nTo use a custom config.ini file to set run parameters, you need to extract this file from the container as follows:\n         \n$ docker run -v $(pwd):/busco_wd ezlabgva/busco:v5.2.1_cv1 cat /busco/config/config.ini > config.ini\nYou can then edit this newly created config.ini file with your preferred text editor and pass it to the BUSCO command using the --config argument, e.g.:\n         \n$ docker run -v $(pwd):/busco_wd ezlabgva/busco:v5.2.1_cv1 busco -i genome.fna --config=/busco_wd/myconfig.ini\nIf you want to run the BUSCO container in an HPC system that does not support Docker but supports Singularity, which is another containerization program commonly used on HPC clusters, you can convert the Docker container into a Singularity Image Format (see https://quay.io/repository/singularity/docker2singularity[href=https://quay.io/repository/singularity/docker2singularity]). Always consult the documentation of your specific HPC environment first.\nManually installing BUSCO and its dependencies\n4. First, manually install the required BUSCO dependencies.",
    "Note that you do not necessarily need to install all the following dependencies if you want to run just specific workflows. For example, if you plan to run a genome assessment with the default BUSCO_Metaeuk workflow, you do not need to install Augustus or NCBI BLAST+. Table 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-tbl-0002] specifies the dependencies required to run specific workflows.\nA fully functional BUSCO setup will require:\n         \nPython 3.3+\nBioPython (https://biopython.org/[href=https://biopython.org/]) and pandas (https://pandas.pydata.org/[href=https://pandas.pydata.org/]) Python modules.\nHMMER: To evaluate amino acid sequences using profile HMMs, all modes of BUSCO require HMMER, version 3.1b2 or higher, which can be obtained from http://hmmer.org/[href=http://hmmer.org/].\nMetaEuk: Required to assess eukaryotic genome assemblies with the default BUSCO_Metaeuk workflow. MetaEuk can be obtained from https://github.com/soedinglab/metaeuk[href=https://github.com/soedinglab/metaeuk].\nProdigal: Required to assess prokaryotic genomes. This can be obtained from https://github.com/hyattpd/Prodigal[href=https://github.com/hyattpd/Prodigal].\nSEPP (Mirarab, Nguyen, & Warnow, 2011[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0028]) and pplacer (Matsen, Kodner, & Armbrust, 2010[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0025]): Required to run BUSCO with the auto-lineage workflow, i.e., to perform the phylogenetic placement of input sequences to automatically select a BUSCO dataset for the assessment. SEPP can be retrieved from https://github.com/smirarab/sepp/[href=https://github.com/smirarab/sepp/] and pplacer from https://github.com/matsen/pplacer[href=https://github.com/matsen/pplacer].\ntBLASTn from NCBI BLAST+ (Camacho et al., 2009[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0005]): Only needed if you want to perform genome assessments of eukaryotic species using the BUSCO_Augustus workflow or transcriptome assessments on prokaryotic sequences. It can be downloaded from https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+[href=https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+]. There is an issue with tBLASTn versions 2.4-2.10.0 when using more than one CPU. The issue was fixed in version 2.10.1+, so make sure you have at least version 2.10.1+ installed.",
    "AUGUSTUS (v3.3.3 or above): Required if you want to use the BUSCO_Augustus workflow (by specifying the --augustus flag in the command). BUSCO supports versions 3.3.3 or higher, and the software can be obtained from http://bioinf.uni-greifswald.de/augustus/[href=http://bioinf.uni-greifswald.de/augustus/]. It includes multiple PERL scripts (https://www.perl.org/[href=https://www.perl.org/]), and you should refer to the most up-to-date AUGUSTUS documentation for its PERL requirements. The executables required by BUSCO are: augustus, etraining, gff2gbSmallDNA.pl, new_species.pl, and optimize_augustus.pl. Additional environment variables have to be set as follows:\n$ export PATH=/path/augustus-3.x.x/bin:$PATH\n$ export PATH=/path/augustus-3.x.x/scripts:$PATH\n$ export AUGUSTUS_CONFIG_PATH=/path/augustus-3.x.x/config/\nAUGUSTUS makes its predictions based on parameters that are species specific. It comes with predefined values corresponding to well-annotated genomes. Each BUSCO dataset is configured to use the parameters of one available species (e.g., fly for the insecta_odb10 dataset). These species are listed in the $AUGUSTUS_CONFIG_PATH/species/ folder, and it is possible for the user to indicate a different species that is more closely related to the species under analysis (for details on this see the Advanced Parameters section in Commentary).\nR and ggplot2 library: These are required for plotting BUSCO results using the commands described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001].\nMake sure that each software package listed above works independently of BUSCO before attempting to run any BUSCO assessment. The minimal versions of the dependencies compatible with the current BUSCO code are shown in Table 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-tbl-0002]. You can obtain information about future version compatibility on the BUSCO website (https://busco.ezlab.org/[href=https://busco.ezlab.org/]).\nTable 2.\n                Dependencies Required for Running the Different Workflows to Assess Genome Assemblies\ntable:\n﻿Unnamed: 0,Genome assessment (eukaryotes),Genome assessment (prokaryotes and viruses),Auto-lineage workflow,Auto-lineage prok workflow,Auto-lineage euk workflow\nBiopython and pandas modules,x,x,x,x,x\nHMMER v3.1b2+,x,x,x,x,x\nMetaEuk v4-*+,x,,x,,x\nProdigal v2.6.3+,,x,x,x,\nSEPP v4.3.10+/ Pplacer v1.1.alpha13+,,,x,x,x\nNCBI BLAST+ v2.10.1+,x (only if using the --augustus flag),,x (only if using the --augustus flag),,x (only if using the --augustus flag)",
    "Augustus v3.3.3+,x (only if using the --augustus flag),,x (only if using the --augustus flag),,x (only if using the --augustus flag)\n5. It is recommended to install BUSCO in a separate virtual environment. To do this, first create a Python virtual environment using Python ≥3.3 and the “venv” module (from version 3.3, Python should already include the venv module). Create a virtual environment with:\n         \n$ python3 -m venv <ENV_NAME>\nwhere <ENV_NAME> is the name you want to assign to the environment. You might name the environment after the BUSCO version you are installing, e.g., busco5.2.2.\n6. Enter the folder that has been created:\n         \n$ cd <ENV_NAME>\n7. Activate the environment with:\n         \n$ source ./bin/activate\n8. Install the Biopython and Pandas modules:\n         \n$ pip3 install biopython pandas\n9. Retrieve the BUSCO source code from the GitLab repository. You can download and extract the BUSCO repository manually from the GitLab release page (https://gitlab.com/ezlab/busco/-/releases[href=https://gitlab.com/ezlab/busco/-/releases]), or using Git, clone the repository with:\n         \n$ git clone https://gitlab.com/ezlab/busco.git\n10. Enter the busco/ folder:\n         \n$ cd busco\n11. Execute the setup.py script using python to install BUSCO:\n         \n$ python3 setup.py install\n12. Check that BUSCO has been installed and verify its version by entering the busco command with the help argument:\n         \n$ busco -h\nIf you do not want to create a separate virtual environment, you can install BUSCO using the same procedure described above excluding the commands from steps 2 to 4. In this case, from the busco/ folder, you need to execute the setup.py script with:\n         \n$ python3 install setup.py –user #(with only user privileges)\nor\n         \n$ sudo python3 setup.py install #(with root privileges)",
    "This protocol describes how to use some of the BUSCO results to create charts for displaying the location of markers on the input genome and visualizing syntenies between genomes.\nNecessary Resources\nHardware\nAny machine supporting an installation of Python and R.\nSoftware\nPython, conda (and optionally mamba), Snakemake, R, Rstudio, and the RIdeogram library.\nFiles\nOne or multiple full_table.tsv files for plotting markers and visualizing syntenies.\nVisualizing BUSCO markers on genomes\nSometimes it can be useful to visualize the location of BUSCO markers on the input genome, for example to show the distribution of markers, or highlight problematic regions, e.g., those with a high density of duplicated markers. This can be performed by extracting the BUSCOs’ coordinates from the full_table.tsv file and using a program for plotting genomic coordinates. There are several options available to plot these; here we use the R package RIdeogram (Hao et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0010]).\n1a. If not done already, download the busco_protocol:\n         \n$ git clone https://gitlab.com/ezlab/busco_protocol\n2a. Enter the support_protocol2/plot_markers subfolder:\n         \n$ cd busco_protocol/support_protocol2/plot_markers\nTo generate the plot, you need to provide the path to the full_table.tsv file generated from a BUSCO run performed on a genome assembly. A file, {sample_name}_karyotype.txt, with karyotype information is also required. You can generate this file yourself, following this example (see also the RIdeogram documentation):\n         \ntable:\n﻿0,1,2,3,4,5\nChr,Start,End,species,size,color\nNC_004354.4,1,23542271,Dmel,12,25252\nNT_033779.5,1,23513712,Dmel,12,25252\nNT_033778.4,1,25286936,Dmel,12,25252\nNT_037436.4,1,28110227,Dmel,12,25252\nNT_033777.3,1,32079331,Dmel,12,25252\nNC_004353.4,1,1348131,Dmel,12,25252\nNC_024512.1,1,3667352,Dmel,12,25252",
    "Alternatively, you can provide the path to the genome assembly used in the assessment, and the workflow will generate this file automatically from the assembly. Here we are using a full_table.tsv obtained by running the diptera_odb10 dataset on the D. melanogaster genome. You can find this file at support_protocol2/plot_markers/data/full_table/Dmel_full_table.tsv in the BUSCO protocol repository. Note that when using the workflow on your inputs, you need to name the full_table.tsv using the convention {sample_name}_full_table.tsv, and keep the same {sample_name}keyword across all the corresponding files related to the same sample. For example, if the full_table file is named Dmel_full_table.tsv, the karyotype file (if provided by the user) must be named Dmel_karyotype.txt, and the genome (if provided), Dmel.fna. You will need to edit the config.yaml file, which you can find in the plot_markers/ folder, to specify the paths to your own inputs. In this config file, you can also provide the path to a text file with the IDs of a subset of sequences you wish to plot, named as {sample_name}_selected_sequences.txt. If not provided, the script will attempt to plot all the sequences present in the input genome. Bear in mind that for a clean visualization, it is not possible to plot too many sequences, e.g., this approach will not work on a fragmented genome with hundreds or thousands of scaffolds. Alternatively, you can select some key sequences of interest to plot.",
    "In the following Snakemake command, by specifying the --use-conda flag, Snakemake will install the dependencies through conda, which can be a bit slow. A faster way of using Snakemake's conda integration is by using the mamba package manager (https://github.com/mamba-org/mamba[href=https://github.com/mamba-org/mamba]), which is an extremely fast and popular conda replacement. Therefore, we recommend first installing mamba with conda install -n base -c conda-forge mamba. If you prefer to use Conda, you can enforce that by adding --conda-frontend conda to the Snakemake command.\n3a. To run the workflow on the test data, just enter:\n         \n$ snakemake –cores 2 –use-conda\nThis workflow will: (a) extract the status, sequence IDs, and coordinates of each marker from the full_table.tsv; (b) extract the sequence lengths from the genome file to build a karyotype.txt file, if this file is not provided by the user.\n4a. The plotting step is performed in the Rstudio environment where you can easily customize the appearance according to your needs and readily visualize the changes (you can also generate the plot from the command line using the Rscript command). Open Rstudio and set the working directory to the support_protocol2/plot_markers/ folder of the BUSCO plugins repository. From the Rstudio console run:\n         \n> setwd(\"/path/to/support_protocol2/plot_markers/\")\n5a. Open the plot_markers/scripts/plot_markers2.R script within Rstudio. The paths to source the necessary files are already set for the test data. In this script, you may customize the R code to change colors and labels. Run the commands of this script within Rstudio to produce the plot. You can do this by selecting all the commands of the script and clicking on the “Run” button.",
    "A *.png and a *.svg file (here Dmel.svg and Dmel.png) are written to the plot_markers/ folder. Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-fig-0002] shows the resulting plot for this example. As you can see all D. melanogaster chromosomes are covered by complete and single-copy BUSCO markers, except for the Y chromosome.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/3ba75a32-39e9-4c6b-ad29-62c1dfdd2072/cpz1323-fig-0002-m.jpg</p>\nFigure 2\nExample of plotting the location of BUSCO markers on a genome sequence. The figure shows D. melanogaster nuclear chromosomes along with the position of complete (light blue), duplicated (black), and fragmented (yellow) BUSCO markers from the diptera_odb10 dataset. The Y sex chromosome does not harbour BUSCO markers.\nVisualizing syntenies between genomes using BUSCO markers\nThe genomic position of each single-copy ortholog identified by BUSCO on two or more genomes can be used to infer syntenies between genomes. For visualizing syntenies between two or more genomes, you will need the full_table.tsv files obtained by running BUSCO on the input genomes. Note that you need to use the same dataset for all the assessments. In this example, we infer syntenic relationships between Drosophila melanogaster and D. pseudoobscura chromosomes using the diptera_odb10 single-copy orthologs. There are various programs to plot syntenies; here we use the R package RIdeogram as in the previous example.\n1b. If not done already, download the busco_protocol repository from the GitLab:\n         \n$ git clone https://gitlab.com/ezlab/busco_protocol\n2b. Enter the support_protocol2/plot_syntenies subfolder:\n         \n$ cd busco_protocol/support_protocol2/plot_syntenies\nYou can find the two full_table.tsv files obtained by running BUSCO with the diptera_odb10 dataset on D. melanogaster and D. pseudoobscura assemblies in the plot_syntenies/data/full_table/ folder. To plot your own data, remove these files and add your full_table.tsv files.\n3b. Then, run the script for creating the files required for generating the plot with:\n         \n$ snakemake –cores 2 --use-conda",
    "The script will pre-process the full_table.tsv files to create the file required for plotting the syntenies with RIdeogram. A karyotype.txt file can be provided to the command, in case you want to plot only a subset of sequences from the input files. You need to create this file with following format:\n         \ntable:\n﻿0,1,2,3,4,5,6\nChr,Start,End,fill,species,size,color\n1,1,23542271,8AFFBB,Dmela,12,7adb3d\n2,1,23513712,8AFFBB,Dmela,12,7adb3d\n3,1,25286936,8AFFBB,Dmela,12,7adb3d\n4,1,28110227,8AFFBB,Dmela,12,7adb3d\n5,1,32079331,8AFFBB,Dmela,12,7adb3d\n6,1,1348131,8AFFBB,Dmela,12,7adb3d\n7,1,3667352,8AFFBB,Dmela,12,7adb3d\n1,1,32422566,95FF7D,Dpseudo,12,6c72f0\n2,1,23510042,95FF7D,Dpseudo,12,6c72f0\n3,1,30706867,95FF7D,Dpseudo,12,6c72f0\n4,1,1881070,95FF7D,Dpseudo,12,6c72f0\n5,1,68158638,95FF7D,Dpseudo,12,6c72f0\nIf not provided, the script will extract this information directly from the genomes for all the sequences in the inputs. You may edit this file to keep only a subset of sequences of interest and rerun the workflow by specifying the edited file.\n4b. Open Rstudio, and set the working directory to the support_protocol2/plot_syntenies/ folder inside the busco_protocol directory. From the Rstudio console, run:\n         \n> setwd(\"/path/to/support_protocol2/plot_syntenies/\")\n5b. Open the plot_syntenies/scripts/plot_syntenies2.R script within Rstudio. The paths to source the necessary files are already set. Here you can customize the R code to change colors and labels. Now run the commands of this script within Rstudio to produce the plot. You can do this by selecting all the commands of the script and clicking on the “Run” button. A *.png and *.svg file should be written in the plot_syntenies/ folder. Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-fig-0003] shows the chart of the syntenic relationships between the D. melanogaster and D. pseudoobscura chromosomes obtained with the test data.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/975d7940-b82d-4827-9710-ca632e05340a/cpz1323-fig-0003-m.jpg</p>\nFigure 3\nSyntenic relationships between the D. melanogaster and D. pseudoobscura sequenced chromosomes, computed by mapping the location of the diptera_odb10 markers obtained by running BUSCO on both genomes.",
    "BUSCOs, being near-universal single-copy genes, can represent reliable markers to be used in phylogenomics studies. BUSCO assessments on multiple organisms can be used to quickly and easily identify single-copy markers to generate multiple sequence alignments (MSA) from which to infer the species phylogeny. BUSCO datasets can identify large sets of genes from genomic data of variable quality, avoiding the tedious and possibly biased manual selection of orthologs. In this protocol we illustrate a workflow to build a phylogenomic tree from annotated gene sets (with a GFF and genome assembly available for each species). In this case, we concatenate the MSAs into a superaligment and use a Maximum Likelihood (ML) approach to build the phylogenomic tree. The analyses presented here are by no means exhaustive, and you should choose the most suitable methods and parameters (e.g., using partitions, different models etc.) according to your specific goals and inputs.\nNecessary Resources\nHardware\nAs described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001].\nSoftware\nAs described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-prot-0001] and additionally: conda (and optionally mamba), Snakemake, AGAT, MAFFT, TrimAl, IQ-TREE2, AMAS. Note that these tools will be automatically installed by running the Snakemake workflow (otherwise you can install these manually if you prefer).\nFiles\nA set of genome assemblies and their corresponding GFF files.\nBuilding phylogenomic tree from a set of genome assemblies and GFF files\n1. If not done already, download the busco_protocol repository from GitLab:\n         \n$ git clone https://gitlab.com/ezlab/busco_protocol\n2. Enter the support_protocol3/ folder:\n         \n$ cd support_protocol3/",
    "3. Collect the GFF and the genome assembly files you want to analyze in the GFFs/ and assemblies/ folders, respectively. In this example, we are going to build a small species tree using six insect species selected from various published sources: Drosophila melanogaster (GCF_000001215.4; Hoskins et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0013]), Bombyx mori (GCF_014905235.1); Apis mellifera (GCF_003254395.2; Wallberg et al., 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0038]); Tribolium castaneum (GCF_000002335.3) (Herndon et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0011]), Acyrthosiphon pisum (GCF_005508785.1; Li, Park, Smith, & Moran, 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0023]) and Zootermopsis nevadensis (GCF_000696155.1; Terrapon et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0036]). Using the assembly accessions, you can download these with the NCBI “datasets” command-line tool (https://www.ncbi.nlm.nih.gov/datasets/[href=https://www.ncbi.nlm.nih.gov/datasets/]), e.g., datasets download genome accession GCF_014905235.1 or manually from the NCBI portal or the ftp site using the wget command, e.g.:\n         \n$ cd genomes/\n$ wget -O Drosophila_melanogaster.fna.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/215/GCF_000001215.4_Release_6_plus_ISO1_MT/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.gz\n$ wget -O Bombyx_mori.fna.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/014/905/235/GCF_014905235.1_Bmori_2016v1.0/GCF_014905235.1_Bmori_2016v1.0_genomic.fna.gz\n$ wget -O Apis_mellifera.fna.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/003/254/395/GCF_003254395.2_Amel_HAv3.1/GCF_003254395.2_Amel_HAv3.1_genomic.fna.gz\n$ wget -O Tribolium_castaneum.fna.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/335/GCF_000002335.3_Tcas5.2/GCF_000002335.3_Tcas5.2_genomic.fna.gz\n$ wget -O Acyrthosiphon_pisum.fna.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/005/508/785/GCF_005508785.1_pea_aphid_22Mar2018_4r6ur/GCF_005508785.1_pea_aphid_22Mar2018_4r6ur_genomic.fna.gz\n$ wget -O Zootermopsis_nevadensis.fna.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/696/155/GCF_000696155.1_ZooNev1.0/GCF_000696155.1_ZooNev1.0_genomic.fna.gz\n$ gunzip *.gz && cd ../GFFs\n$ wget -O Drosophila_melanogaster.gff.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/215/GCF_000001215.4_Release_6_plus_ISO1_MT/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.gff.gz\n$ wget -O Bombyx_mori.gff.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/014/905/235/GCF_014905235.1_Bmori_2016v1.0/GCF_014905235.1_Bmori_2016v1.0_genomic.gff.gz\n$ wget -O Apis_mellifera.gff.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/003/254/395/GCF_003254395.2_Amel_HAv3.1/GCF_003254395.2_Amel_HAv3.1_genomic.gff.gz\n$ wget -O Tribolium_castaneum.gff.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/335/GCF_000002335.3_Tcas5.2/GCF_000002335.3_Tcas5.2_genomic.gff.gz\n$ wget -O Acyrthosiphon_pisum.gff.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/005/508/785/GCF_005508785.1_pea_aphid_22Mar2018_4r6ur/GCF_005508785.1_pea_aphid_22Mar2018_4r6ur_genomic.gff.gz\n$ wget -O Zootermopsis_nevadensis.gff.gz\nhttps://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/696/155/GCF_000696155.1_ZooNev1.0/GCF_000696155.1_ZooNev1.0_genomic.gff.gz\n$ gunzip *.gz && cd ../\n4. Edit the config/config.yaml file in which you need to specify the paths to the GFFs and genomes folders, and additional parameters such as which BUSCO dataset you want to use to identify the single-copy orthologs that encompass all species. If you exactly follow the steps in this protocol, all parameters in the config.yaml file are already set for this example. Analyses with higher-resolution datasets identify more markers for inferring the species phylogeny. In our example, we are using the insecta_odb10 dataset.\n5. Run the Snakemake workflow, which comprises all the steps required for obtaining the species phylogeny. Briefly, the workflow consists of the following steps:",
    "For each species, isoforms are first filtered to keep only the longest protein-coding sequence for each gene according to the corresponding GFF file. This is achieved using the AGAT toolkit (Dainat J.), which also produces a useful report that can be used to verify there are no issues with the GFF entries.\nBUSCO is then run in protein mode on the resulting filtered gene sets using the dataset specified in the config.yaml file.\nThe single-copy genes identified from each run are extracted and selected based on user-defined parameters specified in the config.yaml file, e.g., to select only genes that are shared across 100% of the species and with no duplicates across all species.\nFor each orthologous group, proteins are aligned using MAFFT (Katoh & Standley, 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0019]) and trimmed with trimAl (Capella-Gutiérrez, Silla-Martínez, & Gabaldón, 2009[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0006]).\nAlignments are concatenated with AMAS (Borowiec, 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0004]).\nThe resulting superalignment is used to infer a maximum likelihood phylogeny using IQ-TREE 2 (Minh et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0027]). To run the workflow, enter:\n$ snakemake –cores 16 --use-conda\nSeveral intermediate files and the final phylogenetic.nwk tree file are written in the output folder. Assessments of the six insect species with the insecta_odb10 dataset identified 1154 complete and single-copy BUSCOs found in all species. Note that in the config.yaml file, you can also specify to use markers found as duplicated (the best scoring duplicate will be selected) and markers missing in a certain number of species, e.g., missing in 10% of the inputs. To visualize the Newick file, you can use any program for viewing phylogenetic trees, e.g., Dendroscope (Huson & Scornavacca, 2012[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-bib-0015]). Figure 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.323#cpz1323-fig-0004] shows the resulting tree obtained in this example.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/d6f9a063-548a-4bf7-b021-a5d7fd0708fe/cpz1323-fig-0004-m.jpg</p>\nFigure 4",
    "Example of a phylogenomic tree obtained by using single-copy orthologs identified by BUSCO on a test data of six insect species. The phylogeny was inferred from a set of 1154 concatenated BUSCOs under the Q.insect+R5 substitution model using IQ-TREE 2."
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}