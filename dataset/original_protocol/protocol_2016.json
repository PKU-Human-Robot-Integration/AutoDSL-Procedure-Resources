{
  "id": 2130,
  "origin_website": "Cell",
  "title": "Gradient tree boosting and network propagation for the identification of pan-cancer survival networks",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nHere we describe step-by-step how to train the XGBoost pan-cancer survival prediction model, infer a pan-cancer survival network by performing network propagation on the important genes identified during model training, and find significantly enriched biological pathways based on the network propagation results. To illustrate these steps, we show as an example the results for 25 different TCGA cohorts and 100 replications of model training from (Thedinga and Herwig, 2022[href=https://www.wicell.org#bib24]).\nSurvival prediction with XGBoost\nTiming: 1–2 weeks (∼7 h per replication)\nTCGA patients from 25 different cancer cohorts are randomly split into 80% training and 20% test patients and a survival prediction model is trained on the gene expression data corresponding to the training patients. Model training includes a feature selection step, where the number of genes used for survival prediction is reduced to 500 in each replication, and a hyperparameter optimization step, where model hyperparameters such as tree depth are tuned. We refer the reader to (Thedinga and Herwig, 2022[href=https://www.wicell.org#bib24]) for a more detailed description. After training is completed, the test data is then used to evaluate the trained model. This procedure is repeated 100 times for different splits of the patients into training and test data. Users might also run a smaller number of replications (e.g., 10) to reduce runtime of this step. However, results of the network propagation and over-representation analysis following the survival prediction step can vary depending on the number of replications.\nNavigate to the directory you have downloaded the XGBoost Survival Network repository into.\nRun the model replications of XGBoost model training as follows:\n>python run_xgb_survival_replications.py\n    --result results/\n    --features features/\n    --replication_start 1\n    --replication_end 100\n    --threads 64",
    "to run 100 replications of model training. If you want to run a single model replication only or distribute model training (e.g., to multiple servers), you can also execute each model replication separately by setting the -s and -e flags to the respective model replication. E.g., for running model replication 3 only, type: troubleshooting 2[href=https://www.wicell.org#sec5.3], 3[href=https://www.wicell.org#sec5.5], and 4[href=https://www.wicell.org#sec5.7].\n>python run_xgb_survival_replications.py\n    --result results/\n    --features features/\n    --replication_start 3\n    --replication_end 3\n    --threads 64\nCritical: The code for running the model replications of XGBoost training will use 64 threads. You should change the threads argument to the number of threads you want XGBoost to use according to the machine you are using.\nNote: The random seed used for splitting the data into training and test sets is computed based on the model replication (i.e., seed∗num_replication). If you want to reproduce the results from (Thedinga and Herwig, 2022[href=https://www.wicell.org#bib24]), you should use the default seed of 135, otherwise you can change the seed via the --seed argument in the program call.\nNote: The machine learning step is the most time-consuming step of the protocol and is heavily dependent on the hardware that is used. Our time estimations rely on the use of a Supermicro 2023US-TR4 Linux server with dual AMD EPYC 7601 CPU and 64 cores.\nNote: Although the XGBoost framework generally offers GPU support, the objective function and metric (survival:cox and cox-nloglik, respectively) used in this protocol for survival prediction are currently not supported on GPU.\nNote: The number of replications determines both the runtime and the accuracy of the results. We strongly recommend using as much as 100 replications since this allows the XGBoost method to sufficiently exhaust the large amount of features. However, runtime could be reduced by reducing the number of replications.",
    "Optional: Visualize model performances of the survival prediction models trained in the different model replications by plotting each cohort against the C-Indices obtained in the different model replications using boxplots. You can create such a visualization by running:\n>Rscript plotPredictionPerformance.R\n    --output_file “model_performance_xgb_pancancer.pdf”\n    --result_path results/\n    --num_replications 100\nwhere num_replications should be set to the number of model training replications you have performed in the previous step. An example visualizing the survival prediction performances for the 100 replications of model training from (Thedinga and Herwig, 2022[href=https://www.wicell.org#bib24]) is shown in Figure 1[href=https://www.wicell.org#fig1].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1611-Fig1.jpg\nFigure 1. Survival prediction performances\nThe pan-cancer XGBoost survival prediction performance (depicted as C-Index boxplots) from (Thedinga and Herwig, 2022[href=https://www.wicell.org#bib24]) for 100 replications of model training on 25 TCGA cancer cohorts.\nNetwork propagation with NetCore\nTiming: 1 day\nGene weights are derived from the feature importance scores (measured as gain, see https://xgboost.readthedocs.io/en/latest/python/python_api.html[href=https://xgboost.readthedocs.io/en/latest/python/python_api.html]) that were computed by the XGBoost algorithm in each replication of model training. To compute the weight of a gene, the sum of feature importance scores corresponding to this gene over all XGBoost model replications is calculated. All gene weights are then fed into NetCore as initial weights for network propagation. NetCore (Barel and Herwig, 2020[href=https://www.wicell.org#bib1]) is a network propagation method based on node coreness and also implements a module identification step. The module identification step returns subnetworks connecting the most highly weighted input genes to genes that received a significant weight in the network propagation step.\nNavigate to the directory you have downloaded the XGBoost Survival Network repository into.\nPrepare XGBoost pan-cancer survival prediction results for network propagation.\nCompute gene weights from the feature importance scores calculated during the different replications of pan-cancer XGBoost training. To compute the gene weights for network propagation from the survival prediction results, type:\n>python prepare_XGBoost_results_for_NetCore.py\n        --result_path results/\n        --num_replications 100\n        --output_path survival_network/",
    "where num_replications should be set to the number of replications you have performed for XGBoost pan-cancer model training.\nNote: Gene weights are calculated as the sum of feature importance scores for each gene over all model replications. Additionally, gene identifiers are converted from Ensembl IDs as used in XGBoost model training to Hugo Symbols to be compatible with the protein-protein interaction (PPI) network used in network propagation with NetCore. Genes that do not map to a Hugo Symbol are discarded as they cannot be used in network propagation.\nPerform network propagation with NetCore as follows:\n>python <path_to_netcore>/netcore/netcore.py\n        -e <path_to_netcore>/data/CPDB_high_confidence.txt\n        -w survival_network/pancancer_gene_weights.txt\n        -pd <path_to_netcore>/data/CPDB_high_confidence_edge_permutations/\n        -o survival_network/\nwhere <path_to_netcore> should be set the path where NetCore has been downloaded to. Troubleshooting 2[href=https://www.wicell.org#sec5.3] and 5[href=https://www.wicell.org#sec5.9]. As an example, Figure 2[href=https://www.wicell.org#fig2] shows the largest network module identified by NetCore based on the gene weights from (Thedinga and Herwig, 2022[href=https://www.wicell.org#bib24]), which were computed from 100 replications of XGBoost pan-cancer training.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1611-Fig2.jpg\nFigure 2. Pan-cancer survival network module\nLargest network module identified by NetCore (Barel and Herwig, 2020[href=https://www.wicell.org#bib1]) network propagation and module identification based on pan-cancer important features identified in (Thedinga and Herwig, 2022[href=https://www.wicell.org#bib24]) from 100 replications of XGBoost model training. Orange nodes correspond to seed genes, while genes that were inferred during network propagation are colored in gray. Figure reprinted with permission from Thedinga and Herwig (2022)[href=https://www.wicell.org#bib24].\nOverrepresentation analysis of the survival sub-network\nTiming: 30 min",
    "Genes contained in the network modules identified by NetCore are further analyzed by over-representation analysis (ORA) to find significantly enriched biological pathways. In (Thedinga and Herwig, 2022[href=https://www.wicell.org#bib24]) ORA is performed with QIAGEN Ingenuity Pathway Analysis (IPA) (Krämer et al., 2014[href=https://www.wicell.org#bib17]). However, since QIAGEN IPA is a commercial application and thus not freely available, we demonstrate here how to perform ORA with the ORA application implemented in ConsensusPathDB (Herwig et al., 2016[href=https://www.wicell.org#bib10]; Kamburov and Herwig, 2022[href=https://www.wicell.org#bib15]).\nExtract genes from the network modules identified by NetCore. The following script reads the file “core_norm_subnetworks.txt”, which is generated by NetCore during the module identification step and extracts all genes that appear in any of the identified network modules.\n>python extract_network_module_genes.py\n        --result_path survival_network/\n        --output_file survival_network/network_module_genes.txt\nExtract genes contained in the high-confidence ConsensusPathDB protein-protein interaction network used in network propagation for use as a background list of genes in the over-representation analysis. To extract the genes from the high-confidence protein-protein interaction network, run:\n>python extract_ppi_network_genes.py\n        --ppi_path <path_to_netcore>/data/CPDB_high_confidence.txt\n        --output_file survival_network/CPDB_ppi_network_genes.txt\nwhere <path_to_netcore> should be set the path where NetCore has been downloaded to.\nNote: When performing over-representation analysis, the background list of genes is important because it influences the resulting p-value computations. As default, the ConsensusPathDB uses all annotated genes as background, but this can be modified by the user. A reasonable choice of background genes for analyzing functional information of the network modules could be, for example, the set of genes that are covered by the underlying protein-protein interaction network.\nPerform over-representation analysis (ORA) on the extracted network module genes (Figure 3[href=https://www.wicell.org#fig3]). Troubleshooting 6[href=https://www.wicell.org#sec5.11].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1611-Fig3.jpg\nFigure 3. Over-representation analysis with ConsensusPathDB\nRed numbers (1–8) illustrate the steps necessary to perform an over-representation analysis of the module genes identified during network propagation using the ConsensusPathDB (Herwig et al., 2016[href=https://www.wicell.org#bib10]) ORA implementation.",
    "Open a browser window and go to http://cpdb.molgen.mpg.de/[href=http://cpdb.molgen.mpg.de/].\nOn the ConsensusPathDB website, select the “over-representation analysis” tab in the “gene set analysis” category.\nUpload gene data.\nUpload the file “network_module_genes.txt” from the folder “survival_network” as file containing gene identifiers.\nUpload the file “CPDB_ppi_network_genes.txt” from the folder “survival_network” as background list of genes.\nSelect “gene symbol (HGNC symbol)” as gene/protein identifier type.\nClick “Proceed”.\nSelect functional sets for ORA.\nIn “Pathway-based sets”, select “pathways as defined by pathway databases”.\nClick “Find enriched sets” at the bottom of the page.\nDownload ORA results in tab-delimited format.\nNote: In (Thedinga and Herwig, 2022[href=https://www.wicell.org#bib24]), QIAGEN IPA (Krämer et al., 2014[href=https://www.wicell.org#bib17]) was used for over-representation analysis instead of ConsensusPathDB (Herwig et al., 2016[href=https://www.wicell.org#bib10]; Kamburov and Herwig, 2022[href=https://www.wicell.org#bib15]). For this reason results can deviate from the results shown in the paper.\nNote: Over-representation analysis is typically dependent on annotation of gene sets, for example pathways, protein complexes, transcription factor target sets etc. Thus, when performing a Fisher test with these gene sets and the user’s gene list, different pathways can be identified when using different pathway databases. If you do not have access to QIAGEN IPA, we suggest using ConsensusPathDB because it has collected such pathway-based gene sets from different source databases and over-representation analysis is done with all gene sets in parallel in order to gain a more comprehensive result.\nAlternatives: It is also possible to use other publicly available tools such as PANTHER (Mi et al., 2021[href=https://www.wicell.org#bib20]), Enrichr (Kuleshov et al., 2016[href=https://www.wicell.org#bib18]), or DAVID (Huang et al., 2009a[href=https://www.wicell.org#bib11]; 2009b[href=https://www.wicell.org#bib12]) for analyzing over-representation of the gene list obtained after network propagation and module identification."
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Bioinformatics",
    "Systems Biology",
    "Health Sciences",
    "Cancer"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}