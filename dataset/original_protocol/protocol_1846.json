{
  "id": 1957,
  "origin_website": "Cell",
  "title": "TreeTuner: A pipeline for minimizing redundancy and complexity in large phylogenetic datasets",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nPreparing the online NCBI-nr protein BLAST-search result files\nTiming: ∼2 min (Depending on file sizes and Internet speed)\nFor the purposes of demonstration, we select the ClpS protein from A. thaliana in this protocol, which is applicable to any other proteins and species. The NCBI-nr protein BLAST-search result file is the first document required for the TreeTuner pipeline (Table 1[href=https://www.wicell.org#tbl1]). What follows is a description of how to acquire both online and local BLAST-search results using an example FASTA file (Figure 2[href=https://www.wicell.org#fig2]A). The sample files can be acquired from GitHub under the tutorial directory. Users will acquire the online BLAST-search results (e.g., FASTA file and Hit Table) in steps 1–2.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1439-Fig2.jpg\nFigure 2. Screenshots of NCBI online BLAST\n(A) Input file window of the BLAST server.\n(B) Parameter adjustments window of Online BLAST.\n(C) NCBI BLAST result interface.\nTo run the NCBI BLAST server, users can simply click the link (https://blast.ncbi.nlm.nih.gov/Blast.cgi[href=https://blast.ncbi.nlm.nih.gov/Blast.cgi]) and select the protein-to-protein BLASTP option.\nPaste in the amino acid sequence (in this case, the ClpS protein from A. thaliana).\n>AT1G68660.1\nMETAICGRLALAPSSLFNSKSGDKHLVSKGPCVNRSILMTLSTSAALGKGGGVLDKPIIEKTTPGRESEFDLRKSKKIAP\nPYRVILHNDNFNKREYVVQVLMKVIPGMTVDNAVNIMQEAHINGLAVVIVCAQADAEQHCMQLRGNGLLSSVEPDGGGC\nSelect the NCBI-nr database (Figure 2[href=https://www.wicell.org#fig2]A).\nChoose the parameters (e.g., the max target sequences: 1000; expect threshold: 1e-10) (Figure 2[href=https://www.wicell.org#fig2]B).\nClick the BLAST button at the bottom.\nAfter a few seconds, users can see the BLAST result interface (Figure 2[href=https://www.wicell.org#fig2]C). Users can then download the FASTA (complete sequence) and Hit Table (CSV) via the Download option tab. The FASTA file will contain the ClpS homologs retrieved from the NCBI-nr database. The Hit Table summarizes the matched hits in a 13-column tabular file (Table 1[href=https://www.wicell.org#tbl1]). These two documents are necessary input files for subsequent steps. Before moving on to the tree building step, an alternate approach (i.e., local BLAST) to acquiring these input files is described at step 3.",
    "Preparing the local NCBI-nr protein BLAST-search result files\nTiming: ∼24 h (Depending on file sizes, computing power, and Internet speed)\nUsers can also use the local BLAST approach to acquire the significant hits to the protein query from a customized database. This is especially useful for users to explore the full breadth of homolog diversity, since some of homologs might not be present in, or retrievable from, NCBI-nr. Users will acquire two necessary documents (e.g., BLASTP_clps.tsv and clps_hits.fasta) for the TreeTuner pipeline in steps 3–8.\nAlthough it is easy to acquire NCBI-nr protein BLAST results online (step 1–2), we also recommend users perform their BLAST searches locally (steps 3–7 below) for more robust analyses. This is because users can more freely adjust the parameters such as max target sequences. The NCBI BLAST server (https://blast.ncbi.nlm.nih.gov/Blast.cgi[href=https://blast.ncbi.nlm.nih.gov/Blast.cgi]) limits the number of retrievable sequences to 5,000, which might not capture all of the sequence diversity in the NCBI-nr database. We recommend choosing a maximum (max) target sequence parameter value between 100,000 and 300,000. A max target sequence parameter of 1,000–5,000 is fine if one wants to quickly test the pipeline, and users can skip steps from 3 to 7 and proceed to the tree building analysis starting at Step 9 directly.",
    "Note: Local NCBI-nr protein BLAST allows users to conveniently adjust the parameters of thresholds, such as E-value cut-off and maximum target sequences, and to perform thousands of queries against NCBI-nr and other environment- or taxon-specific databases, such as the Marine Microbial Eukaryote Transcriptome Sequencing Project (MMSTSP) (Keeling et al., 2014[href=https://www.wicell.org#bib12]; Caron et al., 2017[href=https://www.wicell.org#bib4]). It should also be noted that there is a need for users to have a basic knowledge of bioinformatics in order to take full advantage of TreeTuner, in particular, the ability to use the basic BLAST package and dash shell in a Linux/Unix environment.\nTo set up the local BLAST, users will need to download the BLAST Tool Package and the FASTA sequences corresponding to the custom database. Also, the “blastdbv5-user-guide.pdf” document in the GitHub “tutorial” directory contains complementary vignettes to help guide users, which has been proved useful in our previously published protocol (Zhang et al., 2021a[href=https://www.wicell.org#bib24], 2021b[href=https://www.wicell.org#bib25]).\nDownload the BLAST Package via https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/[href=https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/]. Please select the appropriate distribution based on your computer operating system (Windows, MacOS or Linux). The default is the Linux version (ncbi-blast-2.12.0+-x64-linux.tar.gz).\nTo simplify the pipeline, we will still use the A. thaliana ClpS protein as the example file (clps.fasta).\n# clps.fasta file\n>AT1G68660.1\nMETAICGRLALAPSSLFNSKSGDKHLVSKGPCVNRSILMTLSTSAALGKGGGVLDKPIIEKTTPGRESEFDLRKSKKIAP\nPYRVILHNDNFNKREYVVQVLMKVIPGMTVDNAVNIMQEAHINGLAVVIVCAQADAEQHCMQLRGNGLLSSVEPDGGGC\nSet up a local NCBI-nr database. The NCBI-nr BLAST v5 databases can be accessed via https://ftp.ncbi.nlm.nih.gov/blast/db[href=https://ftp.ncbi.nlm.nih.gov/blast/db]. Some necessary files (e.g., nr.01.tar.gz, nr.01.tar.gz.md5, and nr.02.tar.gz) can be automatically downloaded via a custom Perl script at step 4e.\nThe makeblastdb command will construct a protein database by taking in the FASTA file with the parameter (-in), setting up the database type (e.g., protein) with the parameter (-dbtype protein), and naming the database (e.g., MMETSP_database) with parameter (-title database_name). The ‘-out’ option will yield the database output name (e.g., MMETSP_db).",
    "# Note: makeblastdb file is from the BLAST package and the following command can be run in the terminal.\n>./makeblastdb -in MMETSP.fasta -dbtype prot -title MMETSP_prot_database -out MMETSP_db\nTo download the NCBI-nr v5 databases, use the Perl script update_blastdb.pl, which is in the downloaded BLAST+ package (https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/[href=https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/]). This command will download the NCBI-nr database (https://ftp.ncbi.nlm.nih.gov/blast/db/v5[href=https://ftp.ncbi.nlm.nih.gov/blast/db/v5]) with the name nr without using the makeblastdb command to recreate the database files. It could take hours for processing, depending on the Internet connection.\nUsers can first check all available databases via the command below.\n> perl update_blastdb.pl –blastdb_version 5 –showall\n# This will give the results like this:\n# Connected to NCBI; downloading BLASTDBv5\n# human_genome\n# landmark\n# …\nUsers can then run the command below to automatically download the NCBI-nr database which includes 55 volumes of data (>100 Gb). Or users can manually download these 110 files (i.e., nr.00.tar.gz, nr.00.tar.gz.md5, etc.) from the link: https://ftp.ncbi.nlm.nih.gov/blast/db/v5[href=https://ftp.ncbi.nlm.nih.gov/blast/db/v5].\n> perl update_blastdb.pl –blastdb_version 5 nr –decompress\n# This will bring the results like this:\n# Connected to NCBI; downloading BLASTDBv5\n# Downloading nr (55 volumes) ...\n# Downloading nr.00.tar.gz...\n# Downloading nr.00.tar.gz.md5\n#...\nUse the BLASTP search option to blast the amino acid sequences against NCBI-nr databases. The BLASTP command can carry out the protein similarity search by searching the query file (e.g., clps.fasta) against the protein database using parameters, such as ‘-evalue’ (indicating the significance of the BLAST hits), ‘-outfmt 6’ (meaning the tabular format of the BLAST result), ‘-out’ (telling the file name of the output file; e.g., BLASTP_UWO241_uniprot.xml) and ‘-max_target_seqs’ (potential number of hits).\n>./blastp -query clps.fasta -db nr -out BLASTP_clps.tsv -evalue 1e-10 -outfmt \"6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore ppos\" -max_target_seqs 10000",
    "Critical: The parameters after the option ‘-outfmt’ will yield the desired columns in a tab-delimited output file. For example, ‘qseqid’ refers to query sequence ID and ‘qlen’ refers to query length (https://www.metagenomics.wiki/tools/blast/blastn-output-format-6[href=https://www.metagenomics.wiki/tools/blast/blastn-output-format-6]). These desired parameters will create a 13-column table (e.g., Table 1[href=https://www.wicell.org#tbl1]). Make sure to use the amino acid sequences and the BLASTP option, which allows for greater sensitivity compared to BLASTN. The BLAST output parameter must be in tabular format. Users can adjust the parameter of the E-value, but we recommend that it be no greater than 1e-10 (to limit erroneous homology inferences). Troubleshooting 1[href=https://www.wicell.org#sec6.1]\nThe local BLAST tabular column is slightly different from the online version. A BLAST-search result example file can be found in the GitHub “tutorial” directory under the name “TreeTuner_file_examples”. For example, the gene ID of matched hits from the local BLAST result contain the extra source of ID (e.g., ref|NP_564937.1| compared to NP_564937.1). The BLAST output is in the form of a 13-column tabular file, including the key information from query name to percentage identity.\nOnce users acquire the BLAST hits, they can pull out the FASTA sequences in one of two ways (online or locally).\nFor example, users can first pull out a list of protein ID from the file (e.g., BLASTP_clps.tsv) like Table 1[href=https://www.wicell.org#tbl1].\n> awk -F’\\t’ ‘{print $2}’ BLASTP_clps.tsv|sed ‘s/.∗\\|\\(.∗\\)\\|.∗/\\1/g’ > clps_hits_id.txt\n# This will yield a list of BLAST hits of ClpS (e.g., NP_564937.1 XP_002888676.1 …).\nUsers can then use the Batch Entrez (https://www.ncbi.nlm.nih.gov/sites/batchentrez[href=https://www.ncbi.nlm.nih.gov/sites/batchentrez]) to retrieve the FASTA sequences corresponding to the list of protein IDs acquired in step 7a.\nThere is also a way to retrieve these FASTA sequences via the protein ID locally. Users can use the SeqKit (Shen et al., 2016[href=https://www.wicell.org#bib21]) to quickly pull out the amino acid sequences from the NCBI database.",
    "# Prepare a large hard drive to download the nr.gz file (∼110 Gb) via https://ftp.ncbi.nlm.nih.gov/blast/db/v5/FASTA/[href=https://ftp.ncbi.nlm.nih.gov/blast/db/v5/FASTA/]\n# Install the latest SeqKit package (e.g., seqkit_linux_386.tar.gz) via https://bioinf.shenwei.me/seqkit/[href=https://bioinf.shenwei.me/seqkit/]\n# Run the seqtk via the commands\n>chmod +x seqkit\n>seqkt subseq nr.gz clps_hits_id.txt > clps_hits.fasta\n# This will yield the desired protein sequence in FASTA format.\nFinally, by using a different approach via local BLAST, users can acquire the two necessary documents (e.g., BLASTP_clps.tsv and clps_hits.fasta) for the TreeTuner pipeline. These are files comparable to the ones generated by the NCBI server.\nCritical: Make sure to remove the header of the BLAST hits file (e.g., BLASTP_clps.tsv) obtained from the online BLAST. Otherwise, the annotations will confuse the scripts in the following step. Troubleshooting 2[href=https://www.wicell.org#sec6.3]\n# blastp\n# Iteration: 0\n# Query: AT1G68660.1\n# RID: PVFT67SX016\n# Database: nr\n# Fields: query acc.ver, subject acc.ver, % identity, alignment length, mismatches, gap opens, q. start, q. end, s. start, s. end, evalue, bit score, % positives\n# 1667 hits found\nMinimizing the redundancy and complexity of large phylogenetic datasets via coarse tuning\nTiming: ∼6 h (Depending on the size of the data, computing power, and Internet speed)\nThe point of coarse tuning is to use TreeTrimmer (Maruyama et al., 2013[href=https://www.wicell.org#bib14]) to do some preliminary trimming of the phylogeny to get a rough sense of the minimal tree diversity. Users will acquire the trimmed tree file in Newick format (e.g., “clps_aligned_trimmed.newick__clps_parameter_input.in.tt0.0.tre”) in steps 9–11. Since the redundant species will be trimmed based on the taxon information, users will need to use acc2tax (https://github.com/richardmleggett/acc2tax[href=https://github.com/richardmleggett/acc2tax]) to first pull out the hierarchical taxonomic terms for each ClpS homolog.\nUsers can first download the package acc2tax via the GitHub link (https://github.com/richardmleggett/acc2tax[href=https://github.com/richardmleggett/acc2tax]) and then prepare the other necessary taxa information files downloaded from the link (https://ftp.ncbi.nih.gov/pub/taxonomy/[href=https://ftp.ncbi.nih.gov/pub/taxonomy/]).",
    "Four necessary taxonomic information files can be acquired from the NCBI taxonomy database which is updated weekly: nodes.dmp, names.dmp, acc2tax_nucl_all.txt, and acc2tax_prot_all.txt.\nnodes.dmp and names.dmp files are in the taxdump.tar.gz file after decompressing.\nacc2tax_nucl_all.txt and acc2tax_nucl_all.txt files will need to be created by merging files in the link (https://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/[href=https://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/]).\n> zcat nucl_gb.accession2taxid.gz nucl_wgs.accession2taxid.gz dead_nucl.accession2taxid.gz dead_wgs.accession2taxid.gz |sort > acc2tax_nucl_all.txt\n> zcat prot.accession2taxid.gz dead_prot.accession2taxid.gz | sort > acc2tax_prot_all.txt\nThe acc2tax package needs to be compiled first before running. Note that acc2tax requires the NCBI protein ID to be trimmed to remove the version (e.g., NP_564937.1 was trimmed to NP_564937). Users can follow the commands below:\n# Compile the source code\n> cc -o acc2tax acc2tax.c\n# Trim the protein version\n>sed ‘s/\\(.∗\\)\\..∗/\\1/g’ clps_hits_id.txt > clps_hits_id_trimmed.txt\n# Four taxa files need to be put in the same directory (i.e., directory name: /your/directory/Acc2tax_092021/)\n>chmod +x acc2tax\n>./acc2tax -i clps_hits_id_trimmed.txt -p -d /your/directory/Acc2tax_092021 -o clps_taxonomic_info.txt\nCritical: Make sure to download the latest NCBI taxonomy database which is usually updated weekly. Even so, users might still be presented with a list of unmatched protein IDs (e.g., “Couldn't find: [CAG5999297]”), because some of the species do not have complete descriptions in hierarchical taxonomic terms. Troubleshooting 3[href=https://www.wicell.org#sec6.5]\nThe “clps_taxonomic_info.txt” file will contain the hierarchical taxonomic categories for each protein ID as the example displayed here:\nNP_564937        Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Embryophyta; Tracheophyta; Euphyllophyta; Spermatophyta; Magnoliopsida; Mesangiospermae; eudicotyledons; Gunneridae; Pentapetalae; rosids; malvids; Brassicales; Brassicaceae; Camelineae; Arabidopsis; Arabidopsis thaliana\nWith the hierarchical taxonomic information available, the next steps are to align the sequences, trim the alignment and build a phylogenetic tree.\nSince the NCBI protein ID (clps_hits_id_trimmed.txt) has been trimmed in the former step, users will need to also trim the version information in the FASTA file (clps_hits.fasta) as well to maintain consistency.",
    "> awk ‘{print $1}’ clps_hits.fasta | sed ‘s/ˆ\\(>.∗\\)\\..∗/\\1/g’ > clps_hits_trimmed.fasta\n# clps_hits_trimmed.fasta\n>NP_564937\nMETAICGRLALAPSSLFNSKSGDKHLVSKGPCVNRSILMTLSTSAALGKGGGVLDKPIIEKTTPGRESEFDLRKSKKIAP\n…\nUsers can then apply the multiple sequence alignment tool MAFFT v7.310 (Katoh and Standley, 2013[href=https://www.wicell.org#bib11]), the alignment trimming tool BMGE v1.12 (or trimAl v1.4) (Criscuolo and Gribaldo, 2010[href=https://www.wicell.org#bib6]) and FastTree v2.1 (Price et al., 2010[href=https://www.wicell.org#bib18]) to build a preliminary tree.\n##1## Users can download the version 7 of MAFFT via the link (https://mafft.cbrc.jp/alignment/software/[href=https://mafft.cbrc.jp/alignment/software/]).\n> mafft –-auto clps_hits_trimmed.fasta > clps_aligned.fasta\n##2## Users will find the BMGE v1.12 package (BMGE-1.12.tar.gz) from ftp://ftp.pasteur.fr/pub/GenSoft/projects/BMGE/[href=http://ftp//ftp.pasteur.fr/pub/GenSoft/projects/BMGE/].\n>bmge -i clps_aligned.fasta -t AA -m BLOSUM30 -of clps_aligned_trimmed.fasta\n##Optional## Users can also use another alignment trimming tool trimAl v1.4 via the link (http://trimal.cgenomics.org[href=http://trimal.cgenomics.org])\n> trimal -in clps_aligned.fasta -out clps_aligned_trimmed.fasta -htmlout output1.html -gt 1\n##3## Then users can build a tree via the FastTree v2.1 (http://www.microbesonline.org/fasttree/[href=http://www.microbesonline.org/fasttree/]).\n>FastTree clps_aligned_trimmed.fasta >clps.aligned.trimmed.newick\nWith the input files available, users can test the TreeTrimmer tool with their data. The example files can be found via the GitHub link (https://github.com/zx0223winner/TreeTuner[href=https://github.com/zx0223winner/TreeTuner]).\nTreeTrimmer (Maruyama et al., 2013[href=https://www.wicell.org#bib14]) is written in Ruby, which requires pre-installation (Ruby v2.5.1 and BioRuby v2.0.3).\n> sudo apt install ruby\n> sudo gem install bio\n# Error occurs while running the old version of TreeTrimmer.\n> “treetrimmer.rb:37: warning: IO#lines is deprecated; use each_line instead”\n# Error occurs while requiring the BioRuby\n> require': cannot load such file – bio (LoadError)\nCritical: We suggest users download the updated TreeTrimmer script from GitHub to ensure that the TreeTuner pipeline runs correctly (https://github.com/zx0223winner/TreeTuner/tree/main/Tutorial/TreeTuner_file_examples/Step11-14_coarse_tuning[href=https://github.com/zx0223winner/TreeTuner/tree/main/Tutorial/TreeTuner_file_examples/Step11-14_coarse_tuning]). Troubleshooting 4[href=https://www.wicell.org#sec6.7]",
    "There are three necessary input files for TreeTrimmer (Maruyama et al., 2013[href=https://www.wicell.org#bib14]). Sample files can be found in the GitHub “tutorial” directory under the name “TreeTuner_file_examples”. Users can first prepare the TreeTrimmer parameter input file (clps_parameter_input.in). As described in the help document, TreeTrimmer will identify and remove user-defined ‘redundant’ sequences via the taxa information and branch cut-off parameters. If so, the orthologous sequences from closely related organisms and ‘recently’ evolved lineage-specific paralogs will be greatly reduced. Users can also adjust the number of representative OTUs to be retained in the TreeTrimmer parameter input file.\n# clps_parameter_input.in\n# Specify a cut-off of support values (e.g. bootstrap values or branch length values),\n# either in integer (0-100) or decimal (0.0-1.0).\n# Leave it blank or use default (0.0) for trees with no branch supports (Greater than this value will trigger for removal).\ncutoff=0.0\n# Which taxonomic categories should be pruned? How many OTUs should be retained?\n(Tab- delimited)\nBacteria      4\nArchaea      3\nEukaryota      1\n# How many OTUs should be retained in each clade unless specified above?\nnum_retained=1\nThe example file can be found from the GitHub. Here, the ‘query_tag’ was set to 564937 for the purposes of retaining the reference A. thaliana ClpS protein (GenBank ID: NP_564937; TAIR ID: AT1G68660.1).\n# clps_parameter_input.in\n# Query tag (optional: default is \"query_tag=QUERY\")\n# A string in the OTU name can be specified as a tag to avoid removal\nquery_tag=564937\n# Delimiter for categories of the taxonomic information\ntaxon_delimiter=;\\s\nUsers can obtain the other two input files (e.g., “clps_aligned_trimmed.newick” and “clps_taxonomic_info.txt”) from Step 10b and 9d, respectively. However, there is an additional step needed to format the input document “clps_taxonomic_info.txt” so that it can be recognized by TreeTrimmer.\n# Simply run the following script to format.\n>sed ‘s/,/; /g’ clps_taxonomic_info.txt|sed ‘s/cellular organisms; //g’ > clps_taxonomic_info_clean.txt",
    "# Here is the difference between the two files.\n# clps_taxonomic_info.txt\nA0A2K3CNL6 cellular organisms,Eukaryota,Viridiplantae,Chlorophyta,core chlorophytes, Chlorophyceae,CS clade,Chlamydomonadales,Chlamydomonadaceae,Chlamydomonas,Chlamydomonas reinhardtii\n# clps_taxonomic_info_clean.txt\nA0A2K3CNL6 Eukaryota; Viridiplantae; Chlorophyta; core chlorophytes; Chlorophyceae; CS clade; Chlamydomonadales; Chlamydomonadaceae; Chlamydomonas; Chlamydomonas reinhardtii\nOnce all the necessary files are prepared, users can run the command as follows:\n> ruby treetrimmer.rb sample/clps_aligned_trimmed.newick sample/clps_parameter_input.in sample/clps_taxonomic_info_clean.txt > clps_treetrimmer.out\nTwo output documents will be produced (e.g., “clps_treetrimmer.out” and “clps_aligned_trimmed.newick__clps_parameter_input.in.tt0.0.tre”). The first file contains the number of OTUs to be trimmed via user-defined taxa and branch cut-off. The second file is detailed in the next step.\nThe trimmed tree file is in Newick format with a long name (e.g., “clps_aligned_trimmed.newick__clps_parameter_input.in.tt0.0.tre”). The output also displays the difference before and after running TreeTrimmer (Figures 3[href=https://www.wicell.org#fig3]A and 3B). In the case of our ClpS test dataset, the number of OTUs decreased from 1157 to 44.\n# clps_treetrimmer.out\nNP_564937      Eukaryota; Viridiplantae; Streptophyta; Streptophytina; Embryophyta; Tracheophyta; Euphyllophyta; Spermatophyta; Magnoliopsida; Mesangiospermae; eudicotyledons; Gunneridae; Pentapetalae; rosids; malvids; Brassicales; Brassicaceae; Camelineae; Arabidopsis; Arabidopsis thaliana      1      86\n# 1 refers to the number of OTUs was retained in each supported branch of the tree\n# 86 infers the number of OTUs to be collapsed under the clade.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1439-Fig3.jpg\nFigure 3. The ClpS homolog phylogenetic trees before and after coarse tuning\n(A) Tree with 1157 OTUs obtained without using the coarse tuning pipeline.\n(B) The 44-OTU tree retained after the use of coarse tuning pipeline. The reference gene ID: NP564937 is colored red. Phylogeny was created by FastTree (Price et al., 2010[href=https://www.wicell.org#bib18]) under the maximum likelihood method model (JTT + CAT). ClpS homologs were acquired using the following settings: maximum number of BLASTP hits retrieved, 5000; BLASTP cut-off value, 1e-10.\nColoring the Newick tree after coarse tuning based on the taxonomic categories\nTiming: ∼30 min",
    "Coloring the tree based on the taxonomic categories is a common way to help visualize phylogenetic diversity. Users will create the image file of a trimmed tree in steps 12–14.\nUsers can apply the Python script we designed to color the tree file created from step 11g.\n# Install python3\n>pip3 install python\n# Install ETE3 toolkit\n>pip3 install ete\n# Install ETE tree browser\n>pip3 install PyQt5\nThe script will require Python version 3 and ETE3 toolkit (Huerta-Cepas et al., 2016[href=https://www.wicell.org#bib9]) to be pre-installed. The Python script and the relevant example files can be downloaded from the GitHub (https://github.com/zx0223winner/TreeTuner[href=https://github.com/zx0223winner/TreeTuner]).\n# Usage: python3 color_coarse_tuning_tree.py <taxonomic_info_file> <newick_tree_file>\n# The first file is the taxonomic informatic file.\n# The second file is a Newick tree file\n# The colors reflect different kingdoms of the species\n>python3 color_coarse_tuning_tree.py clps_taxonomic_info_clean.txt clps_aligned_trimmed.newick__clps_parameter_input.in.tt0.0.tre\n# Users can ignore the possible warnings popping up which happens when using ETE3 toolkit query NCBI Taxonomy.\n>warnings.warn(\"taxid %s was translated into %s\" %(taxid, merged_conversion[taxid]))\nUsers can then visualize the tree result in the ETE tree browser after running the Python script at step 13. The different colors reflect the taxonomic categories (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1439-Fig4.jpg\nFigure 4. ClpS protein phylogeny after coarse tuning with Arabidopsis thaliana homolog as query",
    "Phylogeny was created by FastTree (Price et al., 2010[href=https://www.wicell.org#bib18]) using the 44 OTUs under the maximum likelihood method model (JTT + CAT). The coarse-tuning parameters: Cut-off value for de-replication: 0.0; Number of OTUs to be retained for each taxa categories: 4 for Bacteria, 3 for Archaea, 1 for Eukaryota. Font colors represent taxonomic categories: red for Viridiplantae; blue for Proteobacteria; yellow for Rhodophyta; light blue for Terrabacteria group; Pink for Cryptophyceae. The scale bar indicates 0.12 amino acid substitutions per site. Due to the limitations of single-gene phylogenies, the extent to which this tree reflects known or predicted organismal relationships is unclear. The phylogeny is shown solely for the purpose of illustrating the utility of the TreeTuner pipeline and should not be over-interpreted.\nMinimizing the redundancy and complexity of large phylogenetic datasets via fine tuning\nTiming: ∼12 h\nUsers will have a rough sense of the taxonomic diversity contained in their phylogenetic dataset based on the results of steps 9–14. However, they may wish to proceed to some more curated, in-depth analyses requiring more sophisticated tree-building methods and optimized taxon sampling. Here we will use the custom scripts to further resolve the complexity of the tree. Users will acquire the trimmed files in Newick format (e.g., renamed_clps_aligned_trimmed.fasta.fasttree) in steps 15–20.\nIn the same way as was done with coarse tuning, users will need to prepare two input files (e.g., “clps_hits.fasta” and “clps_acc2tax_prot_all.txt”). The first file contains the FASTA sequences for the NCBI BLAST protein homologs of the A. thaliana ClpS protein, which was already generated in step 7c. For the second file, users will need to do some polishing on the file acc2tax_prot_all.txt generated at step 9c.\n# This will remove the description in the header of FASTA file.\n>awk ‘{print $1}’ clps_hits.fasta > clps_hits_no_description.fasta",
    "# The command is to trim the large acc2tax_prot_all.txt file into smaller size with clps hits only via using the formerly generated “clps_hits_id.txt” file (Step 7a). There are two ways to do that.\n>grep -wf clps_hits_id.txt acc2tax_prot_all.txt > clps_acc2tax_prot_all.txt\n# or\n>awk 'NR==FNR{a[$2]=$0;next}{print a[$1]}' acc2tax_prot_all.txt clps_hits_id.txt >clps_acc2tax_prot_all.txt\nNote: Due to the size of acc2tax_prot_all.txt file (∼40 Gb), it might take several hours to run this step.\nWith the two files ready, users can run the Python script called “rename_ncbi_blastdb.py” downloaded from GitHub (https://github.com/zx0223winner/TreeTuner[href=https://github.com/zx0223winner/TreeTuner]).\n# Usage: python3 rename_ncbi_blastdb.py <FASTA File> <Taxon Id FILE> <Renamed FASTA File>\n# Note: The first time running the python script will update your local NCBI taxa database which will take around 5 mins.\n# Users can comment the two lines below (Line:86 and Line:87) to avoid the updating each time.\n# print(\"Upgrading NCBI local database...\")\n# ncbi.update_taxonomy_database()\n>python3 rename_ncbi_blastdb.py clps_hits_no_description.fasta clps_acc2tax_prot_all.txt renamed_clps_hits.fasta\n# Users can ignore the possible warnings popping up which is the same reason from the Step 9d.\n#Cannot find taxid for gene HCI81531.1\n#Cannot find taxid for gene MBO6986741.1\n#Cannot find taxid for gene MXZ63256.1\nNote: The reason for renaming the FASTA file header is to insert the hierarchical taxonomic terms. The Python script will connect the terms with an underscore (‘_’), so the header is treated as a single term.\n# Header of the FASTA file before and after renaming.\n# Before\n>NP_564937.1 Ribosomal protein L12/ ATP-dependent Clp protease adaptor protein ClpS family protein [Arabidopsis thaliana]\n# After\n# Naming Format: species_name@database_databaseID_hierarchical_taxonomic_terms\n>Arabidopsis_thaliana@NCBI_NP_564937.1_Eukaryota_Viridiplantae_Streptophyta_Streptophytina_Embryophyta_Tracheophyta_Euphyllophyta_Spermatophyta_Magnoliopsida_Mesangiospermae_eudicotyledons_Gunneridae_Pentapetalae_rosids_malvids_Brassicales_Brassicaceae_Ca\nNote: It is also important to remove special characters such as ‘/’ and ‘()’ in the header, since they can interfere with the proper running of the FastTree and Perl scripts.\n# Create new FASTA file without special characters in the header.\n#Remove ‘:’, ‘(’, ‘)’, ‘/’",
    ">sed ‘s/\\///g’ renamed_clps_hits.fasta |sed ‘s/(//g’|sed ‘s/)//g’|sed ‘s/://g’ > new_renamed_clps_hits.fasta\nWith the renamed FASTA file, users can repeat the tree building in step 10b and change the input file name “clps_hits_trimmed.fasta” to the renamed FASTA file (e.g., “new_renamed_clps_hits.fasta”).\n##1## Users can download the version 7 of MAFFT via the link (https://mafft.cbrc.jp/alignment/software/[href=https://mafft.cbrc.jp/alignment/software/]).\n> mafft –auto new_renamed_clps_hits.fasta > renamed_clps_aligned.fasta\n##2## Users will find the BMGE v1.12 package (BMGE-1.12.tar.gz) from ftp://ftp.pasteur.fr/pub/GenSoft/projects/BMGE/[href=http://ftp//ftp.pasteur.fr/pub/GenSoft/projects/BMGE/].\n>bmge -i renamed_clps_aligned.fasta -t AA -m BLOSUM30 -of renamed_clps_aligned_trimmed.fasta\n##Optional## Users can also use another alignment trimming tool trimAl v1.4 via the link (http://trimal.cgenomics.org[href=http://trimal.cgenomics.org])\n> trimal -in clps_aligned.fasta -out renamed_clps_aligned_trimmed.fasta -htmlout output1.html -gt 1\n##3## Then users can build a tree via the FastTree v2.1 (http://www.microbesonline.org/fasttree/[href=http://www.microbesonline.org/fasttree/]).\n>FastTree renamed_clps_aligned_trimmed.fasta >renamed_clps_aligned_trimmed.newick\n#Debugging\n#Error: Non-unique name ### in the alignment\n#In rare situation, users might see the errors after running the FastTree, which is because of the same header of homologs appearing in the alignment file after using the renaming script.\n# Users should follow the Step 16 to remove the special characters and make sure the renamed headers are unique.\nCritical: The reason for repeating the tree building step is due to the different header formats for coarse versus fine tuning. For example, the coarse-tuning pipeline requires the header without version information (e.g., NP_564937 without ‘.1’) to be recognized by a third-party tool (i.e., acc2tax) in step 9. Similarly, the fine-tuning pipeline requires the header containing hierarchical taxonomic terms to be pulled out by the custom scripts via taxa rank. Users should know that the tree files created by the coarse-tuning pipeline can help optimize the taxon sampling for downstream fine-tuning. Troubleshooting 5[href=https://www.wicell.org#sec6.9]",
    "The final output file from the previous step will yield a Newick tree file named “renamed_clps_aligned_trimmed.newick”. We will then use two custom Perl scripts (“perl rm_inparal_rank.pl” and “trim2untrim.pl” downloaded via GitHub at https://github.com/zx0223winner/TreeTuner[href=https://github.com/zx0223winner/TreeTuner]) to fine-tune the tree and then apply sophisticated tree-building methods and optimized taxon sampling.\n# Usage: perl rm_inparal_rank.pl <TREE file> <Aligned_FASTA> <cut-off> <Parameter file 1> <Parameter file 3>\n>perl rm_inparal_rank.pl renamed_clps_aligned_trimmed.newick renamed_clps_aligned_trimmed.fasta 1.0 taxa_not_remove.txt taxa_rank.txt\n# Debugging\n# Error 1: Can’t locate Statistics/Descriptive.pm in @INC\n# The error can be solved by running the following command:\n>sudo cpan Statistics::Descriptive\n# Error 2: FastTree: permission denied\n# Users need to authorize the permission for FastTree and FastTree.c files. Because the Perl script ‘rm_inparal_tank.pl’ uses FastTree to infer the tree topology.\n> gcc -DNO_SSE -O3 -finline-functions -funroll-loops -Wall - o FastTree FastTree.c -lm\n> chmod +x FastTree\nCritical: While users can acquire the first two input files from the previous steps (i.e., the Newick tree file and aligned FASTA file), the remaining two parameter files will need to be carefully prepared. The output tree file created by the coarse-tuning pipeline at step 11f can be a useful guide.\n# taxa_not_remove.txt\n# This file contains a list of taxa and phyla users don't want to reduce.\n# The scripts will look for matched strings listed here,\n# e.g., NP_564937.1 is ID of the ClpS.\n564937.1\nRhodophyta\nHaptista\n# taxa_rank.txt\n# This file will contain information on how to reduce specific genera/phyla/kingdoms. It will reduce specifically at the taxonomic terms (0 = domain (e.g., Eukaryota), 1 = kingdom (e.g., Viridiplantae), 2 = phyla (e.g., Streptophyta), 3 = class (Klebsormidiophyceae), etc.) (space-delimited).\nBacteria      3\nArchaea      2\nEukaryota      3\n# Branch lengths less than this value will lead to taxon removal”.\n1.0",
    "The taxa rank file is determined based on specific header formats as follows.\n# Eukaryotia 3\n# Refers to Eukaryota_Viridiplantae_Streptophyta\n>Arabidopsis_thaliana@NCBI_NP_564937.1_Eukaryota_Viridiplantae_Streptophyta_Streptophytina_Embryophyta_Tracheophyta_Euphyllophyta_Spermatophyta_Magnoliopsida_Mesangiospermae_eudicotyledons_Gunneridae_Pentapetalae_rosids_malvids_Brassicales_Brassicaceae_Ca\nThe previous Perl script will yield three output files (e.g., “renamed_clps_aligned_trimmed.fasta_removedSeq”, “renamed_clps_aligned_trimmed.fasta.fasttree”, “renamed_clps_aligned_trimmed.fasta.genus_trimmed”). Then users can run the following script to acquire the trimmed sequence alignment (e.g., renamed_clps_aligned_trimmed.fasta_sub).\n# Usage: trim2untrim.pl <Previous_output.genus_trimmed> <Aligned_FASTA>\n> perl trim2untrim.pl\nrenamed_clps_aligned_trimmed.fasta.genus_trimmed renamed_clps_aligned_trimmed.fasta\nWith the fine-tuning alignment available from the previous step, users can see the difference before and after running the Perl scripts (Figures 5[href=https://www.wicell.org#fig5]A and 5B). In the case of our ClpS test dataset, the number of OTUs decreased from 1144 to 66. Users can also proceed with more rigorous tree-building methods (e.g., IQ-TREE) to recreate a Newick tree file (Figure 5[href=https://www.wicell.org#fig5]C).\n# Usage: trim2untrim.pl <Previous_output.genus_trimmed>\niqtree -s renamed_clps_aligned_trimmed.fasta_sub -alrt 1000 -bb 1000 -nt AUTO\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1439-Fig5.jpg\nFigure 5. ClpS protein phylogeny before and after fine-tuning\n(A) Tree containing 1144 OTUs retained before running the fine-tuning pipeline.\n(B) Tree of 66 OTUs retained after using fine-tuning. The phylogeny was created by FastTree (Price et al., 2010[href=https://www.wicell.org#bib18]) under the maximum likelihood method model (JTT + CAT). Fine-tuning parameters: branch length cut-off for non-removed taxa: 1.0; “taxa_not_remove.txt” listed the string name of 564937.1, Rhodophyta and Haptista; “taxa_rank.txt” file listed how to specifically reduce taxa levels at the taxonomic terms, for examples: Bacteria at 3; Archaea at 2; Eukaryota at 3.\n(C) 66-OTU tree created using a more rigorous maximum-likelihood tree-building method (i.e., IQ-TREE (Nguyen et al., 2015[href=https://www.wicell.org#bib16])). The substitution model (LG + R4) used to infer the phylogenies was selected for each alignment according to the Bayesian information criterion (BIC) using ModelFinder (Kalyaanamoorthy et al., 2017[href=https://www.wicell.org#bib10]). For each phylogeny, branch support was assessed using 1000 ultra-fast bootstrap approximations. The scale bar indicates the number of amino acid substitutions per site.",
    "Coloring the Newick tree after fine-tuning based on the taxonomic categories\nTiming: ∼30 min\nAfter generating the Newick tree in the previous step, a different Python script is used to plot the tree based on the taxonomic categories, due to the fact that different headers are used by the coarse- and fine-tuning processes. Users will create the image file of a trimmed tree at steps 22–24.\nAs was the case for coloring the Newick tree after coarse-tuning, some pre-installed packages are needed.\nThe Python script will require Python version 3 and ETE3 toolkit (Huerta-Cepas et al., 2016[href=https://www.wicell.org#bib9]) to be pre-installed. The Python script and the relevant example files can be downloaded from the GitHub (https://github.com/zx0223winner/TreeTuner[href=https://github.com/zx0223winner/TreeTuner]).\n# Install python3\n>pip3 install python\n# Install ETE3 toolkit\n>pip3 install ete\n# Install ETE tree browser\n>pip3 install PyQt5\nUsers can then visualize the tree in the ETE tree browser. The different colors reflect the taxa categories (Figure 6[href=https://www.wicell.org#fig6]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1439-Fig6.jpg\nFigure 6. ClpS protein phylogeny after TreeTuner fine tuning with Arabidopsis thaliana homolog as query",
    "The phylogeny was created by FastTree (Price et al., 2010[href=https://www.wicell.org#bib18]) using the 66 OTUs under the maximum likelihood method model (JTT + CAT). The tree was visualized in the ETE tree browser (Huerta-Cepas et al., 2016[href=https://www.wicell.org#bib9]). The CLPS homologs in photosynthetic organisms split into CLPS1 (all photosynthetic organisms) and CLPS2 homologs (only cyanobacteria) (Nishimura et al., 2013[href=https://www.wicell.org#bib17]). The fine-tuning parameters were as follows: branch length cut-off for non-removed taxa: 1.0; “taxa_not_remove.txt” listed the string name of 564937.1, Rhodophyta and Haptista; “taxa_rank.txt” file listed how to specifically reduce taxa levels at the taxonomic terms, for examples: Bacteria at 3; Archaea at 2; Eukaryota at 3. Font colors represent taxonomic categories: yellow for Rhodophyta; light blue for Terrabacteria group; red for Viridiplantae; blue for Proteobacteria; light red for Haptista. The scale bar indicates 0.7 amino acid substitutions per site. Due to the limitations of single-gene phylogenies, the extent to which this tree reflects known or predicted organismal relationships is unclear. The phylogeny is shown solely for the purpose of illustrating the utility of the TreeTuner pipeline and should not be over-interpreted.\n# Usage: python3 color_fine_tuning_tree.py <newick_tree_file>\n# The first file is a Newick tree file\n# The colors reflect different kingdoms of the species\n>python3 color_fine_tuning_tree.py renamed_clps_aligned_trimmed.fasta.fasttree"
  ],
  "subjectAreas": [
    "Evolutionary Biology",
    "Genomics",
    "Bioinformatics",
    "Systems Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}