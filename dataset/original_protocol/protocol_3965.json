{
  "id": 4169,
  "origin_website": "Cell",
  "title": "Analysis workflow of publicly available RNA-sequencing datasets",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nThe flow chart for data processing is included in Figure 1[href=https://www.wicell.org#fig1].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/931-Fig1.jpg\nFigure 1. Flow chart for data processing\nDownload and prepare the data matrix for analysis\nTiming: 2 h\nYou can download the experiment information and clinical data directly from GEO using the GEOquery package:\nThe series matrix file is a text file that includes a tab-delimited value-matrix for each sample containing the phenotypic/clinical and experimental data of a given dataset. In the GEO webtool, there is a hyperlink to the series matrix, called “Series Matrix File(s)”. To download the series matrix file directly to the R environment use the getGEO command:\ndata <- getGEO(GEO = [\"GSE152075\"])\n#replace the text between [] with the GSE of your choice and remove the [].\n#print de first five rows of the matrix to see matrix information\nhead(data)\n#output (do not run this piece of script)\n> head(data)\n$GSE152075_series_matrix.txt.gz\nExpressionSet (storageMode: lockedEnvironment)\nassayData: 0 features, 484 samples\n  element names: exprs\nprotocolData: none\nphenoData\n  sampleNames: GSM4602241 GSM4602242 ... GSM4602725 (484 total)\n  varLabels: title geo_accession ... sequencing_batch:ch1 (43 total)\n  varMetadata: labelDescription\nfeatureData: none\nexperimentData: use 'experimentData(object)'\n  pubMedIds: 32898168\nAnnotation: GPL18573\nYou may now extract the phenotypic/clinical data matrix from the series matrix:\nclindata <- data[[\"GSE152075_series_matrix.txt.gz\"]]@phenoData@data\n#replace the GSE with the one of your choice. Do not remove the [] in this line.\n#print de first five rows of the matrix to see the information included in columns of interest\nhead(clindata[,c(1,2,8,40,39,42)])\n#output (do no run this piece of script)\n> head(clindata[,c(1,2,8,40,39,42)])\ntitle geo_accession source_name_ch1 gender:ch1 age:ch1 sars-cov-2 positivity:ch1\nGSM4602241 POS_001 GSM4602241 Nasopharyngeal Swab M 64 pos\nGSM4602242 POS_002 GSM4602242 Nasopharyngeal Swab F 30 pos\nGSM4602243 POS_003 GSM4602243 Nasopharyngeal Swab M 47 pos\nGSM4602244 POS_004 GSM4602244 Nasopharyngeal Swab F 67 pos\nGSM4602245 POS_005 GSM4602245 Nasopharyngeal Swab M 62 pos",
    "GSM4602246 POS_006 GSM4602246 Nasopharyngeal Swab F 52 pos\nDownload and save on your computer the raw-counts matrix from GEO website. This matrix is a tab-delimited txt. file containing the counts for every gene aligned from a RNA-seq experiment. After downloading it, load the matrix into RStudio:\nraw_counts <- read.delim(\"[C:/Users/File/Location/GSE152075_raw_counts_GEO.txt.gz]\", stringsAsFactors=FALSE, sep = \" \")\n#replace the text between [] with the directory path to the GSE_raw_counts_GEO.txt.gz file you downloaded and remove the [].\n#another way to download the raw count matrix directly from RStudio is running the following command:\nurl=\"https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE152075&format=file&file=GSE152075%5Fraw%5Fcounts%5FGEO%2Etxt%2Egz\"\ndownload.file(url, \"raw_reads.gz\")\nraw_counts <- read.delim(\"raw_reads.gz\", stringsAsFactors=FALSE, sep = \" \")\n#print de first five rows of the raw counts matrix to see how information is organized\nhead(raw_counts[,c(1:10)])\n#output (do no run this piece of script)\n> head(raw_counts[,c(1:10)])\nPOS_001 POS_002 POS_003 POS_004 POS_005 POS_006 POS_007 POS_008 POS_009 POS_010\nA1BG 0 1 0 0 18 8 0 1 0 1\nA1CF 0 0 2 0 0 0 0 0 0 0\nA2M 69 36 84 42 83 46 26 0 93 6\nA2ML1 2 0 0 0 3 30 0 32 6 0\nA2MP1 0 0 0 0 21 0 0 0 0 0\nA3GALT2 0 0 0 0 0 0 0 0 0 0\nNote: The sequencing data for GSE152075 was submitted as raw-counts in a separate file from the experimental and clinical data. (https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE152075[href=https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE152075]; GSE152075_raw_counts_GEO.txt.gz); therefore, it was downloaded separately. For datasets with pre-processed/normalized data, the counts matrix might be included in the series matrix file downloaded in step 1. Troubleshooting 3[href=https://www.wicell.org#troubleshooting].\nRNA-seq data organization and count normalization\nTiming: 1 h",
    "Before performing differential gene expression analysis, it is required to normalize the read counts if the raw-counts matrix was downloaded. This normalization step allows to compare gene expression (read counts) among samples (Evans et al., 2018[href=https://www.wicell.org#bib7]). It is also recommended to correct for batch effect if multiple batches of experiments were performed. If the user’s dataset is already normalized, then go directly to step 6.\nGene expression normalization:\nBefore sample normalization, data should be converted and organized to the format required for further analysis (data format and organization might vary for different packages). Troubleshooting 4[href=https://www.wicell.org#troubleshooting].\nraw_counts <- as.matrix(raw_counts)\nrownames(clindata) <- clindata$[title]\n#replace the rownames of clindata (sampleID) with the same sample name [title] of [raw_counts]. This will help to match sample names in both matrixes. Remove the []\nall(rownames(clindata) %in% colnames(raw_counts))\n#the outcome should be TRUE\nall(colnames(raw_counts) %in% rownames(clindata))\n#the outcome should be TRUE\nMake sure that the grouping variables are factors. We also changed the original names of the columns containing the relevant variables to make them shorter and easier to work with.\ncolnames(clindata)[colnames(clindata) == \"sequencing_batch:ch1\"] <- \"batch\"\nclindata$batch <- as.factor(clindata$batch)\ncolnames(clindata)[colnames(clindata) == \"n1_ct:ch1\"] <- \"ct\"\ncolnames(clindata)[colnames(clindata) == \"sars-cov-2 positivity:ch1\"] <- \"positivity\"\nclindata$positivity[clindata$positivity == \"pos\"] <- \"COVID19\"\nclindata$positivity[clindata$positivity == \"neg\"] <- \"HEALTHY\"\nclindata$positivity <- as.factor(clindata$positivity)\nMerge the read counts and clinical data matrixes into a DESeqDataSet object using the DESeq2 package:\ndds <- DESeqDataSetFromMatrix(countData = raw_counts,\n  colData = clindata,\n  design = ∼ [positivity + batch])\n#the design argument is a formula that expresses how the counts for each gene depend on the variables in colData. The “design” function set the important variables to take into consideration when performing expression analyses but they are not taken into account for the normalization step. Replace the variables between [] with the variables of your choice and remove the [].",
    "#print de first five rows of the merged data to check how it is organized\nhead(dds)\n#output (do no run this piece of script)\n> head(dds)\nclass: DESeqDataSet\ndim: 6 484\nmetadata(1): version\nassays(1): counts\nrownames(6): A1BG A1CF ... A2MP1 A3GALT2\nrowData names(0):\ncolnames(484): POS_001 POS_002 ... NEG_063 NEG_065\ncolData names(44): title geo_accession ... batch sizeFactor\nNormalization by estimation of size factor:\ndds <- estimateSizeFactors(dds)\n#print de first five rows of the normalized data\nhead(dds)\n#output (do no run this piece of script)\n> head(dds)\nclass: DESeqDataSet\ndim: 6 484\nmetadata(1): version\nassays(1): counts\nrownames(6): A1BG A1CF ... A2MP1 A3GALT2\nrowData names(0):\ncolnames(484): POS_001 POS_002 ... NEG_063 NEG_065\ncolData names(45): title geo_accession ... viral_load sizeFactor\nCreate a new table with the normalized read counts (gene expression) for all genes:\nnorm_counts <- counts(dds, normalized=TRUE)\n#print de first five rows of the normalized data\nhead(norm_counts[,c(1:10)])\n#output (do no run this piece of script)\n> head(norm_counts[,c(1:10)])\nPOS_001 POS_002 POS_003 POS_004 POS_005 POS_006 POS_007 POS_008 POS_009 POS_010\nA1BG 0.000000 0.5141284 0.000000 0.00000 4.9623195 1.772646 0.00000 1.525303 0.000000 1.919222\nA1CF 0.000000 0.0000000 1.341403 0.00000 0.0000000 0.000000 0.00000 0.000000 0.000000 0.000000\nA2M 83.991914 18.5086219 56.338945 29.22556 22.8818067 10.192713 59.25264 0.000000 66.738520 11.515331\nA2ML1 2.434548 0.0000000 0.000000 0.00000 0.8270533 6.647421 0.00000 48.809682 4.305711 0.000000\nA2MP1 0.000000 0.0000000 0.000000 0.00000 5.7893728 0.000000 0.00000 0.000000 0.000000 0.000000\nA3GALT2 0.000000 0.0000000 0.000000 0.00000 0.0000000 0.000000 0.00000 0.000000 0.000000 0.000000\nNote: There are alternative methods to normalize and extract the counts such as rlog and vst that would fit this analysis (Love et al., 2014[href=https://www.wicell.org#bib12]). However, this STAR Protocol replicates the bioinformatics analysis described in Bizzotto et al. (Bizzotto et al., 2020[href=https://www.wicell.org#bib4]) where the command “normalized=TRUE” was used.",
    "For our study, we converted the continuous variables (e.g., age, viral load) into factor/strata variables (e.g., 10-year age ranges, low/medium/high viral load). The code below shows an example on how to stratify the viral load and age (after duplicating the original variable in order to not overwrite the original data).\n#stratify viral load\n{\n  clindata$viral_load <- clindata$ct\n  clindata$viral_load[clindata$viral_load == \"N/A\"] <- \"Negative\"\n  clindata$viral_load[clindata$viral_load > 24 & clindata$viral_load !=\n    \"Unknown\" & clindata$viral_load != \"Negative\"] <-\n    \"LOW\"\n  clindata$viral_load[clindata$viral_load <= 24 & clindata$viral_load\n    >= 19] <- \"MEDIUM\"\n  clindata$viral_load[clindata$viral_load < 19] <- \"HIGH\"\n  clindata$viral_load <- as.factor(clindata$viral_load)\n  clindata$viral_load <- factor(clindata$viral_load, levels =\n    c(\"Negative\", \"LOW\", \"MEDIUM\", \"HIGH\",\n    \"Unknown\"))\n  clindata$positivity <- factor(clindata$positivity, levels =\n    c(\"HEALTHY\", \"COVID19\"))\n}\n#stratify age\n{\n  clindata$age_cat <- clindata$`age:ch1`\n  clindata$age_cat[clindata$`age:ch1` < 30] = \"< 30\"\n  clindata$age_cat[clindata$`age:ch1` >= 30 & clindata$`age:ch1` < 40] =\"30s\"\n  clindata$age_cat[clindata$`age:ch1` >= 40 & clindata$`age:ch1`< 50] =\"40s\"\n  clindata$age_cat[clindata$`age:ch1` >= 50 & clindata$`age:ch1` < 60] =\"50s\"\n  clindata$age_cat[clindata$`age:ch1` >= 60 & clindata$`age:ch1` < 70] =\"60s\"\n  clindata$age_cat[clindata$`age:ch1` >= 70] =\"70+\"\n  clindata$age_cat[clindata$`age:ch1` == \"Unknown\"] = NA\n}\nNote: This is an optional step depending on your variables and analysis.\nDifferential gene expression analysis across different strata\nTiming: 1 day\nNote: As mentioned on Bizzotto et al. (Bizzotto et al., 2020[href=https://www.wicell.org#bib4]), some samples were removed from the analysis since they were considered to have low quality read sequencing (>70% genes with 0 counts). Because this might not apply to all protocols, we did not include the code for this filtering in the main manuscript, but it was included in the troubleshooting 5[href=https://www.wicell.org#troubleshooting]. Therefore, the outcomes for this protocol might slightly differ from the outcome published on Bizzotto et al. (Bizzotto et al., 2020[href=https://www.wicell.org#bib4]), but this omission does not change the results and interpretation of the study.",
    "This step aims to compare gene expression across different strata. Below we show, as an example, the differential MX1 expression analysis for SARS-CoV-2 positive vs. negative patients.\nAs described in our publication, we selected specific genes that could potentially be linked to SARS-CoV-2 infection. For this section, we selected MX1 as an example to show. Plot MX1 expression for SARS-CoV-2 positive and negative patients (Figure 2[href=https://www.wicell.org#fig2]A.i) using the following code:\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/931-Fig2.jpg\nFigure 2. Gene expression analysis based on SARS-CoV-2 positivity and age\nDot plot for MX1 expression (i) and statistical output from RStudio (ii) for: (A) SARS-CoV-2 positive vs. negative patients (P-values correspond to Wilcoxon rank-sum test); (B) SARS-CoV-2 positive vs. negative patients categorized by age groups (P-values correspond to decreasing Jonckheere-Terpstra trend test. Alternative hypothesis: Mediani > Medianj > … > Mediann, indicating that gene expression is significantly lower in SARS-CoV-2 patients when age is increased. Left panel: SARS-CoV-2 negative; right panel: SARS-CoV-2 positive). Figures 2[href=https://www.wicell.org#fig2] A.i and B.i were adapted with permission from Bizzotto et al., 2020[href=https://www.wicell.org#bib4].\n{\n  MX1 <- ggplot(NULL, aes(x=clindata$positivity,\n    y=log2(t(norm_counts[\"MX1\",]+1)))) +\n  geom_jitter(aes(shape=clindata$positivity,\n    color=clindata$positivity), size=3)+\n  xlab(NULL) +\n  ylab(\"MX1 expression \\n log2 (norm counts +1)\") +\n  theme(legend.position = \"bottom\") +\n  theme_bw() +\n  theme(axis.text = element_text(size = 15),\n    axis.title = element_text(size = 15),\n    plot.title =element_text(size = 25),\n    legend.position = 'none') +\n  stat_summary(fun=mean,\n    geom=\"point\",\n    shape= '_',\n    size=14,\n    colour= c('#b53d35', '#066e70'))\n  MX1\n}\nCritical: For the y argument you must specify a data frame containing the samples in the rows and the variables (genes) in the columns; therefore, we used the t() argument to transpose the data frame “norm_counts”. Gene expression is expressed as the log2(counts); therefore, and because some samples have 0 counts, it is necessary to add 1 count to all genes for all samples to avoid errors due to log2(0).",
    "Export the plot in high quality (complying with most publication standards):\nggsave(filename=\"[Name of the file.png]\", plot= [name of the plot in RStudio (i.e.: MX1)], device=\"png\", dpi=600, height=10, width=14, units=\"in\")\n#replace the text between [] with the filename to be saved. Remove the [].\nPerform a Wilcoxon test to assess the statistical significance of MX1 expression differences between SARS-CoV-2 positive and negative patients (Figure 2[href=https://www.wicell.org#fig2]A.ii):\nMX1stat <- wilcox.test(norm_counts[\"MX1\",] ∼ clindata$positivity,\n  paired = FALSE)\nMX1stat\nNote: Please note that Limma and DESeq2 would be more appropriate statistical packages to run when analyzing whole transcriptomes. In (Bizzotto et al., 2020[href=https://www.wicell.org#bib4]), we analyzed a pre-selected set of genes; therefore, the Wilcoxon test can be used to analyze mean differences between groups.\nIn addition, we performed the Jonckheere-Terpstra (Arif et al., 2015[href=https://www.wicell.org#bib1]) trend test to evaluate gene expression trends across ordered strata (e.g., age stratified by 10-year ranges). As an example, here we show the trend test for MX1 expression across age categories in SARS-CoV-2 negative and positive patients (Figure 2[href=https://www.wicell.org#fig2]B.ii, left and right panels, respectively). The continuous age variable was stratified in 10-year ranges as described in“RNA-seq data organization and counts normalization - step 5” section.\n{\n  p_trend_age <- jonckheere.test(x= log2(t(norm_counts[\"MX1\",]+1))[\n    clindata$positivity == \"COVID19\"],\n    g= factor(clindata$age_cat\n    [clindata$positivity == \"COVID19\"],\n    ordered = TRUE),\n    alternative = \"decreasing\",\n    nperm = 500)\n  p_trend_age\n}\nNote: In this code the column “clindata$age_cat” contains the age stratified by 10-years ranges previously created.\nNote: to perform this test in SARS-CoV-2 negative patients, then replace “COVID19” with “HEALTHY”.\nNote: The argument alternative could be “two.sided”, “increasing” or “decreasing”. Select the best argument for your hypothesis testing.\nCorrelation analysis\nTiming: 1 day",
    "The aim of this step is to analyze gene expression correlation in the different categorical variables. We also provide the code to perform a pairwise gene expression correlation including the viral load as a third variable plotted in a color scale.\nSpearman correlation analysis between gene expression levels:\nCalculate the Spearman coefficients and plot all pairwise correlations. The example below shows the correlation analysis for four genes (MX1, MX2, ACE2 and TMPRSS2) in SARS-CoV-2 positive and negative patients (Figure 3[href=https://www.wicell.org#fig3]A):\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/931-Fig3.jpg\nFigure 3. Correlation analysis\n(A) Pairwise Spearman correlation matrix analysis between all genes of interest (MX1, MX2, ACE2 and TMPRSS2), considering different infection status (all patients together (Corr.), SARS-CoV-2 negative (HEALTHY), or SARS-CoV-2 positive patients (COVID19)). Alternative hypothesis: rho (ρ) ≠ 0, which indicates that there is a lineal correlation between the variables under study. Statistical significance: ∗p < 0.05; ∗∗p < 0.01; ∗∗∗p < 0.001.\n(B) Scatter plot of MX1 and MX2 gene expression levels, color-coded by viral load (i) and Spearman correlation output in RStudio (ii). Figures 3[href=https://www.wicell.org#fig3]A and 3B.i were adapted with permission from Bizzotto et al., 2020[href=https://www.wicell.org#bib4].\n{\npairwise_corr <- ggpairs(as.data.frame(log2(t(norm_counts+1))),\n  columns = c(\"MX1\", \"MX2\", \"ACE2\", \"TMPRSS2\"),\n  upper = list(continuous = wrap('cor',\n    method = \"spearman\", size = 3),\n    combo = \"box_no_facet\",\n    discrete = \"count\",\n    na =\"na\"),\n  ggplot2::aes(colour=clindata$positivity,\n    shape=clindata$positivity, alpha = 0.01))\npairwise_corr <- pairwise_corr + theme(strip.placement = \"outside\",\n  text = element_text(size = 9 , face = \"bold\")) +\n    ggtitle(\"Gene correlation\") +\n  theme(plot.title = element_text(size = 15,\n    hjust = 0.5)) +\n  ylab(\"log2(counts +1)\") +\n  xlab(\"log2 (counts +1)\")\n  pairwise_corr\n}\nNote: Any continuous variable (e.g. viral load expressed as Ct) could be included in the analysis of correlation with gene expression (Bizzotto et al., 2020[href=https://www.wicell.org#bib4]).",
    "Plot gene expression correlation between two genes and include viral load (expressed as Ct) in a color scale (Figure 3[href=https://www.wicell.org#fig3]B.i) and calculate the Spearman correlation coefficient (Figure 3[href=https://www.wicell.org#fig3]B.ii)\nMX1_MX2 <- ggplot(NULL, aes(x =\n  log2(t(norm_counts[\"MX1\",]+1)[which(clindata$positivity==\"COVID19\" &\n  clindata$ct != \"Unknown\")]),\n  y = log2(t(norm_counts[\"MX2\",]+1))[which(clindata$positivity==\"\n  COVID19\"&\n  clindata$ct != \"Unknown\")],\n  color = as.integer(clindata$ct[(which(clindata$positivity==\"\n  COVID19\" &\n  clindata$ct != \"Unknown\"))]))) +\n  geom_point(size = 4, na.rm = TRUE) +\n  scale_color_gradientn(colours=c(\"red\",\"white\",\"blue\"), name = \"Viral\n  load (ct)\") +\n  ylab(\"MX2 expression RNA-seq \\n log2 (norm counts +1)\") +\n  xlab(\"MX1 expression RNA-seq \\n log2 (norm counts +1)\") +\n  theme(legend.position = \"bottom\") +\n  theme_bw() +\n  theme(axis.text = element_text(size = 15),\n  axis.title = element_text(size = 15),\n  plot.title =element_text(size = 25))\nMX1_MX2\nMX1_MX2stat <-cor.test(norm_counts[\"MX1\",]\n  [which(clindata$positivity==\"COVID19\")],\n  norm_counts[\"MX2\",]\n  [which(clindata$positivity==\"COVID19\")],\n  method = \"spearman\")\nMX1_MX2stat\nPatient segregation based on gene expression\nTiming: 1 day\nPrincipal-component analysis (PCA) is a dimensionality reduction technique used to increase the interpretability of a given dataset, minimizing information loss and maximizing variance.\nPrincipal component analysis based on disease status:\nCalculate the principal component on the log2 transformed gene expression data. The output is a table as shown in Figure 4[href=https://www.wicell.org#fig4]A, containing the weight of each gene in the variance of the samples for Principal Component 1 (PC1; the largest component of variance in the data set) and Principal Component 2 (PC2; the second most important component influencing the variance):\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/931-Fig4.jpg\nFigure 4. Patient segregation based on gene expression\n(A) Principal component analysis (PCA) output in RStudio, showing the first two principal components explaining most part of the variance among samples.\n(B) PCA biplot of gene expression data showing a rough segregation of SARS-CoV-2 positive and negative samples.",
    "(C) 3D scatter plot for the expression of three genes of interest (BSG, MX1 and ACE2). Samples are colored by SARS-CoV-2 status (positive or negative). Ellipsoids represent the 95% confidence interval. Figures 4[href=https://www.wicell.org#fig4]B and 4C were adapted with permission from Bizzotto et al., 2020[href=https://www.wicell.org#bib4].\nres.pca <- prcomp(t(log2(norm_counts[c(\"gene1\",\"gene2\", \"geneN\"),]+1)),\n  scale = TRUE)\n#replace gene1, gene2, geneN by the list of genes of your interest\n  res.pca\nNote: For PCA we only considered expression of the candidate genes, but you might also include any independent variable you consider to affect the variability among samples.\nPlot PC1 vs. PC2 (Figure 4[href=https://www.wicell.org#fig4]B):\n{\n  p<- fviz_pca_biplot(res.pca, col.ind = clindata$[positivity],\n    geom = \"point\",\n    addEllipses = TRUE,\n    palette = c('#F8766D', '#00BFC4'),\n    title='Principal Component Analysis')\n  p\n}\n#replace the variable between [] for any variable of your interest, and remove the []\n3D graphs showing expression for the selected genes can be plotted as follows. The output is shown in Figure 4[href=https://www.wicell.org#fig4]C:\ndata=t(log2(norm_counts[c(\"MX1\",\"ACE2\",\"BSG\"),]+1)),\nvarAnnot=as.data.frame(clindata$positivity,\nrow.names=rownames(clindata)),\naxisTickScaleFontFactor=0.6,\naxisTitleScaleFontFactor=0.6,\nellipseBy=\"clindata$positivity\",\ncolorBy=\"clindata$positivity\",\ncolorKey=list(\"clindata$positivity\"=list(\"COVID19\"=\"#F8766D\",\n\"HEALTHY\"=\"#00BFC4\")),\ngraphType=\"Scatter3D\",\ntitle=\"3D scatter plot\",\nxAxis=list(\"ACE2\"),\nyAxis=list(\"BSG\"),\nzAxis=list(\"MX1\"),\nshowLoessFit = FALSE)"
  ],
  "subjectAreas": [
    "Rnaseq",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}