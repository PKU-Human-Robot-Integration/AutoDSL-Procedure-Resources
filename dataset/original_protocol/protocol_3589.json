{
  "id": 3792,
  "origin_website": "Cell",
  "title": "Analysis workflow to assess de novo genetic variants from human whole-exome sequencing",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nWe have created a github that features all of the necessary files, scripts, and example outputs for the method presented herein. The github can be found at:\nhttps://github.com/jinlab-washu/de-novo-wes-star-protocol[href=https://github.com/jinlab-washu/de-novo-wes-star-protocol]\nUsers are advised to refer to github to download example trios (in VCF format) and pedigree (PED) files if they wish to replicate the step-by-step instructions reported here exactly.\nRun DeNovo Analysis for each trio\nTiming: hours to days\nIn this step users will perform DeNovo analysis using TriodenovoRearrange_pythonAuto.R, which outputs a filtered tsv (tab-separated values) file of calls for each trio in your cohort.\nGenerate the commands for each trio, replacing TRIO_NAME with the name of each trio: Rscript TriodenovoRearrange_pythonAuto.R exome_calls_chr4_2trios.vcf Trios.ped OUTPUT_FOLDER TRIO_NAME. This should be done in the command line, and if this is sufficient then users should continue to step 2. Otherwise, users should execute the following sub-steps in R (recommended version 4.0.2).\nCreate a new directory for the cohort\nsystem(paste(\"mkdir \",CohortName,sep = ''),intern = F)\nRead in the pedigree file\nFam = read.table(file=ped,header=TRUE,stringsAsFactors=FALSE)\nSee Trios.ped for an example pedigree format\nChange your working directory to the cohort directory\nsetwd(CohortName)\nCreate a directory for the sample and change to id\ncommand0=paste(\"mkdir -p \",Familyno,sep=\"\")\nsystem(command0,intern=F)\nsetwd(Familyno)\nGenerate a pedigree file for just one trio\nindex <- which(Fam$FamID == Familyno)\nwrite.table(Fam[index,],file = paste(\"Trio_\",Familyno,\".ped\",sep = \"\"),col.names=FALSE,row.names=FALSE,sep=\"∖t\",quote=FALSE)\nFam = Fam[index,]\nindex = which(Fam$Father != 0)\nProband_ID = Fam[index,2]\nFather_ID = Fam[index,3]\nMother_ID = Fam[index,4]\nGenerate a VCF file for each trio, removing all records with missing genotype, only extracting lines where AC != 0\ncommand1=paste(\"java -Xmx64g -jar GenomeAnalysisTK_3.5.jar -nt 16 -R /ref_data/h_sapiens/1000genomes/2.5/b37/human_g1k_v37_decoy.fasta -T SelectVariants --variant \",Input,\" -o Trio_\",Familyno,\".vcf -env -sn \",Proband_ID,' -sn ',Father_ID,' -sn ',Mother_ID,sep=\"\")\n-nt 16: use 16 threads\n-R: path to reference fasta\n-T SelectVariants --variant: select a subset of variants from a VCF",
    "-o: output file path\n-env\n-sn: specify a sample name from which to include genotypes\nsystem(command1,intern=F)\nRegenotype\nsystem(paste('java -Xmx64g -jar GenomeAnalysisTK_3.5.jar -nt 16 -R /ref_data/h_sapiens/1000genomes/2.5/b37/human_g1k_v37_decoy.fasta -T RegenotypeVariants --variant Trio_',Familyno,'.vcf -o Trio_',Familyno,'_reGT.vcf',sep = ''),intern = F)\n-nt 16: use 16 threads\n-R: path to reference fasta\n-T RegenotypeVariants --variant: Regenotypes the variants from a VCF\n-o: output file path\nSplit multi-allelic sites\nsystem(paste('bcftools norm -m-both -o Trio_',Familyno,'_reGT_step1.vcf Trio_',Familyno,'_reGT.vcf',sep = ''),intern = F)\nnorm: normalize indels\n-m-both\n-o: output file path\nLeft normalization\nsystem(paste('bcftools norm -f /ref_data/h_sapiens/1000genomes/2.5/b37/human_g1k_v37.fasta -o Trio_',Familyno,'_reGT_step2.vcf Trio_',Familyno,'_reGT_step1.vcf',sep = ''),intern = F)\nnorm: normalize indels\n-f: path to reference fasta\n-o: output file path\nRemove extra information (PID, PGT)\nsystem(paste('vcfkeepgeno Trio_',Familyno,'_reGT_step2.vcf GT AD DP GQ PL > Trio_',Familyno,'_reGT_step2_modified.vcf',sep = ''),intern = F)\nRemove ./., unfavored PL, and AC != 0\nsystem(paste('python ParseTrioVCF.py ',Familyno,sep = ''),intern = F)\nRequires ParseTrioVCF.py\nAnnotate the updated VCF with annovar\ncommand7=paste(\"perl table_annovar.pl --vcfinput Trio_\",Familyno,\"_updated.vcf /programs/annovar/humandb/ -buildver hg19 -out Trio_\",Familyno,\" -remove -protocol refGene,genomicSuperDups,snp138,dbnsfp33a,esp6500siv2_all,1000g2015aug_all,exac03,gnomad_exome,gnomad_genome,bravo -operation g,r,f,f,f,f,f,f,f,f -nastring '.'\",sep = \"\")\n--vcfinput: specify the input vcf file\n-buildver: genome build version\n-out: specify the output file\n-remove: remove all temporary files\n-protocol: comma-delimited string specifying database protocol\nIn this case we are using these protocols: refGene,genomicSuperDups,snp138,dbnsfp33a,esp6500siv2_all,1000g2015aug_all,exac03,gnomad_exome,gnomad_genome\n-operation: comma-delimited string specifying type of operation\n-nastring: string to display when a score is not available\nsystem(command7,intern=F)\nRun triodenovo\ncommand6=paste(\"triodenovo --ped Trio_\",Familyno,\".ped --in_vcf Trio_\",Familyno,\"_updated.vcf --out Trio_\",Familyno,\".denovo.Bayfilter.vcf --mixed_vcf_records\",sep = \"\")\n--ped: specifies the pedigree file to use\n--in_vcf: specifies the vcf file to use\n--out: specifies the output file\n--mixed_vcf_records\nsystem(command6,intern=F)\nDelete intermediate files\nsystem(paste(\"rm Trio_\",Familyno,\".avinput\",sep = \"\"),intern = F)\nsystem(paste(\"rm Trio_\",Familyno,\".hg19_multianno.txt\",sep = \"\"),intern = F)\nRearrangement\nsystem(paste('python PrepareMerge.py ',Familyno,sep = ''),intern = F)\nRequires PrepareMerge.py\nDetermine the order of members in the VCF\nOrder = unlist(strsplit(try(system(paste(\"grep -w '#CHROM' Trio_\",Familyno,\"_updated.vcf\",sep = \"\"),intern = T)),'∖t'))\ncol15 = Order[10]\ncol16 = Order[11]",
    "col17 = Order[12]\nProcess the triodenovo output\nBayfilter=readLines(paste(\"Trio_\",Familyno,\".denovo.Bayfilter.content.txt\",sep = \"\"))\nBayfilter=sapply(1:length(Bayfilter),function(i) unlist(strsplit(Bayfilter[i],\"∖t\")))\nBayfilter=data.frame(t(Bayfilter),stringsAsFactors = F)\ncolnames(Bayfilter)=c(\"CHROM\",\"POS\",\"ID\",\"REF\",\"ALT\",\"QUAL\",\"FILTER\",\"INFO\",\"FORMAT\",Father_ID,Mother_ID,Proband_ID)\nBayfilter$POSITION=paste(Bayfilter$CHROM,Bayfilter$POS,Bayfilter$REF,Bayfilter$ALT,sep=\":\")\nProcess the annovar output\nAnno=readLines(paste(\"Trio_\",Familyno,\".hg19_multianno.content.txt\",sep = \"\"))\nAnno=sapply(1:length(Anno),function(i) unlist(strsplit(Anno[i],\"∖t\")))\nAnno=data.frame(t(Anno),stringsAsFactors = F)\ncolnames(Anno)=c(\"CHROM\",\"POS\",\"ID\",\"REF\",\"ALT\",\"QUAL\",\"FILTER\",\"Info\",\"Format\",paste(\"Anno.\",col15,sep = \"\"),paste(\"Anno.\",col16,sep = \"\"),paste(\"Anno.\",col17,sep = \"\"))\nAnno$POSITION=paste(Anno$CHROM,Anno$POS,Anno$REF,Anno$ALT,sep=\":\")\nDelete intermediate files\nsystem(paste(\"rm Trio_\",Familyno,\".hg19_multianno.content.txt\",sep = \"\"),intern = F)\nsystem(paste(\"rm Trio_\",Familyno,\".denovo.Bayfilter.content.txt\",sep = \"\"),intern = F)\nMerge based on the triodenovo file\nAnnoBayfilter=merge(Bayfilter,Anno,by=\"POSITION\",all.x=TRUE)\nAnnoBayfilter=AnnoBayfilter[,c(1:8,10:13,21:25)]\ncolnames(AnnoBayfilter)=c(\"POSITION\",\"CHROM\",\"POS\",\"ID\",\"REF\",\"ALT\",\"QUAL\",\"FILTER\",\"FORMAT\",Father_ID,Mother_ID,Proband_ID,\"INFO\",\"AnnoFormat\",paste(\"Anno.\",col15,sep = \"\"),paste(\"Anno.\",col16,sep = \"\"),paste(\"Anno.\",col17,sep = \"\"))\nWrite the final output to a file\nRun the list of commands generated in step 1\nConcatenate the output files into one final file, in the command line\nhead -1 TRIO_NAME/∗DenovoM > Trios.BayesianFilter.DenovoM\nfor file in TRIO_PREFIX∗/∗DenovoM;do sed '1d' $file >>Trios.BayesianFilter.DenovoM;done\nOutput: Trios.BayesianFilter.DenovoM\nFilter the concatenated file using Python 3.7.3 These commands should be executed in the command line with paths to the Python scripts.\npython ParseBayOutput_SciencePaper.py Trios.BayesianFilter.DenovoM Trios.BayesianFilter.DenovoM.filtered\nRequires ParseBayOutput_SciencePaper.py\nOutput: Trios.BayesianFilter.DenovoM.filtered\nDenovolyze preparation and visualization of candidate DNMs\nThe DeNovo Analysis output will now be manually filtered and annotated to prepare for the Denovolyze step.\nAfter compiling a list of candidate DNMs, all calls must be verified manually using the integrative genomics viewer (IGV) (Robinson et al., 2011[href=https://www.wicell.org#bib10]). IGV can be accessed at igv.org[href=http://igv.org] and manual visualization of DNM calls can be accomplished as follows:\nOpen IGV and load in a BAM, CRAM (and any associated index file), or other supported file format from the first subject you wish to analyze.\nSelect the appropriate reference sequence for your analysis and enter the chromosome and position of the called variant to the search bar at the top.\nZoom in to the user-determined threshold window to visualize all recorded reads.\nExport the image by clicking \"Save Image\" under the \"File\" menu and saving to your desired folder.",
    "Repeat steps for all candidate DNMs in the call list for the specific subject file loaded into IGV.\nEnd the current session and create a new session loading the BAM or CRAM file of the next subject you wish to analyze.\nRepeat the above steps until all candidate DNM calls have been manually analyzed in IGV.\nTroubleshooting (Problem 2)[href=https://www.wicell.org#troubleshooting]\nOpen the output in your preferred spreadsheet software and classify the mutations into different categories in the column denovo_metasvm_cadd30\nUse the ExonicFunc.refGene column to aid in this process\nThe MetaSVM and CADD columns may also be helpful\nExample: A nonsynonymous_SNV with a CADD (v1.3) score ≥ 30 or a MetaSVM prediction of “D” would be classified as misD (Kircher et al., 2014[href=https://www.wicell.org#bib5])\nOutput: Trios.BayesianFilter.DenovoM.filtered.PlotReads.xlsx\nEnrichment analysis\nThe enrichment analysis relies on the denovolyzeR library and will output mutability or enrichment tables depending on the script. The sample data was generated by the DeNovo Analysis step and prepared for denovolyzeR in the previous step. The gene lists used by Dong et al. are available in the github. Users will need curate their own gene lists based upon published literature for the disease they are studying.\nRun the scripts\nRscript denovolyzR.script.R\nRequires: TN_n70_Input.txt, 0819_hs37d5_coding_idt_med_v2_spikein_padded_Mar2018_adj_modified.txt\nOutput: Trios_ObserveExpect_metasvm_cadd30.txt"
  ],
  "subjectAreas": [
    "Genomics",
    "Sequence Analysis",
    "Bioinformatics",
    "Genetics",
    "Sequencing",
    "High Throughput Screening"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}