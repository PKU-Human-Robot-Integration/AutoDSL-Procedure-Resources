{
  "id": 2458,
  "origin_website": "Cell",
  "title": "Protocol to identify host-viral protein interactions between coagulation-related proteins and their genetic variants with SARS-CoV-2 proteins",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nMost steps are managed by analyze_all_variants.ipynb. If the dependencies are properly installed and the variables at the top of analyze_all_variants.ipynb are set, this notebook will run most of the following computations. In addition, locations of the code segments corresponding to each step are stated. A view of the menu of the notebook is shown in Figure 3[href=https://www.wicell.org#fig3].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1940-Fig3.jpg\nFigure 3. View of the menus of an analyze_all_variants.ipynb notebook\nAssuming everything is set correctly, only the circled yellow button needs to be clicked to run the entire pipeline.\nDetails are included here to further assist at each step. Additionally, timing is included here, but is not important and will be highly variable depending on the datasets involved.\nIdentify host proteins that bind to viral proteins and are involved in the biological process\nTiming: 1 day\nThis step identifies proteins that both interact with viral proteins and are involved in a particular biological process (blood coagulation, in this instance). These proteins may indicate an impact of viral invasion on the relevant biological process, and variants in the genes encoding these proteins may impact viral binding.\nIn the second cell of analyze_all_variants.ipynb, Interactions are filtered from the BIOGRID release to include only those that involve host and viral proteins.\nIn the third cell, genes involved in the biological process (coagulation) are extracted from the AmiGO output, and only those included in the previous step are included.\nIn the fourth cell, each gene from the previous step is queried in NCBI’s Gene database, and the most appropriate RefSeq accession identifier is selected.\nFind sequences, synonymous variants, and missense variants for each gene\nTiming: 2 days",
    "This step finds the associated nucleotide sequences for each gene automatically identified in the previous section, including pre-spliced sequences, transcript fed to ribosome, and open reading frame read by ribosome. Additionally, this will find all synonymous and missense variants for each gene in dbSNP. This step will run BLAST and Clustal Omega to generate multiple sequence alignments of homologous nucleotide and amino acid sequences to compute conservation scores for all variants. Then, this step will query the Variant Effect Predictor to score the effect of any missense variants. Additionally, this step will use codon and codon pair usage from CoCoPUTs (Codon/Codon Pair Usage Tables (CoCoPUTs) (fda.gov)[href=https://dnahive.fda.gov/dna.cgi?cmd=codon_usage&id=537&mode=cocoputs]) to score the change in codon and codon pair usage using relative synonymous codon usage (RSCU), relative synonymous codon pair usage (RSCPU), and %MinMax. Additionally, variants are scored with KineFold and NUPACK to access impact on mRNA stability. This step will also score missense variants for the potential effect on post-translational modifications with NetPhos, NetOGlyc, and NetNGlyc. Finally, NetSurfP is used to predict the accessible surface area of the protein to determine if variants occur on the surface or the interior of the protein.\nVariants in conserved regions or variants that effect biochemical features of the DNA or the protein may impact viral binding or invasion. Synonymous variants may impact protein expression and protein conformation in some circumstances (Sauna and Kimchi-Sarfaty, 2011[href=https://www.wicell.org#bib44]; Jankowska et al., 2022[href=https://www.wicell.org#bib21]).\nThis occurs in the fifth cell of analyze_all_variants.ipynb. For each gene and associated RefSeq accession ID:\nrun bio_tools.get_all_seqs with the associated gene name and RefSeq accession ID.\nseqs = bio_tools.get_all_seqs(genename, nm, write=True)[\"seqs\"]\nThen, find and score all synonymous variants.\ntmpd = get_dbSNP.get_syn(genename, seqs[\"ORF\"], nm)\nFinally, find and score all missense variants.\ntmpd = get_dbSNP.get_missense(genename, seqs[\"ORF\"], nm)\nQuery GWAS data and score associated variants\nTiming: 2 days",
    "This step will find all variants in the host genes identified in steps 1 and 2 with a p-value less than 0.05, and then score the variants. As part of this process, we gather all identifiers for each variant, including the dbSNP accession ID, as well as transcript coordinate and genomic coordinate HGVS identifiers. This is useful when we query them in databases such as dbSNP, ClinVar, and Google Scholar. Because these variants almost exclusively appear in introns and UTRs, we score them with splicing predictors such as ESRseq scores, HEXplorer scores, ESEfinder, FAS ESS, and ExonScan.\nThese variants may impact viral binding to the host protein, or expression of the protein and impact of the viral binding. While the code is specific to COVID-19 HGI formatting and column names, other GWAS studies may be used by changing the relevant column names.\nThis occurs in the sixth cell of analyze_all_variants.ipynb. Give the GWAS file location and the gene names to the gwas_pipeline function. All other columns in the GWAS data can be changed, but are set to defaults for COVID-19 HGI datasets. [troubleshooting 3[href=https://www.wicell.org#sec6.5]] [troubleshooting 4[href=https://www.wicell.org#sec6.7]].\ngwas_data = parse_gwas.gwas_pipeline(gwas_file, genes, prefix=gwas_prefix, index_col=\"SNP\", p_col=\"all_inv_var_meta_p\", chromosome=\"#CHR\", position=\"POS\", ref=\"REF\", alt=\"ALT\", plim=0.05, translation=gwas_prefix + \".trans\")\nPause point: By default, the program will pause to output genomic HGVS identifiers for all relevant GWAS variants to the file specified as gwas_prefix + “_nc_acc.txt\". The user should then manually feed this list to batch Mutalyzer in order to find transcriptomic HGVS identifiers. This result should be saved in the same directory as the list with filename set to gwas_prefix + “.trans\".\nQuery Dali for structurally similar proteins\nTiming: 3 days",
    "This step will identify any proteins that are structurally homologous to the viral protein and that bind to the host protein. This may elucidate specific motifs common to viral and host proteins, giving insight to the way viral and host proteins bind. Moreover, if the resulting homologs are involved in another biological process, this may indicate other effects of viral proteins on the host.\nFor each viral protein that interacts with one of the host proteins identified in steps 1 and 2:\nQuery the protein sequence for the viral protein on NCBI’s protein database (: https://www.ncbi.nlm.nih.gov/protein/[href=https://www.ncbi.nlm.nih.gov/protein/]). An example query output is given in Figure 4[href=https://www.wicell.org#fig4].\nNote: In some instances, it may be useful to filter for the organism, as shown in Figure 4[href=https://www.wicell.org#fig4].\nQuery the protein in the Protein Data Bank.\nIf you can’t find a quality structure, move on to step c.\nOtherwise, you may download the structure and skip to step d.\nNote: You may query the protein name, or the sequence. A good structure should be of high quality, high resolution (low Angstroms), complete (full sequence included), and a realistic environment.\nSubmit the protein sequence from step A to I-TASSER to be modeled.\nNote: If you do not have an account, you will have to register an account. For replication, we generally ignore the options for modeling. A view of the I-TASSER interface is shown in Figure 5[href=https://www.wicell.org#fig5].\nDownload the file corresponding to the produced structure.\nSubmit this file to Dali under the PDB search header.\nWhen your results are finished from Dali, open a python terminal, then type.\nimport compute_features\ncompute_features.parse_dali(html, gene, path=directory)\nwhere ‘html’ is the link given from the Dali run with the results, ‘gene’ is the name of the viral protein, and ‘directory’ is the location to write to.",
    "Afterwards, run the final three cells of analyze_all_variants.ipynb. The third-to-last and second-to-last cells create helping dictionaries. The last cell cross-references structural homologs against proteins known to interact with the host protein of interest.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1940-Fig4.jpg\nFigure 4. A view of the NCBI Protein database interface\nThis is the result of a query of “SARS-CoV-2 ORF7a”. Several resulting proteins’ sequences are shown, as well as multiple possible filters (circled in red) to apply to results. Link: https://www.ncbi.nlm.nih.gov/protein/[href=https://www.ncbi.nlm.nih.gov/protein/].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1940-Fig5.jpg\nFigure 5. A view of the I-TASSER webserver interface\nAn example sequence and protein ID have been entered. This website requires a user email and password, but optionally allows for more constraints. We don’t use these constraints.\nAlign structures to identify shared motifs\nTiming: 1 day\nThis step will visualize the shared structural motifs between viral proteins and homologous host proteins that also bind to other host proteins. In particular, this step will identify the regions containing these structural motifs, which may particularly impact binding between host and viral proteins. This section doesn’t involve variants identified in prior sections.\nFor each viral protein that interacts with one of the host proteins associated with your biological process of interest. An example output is shown in Figure 6[href=https://www.wicell.org#fig6].\nOpen the I-TASSER modeled structure from the previous section in Pymol.\nIn Pymol, fetch the associated homologous structures. For each homologous structure identified for the viral protein, ABCD_E.\nfetch ABCD\nIn the ‘all’ section on the right, click ‘H’, then ‘everything’.\nIn the ‘all ‘section on the right, click ‘S’, then ‘cartoon’.\nSelect ‘Display’, then ‘Sequence’.\nFor each homologous structure, highlight all chains not involved (everything except for E here). Then, in the ‘(sele)’ section on the right, click ‘H’, then ‘everything’.\nFor each homologous structure, highlight the chain involved (E). Then, in the Pymol terminal,",
    "super ABCD, I-TASSER_model\nto structurally align the homolog and the I-TASSER viral protein model.\nSave the Pymol session or the image, as needed.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1940-Fig6.jpg\nFigure 6. View of structurally aligned proteins in Pymol\nThe proteins include SARS-CoV-2 ORF7a protein, and two human proteins with significant structural similarity. Additionally, the Pymol console is shown (at top), and the list of proteins is shown at the right along with additional Pymol options.\nDock viral and host proteins\nTiming: 10 days\nThis step will indicate likely binding sites of viral and host proteins. This may further indicate vital regions that will impact viral binding and its influence on the biological process. Variants included in these regions may strongly impact binding of viral and host proteins.\nFor each viral protein and interacting host protein.\nFind the protein sequence of the host protein and model this structure in I-TASSER as described above.\nSubmit both the host protein and viral protein structures to ZDock.\nWhen Zdock is finished, load each resulting PDB file into Pymol and manually curate each docking for feasibility.\nNote: If necessary, a literature review may indicate vital positions that are involved in binding.\nFor each acceptable output docking from ZDock, give to Rosetta Prepack as\n/PATH/TO/ROSETTA/EXECS/docking_prepack_protocol.linuxgccrelease -nstruct 1 -detect_disulf true -rebuild_disulf true -ex1 -ex2aro -overwrite -ignore_zero_occupancy false -in:file:s $PDB -unboundrot $pdb -partners A_B -suffix $SUFFIX -out:file:scorefile ${SUFFIX}.sc\nWhere /PATH/TO/ROSETTA/EXECS/ is the global path to the Rosetta executables, $PDB is the path to the docking file from ZDOCK, A and B are the names of the chains (viral and host proteins), $SUFFIX is the suffix of the output files you want to use.\nThen, use.\n/PATH/TO/ROSETTA/EXECS/docking_protocol.linuxgccrelease -nstruct 1 -out:pdb_gz true -ex1 -ex2aro -in:file:s $PDB -partners A_B -suffix $SUFFIX -out:file:scorefile ${SUFFIX}.sc\nAgain, set $PDB, A and B, and $SUFFIX appropriately.",
    "Use scores_to_csv to compile the score files:\npython scores_to_csv.py --directory directory --col total_score --prefix viral_gene_host_gene\nwhere directory is the directory containing all the score files (.sc) generated by the previous step and viral_gene_host_gene is the names of the viral and host genes (you can modify this as desired).\nRead through scores.tsv. The last number in each score/PDB file name indicates the Rosetta model generated, and the models with the lowest total_score should be selected.\nFor each of the optimal docking models, load the PDB into Pymol.\nVisualize as desired. We suggest hiding everything then showing cartoon, and displaying sequence as described previously. Then, next to ‘all’ on the right, select ‘C’, then ‘by chain’, then ‘by chain’. A view of the Pymol interface is shown in Figure 7[href=https://www.wicell.org#fig7].\nClick ‘File’, then ‘Run’, then browse to the location of ‘InterfaceResidues.py’.\nThen, in the Pymol terminal, enter.\ninterfaceResidues docked_struct\nwhere docked_struct is the docking of the viral and host proteins.\nAll highlighted positions are amino acids that interact between the two proteins and may warrant further focus.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1940-Fig7.jpg\nFigure 7. View of the menus of Pymol\nYellow indicates the visualization options, red indicates standard menus, and purple shows the protein sequences. A docked structure consisting of two proteins is shown. The two chains are colored differently as described in step 9, part i."
  ],
  "subjectAreas": [
    "Bioinformatics",
    "Computer Sciences",
    "Health Sciences",
    "Genetics",
    "Molecular Biology"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}