{
  "id": 19855,
  "origin_website": "Wiley",
  "title": "Using Nanocompore to Identify RNA Modifications from Direct RNA Nanopore Sequencing Data",
  "procedures": [
    "Here, users will start from raw nanopore sequencing data for use in Nanocompore for a comparative statistical test to identify RNA modifications between two conditions, a test and a reference condition. The raw fast5 files will be basecalled into fastq files that will be aligned to a reference transcriptome. Using the aligned bam file, the fastq files, and the fast5 files, the ionic current for each read in the fast5 files will be aligned to the reference using a signal-to-sequence alignment algorithm (resquiggling). This provides a mapping of all the ionic current features from each read to specific positions in the reference transcriptome. These signal-to-sequence alignment files can divide the ionic current data for a single position into multiple lines, and thus these files need to be preprocessed for the position-by-position statistical comparison between experimental conditions to detect RNA modifications. If executed correctly, there will be three database files, a log file, and a nanocompore_results.tsv file that details the probability of detecting a modification at each position in the reference file with sufficient coverage. This workflow is also described online at https://nanocompore.rna.rocks/[href=https://nanocompore.rna.rocks/].\nMaterials\nHardware\nComputational environment with at least 3 cores\nSoftware\npython (version 3.7) (Python Language Reference 2009[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0036])\nONT guppy basecaller (version 4.4.2) (https://community.nanoporetech.com[href=https://community.nanoporetech.com])\n               \nGuppy version 4.4.2 was used in developing and testing Nanocompore. Newer versions of the guppy basecaller are available from Oxford Nanopore Technologies and appear to work as expected with Nanocompore.\nminimap2 (version 2.20-r1061) (https://github.com/lh3/minimap2[href=https://github.com/lh3/minimap2]) (Li, 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0026])\nsamtools (version 1.12) (http://www.htslib.org[href=http://www.htslib.org]) (Danecek et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0011])\nnanopolish (version 0.13.3) (https://github.com/jts/nanopolish[href=https://github.com/jts/nanopolish]) (Simpson et al., 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0038])\nnanocompore (version 1.0.3) (https://nanocompore.rna.rocks[href=https://nanocompore.rna.rocks]) (Leger et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0024])\n               \nNanocompore can be installed with at least three different methods. See https://nanocompore.rna.rocks/installation/[href=https://nanocompore.rna.rocks/installation/]for detailed up-to-date installation instructions.\nFiles\nFast5 file(s) from experimental condition 1 (typically, these are wild-type samples where RNA modifications are to be identified)",
    "Fast5 file(s) from experimental condition 2 (typically, these are a KO/KD of a particular modification writing enzyme which are greatly reduced or devoid of the modification of interest)\n               \nThe data availability section has links to the data used for this manuscript and they can be downloaded from their cited repositories. A detailed description of the fast5 format can be found in supplementary note 1 from the creators of the SLOW5 format (Gamaarachchi et al., 2022[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0016]).\nReference transcriptome fasta file [e.g., gencode.v37.transcripts.fa (Frankish et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0013])]\nCAUTION: Different fonts can change some special characters, e.g., the hyphen; therefore you may need to write out the commands instead of copy-pasting them as directed in this protocol.\nCAUTION: All installed software are assumed to be in the bash path.\nCAUTION: This protocol has been tested on the listed software versions. Alternate software versions may still function as expected.\nCAUTION: For the commands below, the files are assumed to be in the directory from where the command is executed. A file path must be provided for each file that is in a different directory.\n1. Basecall the Fast5 files with the latest version of the guppy basecaller:\n         \nguppy_basecaller -i {raw_fast5_dir} -s {dest_dir} --flowcell {flowcell_id} --\nkit {kit_id} -r --calib_detect --enable_trimming true --trim_strategy rna --\nreverse_sequence true",
    "raw_fast5_dir is the directory where the fast5 data are located, dest_dir is the directory in which to save the resulting fastq files, flowcell_id is the ID for the flowcell type used in the sequencing experiment, and kit_id is the RNA library kit ID used for the sequencing experiment. If unknown, the flowcell_id and kit_id can be found in the fast5 file, which can be read using software such as HDFView. If the system running the basecaller has access to GPUs, the GPU version of guppy can be used to reduce the runtime by 100 to 1000 fold.\n2. Concatenate the output fastq files into a single fastq file:\n         \ncat {dir_to_guppy_output}/*.fastq > {basecalled_fastq}\ndir_to_guppy_output is the output directory from guppy and basecalled_fastq is a file name for the concatenated fastq files for that sequencing experiment.\n3. Align the fastq files to a reference using minimap2 and filter the alignments with samtools:\n         \nminimap2 -ax map-ont -L {transcriptome_fasta} {basecalled_fastq} | samtools\nview -bh -F 2324 -q 10 | samtools sort -O bam > {aligned_reads_bam}\nNanocompore assumes that the data are aligned to a transcriptome (not genome) reference in a non-spliced fashion. Example transcriptome reference fasta files can be downloaded directly from Gencode for human and mouse (Frankish et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0013]).\nAll unmapped reads, secondary and supplementary alignments, and reads aligned to the reverse strand need to be filtered from the bam files (SAM flag 2324). We also recommend that alignments with a low alignment score (MAPQ<10) be discarded. Finally, alignments must be sorted. This command accomplishes all these tasks without saving any of the intermediate files.\n4. Index the sorted and filtered bam file with samtools:\n         \nsamtools index {aligned_reads_bam}\nThis index is necessary to efficiently search the bam file in all downstream processing.",
    "5. Index the fastq file with the corresponding fast5 files using nanopolish:\n         \nnanopolish index -s {sequencing_summary.txt} -d {raw_fast5_dir}\n{basecalled_fastq}\nThis index is necessary to efficiently search the fast5 files directory in all downstream processing. basecalled_fastq is the concatenated fastq file from step 2, raw_fast5_dir is the directory where the fast5 files are stored, and sequencing_summary.txt is the sequencing_summary.txt file output from basecalling with guppy in step 1.\n6. Align the ionic current segments to the nucleotide sequence with nanopolish:\n         \nnanopolish eventalign --reads {basecalled_fastq} --bam {aligned_reads_bam} --\ngenome {transcriptome_fasta} --print-read-names --scale-events --samples >\n{eventalign_reads_tsv}\nThe ionic current segments must be mapped to the reference positions just like the nucleotides must be mapped to the reference, so that the ionic current features can be compared to the other ionic current features derived from the same position in other molecules. basecalled_fastq is the concatenated fastq file from step 2, aligned_reads_bam is the bam file output from step 3, transcriptome_fasta is the reference file used for the alignment in step 3, and eventalign_reads_tsv is the output file from nanopolish eventalign. The nanopolish eventalign optional arguments –print-read-names, –scale-events, and –samples are all mandatory for Nanocompore, but nanopolish will execute without them. Ensure that these optional arguments are used when running nanopolish eventalign. This step is often a time bottleneck and can take a few hours or up to a few days to complete, depending on the sequencing depth and IO speeds of the environment. A faster, GPU-accelerated implementation of the nanopolish eventalign algorithm is provided by f5c, which can be used to speed up this step (see Alternate Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0002]).\n7. Collapse the eventalign_reads_tsv file into unique kmers per read with Nanocompore eventalign_collapse:\n         \nnanocompore eventalign_collapse -t {n_threads} -i {eventalign_reads_tsv} -o\n{eventalign_collapsed_reads_tsv}",
    "The nanopolish output can divide the data for each position over multiple lines, and they must be collapsed into a single line for a proper positional pairwise comparison. The file eventalign_reads_tsv is the output file from nanopolish eventalign in step 6, and n_threads is the desired number CPU threads to use (minimum 3). If nanocompore was installed using a virtual environment, the environment must be activated before executing this command.\n8. Repeat steps 1 through 7 for each sequencing experiment for both conditions.\nThis can be done in series or in parallel, depending on the available computational resources. Additionally, steps 6 and 7 can be combined into a single command with a UNIX pipe to save IO write time and storage space.\n9. Compare the ionic current characteristics of reads from two conditions to detect the presence of RNA modifications with Nanocompore sampcomp:\n         \nnanocompore sampcomp -1 {C1_1},{C1_2},...{C1_N} -2 {C2_1},{C2_2},...{C2_N} -f\n{transcriptome_fasta} --label1 {Cond1} --label2 {Cond2} -o\n{dir_output_results}\nC1_1, C1_2, C1_N are the .tsv files produced by Nanocompore eventalign_collapse for experimental condition 1, whereas C2_1, C2_2, and C2_N are the .tsv files produced by Nanocompore eventalign_collapse for experimental condition 2.\nThere are several optional arguments that can be included in the above command, such as --bed {genomic coordinates transcript annotation bed file}, which will include the genomic coordinates for each transcript position in the final nanocompore_results.tsv file:\n--min_coverage {x_coverage} which is the minimum number of reads per replicate required for the analysis;\n--nthreads or -t {n_threads} which will set the number of threads to use (minimum required 3);\n--overwrite or -w which will allow Nanocompore to overwrite the results from a previous execution of Nanocompore sampcomp with the same name;\nand several more. To get a full list of all the optional arguments for Nanocompore, use the command nanocompore sampcomp -h.",
    "Nanocompore sampcomp will write a log file, three database files, and a nanocompore_results.tsv file to the dir_output_results directory. The log file will contain useful information about the run, such as which parameters were used and which transcripts met the minimum necessary coverage (default 30 reads per replicate), and a timestamp for each process that was started. The nanocompore_results.tsv file will contain the metadata and statistical testing results for each position of each reference transcript. The nanocompore_results.tsv file can be further filtered using user-defined p-value thresholds to determine the modified positions within the dataset. Recommended thresholds are 0.01 and 0.5 for the p-value and the absolute value of the log odds ratio, respectively. These statistics will be further elaborated upon in the Understanding Results section. If Nanocompore was installed using a virtual environment, the environment must be activated before executing this command.",
    "This alternate protocol is conceptually similar to the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001] and will follow many of the same steps: converting the ionic current signals into nucleotides (basecalling); aligning the resulting fastq file to the reference transcriptome file; collapsing the resquiggled data; and conducting the positional pairwise comparison between sample conditions. However, the alignment of the ionic current segments to the reference transcriptome (resquiggling) is done using the software f5c (Gamaarachchi et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0015]) instead of nanopolish. F5c implements the same functionality of nanopolish but has a significantly faster runtime. At the time of Nanocompore development, f5c was not yet available, so the official workflow presented by Leger et al. (2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0024]) uses Nanopolish. For consistency, our default protocol also uses Nanopolish; however, users are encouraged to apply this alternate protocol instead, which leads to identical results with lower execution time. The output files from this alternate protocol are identical to those from the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001], namely three database files, a log file, and a nanocompore_results.tsv file that contains the probability of containing a modification for each position in the reference with sufficient coverage (by default 30 reads per replicate). The p-values from the statistical tests in the nanocompore_results.tsv file can be filtered based on the users’ thresholds to determine the positions of the modifications of interest.\nAdditional Materials (also see Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001])\nSoftware\nf5c (version 0.6) (https://github.com/hasindu2008/f5c[href=https://github.com/hasindu2008/f5c]) (Gamaarachchi et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0015])\n1. Follow steps 1-4 of the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001].\n2. Index the fastq file with the corresponding fast5 files with f5c:\n         \nf5c index --iop {Number of Input/output processes} -s {sequencing_summary.txt}\n-d {raw_fast5_dir} {basecalled_fastq}",
    "basecalled_fastq is the concatenate fastq file from Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001], step 2, raw_fast5_dir is the directory where the fast5 files are stored, Number of Input/output processes is the number of threads used for IO operations, and sequencing_summary.txt is the sequencing_summary.txt file output from basecalling with guppy in the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001], step 1.\n3. Align the ionic current segments to the nucleotide sequence with f5c:\n         \nf5c eventalign -t {Number of processing threads} --iop {Number of Input/output\nprocesses} -r {basecalled_fastq} -b {aligned_reads_bam} -g\n{transcriptome_fasta} --rna --secondary=yes, --min-mapq 0 --print-read-names -\n-scale-events --samples -o {eventalign_reads_tsv}\nbasecalled_fastq is the concatenated fastq file from Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001], step 2, aligned_reads_bam is the bam file output from Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001], step 3, transcriptome_fasta is the reference file used for the alignment in Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001], step 3, and eventalign_reads_tsv is the output file from f5c eventalign in step 3 of Alternate Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0002]. The f5c eventalign optional arguments –print-read-names, –scale-events, and –samples are all mandatory for Nanocompore, but f5c will still execute without them. Ensure that these optional arguments are used when running f5c eventalign. Also note that min-mapq is set to 0 and secondary alignments are turned on. This is done to match the default settings of nanopolish. Furthermore, f5c does not automatically detect if the data are from a direct RNA or DNA sequencing experiment. The optional argument –rna is required for this protocol and will cause errors if not used. Number of processing threads is the number of threads used to process the data, and Number of Input/output processes is the number of threads used for IO operations. Number of Input/output processes should not be larger than the Number of processing threads.\n4. Collapse the eventalign_reads_tsv file into unique kmers per read with Nanocompore eventalign_collapse:\n         \nnanocompore eventalign_collapse -t {n_threads} -i {eventalign_reads_tsv} -o\n{eventalign_collapsed_reads_tsv}",
    "The f5c output can divide the data for each position over multiple lines, and they must be collapsed into a single line for a proper positional pairwise comparison. The eventalign_reads_tsv is the output file from f5c eventalign in step 3 and n_threads is the number of desired CPU threads to use (minimum 3). If Nanocompore was installed using a virtual environment, the environment must be activated before executing this command.\n5. Repeat steps 1 through 4 from Alternate Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0002] for each sequencing experiment for both conditions.\nThis can be done in series or in parallel, depending on the available computational resources. Additionally, steps 3 and 4 can be combined into a single command with a UNIX pipe to save IO write time and storage space.\n6. Follow step 9 of the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001].",
    "This alternate protocol details how to run the entire Nanocompore pipeline using a nextflow pipeline manager. This has the advantage that all the dependent software tools (such as guppy, samtools, f5c, and Nanocompore) are contained within images, which improves the reproducibility of the protocol by limiting software installation and system variation. The user will create a sample.txt file which contains the sample labels, condition labels, and paths to the corresponding directory of fast5 files, which will allow the pipeline to access the correct data. Then, the nextflow pipeline must be configured with paths to files such as the references, the Nanocompore parameters, and the output directory path. The final step is to initiate the nextflow pipeline, which will then execute all the steps detailed in the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001]. Output from this alternate protocol is identical to that from the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001] (three database files, a log file, and a nanocompore_results.tsv file). The nanocompore_results.tsv file contains the probability of a modification existing at each position in the reference, which can be filtered based on users’ thresholds to determine the modified positions.\nMaterials\nHardware\nComputational environment with at least 3 cores\nSoftware\nnextflow (version 22.04.5.5708) (Di Tommaso et al., 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0012])\nsingularity (version 3.5.3-1.1.el8) (Kurtzer, Sochat, & Bauer, 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0023])\nnanocompore nextflow pipeline (https://github.com/tleonardi/nanocompore_pipeline[href=https://github.com/tleonardi/nanocompore_pipeline])\nFiles\nFast5 file(s) from experimental condition 1 (typically, these are wild-type samples where RNA modifications are to be identified)\nFast5 file(s) from experimental condition 2 (typically, these are a KO/KD of a particular modification-writing enzyme which are greatly reduced or devoid of the modification of interest)",
    "The data availability section has links to the data used for this manuscript, and they can be downloaded from their cited repositories. A detailed description of the fast5 format can be found in supplementary note 1 from the creators of the SLOW5 format (Gamaarachchi et al., 2022[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0016]).\nReference transcriptome fasta file (e.g., gencode.v37.transcripts.fa (Frankish et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-bib-0013]))\n1. Prepare the tab separated sample.txt file with the following format.\n         \ntable:\n﻿0,1,2\nSampleName,Condition,DataPath\nKD1,KD,/path/to/KD1_fast5_directory\nKD2,KD,/path/to/KD2_fast5_directory\nWT1,WT,/path/to/WT1_fast5_directory\nWT2,WT,/path/to/WT2_fast5_directory\nThe sample.txt file will be used by the nextflow pipeline to find all the fast5 file directories necessary to detect the RNA modifications for the experiment. The header line is required, as are all three columns of data (the sample name, the condition label, and the path to the directory which contains the fast5 files) with at least one sample for each of the two conditions. Each sample name must be unique, and there can only be two conditions. There is no limit to the number of samples for each of the two conditions.\n2. Configure the nextflow pipeline by editing the nextflow.config.template file",
    "All parameters that must be updated in the nextflow.config.template file are described in the comments section of the file. The only two options that require elaboration are the target_trancripts and input_is_basecalled parameters. The target_transcripts parameter is used to provide the file path to a text file that lists Ensembl transcript IDs of interest, one Ensembl transcript ID per line. Any transcript not present in this list will be discarded from the reference. The parameter input_is_basecalled initializes the pipeline after the basecalling step (step 1 of the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001]). If this option is chosen, the paths in the sample.txt file must be to basecalled fast5 files. Once the nextflow.config.template file has been updated by the user, it should be saved as a new filename without the .template extension (nextflow.config).\n3. Run the nextflow pipeline:\n         \nnextflow run pipeline.nf\nThis will initiate the nextflow pipeline which will conduct all the steps of the protocol and produce the same nanocompore_results.tsv file described in Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.683#cpz1683-prot-0001]."
  ],
  "subjectAreas": [
    "Molecular Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}