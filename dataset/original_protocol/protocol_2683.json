{
  "id": 2834,
  "origin_website": "Cell",
  "title": "HSDecipher: A pipeline for comparative genomic analysis of highly similar duplicate genes in eukaryotic genomes",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nDownstream analysis of HSD statistics\nTiming: ∼2 min (Depending on file sizes and internet speed)\nThis step performs a preliminary evaluation of the HSD results obtained using the HSDFinder tool.8[href=https://www.wicell.org#bib8]\nNote: By using different thresholds for amino acid length and pairwise identities, users can filter the groups of HSDs from the all-against-all BLAST protein sequence similarity search (E-value cut-off ≤1e-10). We used a short form of the sequence similarity assessment metrics, such as 90%_10aa, which refers to amino acid pairwise identity ≥90%, and amino acid aligned length variance ≤10. When naming the files, users should adhere to this format (species_name.identity_length.txt; e.g., “Chlamydomonas_reinhardtii.90_10.txt”), thereby allowing recognition of the output by downstream scripts.\nUsers can first acquire the HSDecipher package from GitHub (https://github.com/zx0223winner/HSDecipher[href=https://github.com/zx0223winner/HSDecipher]).\nNote: In the HSDs folder, we have prepared an HSDFinder analysis for three model species: C. reinhardtii, A. thaliana, and H. sapiens. To save processing time, the comparatively small genome of C. reinhardtii is used as the study case.\n# Clone the package and move to the HSDecipher/directory\n>git clone https://github.com/zx0223winner/HSDecipher[href=https://github.com/zx0223winner/HSDecipher]\n# install python3 and relevant libraries\npip3 install python\n# Chlamydomonas_reinhardtii.90_10.txt\nXP_001689821.1 XP_001689821.1; XP_001690281.2 241; 241 Pfam PF00011;\n          PF00011 Hsp20/alpha crystallin family; Hsp20/alpha crystallin family\n          2.0E-10; 2.8E-10 IPR002068; IPR002068 Alpha crystallin/Hsp20 domain;\n          Alpha crystallin/Hsp20 domain\nUsers can run the Python scripts HSD_statistics.py and HSD_categories.py, which can be found in the GitHub main directory.\ntable:files/protocols_protocol_2339_1.csv\ntable:files/protocols_protocol_2339_2.csv\n# HSD_statistics.py\n>python3 HSD_statistics.py <path to HSD species folder>\n          <format of HSD file. e.g., 'txt' or 'tsv'>\n          <output file name. e.g., species_stat.tsv>\n# In our case of HSD data in C. reinhardtii genome\n>Python3 HSD_statistics.py /HSDs_folder/Chlamydomonas_reinhardtii\n          txt Chlamy_stat.tsv\n# HSD_categories.py\n>python3 HSD_categories.py <path to HSD species folder>\n          <format of HSD file. e.g., 'txt' or 'tsv'>\n          <output file name. e.g., species_groups.tsv>",
    "# In our case of HSD data in C. reinhardtii genome\n>Python3 HSD_categories.py /HSDs_folder/Chlamydomonas_reinhardtii\n          txt Chlamy_groups.tsv\nCritical: In Table 1[href=https://www.wicell.org#tbl1], ‘Candidate HSDs’ indicates the number of highly similar gene duplicate candidates; True HSDs are duplicate groups satisfying the respective thresholds and gene copies containing the same domain(s); Non-redundant gene copies are the number of unique gene copies in each group of HSDs; Gene copies are the total number of gene copies in each group of HSDs; The number of spaces indicates the number of gene copies encoding the putative function without any conserved domain(s) with hits to the Pfam database (e.g., hypothetical proteins); Capturing value indicates the levels of predicted HSDs; Performance score is a value that allows users to assess the performance of the HSD retreival process. Troubleshooting 1[href=https://www.wicell.org#sec6.1].\nCritical: In Table 2[href=https://www.wicell.org#tbl2], ‘2-group HSDs’ refers to the number of HSD categories containing only two gene copies. Troubleshooting 2[href=https://www.wicell.org#sec6.3].\nUsing a series of combination thresholds to expand an HSD gene dataset\nTiming: ∼2 min (Depending on file sizes, computing power, and internet speed) (for step 3)\nUsers will require the Python scripts HSD_add_on.py and HSD_batch_run.py to run the following analysis.\nHSD_add_on.py can add newly acquired HSD data to original HSD output, thereby enlarging the HSD candidate dataset.\n# HSD_add_on.py\n#HSD_add_on.py python3 HSD_add_on.py -i <inputfile> -a\n          <adding_file> -o <output file>\n# In our case of HSD data in C. reinhardtii genome\n>Python3 HSD_add_on.py -i /HSDs_folder/Chlamydomonas_reinhardtii/\n          Chlamydomonas_reinhardtii.90_10.txt -a\n          Chlamydomonas_reinhardtii.90_30.txt -o\n          Chlamydomonas_reinhardtii.90_10_90_30.txt\nNote: For example, HSDs identified at a threshold of 90%_30aa were added to those identified at a threshold of 90%_10aa (denoted as “90%_30aa+90%_10aa”).\nCritical: Any redundant candidate HSDs acquired at each combination threshold are removed if the more relaxed threshold (e.g., 90%_30aa) retrieves the identical genes from the stricter cut-off (e.g., 90%_10aa).\nTroubleshooting 3[href=https://www.wicell.org#sec6.5].\n# HSD_batch_run.py\n>python3 batch_run.py -i <inputfolder>",
    "# In our case of HSDs data\n>Python3 HSD_categories.py /HSDs_folder/\nCritical: HSD_batch_run.py can execute a series of combination threshold analyses at once. Users should back up the original HSDs folder before running the HSD_batch_run.py script. To minimize redundancy and to acquire a larger dataset of HSD candidates, we processed each selected species with the following combination of thresholds:\nTroubleshooting 4[href=https://www.wicell.org#sec6.7].\n# Chlamydomonas_reinhardtii.90_10.txt\nXP_001689450.1 XP_001689450.1; XP_001700901. 1 280; 276 Pfam PF01459;\n          PF01459 Eukaryotic porin; Eukaryotic porin 1.3E-34; 3.5E-39 IPR027246;\n          IPR027246 Eukaryotic porin/Tom40; Eukaryotic porin/Tom40\nXP_001689455.1 XP_001689455.1; XP_001698498.1 194; 161 Pfam PF08534;\n          PF08534 Redoxin; Redoxin 4.2E-35; 1.1E-36 IPR013740; IPR013740\n          Redoxin; Redoxin\nNote: The resulting output file of HSDs based on a combination of thresholds will appear in HSDs_folder, e.g., “Chlamydomonas_reinhardtii.90_10.txt”, “Arabidopsis_thaliana.90_10.txt” and “Homo_sapiens.90_10.txt”.\nDownstream comparative genomic analysis of HSDs in eukaryotic genomes\nTiming: ∼4 min (Depending on the size of the data, computing power, and internet speed) (for step 4)\nIn this step, users can apply the HSD_heatmap.py script on the previous generated HSD results to perform a comparative analysis.\nUsers can compare different thresholds of HSDs in one genome or HSDs retrieved from different genomes in a heatmap (Figures 1[href=https://www.wicell.org#fig1] and 2[href=https://www.wicell.org#fig2]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2339-Fig1.jpg\nFigure 1. Heatmap illustrating results obtained using different thresholds for the detection of highly similar duplicates (HSDs) in the genome of C. reinhardtii using the HSDecipher pipeline\nThe matrix in the heatmap refers the number of HSDs retrieved using different thresholds (e.g., 90_10, which refers to amino acid pairwise identity ≥90%, and amino acid aligned length variance ≤10) classified based on their KEGG functional categories.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2339-Fig2.jpg\nFigure 2. Heatmap showing results of running the HSDecipher pipeline on the predicted proteomes of C. reinhardtii, A. thaliana and H. sapiens\nThe matrix in the heatmap refers the number of HSDs across three eukaryotic species classified by their KEGG functional categories.",
    "table:files/protocols_protocol_2339_3.csv\nNote: the data can be derived from multiple genomes with a species or the genomes of different species. The generated tabular file (Table 3[href=https://www.wicell.org#tbl3]) collects gene duplicates predicted to be involved in the same biological process or biochemical pathway, which can be used for natural selection analysis.\n# HSD_heatmap.py\n# For intra-species\n>python3 HSD_heatmap.py -f <HSD file folder> -k <KO file\n          folder> -r <width of output heatmap, e.g., 30 pixels> -c\n          <height of output heatmap, e.g., 20 pixels>\n>python3 HSD_heatmap.py -f /HSDs_folder/Chlamydomonas_reinhardtii/\n          -k /ko/ -r 30 -c 20\nNote: The generated examples can be found in the heatmap folder under the HSDecipher main directory, such as the high resolution heatmap file “Chlamydomonas_reinhardtii_output_heatmap.eps” and the tabular file “Chlamydomonas_reinhardtii_output_heatmap.tsv”.\n# HSD_heatmap.py, for inter-species analysis\n>python3 HSD_heatmap.py -f <HSD file folder> -k <KO file\n          folder> -r <width of output heatmap, e.g., 30 pixels > -c\n          <height of output heatmap, e.g., 20 pixels >\n>python3 HSD_heatmap.py -f /HSDs_folder/ -k /ko/ -r 30 -c 20\nNote: The inter-species analysis example can be found in the heatmap folder under the HSDecipher main directory with the name “test_output_heatmap.eps” and “test_output_heatmap.tsv”.\nCritical: It is important to name the KEGG pathway KO file and HSD result file correctly so that they can be recognized by the HSDecipher scripts. For example, the KO information file for each species should be formatted as follows: “species_name.ko.txt” (e.g., Chlamydomonas_reinhardtii.ko.txt); the HSDs results file should be named “species_name.thresholds_thresholds.txt” (e.g., Chlamydomonas_reinhardtii.90_10.txt).\nTroubleshooting 5[href=https://www.wicell.org#sec6.9]."
  ],
  "subjectAreas": [
    "Evolutionary Biology",
    "Genomics",
    "Bioinformatics",
    "Genetics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}