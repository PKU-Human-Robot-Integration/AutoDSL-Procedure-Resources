{
  "id": 3913,
  "origin_website": "Cell",
  "title": "Computational pipeline for designing guide RNAs for mismatch-CRISPRi",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nStep 1: Find sgRNAs\nTiming: 5 min\nAlthough CRISPRi can target both coding sequences and promoters (Gilbert et al., 2013[href=https://www.wicell.org#bib5]; Cui et al., 2018[href=https://www.wicell.org#bib4]), in prokaryotes, transcriptional interference is most effective when blocking RNA polymerase elongation (Rishi et al., 2020[href=https://www.wicell.org#bib18]). Targeting within the protein coding sequence of a gene guarantees an elongating RNAP and does not require knowledge of promoters. For dCas9, it has furthermore been shown that knockdown efficacy is higher when targeting the non-template strand of a gene (Figures 3[href=https://www.wicell.org#fig3]A and 3B). The computational pipeline therefore screens for sgRNAs by identifying PAM sequences (NGG) on the template strand of genes. The 20 nucleotides upstream of a PAM sequence corresponds to the spacer sequence of an sgRNA that would target the complementary non-template strand, causing effective expression knockdown (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/636-Fig3.jpg\nFigure 3. Impact of targeting strand and offset on expression knockdowns and relative fitness\n(A and B) Expression knockdown of sgRNAs targeting the template (T) or non-template (NT) strands (box = interquartile range, horizontal line = median, wishers = data within 1.5 times interquartile range above or below box, dots = outliers). (A) Relative GFP expression in strains expressing gfp-targeting sgRNAs from a constitutive promoter in B. subtilis (red) and E. coli (blue) (Hawkins et al., 2020[href=https://www.wicell.org#bib7]). (B) Relative fitness of sgRNAs targeting essential genes using the template or non-template strand in two different E. coli strains with high (green) or low (purple) dCas9 expression (Cui et al., 2018[href=https://www.wicell.org#bib4]).",
    "(C and D) Impact of sgRNA offset – distance to start codon (nt) – on expression knockdown. (C) Expression knockdown of sgRNAs targeting the non-template strand of gfp in B. subtilis (red) and E. coli (blue). (D) Relative fitness of sgRNA targeting non-template strand of essential genes in E. coli with high (green, upper regression: p < 0.01, R2=0.003) and low (purple, lower regression: P < 0.001, R2=0.005) dCas9 expression.\nTo identify all sgRNAs targeting the non-template strand of the protein coding sequence of the gene(s) of interest, one can run the first step of the computational pipeline in the following way:\n>python <path to “generate_sgrnas.py” script>\n--genbank <path to genbank file>\n--locus_tag <locus_tag>\n--step find\nHere, the --genbank and --locus_tag are the only mandatory arguments and specify the path to the GenBank file and the locus tag(s) (not gene names) of the gene(s) of interest, respectively.\nThe --step argument is used to only run the first step of the computational pipeline (i.e., find). Without specifying this argument, the script will automatically go through all steps. For a complete list of arguments and the default settings see Table 1[href=https://www.wicell.org#tbl1].\ntable:files/protocols_protocol_636_1.csv\nNote: one can also run the help-command:\n>python <path to “generate_sgrnas.py” script> -h\nStep 1 will generate a CSV file (“sgRNA.csv”) in the same folder as the python script, which lists all sgRNAs targeting the gene(s) of interest, as well as their properties (Figure 2[href=https://www.wicell.org#fig2] and Table 2[href=https://www.wicell.org#tbl2]). This includes:\ntable:files/protocols_protocol_636_2.csv\nIndex of sgRNA (n)\nOffset between the sgRNA and the start codon\nGC content of sgRNA spacer\nsgRNA spacer sequence (20nt upstream of the PAM)\nPAM sequence\nSequence downstream of the PAM\nFull sequence: sgRNA spacer + PAM + downstream sequence\nSeed sequence from sgRNA spacer used to identify potential off-target hits",
    "Number of potential off-target hits based on seed sequence\nThese properties will be used in step 2 to filter against sgRNAs with unwanted properties. Below we give some examples on what input arguments could be used for running the first step of the pipeline.\nExamples\nTo generate the list of all possible sgRNAs for the essential gene, dnaA (locus tag = BSU_00010), in Bacillus subtilis (GenBank = GCF_000009045.1_ASM904v1_genomic.gbff). One can run the following command:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step find\nTo examine multiple genes, provide a list of locus tags. For example, to identify the sgRNAs of both DnaA and DnaN one can run the following command:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010,BSU_00020\n--step find\nOne can examine all genes using the following command:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag all\n--step find\nOne can also specify the path and file name of the CSV file generated in step 1. By default the CSV file is saved in the same folder as your python script and is named “sgRNA.csv”. In order to change the default settings run the following command:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag all\n--step find\n--file_find new_name.csv",
    "The CSV file stores information for each of the sgRNAs (Figure 2[href=https://www.wicell.org#fig2]). For example, the computational pipeline determines the number of potential off-target hits in the genome based on sgRNA seed sequence. By default, the seed sequence equals the 9 PAM-proximal nucleotides of an sgRNA spacer. The length of the seed sequence is based on a study showing that DNA complementarity of 9 nucleotides proximal to the PAM is sufficient to cause off-target knockdown effects (Cui et al., 2018[href=https://www.wicell.org#bib4]). Within our pipeline, one could however adjust the size of the seed sequence using --off_target_seed. For example, the following command line limits the seed sequences to 8 nucleotides only and thus finds all off-target hits for this shorter sequence:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step find\n--off_target_seed 8\nFinally, one could specify the number of nucleotides downstream from the PAM that are included for further analyses (--downstream). As we will detail below, the downstream sequence of the PAM can affect the efficacy of CRISPRi-mediated expression knockdown, and therefore plays an important role in filtering out potentially weak sgRNAs. Based on a previous analysis (Calvo-Villamañán et al., 2020[href=https://www.wicell.org#bib3]), we include a default downstream sequence of 15 nucleotides, but one could adjust this to, for example, 20 downstream nucleotides using the following command:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step find\n--downstream 20\nStep 2: Filter sgRNAs\nTiming: 1 min",
    "Several factors have been suggested to affect the sgRNA-mediated knockdown efficacy, although in most cases we have little mechanistic understanding as to how these effects come about. Qi et al. (2013)[href=https://www.wicell.org#bib17] reported a relatively strong decline in knockdown efficiency with the distance of a sgRNA from the start codon, but this effect has not been reproduced in more recent studies. For instance, in Hawkins et al. (2020)[href=https://www.wicell.org#bib7], the offset between the sgRNAs and start codon had no effect on the knockdown of gfp in both E. coli and B. subtilis (Figure 3[href=https://www.wicell.org#fig3]C). Similarly, when re-analyzing the relative fitness of sgRNA targeting essential genes in Cui et al. (2018)[href=https://www.wicell.org#bib4], we only find a weak dependency of the relative fitness on the offset (R2<0.01; Figure 3[href=https://www.wicell.org#fig3]D). Reanalyzing the same data, Calvo-Villamañán et al. (2020)[href=https://www.wicell.org#bib3] also did not note an effect of offset. Besides offset, the nucleotide sequence has been suggested to affect knockdown efficacy. Using the knockdown library of Cui et al. (2018)[href=https://www.wicell.org#bib4], Calvo-Villamañán et al. (2020)[href=https://www.wicell.org#bib3] showed that a small number of nucleotide positions in the sgRNA, PAM and downstream region affect transcriptional interference by perfectly matched sgRNAs. Inspired by this work, we re-analyzed the E. coli and B. subtilis datasets of Hawkins et al. (2020)[href=https://www.wicell.org#bib7] as well as the previously analyzed data from Cui et al. (2018)[href=https://www.wicell.org#bib4]. For each dataset, we fitted a linear model on one-hot encoded primary sequence data to predict knockdown efficacy. For the primary sequence, we used the sgRNA spacer sequence (20 nucleotides), the PAM sequence (3 nucleotides, of which only one variable) and 15 nucleotides downstream of the PAM. Following Calvo-Villamañán et al. (2020)[href=https://www.wicell.",
    "org#bib3], we prevent overfitting of the highly parameterized linear models, by penalizing absolute coefficient values using L1 regularization (based on the penalty term with the lowest mean squared error in a 10-fold cross validation; Figure 4[href=https://www.wicell.org#fig4]).",
    "imgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/636-Fig4.jpg\nFigure 4. Impact of individual nucleotides on knockdown efficacy\nInspired by a recent study (Calvo-Villamañán et al., 2020[href=https://www.wicell.org#bib3]), the impact of sgRNAs targeting the non-template strand of essential genes in both the datasets of Cui et al. (2018)[href=https://www.wicell.org#bib4] (top panel) and Hawkins et al. (2020)[href=https://www.wicell.org#bib7] (bottom panels) using an L1 linear model is shown.\n(A) Sequence logo (Wagih, 2017[href=https://www.wicell.org#bib22]) of coefficients associated with nucleotides in the sgRNA, PAM and downstream sequences. Positive coefficients correspond to improved knockdown efficacy and negative with reduced efficacy.\n(B) Relation between penalty term,   log  λ  , in the L1 linear model and the mean squared error of a 10-fold cross validation. Red dots show mean squared error and error bars indicate standard deviation. Vertical dotted line shows penalty term associated with lowest mean squared error. Lower penalties result in overfitting of the data and higher penalties in underfitting.",
    "Figure 4[href=https://www.wicell.org#fig4] shows how each nucleotide in the sgRNA-PAM-downstream region affects knockdown efficacy. Positive coefficients indicate stronger knockdowns. As expected, for the dataset of Cui et al. (2018)[href=https://www.wicell.org#bib4] we retrieve nearly the same results as Calvo-Villamañán et al. (2020)[href=https://www.wicell.org#bib3]: a few nucleotides upstream (19, 20) and downstream from the PAM (+1,+2), together with the first nucleotide of the PAM, largely determine the knockdown efficacy. Similar data for E. coli from Hawkins et al. (2020)[href=https://www.wicell.org#bib7] shows a much weaker pattern, due to substantially more noise, which likely results from the high-copy number plasmid used in these experiments. Nonetheless, key residues are consistent with the data from Cui et al. (2018)[href=https://www.wicell.org#bib4]. For example, an adenine in the first nucleotide of the PAM strongly reduces knockdown efficiency. The dataset from B. subtilis (which used a chromosomally integrated system) showed a very similar noise levels as that from Cui et al. (2018)[href=https://www.wicell.org#bib4] and also a similar dependency on nucleotides close to the PAM. However, in addition, we observe a strong negative effect on knockdown efficacy from thymine in the first three positions of the sgRNA (1,2,3), corresponding to the transcription start site (TSS) at the 5’-end of the sgRNA (PAM-distal). This is likely due to inefficient transcriptional initiation from these nucleotides or enhanced degradation. We also observe that a cytosine or guanine in the +8 or +9 position downstream from the PAM negatively impacts knockdown efficiency. It is yet unclear if these effects are specific to B. subtilis or are present in other gram-positive bacteria as well.",
    "Off-target effects are also a concern when designing sgRNAs. Where possible, sgRNAs with high specificity – few off-target hits – should be chosen. Analyses of mismatch sgRNAs suggest that higher binding affinity resulting from high GC percentage results in lower sensitivity to imperfect complementarity between sgRNA and DNA, which could imply that these sgRNAs are more likely to have off-target knockdown effects as well (Hawkins et al., 2020[href=https://www.wicell.org#bib7]; Jost et al., 2020[href=https://www.wicell.org#bib9]; Mathis et al., 2021[href=https://www.wicell.org#bib14]). Cui et al. (2018)[href=https://www.wicell.org#bib4] furthermore showed that off-target knockdown effects can occur when only 9 nucleotides in the seed sequence of a sgRNA complement a gene sequence.\nFinally, Cui et al. (2018)[href=https://www.wicell.org#bib4] identified the presence of toxic seed sequences that are consistently associated with negative fitness effects in E. coli. These seed sequences comprise five nucleotides at the 3’ end of the sgRNA, proximal to the PAM. Although dCas9 expression levels were shown to affect this bad-seed effect, the mechanistic basis of this toxicity has not been elucidated (Cui et al., 2018[href=https://www.wicell.org#bib4]). The top 10 bad-seed sequences are: AGGAA, TGACT, ACCCA, AAAGG, GAGGC, CGGAA, ATATG, AACTA, TGGAA, CACTC (Vigouroux and Bikard, 2020[href=https://www.wicell.org#bib21]).\nIn step 2 of the computational pipeline, the list of sgRNAs is filtered based on a number of pre-specified criteria, thereby removing sgRNAs with potentially low efficacy, off-target hits or toxic side-effects. By default, the pipeline uses lenient filter criteria, only removing sgRNAs with more than 10 potential off-target hits and with an offset (distance to the start codon) of more than 1000 nucleotides. One can however use a number of additional filter criteria, including the sgRNA spacer sequence, PAM sequence, downstream sequence and GC content. To run the second step of the computational pipeline, use the following command line:\n>python <path to “generate_sgrnas.py” script>\n--genbank <path to genbank file>\n--locus_tag <locus_tag>",
    "--step filter\n--sgrna_remove <string of sgRNA sequence(s) to remove>\n--pam_remove <string of PAM sequence(s) to remove>\n--downstream_remove <string of downstream sequence(s) to remove>\n--gc_lower <minimal GC-content sgRNA spacer>\n--gc_upper <maximum GC-content sgRNA spacer>\n--offset_upper <maximum distance to the start codon>\n--off_target_upper <maximum number of off-target hits>\nAll filter criteria are optional. When no filter criteria are specified, only the default filter settings will apply. For the filter step, the Python script will load the CSV file generated in the first step of the pipeline (e.g., “sgRNA.csv”). Importantly, filtering only works when this CSV file is present. When an alternative file name is used in the first step (using the --file_find argument), this should also be specified for the filtering step.\nLike in step 1, a CSV file is also generated in the second step (“sgRNA_filtered.csv”). It contains the same information as the first file, but includes only the sgRNAs that pass the filtering criteria (Figure 2[href=https://www.wicell.org#fig2]). The first two steps of the computational pipeline can also be used to design sgRNAs that target the same gene(s) across different strains or species. To this end, one should first generate and filter sgRNAs for each individual strain or species, targeting the same orthologous gene(s), and subsequently compare their “sgRNA_filered.csv” output files. By selecting sgRNAs shared across strains/species, one can identify common CRISPRi targets. Note that these targets might not necessarily yield the same knockdown efficacies across strains/species, for example because of differences in the region upstream of the PAM.\nExamples",
    "Based on the sequence analysis in Figure 4[href=https://www.wicell.org#fig4], in B. subtilis, we expect higher knockdown efficiencies when filtering against: (1) sgRNAs starting with a T, (2) PAM sequences starting with an A, (3) and downstream sequences associated with either a C or G at position +8 or +9. The following command would filter the list of sgRNAs accordingly:\n>python Generate_sgRNAs.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step filter\n--sgRNA_remove TNNNNNNNNNNNNNNNNNNN\n--PAM_remove ANN\n--off_target_upper 5\n--downstream_remove NNNNNNNGNNNNNNN,NNNNNNNNGNNNNNN,NNNNNNNNCNNNNNN,NNNNNNNCNNNNNNN\nAll sgRNAs that match the sequence of sgrna_remove will be removed; all sgRNAs associated with a PAM sequence matching pam_remove will be removed; and all sgRNAs associated with a downstream sequence matching downstream_remove will be removed.\nThe following command removes sgRNAs that have a spacer sequence starting with three consecutive Ts or ending with an A:\n>python Generate_sgRNAs.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step filter\n--sgRNA_remove TTTNNNNNNNNNNNNNNNNN,NNNNNNNNNNNNNNNNNNNA\nOne can also run the find and filter steps in one go:\n>python Generate_sgRNAs.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step find,filter\nWhen you would like to filter sgRNAs based on a downstream nucleotide sequence of only 10 nucleotides (default is 15), one should specify the length of the downstream sequence before specifying the filter criteria:\n>python Generate_sgRNAs.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step find,filter\n--downstream 10\n--downstream_remove NNNNNNNGNN,NNNNNNNNGN,NNNNNNNNCN,NNNNNNNCNN\nOne can also remove sgRNAs with either a low or high GC content. The following command filters out all sgRNAs with a GC content below 0.4 and above 0.6:\n>python Generate_sgRNAs.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step find,filter\n--gc_lower 0.4\n--gc_upper 0.6\nYou can also adjust the default filter criteria, for example the following command removes all sgRNAs with more than 5 off-target hits or an offset larger than 200nt:\n>python Generate_sgRNAs.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step find\n--off_target_upper 5\n--offset_upper 200",
    "When needed, it is possible to perform multiple consecutive rounds of filtering by both specifying the input and output files. For example:\nFirst round: remove sgRNA starting with T:\n>python Generate_sgRNAs.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step find,filter\n--sgRNA_remove TNNNNNNNNNNNNNNNNNNN\nSecond round: remove sgRNA of PAM sequences that start with A:\n>python Generate_sgRNAs.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step filter\n--PAM_remove ANN\n--file_find sgRNA_filter.csv\n--file_filter sgRNA_filter_new.csv\nIn the second round of filtering, the filtered sgRNAs from the first step (“sgRNA_filter.csv”) is used as input file (--file_find sgRNA_filter.csv) to generate a new CSV file (“sgRNA_filter_new.csv”; --file_filter sgRNA_filter_new.csv). If the new file is not specified, the old one (“sgRNA_filter.csv”) will be overwritten. Consecutive rounds of filtering can be used to determine how each additional filter criterion prunes the list of sgRNAs.\nStep 3: Generate mismatch sgRNAs\nTiming: 5 min",
    "In the third and final part of the computational pipeline, mismatch sgRNAs are generated for all sgRNAs that passed the filtering criteria. As detailed by Hawkins et al. (2020)[href=https://www.wicell.org#bib7], imperfect complementarity between the sgRNA spacer and target DNA sequence can be used to predictably tune sgRNA activity. By examining over 1500 single-nucleotide mismatch sgRNAs in both E. coli and B. subtilis, corresponding to 33 sgRNA spacers targeting gfp, Hawkins et al. (2020)[href=https://www.wicell.org#bib7] trained a species-independent linear model that predicts knockdown efficacy, based on the location and type of nucleotide mismatch and the GC percentage of the parent sgRNA (E. coli: p<10−16, R2=0.48 and B. subtilis: p<10−16, R2=0.57). PAM proximal mismatches more strongly affect sgRNA activity, while PAM distal mismatches have little effect (Figure 5[href=https://www.wicell.org#fig5]A). These results corroborate previous findings that demonstrate the importance of the sgRNA seed sequence for binding of the dCas9-sgRNA complex to the DNA (Cui et al., 2018[href=https://www.wicell.org#bib4]; Hsu et al., 2013[href=https://www.wicell.org#bib8]; Jost et al., 2020[href=https://www.wicell.org#bib9]; Mathis et al., 2021[href=https://www.wicell.org#bib14]; Qi et al., 2013[href=https://www.wicell.org#bib17]). Besides predicting knockdown efficacy for single mismatched sgRNAs, the predictive model was also successfully applied to predict knockdown efficacies of double mismatched sgRNAs using a multiplicative model, as suggested in Qi et al., 2013[href=https://www.wicell.org#bib17]. As a next step, Hawkins et al. (2020)[href=https://www.wicell.org#bib7] generated a library of mismatched sgRNAs targeting the essential genes in E. coli and B. subtilis to examine how graded knockdowns affect fitness. As expected, reduced expression knockdowns, associated with PAM proximal mismatches, were associated with higher relative fitness (Figure 5[href=https://www.wicell.org#fig5]B).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/636-Fig5.jpg\nFigure 5. Efficacy of mismatch CRISPRi",
    "Effect of single-nucleotide mismatches on (A) knockdown of GFP expression and (B) relative fitness of essential genes. Left panels show how mismatches in different positions of sgRNA affect GFP knockdown and relative fitness in datasets of E. coli and B. subtilis. Middle panels show relation between predicted knockdowns and (A) observed knockdowns in E. coli (p<10−16, R2=0.48) and B. subtilis (p<10−16, R2=0.57) and the (B) relative fitness in E. coli and B. subtilis. Right panels show distribution of observed GFP knockdowns and relative fitness.\nThe coefficients of the species-independent linear model are stored in the file “model_param.csv” and can be manually updated based on new experimental data. When running the final step of the computational pipeline, both the “sgRNA_filtered.csv” and “model_param.csv” files are loaded to determine the predicted expression knockdowns of all 60 possible sgRNA spacer mismatches per sgRNA. This final step of the Python script does not rely on any additional arguments and can be run using the following command:\n>python <path to “generate_sgrnas.py” script>\n--genbank <path to genbank file>\n--locus_tag <locus_tag>\n--step mismatch\nLike in the previous two steps of the pipeline (Figure 2[href=https://www.wicell.org#fig2]), a CSV file will be generated, “sgRNA_mismatched.csv”, which shows the complete list of mismatched sgRNAs with their predicted knockdown efficacy. This file contains the following information:\nIndex of sgRNA, as shown in sgRNA.csv and sgRNA_filtered.csv, with the index of the associated mismatch in between parenthesis\nNucleotide position in sgRNA spacer that is substituted\nOriginal base\nSubstituted base\nSequence of parental (fully complementary) sgRNA spacer\nSequence of mismatch sgRNA spacer\nPredicted knockdown efficacy: 1 or higher indicating full knockdown (as seen in fully complementary sgRNA) and 0 no knockdown.\nExamples\nIn order to run the mismatch step for our B. subtilis example, use the following command line:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\n--step mismatch",
    "Running the entire pipeline in one go\nAlthough the computational pipeline can be conducted step-by-step, one can also run the entire pipeline, by leaving out the step argument (default, --step find,filter,mismatch):\n>python <path to “generate_sgrnas.py” script>\n--genbank <path to genbank file>\n--locus_tag <locus_tag>\nExamples\nIn the case of our B. subtilis example, one can generate all sgRNA targeting DnaA (step 1), filter these sgRNA based on default filter criteria (step 2) and generate all mismatches (step 3) using the following command:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag BSU_00010\nTo generate sgRNA for all genes in the genome, simply add --locus_tag all (e.g., this takes ∼10 minutes on a regular laptop for all 4325 genes of B. subtilis):\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag all\nOne could also specify filter criteria when running the entire pipeline. As explained above, these filter criteria are applied in the second step of the pipeline:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag all\n--sgrna_remove TNNNNNNNNNNNNNNNNNNN\nWhen you would like to include additional filter criteria, after running the entire pipeline, you can simply redo the last two steps of the pipeline and specify the new output files:\n>python generate_sgrnas.py\n--genbank GCF_000009045.1_ASM904v1_genomic.gbff\n--locus_tag all\n--step filter,mismatch\n--pam_remove ANN\n--offset_upper 200\n--file_filter sgRNA_filtered_new.csv\n--file_mismatch sgRNA_mismatched_new.csv"
  ],
  "subjectAreas": [
    "Gene Expression",
    "High Throughput Screening",
    "Bioinformatics",
    "Crispr"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}