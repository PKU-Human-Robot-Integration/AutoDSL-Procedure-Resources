{
  "id": 4219,
  "origin_website": "Cell",
  "title": "Integrated protocol for exitron and exitron-derived neoantigen identification using human RNA-seq data with ScanExitron and ScanNeo",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nStep 1: Installing ScanExitron and ScanNeo\nTiming: 60 min\nFull installation of ScanExitron and ScanNeo includes downloading the ScanExitron and ScanNeo packages from GitHub. An example of how to perform all steps of this protocol using example data is available on the project GitHub at https://github.com/ylab-hi/ScanExitron/wiki/Exitron-and-exitron-derived-neoantigen-identification-with-ScanExitron-and-ScanNeo[href=https://github.com/ylab-hi/ScanExitron/wiki/Exitron-and-exitron-derived-neoantigen-identification-with-ScanExitron-and-ScanNeo]\nInstalling ScanExitron\nInstall ScanExitron dependencies\nInstall RegTools v0.4.2\n$ git clone --depth 1 --branch 0.4.2 https://github.com/griffithlab/regtools.git[href=https://github.com/griffithlab/regtools.git]\nInstall other dependent packages via conda.\n$ conda install -c bioconda samtools bedtools pyfaidx\nInstall ScanExitron by running the following code:\n$ git clone https://github.com/ylab-hi/ScanExitron.git[href=https://github.com/ylab-hi/ScanExitron.git]\nCritical: Check if all required dependencies are downloaded and installed correctly. Originally, installing packages via conda will automatically check for and install the required dependencies. However, errors during installation could occur when installing on computational environments (Troubleshooting 1[href=https://www.wicell.org#sec7.1] and Troubleshooting 2[href=https://www.wicell.org#sec7.3]).\nInstalling ScanNeo\nInstall ScanNeo dependencies\nInstall transIndel v2.0\n$ git clone https://github.com/cauyrd/transIndel[href=https://github.com/cauyrd/transIndel]\nAdd the directory of transIndel_build_RNA.py and transIndel.py to the $PATH environment variable.\nInstall IEDB HLA class I binding prediction tools (https://downloads.iedb.org/tools/mhci/3.1/IEDB_MHC_I-3.1.tar.gz[href=https://downloads.iedb.org/tools/mhci/3.1/IEDB_MHC_I-3.1.tar.gz])\nInstall other dependent packages via conda.\n$ conda install -c bioconda optitype ensembl-vep sambamba bedtools picard bwa yara razers3 pyfaidx pyvcf\n$ conda install -c conda-forge coincbc\n$ conda install -c anaconda hdf5\nInstall VEP annotations and plugins Install VEP annotations using the following command.\n$ vep_install -a cf -s homo_sapiens -y GRCh38 –CONVERT\nNote: Before install VEP annotations, make sure the directory of executable file vep_install is in the $PATH environment variable (Troubleshooting 3[href=https://www.wicell.org#sec7.5]).\nInstall two VEP plugins for ScanNeo.\n$ git clone https://github.com/ylab-hi/ScanNeo.git[href=https://github.com/ylab-hi/ScanNeo.git]\n$ cd VEP_plugins\n$ cp Downstream.pm ∼/.vep/Plugins\n$ cp Wildtype.pm ∼/.vep/Plugins\nConfigure optitype and yara index according to the ScanNeo manual (https://github.com/ylab-hi/ScanNeo[href=https://github.com/ylab-hi/ScanNeo]).\nInstall ScanNeo by running the following code:\n$ git clone https://github.com/ylab-hi/ScanNeo.git[href=https://github.com/ylab-hi/ScanNeo.git]",
    "Note: Make sure the directories of all the executable files are in the $PATH environment variable.\nStep 2: Preparing the reference genome sequences and gene annotation files\nTiming: 15 min\nScanExitron utilized annotated coding sequence (CDS) regions to probe the exitrons, and it also extracted splice sites using the reference genome sequences. The human reference genome sequences and gene annotation will be used.\nPreparing human reference genome sequences in FASTA format.\nDownload hg38 FASTA human reference genomes from UCSC genome browser (https://hgdownload.cse.ucsc.edu/goldenpath/hg38/bigZips/hg38.fa.gz[href=https://hgdownload.cse.ucsc.edu/goldenpath/hg38/bigZips/hg38.fa.gz]) and unzip it.\nPreparing reference gene annotation in GTF format.\nDownload hg38 annotation file from GENCODE project (ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_37/gencode.v37.annotation.gtf.gz)\nExtract the protein-coding CDS regions\nIn Unix/Linux system, the protein-coding exons regions can be extracted using “cat”, “awk” and “tr” commands, as followed.\n$ cat gencode.v37.annotation.gtf | awk 'OFS=\"\\t\" {if ($3==\"CDS\") {print $1,$4-1,$5,$10,$16,$7}}' | tr -d '\";' > gencode.hg38.CDS.bed\nNote: Make sure the input RNA-seq BAM files used the same coordinate system as the reference genome and the reference annotations files. Otherwise, you have to remap the RNA-seq reads with the corresponding reference genome.\nStep 3: Running ScanExitron\nTiming: 5 min\nAfter installing all of the dependencies and preparing the reference genome sequences and annotation files, it is time to run ScanExitron. ScanExitron can be used only in UNIX/Linux systems currently. Additional details for running ScanExitron and updates to the parameters can be found at the project GitHub repository (https://github.com/ylab-hi/ScanExitron[href=https://github.com/ylab-hi/ScanExitron]).\nNote: Here we only provided the running time for the toy example dataset, which contains three exitrons. The actual running time for the real sample is dependent on the number of junction reads and the number of exitrons in it.\nMake necessary modifications to the configuration file of ScanExitron.",
    "Replace the items in config.ini with the reference genome sequences and annotation files prepared in step 2: preparing the reference genome sequences and gene annotation files[href=https://www.wicell.org#sec3.2]. The example config.ini file can be found at https://github.com/ylab-hi/ScanExitron/blob/master/config.ini.example[href=https://github.com/ylab-hi/ScanExitron/blob/master/config.ini.example] (Troubleshooting 4[href=https://www.wicell.org#sec7.7]).\nRun ScanExitron with the following command:\n$ ScanExitron.py -i example.bam --ao 3 --pso 0.05 -m 50 -r hg38\nCritical: Make sure the input RNA-seq BAM files used the same coordinate system as the reference genome and the reference annotations files (Troubleshooting 5[href=https://www.wicell.org#sec7.9]).\nNote: In practice, the different parameter settings will result in the different number of exitrons identified. For example, if you set a higher alternate allele observation (AO) and percent spliced out (PSO) (Wang et al., 2021[href=https://www.wicell.org#bib10]), you will get a smaller number of exitrons. The details for these two metrics are described in quantification and statistical analysis[href=https://www.wicell.org#quantification-and-statistical-analysis]. Additional details for running ScanExitron and updates to the parameters can be found at the project GitHub repository (https://github.com/ylab-hi/ScanExitron[href=https://github.com/ylab-hi/ScanExitron]).\nMultiple files will be generated in this step, including “example.hq.bam”, “example.hq.bam.bai”, “example.hq.janno” and “example.exitron”.\nThe identified exitrons are stored in the example.exitron file (Table 1[href=https://www.wicell.org#tbl1]). Figure 2[href=https://www.wicell.org#fig2] illustrates these detected EIS events using Integrative Genomics Viewer (IGV) (Robinson et al., 2011[href=https://www.wicell.org#bib7]).\ntable:files/protocols_protocol_977_1.csv\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/977-Fig2.jpg\nFigure 2. Three exitron splicing (EIS) events identified in NEFH gene loci by ScanExitron from the example RNA-seq data\nNote: Differential analysis will be available if researchers have groups of samples of interest (Troubleshooting 6[href=https://www.wicell.org#sec7.11]).\nIn order to feed the ScanExitron results to ScanNeo, output files of ScanExitron are required to be converted to VCF format using the utility script named exitron2vcf.py contained in the ScanExitron utils folder with the following command:\n$ exitron2vcf.py -i example.exitron -o example.vcf\nNote: The directory of exitron2vcf.py should be in the $PATH environment variable.\nStep 4: Running ScanNeo\nTiming: 15 min",
    "After running ScanExitron for the sample dataset, we get a list of exitron splicing events in the example.vcf file. In practice, you have to also run ScanExitron for the corresponding normal samples aiming to obtain exitrons that are tumor specific. Here, we assume all the exitrons identified in the sample dataset are tumor-specific exitrons (TSEs).\nIt is time to run ScanNeo to generate exitron-derived neoantigens. ScanNeo can be used only in UNIX/Linux systems currently. Additional details for running ScanNeo and updates to the parameters can be found at the project GitHub repository (https://github.com/ylab-hi/ScanNeo[href=https://github.com/ylab-hi/ScanNeo]).\nMake necessary modifications to the configuration file of ScanNeo.\nReplace the items in config.ini with the reference genome sequences and gene annotation files prepared in step 2: preparing the reference genome sequences and gene annotation files[href=https://www.wicell.org#sec3.2]. The example config.ini file can be found at https://github.com/ylab-hi/ScanNeo/blob/master/config.ini.example[href=https://github.com/ylab-hi/ScanNeo/blob/master/config.ini.example]. (Troubleshooting 4[href=https://www.wicell.org#sec7.7])\nNote: The reference genome sequences field is mandatory for this protocol. The gene annotation field is necessary when calling indels using ScanNeo. Yara HLA index field is necessary when HLA typing using ScanNeo.\nRun ScanNeo\nScanNeo first added corresponding reference and alternate allele sequences to each EIS event. Next, these events were annotated with variant effect predictor (VEP) (McLaren et al., 2016[href=https://www.wicell.org#bib5]). Run this annotation step of ScanNeo using the following command.\n$ ScanNeo.py anno -i example.vcf -o example.vep.vcf\nNeoantigen prediction step of ScanNeo used VEP annotated VCF file as input to predict neoantigens using the following command.\n$ ScanNeo.py hla -i example.vep.vcf --alleles HLA-A∗68:02,HLA-A∗23:01,HLA-B∗07:02,HLA-B∗53:01,HLA-C∗07:02,HLA-C∗04:01 -t 16 --af PSO -e 9 -p /path/to/iedb/ -o example.tsv\nThe putative exitron-derived neoantigens are stored in the example.tsv file (Table 2[href=https://www.wicell.org#tbl2]).\ntable:files/protocols_protocol_977_2.csv\nNote: This is a good time to compare your output results files to example files provided in the ScanExitron GitHub repository (https://github.com/ylab-hi/ScanExitron/tree/master/example_data[href=https://github.com/ylab-hi/ScanExitron/tree/master/example_data]) to ensure that you have run the protocol correctly.",
    "Pause point: Once you know the parameters you wish to use and have successfully run ScanExitron and ScanNeo, you may find this to be a good place to pause and evaluate the results before proceeding with the optional steps.\nOptional step 5: Running this protocol for TCGA PRAD cohort\nTiming: 15 h\nAs a matter of fact, we have to use exitrons that are tumor-specific to predict neoantigens. We used TCGA PRAD cohort that includes 496 tumor and 52 tumor-adjacent normal samples to demonstrate how to use this protocol.\nFor every sample in TCGA PRAD cohort, we identified EIS events of PRAD tumor and normal samples following the instructions in step 3: running ScanExitron[href=https://www.wicell.org#sec3.3]. Then we generated a list of tumor-specific exitrons (TSEs) by excluding the EIS events in tumor samples that were also found in more than three normal samples. We achieved this filtering process using in-house Python scripts, which are available at https://github.com/ylab-hi/ScanExitron/wiki/Exitron-and-exitron-derived-neoantigen-identification-with-ScanExitron-and-ScanNeo[href=https://github.com/ylab-hi/ScanExitron/wiki/Exitron-and-exitron-derived-neoantigen-identification-with-ScanExitron-and-ScanNeo]. A summary of identified exitrons and TSEs in PRAD is described in Figure 3[href=https://www.wicell.org#fig3].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/977-Fig3.jpg\nFigure 3. Tumor-specific exitron (TSE) splicing events detection in PRAD cohort\n(A) The proportion of frameshift and inframe TSEs in PRAD tumors.\n(B) The proportion of genes with and without exitrons in PRAD tumors.\n(C) Exitron size distribution of TSEs identified in PRAD tumors.\n(D) PSO distribution of TSEs identified in PRAD tumors.\nRun step 8 using the same parameters for TSEs of every sample in VCF format, we identified exitron-derived neoantigens for PRAD cohort (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/977-Fig4.jpg\nFigure 4. The loads of TSEs, frameshift TSEs, inframe TSEs, neoantigen-yielding TSEs, neoantigen-yielding frameshift TSEs, neoantigen-yielding inframe TSEs, and putative TSE neoantigens in PRAD tumors",
    "Note: The timing didn’t include downloading PRAD BAM files. In step 9, we submitted 16 jobs in the Slurm queue system. Every job only required one CPU core. In step 10, we used 20 jobs, every job required 16 CPU cores. Because ScanNeo implemented a parallel computing architecture, we highly recommend users set more CPU cores for it."
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Immunology",
    "Bioinformatics",
    "Cancer",
    "Genetics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}