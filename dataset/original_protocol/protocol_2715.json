{
  "id": 2868,
  "origin_website": "Cell",
  "title": "Protocols for single-cell RNA-seq and spatial gene expression integration and interactive visualization",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nPerform integration in Seurat\nTiming: 5–10 min (for step 1)\nWe use Seurat to elucidate scRNA-seq derived identities in the spatial data. We found this method to be the most effective. While Seurat does not successfully map all cell types, it still offers the highest accuracy when compared to our expectations. This major step informs the use of Seurat for integration so that you can make your own decision about your data. Users can run this workflow using Seurat.R script.\nLoad scRNA-seq dataset and Seurat packages.\nNavigate to the directory you downloaded from GitHub in the setup (this directory should be named “sge-integration”).\nRun the following code in R.\nlibrary(Seurat)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(janitor)\nlibrary(magrittr)\nlibrary(patchwork)\nlibrary(stringr)\nlibrary(R.utils)\n#--------Setup-------\nhomedir<-\"/home/sonas/star_protocol\"\nsetwd(paste0(homedir,\"/sge-integration/\"))\nsource(\"scripts/functions.R\")\nscRNA <- readRDS(file = \"data/scRNA/ureter-scRNA.Rds\")\ngenes<-read.csv(file =\"data/scRNA/genes.csv\")[,1]\nsource(\"scripts/functions.R\")\nLoad the Visium samples.\nUse the function defined in the “functions.R” script called preProcessVisiumSeurat().\nThis function loads the provided data into a usable “Seurat” object, calculates mitochondrial gene % per spot, log-normalizes the data, finds variable features, and then performs principal component analysis (PCA) on the re-scaled data.\nNote: The function preProcessSeuratVisium() in functions.R script consolidates all these steps and can be executed as follows:\nU2.Seurat <- preProcessSeuratVisium(\"data/U2\", normalization = \"LogNormalize\")\nIntegrate the loaded, pre-processed Visium data with the scRNA-seq data. Seurat utilizes an anchor-gene approach, which we have compacted into one function as anchorMapping().\nU2.Seurat <- anchorMapping(scRNA, U2.Seurat, feats = genes, query.dims=30, anchor.labels = levels(as.factor(scRNA$subclass)))\nNote: Try changing the number of dimensions in the “query.dims” parameter to tweak your results. This parameter adjusts the number of PCA dimensions used for the Visium data. Be careful, however, not to overestimate this as an excess of query dimensions can lead to overfitting of single-cell signatures on the Visium data.",
    "Plot the predicted signatures on the Visium sample on top of the H&E image of the tissue. The following lines of code are used to plot all single-cell identities altogether in one output (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2372-Fig1.jpg\nFigure 1. Integration results with Seurat\nSingle-cell identities are plotted onto Seurat-processed Visium data. Integration scores represent relative correspondence. Plots that are entirely yellow indicate identities not found.\nscplots <- purrr::map(levels(as.factor(scRNA$subclass)), function(x) SpatialFeaturePlot(U2.Seurat, x) +\ntheme(legend.key.size = unit(10, \"mm\"),\n  legend.text = element_text(size = 15),\n  legend.title = element_text(size = 20)))\npatchwork::wrap_plots(scplots, ncol=4) %T>% ggsave(filename = \"figures/Seurat/Figure_1.pdf\", width = 25, height = 25, units = \"in\", dpi = 300)\nNote: To plot them separately, see the commented code in the “Seurat.R” file.\nPerform integration with Giotto\nTiming: 15 – 30 min. depending on image alignment (for step 5)\nThis portion of the protocol describes the use of Giotto to predict cell type in Visium data. Giotto seemed to be more effective than other methods at detecting sparse cell types, such as immune cells. However, we found that the signal for anatomically well-established cell types, such as stromal and urothelial cell types, was overly diffuse when compared to other methods. Nonetheless, this section allows you to determine if Giotto might be appropriate for your dataset. Users can run this workflow using Giotto.R script.\nGiotto Setup: Giotto has its own file format, and so we must do a little extra setup before performing the analysis. Follow steps below to setup for Giotto.\nSet up the environment, functions, and packages needed to run Giotto.\nlibrary(Giotto)\nlibrary(ggplot2)\nlibrary(viridis)\nmydir='/home/sonas/star_protocol/'\nsetwd(paste0(mydir,\"sge-integration/\"))\nsource(\"scripts/functions.R\")\nscRNA <- readRDS(\"data/scRNA/ureter-scRNA.Rds\")\n#----- Configure workspace with Giotto\nresults_folder = 'figures/Giotto'\ninstrs = createGiottoInstructions(save_dir = results_folder,\n          save_plot = TRUE,\n          show_plot = FALSE)",
    "Critical: You need to change the working directory in the “setwd()” line to your local path. The other paths should be fine as long as you set the working directory to the “sge-integration” folder.\nCreate a Giotto object using the provided sample data. If you use your own Visium data, you need to change the adjustment factors (see troubleshooting 1[href=https://www.wicell.org#troubleshooting]).\nU2 <- createGiottoVisiumObject(visium_dir = 'data/U2', expr_data = 'filter',\n      h5_visium_path = 'data/U2/filtered_feature_bc_matrix.h5',\n      h5_tissue_positions_path = 'data/U2/spatial/tissue_positions_list.csv',\n      h5_image_png_path = 'data/U2/spatial/tissue_lowres_image.png',\n      gene_column_index = 2, instructions = instrs, xmax_adj = 2000, ymin_adj = 1500, ymax_adj = 1600, xmin_adj = 1400)\nPre-process the Visium data in the “Giotto” object format (identical to the suggested steps in the Giotto vignette).\nLog-normalize (same scaling factor as with Seurat).\nCalculate highly variable genes.\nFilter the main count matrix for genes that are all2[href=https://www.wicell.org#bib2] highly variable,3[href=https://www.wicell.org#bib3] expressed in more than 3% of cells, and1[href=https://www.wicell.org#bib1] have a mean expression > 0.4 in cells expressing the gene in question.\nPCA is then invoked on those genes.\nGiotto creates a spatial network, which allows further functions to perform as intended.\nPlot the PCA results and the spatial network formed by the Visium spots.\nNote: We perform this pre-processing on our example data as follows:\nU2.Giotto<- preProcessGiotto(U2, \"U2\")\nAfter the Visium data is processed and ready for integration, we then move on to performing the integration itself. Giotto requires you to first create a signature matrix and then to integrate using the “rank” method.\nCreate a signature matrix using the scRNA-seq data by running the following:\nsc_sign_matrix <- makeSignMatrixRank(\nsc_matrix = as.matrix(scRNA@assays$RNA@data),\nsc_cluster_ids = scRNA$subclass,\nties_method = c(\"random\"),\ngobject = NULL\n)\nRun the actual function to perform spatial enrichment of signatures from the signature matrix.\nU2.Giotto <- runSpatialEnrich(\nU2.Giotto,\nenrich_method = c(\"rank\"),\nsign_matrix = sc_sign_matrix,\nexpression_values = c(\"normalized\"),\n)",
    "Obtain a visualization of the results of spatial enrichment of signatures (Figure 2[href=https://www.wicell.org#fig2]) by running the following code:\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2372-Fig2.jpg\nFigure 2. Giotto spatial enrichment\nSingle-cell signatures are plotted onto Giotto-processed Visium data. Scores are calculated using a rank-biased method (for more details see https://rubd.github.io/Giotto_site/reference/runRankEnrich.html[href=https://rubd.github.io/Giotto_site/reference/runRankEnrich.html]).\nscplots <- purrr::map(levels(as.factor(scRNA$subclass)), function(i) spatPlot(gobject = U2.Giotto, cell_color=unlist(c(U2.Giotto@spatial_enrichment$rank[,..i])), point_size = 2) +\n  theme(title = element_text(size=18),\n  legend.text = element_text(size = 15),\n  legend.title = element_text(size = 15),\n  axis.title = element_text(size=15),\n  axis.text = element_text(size=15)) +\nggtitle(i) + scale_fill_distiller(palette = “Spectral”))\npatchwork::wrap_plots(scplots, ncol=4) %T>% ggsave(filename = \"figures/Giotto/Figure_2.pdf\", width = 25, height = 20, units = \"in\", dpi = 300)\nCreate a RShiny app with Seurat-integrated data\nTiming: 5–10 min (for step 9)\nOnce we determined that Seurat integration results are most consistent with our experimental observations, we created an interactive application to democratize access to the results. This final section in the protocol allows you to make an interactive RShiny app with your integrated data. For this, we repurposed code from Seurat to produce an interactive viewing platform that can be hosted on the web and shared.\nEdit data object in Shiny app script and run all the code provided in that script to prepare the data and shiny app. In order to specify our own data, edit lines 12–13, shown below. You need to assign the variable “object” a Seurat spatial dataset.\nobject <- U2.Seurat\nNote: The script responsible for the app (app.R) can be found under the `shiny-app` directory in the codebase retrieved from GitHub.\nNote: If you are in an interactive R session and your object is in your current workspace, you can assign the variable as above. In other scenarios, such as when setting up a Shiny app on a hosted web server, you may want to load the data from a file.",
    "Critical: The app only supports Seurat objects as input. Therefore, Giotto is not a supported format to share via this Shiny app.\nLaunch the Shiny app by runing the following line:\n>runApp(‘shiny-app’)\nNote: See the output of this command to find where the app has launched. When using an environment such as RStudio, the app launches in a pop-up browser window (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2372-Fig3.jpg\nFigure 3. Shiny app visualization\nSeurat-integrated single-cell identities have been made available through an interactive R Shiny app."
  ],
  "subjectAreas": [
    "Rnaseq",
    "Sequencing",
    "Single Cell",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}