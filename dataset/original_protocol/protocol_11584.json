{
  "id": 12776,
  "origin_website": "Jove",
  "title": "Controlled Rotation of Human Observers in a Virtual Reality Environment",
  "procedures": [
    "WARNING: Electrical work should be performed by a qualified person.\n1. Mechanical system setup procedure\nAttach the main pulley to the upper shaft of the swivel chair.\n\t\nRemove the upper shaft.\n\t\tNOTE: This typically involves placing the chair on its side and removing a pin at the base of the chair that prevents the upper shaft from sliding out of the lower shaft.\nFriction-fit the pulley to the shaft.\n\t\t\nUse Vernier calipers to obtain the diameter of the shaft. Use a lathe to bore the pulley hole to match the diameter of the shaft.\nCreate threaded holes for screws that will fix the pulley to the shaft. Drill additional holes in the hub of the pulley to make a total of 4, matching the diameter to that of the screws. Thread the holes using a tap so that screws can be used to fix the pulley to the shaft, matching the thread to that of the screws\n\t\t\tNOTE: An ALTERNATIVE if creating a thread is not possible is to drill all the way through the hub of the pulley and the shaft of the chair, and run a bolt all the way through once the correct placement of the pulley has been determined (after step 1.4.6).\nSlide the pulley onto the chair shaft.\nInsert the screws loosely (tighten after the main and small pulleys are aligned).\nPlace the drive belt loosely on the upper chair shaft (to be fit to the main and small pulleys later).\nReattach the upper chair shaft to the chair base.\nAttach the motor mount to the bottom shaft of the swivel chair.\n\t\nFabricate an adjustable clamp to which the motor mounting brackets can be attached.",
    "Fabricate the two matching components of the clamp–one for each side of the shaft (to be squeezed together with four bolts). See Figure 2 for dimensions.\nFor each component, cut the 90° angle iron to length. Attach the 4 leaves through which the bolts will run.\nRound the edges of each leaf (metal bar) for safety. Drill holes near the end of each bar large enough for the bolts to fit through. Make a 45° bend at the appropriate position (score the bar to make the bend more precise). Spot-weld each bar to the angle iron-bolt holes outwards.\n\t\t\tNOTE: ALTERNATIVELY, the leaves may be bolted in place, being careful not to cause a protrusion that will prevent the angle iron from contacting the chair shaft.\nFabricate two motor mounting brackets. See Figure 3 for dimensions. For each bracket, drill two holes in the bar for attachment to the clamp just described. Bend 90° at the appropriate position (score the bar to make the bend more precise).\nAttach the clamp and mount to the bottom shaft of the chair by inserting the 4 bolts through the clamp components and brackets and tightening. Ensure that the bolts are not too tight if the mount needs to be adjusted to accommodate the aligning process in step 1.4.6.\nAttach the small pulley to the motor shaft.\n\t\nGrind the key on the motor shaft flat (no longer protruding).\n\t\tNOTE: This will provide a flat surface against which the pulley screw can be tightened to prevent slippage of the pulley around the motor shaft.\nDrill out the hole in the pulley to match the diameter of the motor shaft.\nSlide the pulley over the shaft and loosely tighten the screw against the flat surface on the shaft.\nAttach the motor to the motor bracket described above.",
    "Prepare each of the 4 motor attachment bars by drilling two holes in the appropriate positions (holes need to line up with the mounting holes in the motor). See Figure 4 for dimensions.\nIf required for clearance, cut a section out of the upper of the two bars to allow the pulley on the motor shaft to rotate freely (optional).\nPlace the four small cover attachment brackets over the four outer holes. Use them later to attach the protective cover over the belt and pulleys.\nLoosely attach the eight nuts and bolts, leaving room between the upper and lower bars to slide the mounting bracket bars between them.\nSlide the motor mounting bars onto the bracket-each upper bar above the mounting bracket bar and each lower one below.\nPosition and clamp the motor.\n\t\t\nMove the main pulley, the small pulley, or both up and down until the main and small pulleys are horizontally aligned. Move the clamp if required.\nPlace the drive belt over the small and main pulleys.\nSlide the motor assembly away from the chair until the belt is tight.\nTighten the 8 bolts on the motor attachment bars to secure the motor to the motor bracket.\nTighten the clamp bolts and pulley screws.\nAttach a cover to prevent anything from getting caught in the pulley/belt system.\n\t\nBend the sides of the acrylic protective cover as per Figure 5.\n\t\t​NOTE: An ALTERNATIVE, if an acrylic bender is not available, is to use a metal sheet and sheet bender.\nCut out a section to fit around the shaft of the chair as per Figure 5.\nDrill holes to match the holes on the small cover attachment brackets.\nUse the small cover attachment bolts to attach the cover.\n2. Electrical system setup procedure",
    "Connect the on/off switch and the emergency shut-off switch to mains power. Use appropriate voltage- and current-rated cables to attach the IEC connecter (male connector for the mains power cable) to the emergency shut-off and on/off switch in series (so that breaking the circuit with either one will cut power to the rest of the components).\n\tNOTE: Soldering may be required.\nConnect the 5 V DC power supply for the Arduino to the on/off switch (optional).\n\tNOTE: Soldering and mains rated cable required.\nConnect the 48 V DC power supply for the chair driver to the on/off switch in parallel to the 5 V power supply.\n\tNOTE: Mains rated cable required.\nMake appropriate DIP switch settings for the Hybrid stepper motor driver. For example:\n\t\nSet switches 1-4 to ON, OFF, ON, and ON, respectively, for 1,600 pulses per revolution for the stepper motor (the higher the number, the finer the control but the lower the cap on rotation speed depending on how quickly the Arduino can produce pulses).\nSwitch 5 to OFF for the anticlockwise default rotation direction.\nSwitch 6 to ON for drive Point Motion (PM) mode as opposed to space vector control mode (or Field-oriented Control, FOC).\nSet switches 7 and 8 to OFF and OFF to match the controller to the 86 series 12 NM closed-loop motor.\nConnect the Hybrid stepper motor driver to the power supply and chair driver cables.\n\t\nAttach appropriately rated cables from the 48 V power supply output terminals to the motor driver power input connector housing and insert the housing.\nConnect the two motor cables via their connector housings to the driver.\nConnect the Arduino to the Hybrid stepper motor driver.",
    "Use pinned jump wires to connect the PUL+ (\"pulse\" +), DIR+ (\"direction\" +), and ENA+ (\"enable\" +) terminals on the motor driver connector housing to pins 2, 3, and 5 (pin numbers optional but stated here as examples to be used throughout) on the Arduino.\nUse short wires to connect the PUL-, DIR-, and ENA- terminals of the motor driver connector housing and a longer pinned jump wire to connect ENA- to a GND (ground) pin on the Arduino.\nInsert connector housing into the motor driver.\nConnect the Arduino to the 5 V DC power supply (optional). Use pinned jump wires to connect pins GND and Vin on the Arduino to the 5 V out terminals of the 5 V power supply.\nConnect the potentiometer to the Arduino. Use pinned jump wires to connect the A1 (an \"analog in\" terminal) GND and 5 V pins on the Arduino to the three terminals of the potentiometer.\n\tNOTE: Soldering required.\nConnect the toggle switch to the Arduino. Connect pin 6 and GND on the Arduino to the two toggle switch terminals using pinned jump wires.\n\tNOTE: Soldering required.\nConnect the LED to the Arduino.\n\t\nSolder the resistor to one terminal of the LED (to drop the voltage on the LED circuit).\nAttach pins 7 and GND on the Arduino to the end of the resistor and the other LED terminal using pinned jump wires.\n\t\tNOTE: Soldering required.\nInsulate and house the electrical/electronic components. See Figure 6 for an image of a completed housed system.\n\tNOTE: There are many ways to insulate the high voltage components of the electrical system, protect the fragile electronic components from damage, and contain all these components in a manageable space. Below is one suggested method.",
    "Drill/cut holes in the side of the instrument case for the IEC power connector, the main on/off switch, the two motor control cables, the small toggle switch, the LED, the potentiometer, and the USB port of the Arduino (make this one large to allow air to flow into the case for cooling).\nAttach each of these components using the appropriate means (e.g., screws, bolts, hot glue gun).\nCut ventilation holes (one above the fan in the 48 V power supply) and a hole for the emergency switch in the lid of the case; then, attach the ventilation filters and the switch.\nAttach the Arduino to the base of the case using spacers and screws. Position so that the USB port aligns with the USB port hole in the case.\nAttach the 48 V and 5 V power supplies and the motor driver to the base of the case using Velcro and foam blocks.\n3. VR setup procedure\nSet up the VR system as per the manufacturer's instructions.\n4. Software setup procedure\nInstall and set up the Arduino software.\n\t\nDownload and install the Arduino program as per the developer's instructions.\nConnect the Arduino to the computer using a USB cable.\nUnder the Tools dropdown menu, select the port to which the Arduino board is attached.\nUnder the same menu, select the appropriate board and processor. Make sure it matches the board and processor used in section 2 above, e.g., \"Arduino Mega 2560\" board and \"ATmega2560\" processor.\nProgram the Arduino board to allow rotation of the chair 1) by means of the potentiometer and 2) by means of commands from the computer via USB.\n\t\nWrite the code to be uploaded to the Arduino processor.\n\t\tNOTE: Example code from the example experiment is included in Supplemental File 1 (filename: hybrid_motor_controller.ino).",
    "Take note of the baud rate (argument to the Serial.Begin() command), e.g., 9,600.\nSave the code and upload it to the Arduino board using the upload button.\nTest that the system is working so far.\n\t\nPlug in and turn on the Electrical subsystem.\nFlick the small toggle switch to a position where the small LED indicator light turns on.\nTurn the potentiometer to ensure that it controls the speed and direction of the chair.\nInstall and configure Steam and SteamVR as per the developer's instructions.\nInstall and set up Unity.\n\t\nInstall and configure Unity as per the developer's instructions.\nOpen a new or existing Unity project (choose a type, e.g., \"3D\" that is appropriate for the application).\nSet up SteamVR for use in the project.\n\t\t\nOpen the asset store (click on Window | Asset Store).\nSearch for SteamVR and select SteamVR Plugin.\nClick Add to Assets.\nIn Unity, open the Package Manager (click on Window | Package Manager).\nFind SteamVR under the My Assets tab.\nClick Import and follow the prompts to complete the import.\nClick Accept All if prompted to make configurational changes.\nImport the Steam VR Camera Rig into the scene. Look for a new Asset called Steam VR in the project window on the inspector screen. Open Steam VR | prefabs.\nDrag the [Camera Rig] asset into the hierarchy or scene window to allow the use of the VR headset and controllers in the game.\nRemove the default Main Camera from the hierarchy or scene as it will interfere with the SteamVR camera.\nInstall and set up Ardity.\n\t\nSearch for Ardity in the Unity Asset Store and select it for download (step 4.5.3.2 above).\nUpdate the API compatibility level.\n\t\t\nOpen Project Settings under the Edit menu.\nClick on Player | Other Settings.",
    "Choose .NET 4.X in the dropdown menu for API Compatibility Level.\nExit Settings and wait for error messages to disappear.\nSet up the Unity game environment.\n\tNOTE: The following minimum steps will be required for the user to have control of the chair and have the chair motion integrated with their VR experience.\n\t\nCreate the objects and functions needed for the specific application.\n\t\t\nCreate objects by clicking on GameObject and selecting either 2D Object or 3D Object.\nAdd functionality to the created object by clicking the Add Component button in the Inspector window for the object and selecting one of the options. Select New Script to create a C# script similar to the one in Supplemental File 3 (filename: SetUpTrial.cs).\nImport the Serial Controller script into the game.\n\t\t\nUnder the Assets folder in the Project window, open the Ardity folder | Scripts folder.\nDrag the SerialController script into the desired game object in the Heirarchy window, e.g., the Background game object.\nClick on the object and scroll down the list of components in the Inspector window to locate the SerialController script.\nMake sure the Port Name and Baud Rate match those for the Arduino program set in steps 4.1 and 4.2 above.\nDrag the object to which the SerialController script is attached from the hierarchy window into the input box next to Message Listener in the Inspector window.\nWrite and import the chair controller script into the game.\n\t\t\nAt the bottom of the Inspector window for the same game object, click on Add Component and select New Script. Name the new script ChairController.\nWrite the code required to take controller and mouse commands and turn them into numbers to be sent via USB to the Arduino.",
    "NOTE: A minimal example of the code required is included in Supplemental File 2 (filename: ChairController.cs).\nSave the script.\nFill the empty boxes in the Inspector window. Drag the HMD object from the Hierarchy window into the input box next to Head under the Chair Controller script in the Inspector window. Similarly, drag the Controller (right) object into the box next to Hand.\n5. Experiment (or experience) procedure\nSelect the input method.\n\tNOTE: The provided example ChairController code refers to a script called SetUpTrial where the public integer variable inputType is set (where inputType 3 is VR controller, and inputType 4 is mouse). This script/variable arrangement has been assumed in the steps below.\nClick on the game object to which the SetUpTrial script is attached, e.g., Background.\nScroll down in the Inspector window to find the SetUpTrial script public variables.\nSet inputType to 3 for VR controller or 4 for mouse control.\nPress the Play button in Unity to begin the VR experience with motion controlled by the controllers or the mouse.\nSubscription Required. Please recommend JoVE to your librarian."
  ],
  "subjectAreas": [
    "Behavior"
  ],
  "bigAreas": [
    "Ecology & Environmental Biology"
  ]
}