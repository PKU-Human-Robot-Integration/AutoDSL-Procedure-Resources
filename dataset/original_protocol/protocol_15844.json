{
  "id": 19670,
  "origin_website": "Wiley",
  "title": "Genotyping Microbial Communities with MIDAS2: From Metagenomic Reads to Allele Tables",
  "procedures": [
    "Reference-based metagenotyping depends crucially on the choice and customization of reference database. Therefore, a typical MIDAS2 workflow starts with a species prescreening step for each metagenome, which enables customization of the reference database to match the species in the sample. This protocol describes the species selection step: Estimating species coverage per sample, merging the single-sample profiling results, and generating a list of species confidently detected in at least one sample. MIDAS2 estimates species coverage per sample by aligning reads to a database of sequences of fifteen universal, single-copy genes (SCGs) and using the median (or mean) coverage of each species’ SCGs. The goal of species pre-screening is to determine which species are abundant and prevalent enough to be metagenotyped. Users can adjust parameters in order to be stricter or more inclusive. The default values are based on precision and recall in metagenomic simulations. Including rarer species may reduce metagenotype accuracy but is justified in some applications (e.g., with a defined community).\nNecessary Resources\nHardware\n64-bit Linux system with at least 16 GB of RAM (RAM and disk consumption depend largely on the size of the input data; installation instructions provided in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0005])\nSoftware\nMetagenomic Intra-Species Diversity Analysis System 2 (MIDAS2; see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0005] for installation)\nAWK command\nInput Files\nPaired-end or single-end metagenomic sequencing data in FASTQ format, optionally compressed with Gzip [see Strategic Planning; to demonstrate, we have deposited two single-end HMP mock community samples (Truong, Tett, Pasolli, Huttenhower, & Segata, 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-bib-0022]) on Zenodo: https://zenodo.org/record/6774633[href=https://zenodo.org/record/6774633]]\n1. Install MIDAS2 as described in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0005].\n2. Create a work directory containing the FASTQ files (here example input files are downloaded from Zenodo):\n         \nmkdir midas2_protocol\ncd midas2_protocol\nwget https://zenodo.org/record/6774633/files/reads.zip\nunzip reads.zip",
    "We use the same example input files for all the protocols in this article and all the analyses are generated relative to the midas2_protocol root directory.\n3. Initialize a local copy of a MIDASDB-UHGG. Here the SCG data is downloaded:\n         \nmidas2 database --init --midasdb_name uhgg \\\n;--midasdb_dir midasdb_uhgg\nThe above command downloads the SCG marker gene databases needed for species profiling analysis in this protocol to the local MIDASDB directory midasdb_uhgg/. The SCGs from the MIDASDB-GTDB can be downloaded instead of those from UHGG by adjusting the above command to point to that database with --midasdb_name gtdb and a different choice of directory to store the database, such as --midasdb_dir midasdb_gtdb. The download files take up 1.2 GB.\nDuring the construction of a MIDASDB, six-digit numeric species identifiers (species_id) are randomly assigned. The taxonomic assignment of these species_id is stored in the metadata.tsv file. More details about downloading other components of a MIDASDB are in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0002]. In addition, Support Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0007] contains the steps for creating a MIDASDB from a user-provided collection of genomes.\nWe will use the same work directory midas2_protocol/ and database subdirectory midasdb_uhgg/ for all analyses.\n4. Run the single-sample species analysis to identify confidently detectable (i.e., relatively abundant) species in each sample, looping through samples.\n         \nfor sample_name in SRR172902 SRR172903\ndo\n  midas2 run_species --sample_name ${sample_name} \\\n    -1 reads/${sample_name}.fastq.gz \\\n    --midasdb_name uhgg --midasdb_dir midasdb_uhgg \\\n    --num_cores 4 midas2_output\ndone\nHere four CPU cores are used for each sample. Note that more or fewer CPUs can be used by specifying the number with --num_cores. Also note that each sample could be run simultaneously.\nOutput files are created automatically in midas2_output/SRR172902/species/ and midas2_output/SRR172903/species/.",
    "5. Confirm run_species has finished successfully. Once the species profiling step for all the samples is complete without any reported error, check for the output files:\n         \nspecies_profile.tsv: A six-column, tab-separated file, describing the coverage of each species’ marker genes in the sample. The columns are unique species identifier (species_id), total aligned read counts (marker_read_counts), median marker coverage (median_marker_coverage), mean marker coverage (marker_coverage), estimated relative abundance based on marker genes (marker_relative_abundance), and fraction of uniquely aligned markers (unique_fraction_covered). There is one row per species in the MIDASDB that is covered by at least two reads.\nFor example, the median_marker_coverage of species_id=102344 for sample SRR172902 is 10.819588.\nBoth the SNV and CNV module of MIDAS2 will use the species_profile.tsv file to select species to be genotyped. We can look at the list of relatively low abundance species with relatively high confidence in each sample (median_marker_coverage > 0 and unique_fraction_covered > 0.6) with the following commands:\n         \n$awk `$3>0 && $6>0.6' midas2_output/SRR172902/species/species_profile.tsv | grep -v species_id | wc -l\n18\n$awk `$3>0 && $6>0.6' midas2_output/SRR172903/species/species_profile.tsv | grep -v species_id | wc -l\n8\nThere are eighteen species for SRR172902 and eight species for SRR172903 meeting our selection criterion.\n6. Prepare the sample manifest file for the purpose of merging metagenotyping results across samples in the SNV and CNV modules. This file has two, tab-delimited columns. The first column specifies the sample identifier (sample_name) and the second column provides the output directory provided to run_species (midas2_output as in step 5).\nThe following is one way to generate the sample manifest file for SRR172902 and SRR172903.\n         \necho -e \"sample_name\\tmidas_outdir\" > list_of_samples.tsv\nls reads | awk -F '.' '{print $1}' | awk -v OFS='\\t' '{print $1, \"midas2_output\"}' >> list_of_samples.tsv\nOut sample manifest file, list_of_samples.tsv, now looks like:\n         \n$cat list_of_samples.tsv\nsample_name\tmidas_outdir\nSRR172902\tmidas2_output\nSRR172903\tmidas2_output",
    "Based on this file, the merge_species command expects to locate the midas2_output/SRR172902/species/species_profile.tsv file generated by the run_species command for SRR172902, and similarly for SRR172903.\n7. Merge species profiling results for the samples listed in the list_of_samples.tsv.\n         \nmidas2 merge_species --samples_list list_of_samples.tsv \\\n     --min_cov 0.01 midas2_output/merge\nThe --min_cov flag defines the minimum median_marker_coverage for estimating species prevalence: Present if median_marker_coverage >= min_cov. Here we want to generate the full list of species with positive SCG profiling results. The minimal reported positive median_marker_coverage is 0.164444 (SRR172902). Therefore, we set --min_cov to 0.01. Users can also set this to a smaller number (e.g., 0.0000001) to include lower abundance species, with the caveat that some are likely to be false positives.\nThe output files are created automatically under the directory midas2_output/merge/species/.\n8. The species merging steps have finished successfully if the output files are created and MIDAS2 reports no errors. The primary output files are:\n         \nspecies_prevalence.tsv: A six-column, tab-delimited file, summarizing the species profiling results. The columns are species identifier, median marker abundance, mean marker abundance, median marker coverage, mean marker coverage, and number of samples with the species present. There is one row per species.\nFive species-by-sample matrices in the same output directory.\nThe list of all the generated files can be found in Guidelines for Understanding Results.\n9. It is worth noting that the species module is designed to select species with sufficient coverage for metagenotyping, rather than performing a comprehensive taxonomic profiling. To this end, we collect the list of species confidently detected in at least one sample:\n         \nawk '$6>0 {print $1}' midas2_output/merge/species/species_prevalence.tsv | grep -v species_id > list_of_species.tsv\nWith list_of_species.tsv in hand, we can now download a subset of the MIDASDB in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0002].",
    "This protocol describes how to download all or part of a MIDASDB, a set of custom files constructed from microbial genome sequences and containing all the information needed to metagenotype the species detected in a set of shotgun-metagenomic samples. MIDAS2 provides two prebuilt MIDASDBs sourced from large, public microbial genome collections: MIDASDB-UHGG (4644 species; 286,997 genomes) based on the Unified Human Gastrointestinal Genome catalog (v1; Almeida et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-bib-0001]) and MIDASDB-GTDB (47,893 species; 258,405 genomes) based on the Genome Taxonomy Database (v202; Parks et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-bib-0016]). MIDASDB-UHGG is only suitable for human gut metagenomics samples, while MIASDB-GTDB can be used for metagenomic samples from various environments. Support Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0007] describes how to build a new MIDASDB locally from a custom genome collection. This is particularly useful if users plan to run an assembly pipeline and use the assembled contigs/scaffolds (i.e., metagenome assembled genomes or MAGs) as the reference database for MIDAS2. A MIDASDB should be downloaded or built before any other MIDAS2 protocols can be run.\nThere are three components in an MIDASDB: SCGs, rep-genome, and pan-genome. Each species contributes sequences to all three components. By preloading the MIDASDB, individual calls to MIDAS2 commands do not need to automatically download the necessary files. As a result, with a preloaded MIDASDB, per-sample analyses can be run in parallel without a risk of processes interfering with one another.\nNecessary Resources\nHardware\nA 64-bit Linux system with at least 16 GB of RAM (installation instructions are provided in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0005])\nSoftware\nMIDAS2 (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0005] for installation)\nInput Files\nOptional list of species for download\n1. Optional: List pre-built MIDASDBs.\n         \n$midas2 database --list\nuhgg 286997 genomes from 4644 species version 1.0\ngtdb 258405 genomes from 47893 species version r202",
    "For this protocol, we will use the MIDASDB-UHGG as an example. A prebuilt GTDB database is also available.\n2. Initialize a local copy of MIDASDB-UHGG. This is a required first step for downloading any MIDASDB. This is the same command as step 3 in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]. Skip this step if you already ran Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001].\n         \nmidas2 database --init --midasdb_name uhgg --midasdb_dir midasdb_uhgg\nThis command creates the local directory midasdb_uhgg/ if it doesn't exist and downloads the following files and/or directories:\n         \ngenomes.tsv: The table-of-contents file assigning genomes to species and denoting the representative genome for each species.\nmetadata.tsv: Tab-delimited table specifying the six-digit numeric species identifiers (species_id) with taxonomic assignments.\nmd5sum.json: md5sum cache for database files; used internally by MIDAS2 during downloading.\nmarkers/: SCG data needed for species prescreening.\nmarkers_models/: SCG profile hidden Markov model.\nchunks/: design cache for parallelizing the SNV module over partitions of the representative genome (“chunks”).\n3. Optional: Download the entire MIDASDB.\nThis requires a large amount of data transfer and storage: 93 GB for MIDASDB-UHGG and 539 GB for MIDASDB-GTDB. Because MIDAS2 only uses database information for detected species (Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]), it is usually unnecessary to download the entire MIDASDB. We recommend against this option in most cases.\n         \nmidas2 database --download --midasdb_name uhgg --midasdb_dir midasdb_uhgg --species all\n4. Customized MIDASDB downloading:\nUsers can take advantage of the MIDAS2 species-level database structure to download and decompress only the necessary portions of a MIDASDB. For example, in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001], we collected the list of 22 species present in at least one sample (list_of_species.tsv). Now we can download database components (both rep-genome and pan-genome) only for these 22 species.\n         \nmidas2 database --download --midasdb_name uhgg --midasdb_dir midasdb_uhgg --species_list list_of_species.tsv",
    "The downloaded MIDASDB-UHGG files sufficient for the analysis of samples containing these 22 species are only 4.2 GB.\n5. The download has completed successfully when the command midas2 database --download finishes and no error is reported.",
    "This protocol describes the SNV module of MIDAS2, which takes as input metagenomic sequencing reads from a set of samples and generates files with SNV genotypes for each sample for all detected species. The SNV module has two steps: (1) single-sample allele tallying with the midas2 run_snps command and (2) population SNV calling with the midas2 merge_snps command. Basic Protocols 1 (Species) and 2 (MIDASDB) should be run before this protocol. These SNV outputs can be used for downstream analyses with other tools or user-supplied scripts, including for tracking and transmission studies, strain deconvolution, and evolutionary analyses. Users can modify default parameters in order to make post-alignment filtering stricter or more inclusive, which alters which sites and samples are genotyped for each species. They may also alter which species are genotyped and how the module is parallelized.\nNecessary Resources\nHardware\nA 64-bit Linux system with at least 16 GB of RAM (installation instructions are provided in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0005])\nSoftware\nMIDAS2 (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0005] for installation)\nInput Files\nPaired-end or single-end metagenomic sequencing data in FASTQ format, optionally compressed with Gzip (see Strategic Planning)\nOutputs of Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]\nOutputs of Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0002]\nNOTE: The RAM and disk consumption depend largely on the size of the input data.",
    "1. Perform species prescreening as described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]. We recommend users look at the SCG-based species profiling results (species_profile.tsv), particularly the following two columns: median_marker_coverage and unique_fraction_covered. Users can adjust these two parameters for selecting the list of species to be genotyped in step 3 below. Higher values indicate more reads mapping to the marker genes, and these parameter values can be adjusted upward if the user is hesitant to metagenotype low abundance species or downward if they wish to include more species at the cost of potentially lower accuracy.\n2. Execute the run_snps command for each sample. Conceptually, a typical invocation of the run_snps command proceeds by four steps:\n         \na.Select the list of species for accurate metagenotyping based on the species profiling results and user-defined species selection criterion. Taking SRR172902 as an example, run_snps expects to find the species profiling results at midas2_output/SRR172902/species/species_profile.tsv.\nb.Compile the representative genomes for these species and build a sample-customized rep-genome Bowtie2 index.\nc.Align reads to this index with Bowtie2.\nd.Output a read alignment summary and pileup result for each species.\nfor sample_name in SRR172902 SRR172903\ndo\n  midas2 run_snps \\\n    --sample_name ${sample_name} \\\n    -1 reads/${sample_name}.fastq.gz \\\n    --midasdb_name uhgg --midasdb_dir midasdb_uhgg \\\n    --select_by median_marker_coverage,unique_fraction_covered \\\n    --select_threshold=0,0.6 \\\n    --num_cores 8 midas2_output\ndone\nThe number of CPUs used is specified via --num_cores 8. This step can also be parallelized over multiple samples (e.g., using shell background processes or xargs).",
    "For each sample, the above command performs SNV calling for all species meeting the user-defined species filtering criteria: median_marker_coverage>0 and unique_fraction_covered>0.6. This means a species is metagenotyped if the sequences of its fifteen SCGs have a median of at least two unique aligned reads and 60% horizontal coverage. The higher the cutoff of these parameters, the smaller the list of selected species will be. This is because only highly abundant species are selected with high parameter values. For examples, see step 5 of Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]. We recommend users set unique_fraction_covered to no lower than 0.5.\nThe output files are generated automatically under the directory midas2_output/SRR172902/snps/ and midas2_output/SRR172903/snps/.\n3. Confirm run_snps has finished successfully. Once the single-sample SNV analysis is complete without any reported error, check for the output files:\n         \nsnps_summary.tsv: an eight-column, tab-delimited file containing a summary of read alignment and pileup for all the species in the Bowtie2 index. Among all the reported columns, horizontal genome coverage (fraction_covered, the fraction of bases covered by at least one read) and vertical genome coverage (mean_coverage, the average read depth across all the bases covered by at least one read), are particularly useful.\nIt is important to note that MIDAS2 purposely holds off on any species selection or site filtering with the single-sample pileup results until across-samples SNV analyses are performed. Therefore, the number of reported per-species pileup results for each sample is the same as the number of species passing the SCG-based selection (eighteen for SRR172902 and eight for SRR172903).\nIn step 5, across-samples SNV analysis will filter species based on the single-sample horizonal genome coverage (fraction_covered) and vertical genome coverage (mean_coverage). Using this file, we can observe that there are ten species with fraction_covered >= 0.4 for SRR172902 and five species for SRR172903:",
    "$awk '$7>=0.4' midas2_output/SRR172902/snps/snps_summary.tsv | grep -v species_id | wc -l\n10\n$awk '$7>=0.4' midas2_output/SRR172903/snps/snps_summary.tsv | grep -v species_id | wc -l\n5\n<species_id>.snps.tsv.lz4: Per-species reads pileup for all the species in the rep-genome Bowtie2 index. Positions are filtered to all genomic sites in the reference genome covered by at least two reads. These single-sample pileup files are the input to the midas2 merge_snps command, which calls population SNVs across samples. They can also be used to call SNVs in individual samples if desired.\n4. Prepare sample manifest file for merging pileup results across samples. We can use the same file list_of_samples.tsv generated by step 6 in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001].\n5. Upon the completion of run_snps for all the samples in the file list_of_samples.tsv, MIDAS2 compute the per-species population SNVs with the merge_snps command. There are four main steps for each species:\n         \nSample selection. Just because shotgun metagenomics reads aligned to one genome does not guarantee the presence of that species in the sample. Therefore, it is common practice to select <species, sample> pairs based on the horizontal genome coverage (genome_coverage) and vertical genome coverage (genome_depth). Higher values restrict the list of species metagenotyped. In this protocol, we want to genotype low abundance species (genome_depth > 0.1X) with relatively high confidence (genome_coverage > 0.4). Users should adjust these parameters based on their own research objectives.\nFor each genomic site in the representative genomes, MIDAS2 determines the set of alleles present across all samples where the species is detected.",
    "For each genomic site, population major and minor alleles are then identified based either on the accumulated reads counts or sample counts in step 5b (above). The population major allele is the allele with highest frequency across samples and the population minor allele is the second most frequent. In the case of ties, the alphabetically first allele is the major allele.\nFinally, MIDAS2 reports the vertical coverage (read depth) and population minor allele frequency of each site in each sample.\nmidas2 merge_snps --samples_list list_of_samples.tsv \\\n    --midasdb_name uhgg --midasdb_dir midasdb_uhgg \\\n    --genome_coverage 0.4 --genome_depth 0.1 --sample_counts 2 \\\n    --snp_type bi --num_cores 8 midas2_output/merge\nThis command selects species present in both samples with horizontal genome coverage >40% and average vertical genome coverage >0.1×. There are four species meeting these selection criteria. By default, MIDAS2 reports all types of non-fixed population alleles. In this protocol, because we only have two samples, there cannot be any sites with three or four alleles. Hence, we choose to report only bi-allelic SNVs (--snp_type bi). The number of CPUs used is specified via --num_cores 8. These parameters are all adjustable.\nThe output files are generated automatically under the directory: midas2_output/merge/snps/.\n6. Optional: See additional parameters.\nMIDAS2 has many additional, optional parameters not shown in the above example. These and the parameters shown above can be used to alter the behavior of the SNV module and to tailor the analysis to the microbial communities in the samples. Support Protocol 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0008] describes parameter choices, including parameters that control post-alignment filtering, species selection, and site selection.\n7. Population SNV analysis has finished successfully when all the following output files are created under the directory midas2_output/merge/snps/ without any error message.\n         \nsnps_summary.tsv: Merged single-sample pileup summary containing information such as horizontal genome coverage (fraction_covered) and vertical genome coverage (mean_coverage) for each sample.",
    "For each species passing the species selection filter, information about SNVs identified across samples are organized by species_id, with three LZ4 files per subdirectory:\n         \n<species_id>/<species_id>.snps_info.tsv.lz4: Metadata of population SNVs (e.g., biological annotations);\n<species_id>/<species_id>.snps_allele_freq.tsv.lz4: Site-by-sample matrix of population minor allele frequencies;\n<species_id>/<species_id>.snps_depth.tsv.lz4: Site-by-sample read depth matrix.\nMore information on how to interpret the population SNV results can be found in Guidelines for Understanding Results.",
    "This protocol describes the CNV module of MIDAS2, which takes as input metagenomic sequencing reads from a set of samples and generates files with CNV genotypes for each sample for all detected species. There are two steps for population CNV calling: (1) single-sample quantification of copy number for each gene in the pangenome of each species with the midas2 run_genes command and (2) population CNV calling with the midas2 merge_genes command. Basic Protocols 1 (Species) and 2 (MIDASDB) should be run before this protocol. These CNV outputs can be used for downstream analyses with other tools or user-supplied scripts, including for tracking and transmission studies, evolutionary analyses, and testing for associations with traits of the microbes, their environments, or their hosts. Users can modify default parameters in order to alter which species, sites, and samples are genotyped.\nNecessary Resources\nHardware\nA 64-bit Linux system with at least 16 GB of RAM (installation instructions are provided in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0005])\nSoftware\nMIDAS2 (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0005] for installation)\nInput Files\nPaired-end or single-end metagenomic sequencing data in FASTQ format, optionally compressed with Gzip (see Strategic Planning)\nOutputs of Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]\nOutputs of Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0002]\nNOTE: The RAM and disk consumption depend largely on the size of the input data.\n1. Perform species prescreening as described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001].\n2. Download MIDASDB as described in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0002].\n3. Execute the run_genes command for each sample. Conceptually, a typical invocation of the run_genes command proceeds by five steps:\n         \nSelect the list of species abundant enough for accurate metagenotyping based on the species profiling results and user-defined species selection criterion. Taking SRR172902 as an example, run_genes expect to find the species profiling results at midas2_output/SRR172902/species/species_profile.tsv.\nCompile the pangenomes for these species and build a sample-customized pan-genome Bowtie2 index.",
    "Align reads to this index with Bowtie2.\nFor each gene in the pan-genome, normalize gene coverage by the mean coverage of all that species’ SCGs to estimate copy number per cell (Parks et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-bib-0016]).\nOutput a read mapping summary and CNV estimates for each species.\nfor sample_name in SRR172902 SRR172903\ndo\n  midas2 run_genes \\\n    --sample_name ${sample_name} \\\n    -1 reads/${sample_name}.fastq.gz \\\n    --midasdb_name uhgg --midasdb_dir midasdb_uhgg \\\n    --species_list 100122,100277 \\\n    --select_by median_marker_coverage,unique_fraction_covered \\\n    --select_threshold=0,0.6 \\\n    --num_cores 8 midas2_output\ndone\nThe number of CPUs used is specified via --num_cores 8.\nFor each sample, the above command performs CNV calling for two species of interest: species_id=100122 (Staphylococcus epidermidis) and species_id=100277 (Streptococcus mutans). The species specified by the users are still subject to the species selection: median_marker_coverage>0 and unique_fraction_covered>0.6.\nThe output files are generated automatically under the directories midas2_output/SRR172902/genes/ and midas2_output/SRR172903/genes/. This step can be parallelized over multiple samples (e.g., using shell background processes or xargs).\n4. Confirm run_genes command has finished successfully. Once the single-sample CNV analysis is complete without any reported error, check for the output files:\n         \ngenes_summary.tsv: An eight-column, tab-delimited file containing a summary of read alignment and CNV estimates for all species in the Bowtie2 index. Among all the reported columns, the average vertical coverage of all pan-genes covered by at least two reads (mean_coverage) is particularly useful because it determines the scope of the population CNV analysis.\n<species_id>.genes.tsv.lz4: A seven-column, tab-delimited file of per-species CNV estimates for all species in the Bowtie2 index. Any pan-gene covered by more than two reads is reported. Among the columns, average vertical coverage (mean_coverage) and estimated copy number per cell (copy_number) are most useful for downstream analyses.",
    "It is important to note that MIDAS2 purposely holds off on any species selection or site filtering with the single-sample CNV results until across-samples CNV analyses are performed. Therefore, the number of reported per-species CNV results for each sample is the same as the number of species specified in --species_list or the number of species in species_profile.tsv if --species_list is not used. Both options are subject to the species selection filter (--select_by and--select_threshold).\n5. Prepare sample manifest file for merging purposes. We can use the same list_of_samples.tsv generated by step 6 in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001].\n6. Upon the completion of run_genes for all the samples listed in the list_of_samples.tsv, MIDAS2 merges the CNV profiles across samples with the merge_genes command.\n         \nmidas2 merge_genes --samples_list list_of_samples.tsv \\\n    --midasdb_name uhgg --midasdb_dir midasdb_uhgg \\\n    --min_copy 0.5 \\\n    --num_cores 2 midas2_output/merge\nThe number of CPUs used is specified via --num_cores 2. Pan-genes with copy number ≥0.5 are classified as present (--min_copy 0.5).\nThe output files are generated automatically under the directory: midas2_output/merge/genes/.\n7. Optional: See additional parameters.\nMIDAS2 has many additional, optional parameters not shown in the above example. These and the parameters shown above can be used to alter the behavior of the CNV module and to tailor the analysis to the microbial communities in the samples. Support Protocol 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0008] describes parameter choices, including parameters that control post-alignment filtering and species selection.\n8. Population pangenome CNV analysis has finished successfully when all the following output files are created under the directory midas2_output/merge/genes/ without any error message.\n         \ngenes_summary.tsv: Merged single-sample CNV summary containing information such as mean_coverage;\n<species_id>/<species_id>.genes_copynum.tsv.lz4: Gene-by-sample matrix of copy-number estimates;\n<species_id>/<species_id>.genes_preabs q.tsv.lz4: Gene-by-sample matrix of gene presence/absence;\n<species_id>/<species_id>.genes_depth.tsv.lz4: Gene-by-sample read coverage matrix;\n<species_id>/<species_id>.genes_reads.tsv.lz4: Gene-by-sample read counts matrix.",
    "More information on how to interpret the CNV results can be found in Guidelines for Understanding Results.",
    "MIDAS2 is written in Python 3 and can be executed on a 64-bit Linux system. MIDAS2 and its dependencies need to be pre-installed in order to run the commands described in the basic protocols. We recommend the Conda package manager for installing these. Alternatively, users who want to ensure reproducibility by using a container with MIDAS2 and its computational environment may use Docker.\nNecessary Resources\nHardware\n64-bit Linux system with at least 16 GB of RAM\nSoftware\nPython (supported version is Python 3.7)\nMiniconda; https://docs.conda.io/en/latest/miniconda.html\nOr Docker, for users installing MIDAS2 in this way; https://www.docker.com/\nFiles\nThe latest MIDAS2 package; https://github.com/czbiohub/MIDAS2/\nInstallation using Conda package manager\n1. We recommend installation using the Conda package manager as it encapsulates installation of the entire set of dependencies into a single command. If not already installed, execute the following command to install Miniconda:\n         \nwget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.12.0-Linux-x86_64.sh\nbash Miniconda3-py37_4.12.0-Linux-x86_64.sh\n2. Configure Conda channel.\n         \nconda config --set channel_priority flexible\nconda config --add channels defaults\nconda config --add channels conda-forge\nconda config --add channels bioconda\nconda config --add channels anaconda\n3. Install MIDAS2:\n         \nconda install -c zhaoc1 midas2\npip install midas2\n4. Optional. Alternatively, install MIDAS2 dependencies via a YAML file. This may be preferable if Conda takes a long time to resolve conflicts.\n         \nwget https://github.com/czbiohub/MIDAS2/releases/download/v1.0.2/midas2.yml\nconda env create -n midas2 -f midas2.yml\nconda activate midas2\npip install midas2\n5. Verify your installation.\n         \n$midas2 --version\nMetagenomic Intra-Species Diversity Analysis System 2 (MIDAS2), Version 1.0.2\nInstallation using Docker\n6. If Docker is properly installed on the system, users can also use the pre-built Docker container.\n         \ndocker pull zhaoc1/MIDAS2:latest",
    "MIDAS2 operates through a command-line interface (CLI). This interface enables reproducible analyses and allows MIDAS2 to be integrated into workflow management frameworks. The command-line allows basic specification of inputs, database, output, as well as advanced analyses.\nNecessary Resources\nHardware\nSee Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]\nSoftware\nSee Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]\nSpecifying output directory\nMIDAS2 writes its outputs to a user-specified root directory, which is always passed as a mandatory argument to each of the six MIDAS2 analysis commands. For example, in this protocol midas2_output is the chosen output directory for single-sample analysis (SNV or CNV module) and midas2_output/merge is the chosen output directory for across-sample analysis (both modules). All analyses write to this output directory, with subsequent steps reading from it.\n1. Single-sample commands:\nThe three single-sample commands (run_species, run_snps, and run_genes) share three important command-line flags.\n         \n--sample_name <sample_name> Unique sample identifier;\n-1 <file_name> Path to file containing forward reads;\n-2 <file_name> Path to file containing reverse reads if applicable.\n2. Across-sample commands:\nA tab-separated sample manifest file listing the sample_name and full path of the single-sample root output directory midas2_output is required for across-sample analyses.\n         \n--samples_list <file_name> Path to sample manifest file.\n3. MIDAS reference database:\nFor all MIDAS2 analyses, users need to specify the following parameters:\n         \n--midasdb_name <db_name> A valid precomputed MIDASDB name (e.g., uhgg or gtdb);\n--midasdb_dir <path_name > Local path for the MIDASDB.\n4. Other Parameters\n         \n--num_cores <cpu_counts> The number of physical cores to use;\n-h All MIDAS2 commands print out a help message describing CLI usage.",
    "This protocol describes how to build a MIDASDB from a custom collection of genomes and perform SNV metagenotyping with it. Other MIDAS2 commands can also be run with the new database. Single-sample SNV metagenotyping is shown as an example. There are three steps: Construct a custom rep-genome database for a collection of representative genomes of interest, build a Bowtie2 index, and execute run_snps command with the prebuilt Bowtie2 index.\nNecessary Resources\nHardware\nSee Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]\nSoftware\nSee Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0001]\nInput Files\nCollection of representative genomes (we have deposited example genomes organized in desired format on Zenodo: https://zenodo.org/record/6774976[href=https://zenodo.org/record/6774976])\n1. Download example genome collection folder from Zenodo to the work directory (midas2_protocol):\n         \nwget https://zenodo.org/record/6774976/files/midasdb_custom.zip\nunzip midasdb_custom.zip\nWe have prepared two genomes for two species from the 21 National Center for Biotechnology Information (NCBI) genomes in the HMP mock community: Staphylococcus aureus (GCF_000013425.1) and S. epidermidis (GCF_006094375.1) for this protocol.\n         \ngenomes.tsv: The table-of-contents file specifying the assignment of representative genomes to species. We randomly assign each species a six-digit species_id.\ncleaned_imports/: The FASTA file of each representative genome, saved in the directory <species>/<genome>/<genome>.fna.\nmetadata.tsv: Taxonomic assignment of the randomly assigned species_id.\n2. MIDAS2 reserves the --midasdb_name newdb for building any new MIDASDB and the custom MIDASDB will be built at --midasdb_dir midasdb_custom.\n3. Construct rep-genome component of MIDASDB.\nAnnotate all the genomes and build the files needed for the rep-genome database. These commands should be executed in the work directory midas2_protocol.\n         \nmidas2 annotate_genome --species all \\\n  --midasdb_name newdb --midasdb_dir midasdb_custom \\\n  --debug --force\nmidas2 build_midasdb --generate_gene_feature \\\n  --genomes all \\\n  --midasdb_name newdb --midasdb_dir midasdb_custom \\\n  --debug --force\nThere are two command-line parameters that users need to pass:\n         \n--debug: Keep the local file after successfully build the database;\n--force: Re-build the database even if one already exists locally.",
    "4. Build one Bowtie2 index with the representative genomes.\n         \nmidas2 build_bowtie2db \\\n  --midasdb_name newdb --midasdb_dir midasdb_custom \\\n  --species_list 100001,100002 \\\n  --bt2_indexes_name repgenomes \\\n  --bt2_indexes_dir bt2_index_custom \\\n  --num_cores 8\nWe build the rep-genome Bowtie2 index for the two species specified via --species_list to the local directory bt2_index_custom/. Note we need to provide the custom MIDASDB midasdb_custom/to ---midasdb_dir.\nUsers can also specify --bt2_indexes_name pangenomes to build the Bowtie2 index for pangenomes.\n5. Execute run_snps with the rep-genome database:\n         \nfor sample_name in SRR172902 SRR172903\ndo\n  midas2 run_snps \\\n    --sample_name ${sample_name} \\\n    -1 reads/${sample_name}.fastq.gz \\\n    --midasdb_name newdb --midasdb_dir midasdb_custom \\\n    --prebuilt_bowtie2_indexes bt2_index_custom/repgenomes \\\n    --prebuilt_bowtie2_species bt2_index_custom/repgenomes.species \\\n    --select_threshold=-1 \\\n    --num_cores 8 midas2_output_custom\ndone\nFor each sample, this code performs single-sample SNV calling for all the species in the Bowtie2 database without any species filters (--select_threshold=-1). The number of CPUs used is specified via --num_cores 8.\nThe output directory is generated automatically under the directories: midas2_output_ custom/SRR172902/snps and midas2_output_custom/SRR172903/snps.\n6. Confirm midas2 run_snps has finished successfully.\nOnce the single-sample SNV analysis is complete without any reported error, check for the output files (see Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0003]).",
    "Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0003] and Basic Protocol 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0004] demonstrate the core functionality of the MIDAS2 SNV and CNV modules using mostly default settings. This protocol describes all the available options for advanced SNV and CNV calling.\nNecessary Resources\nHardware\nSee Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0003]\nSoftware\nSee Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0003]\nInput Files\nSee Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0003]\n1. Single-sample post-alignment filter: Post-alignment filtering is an important component of the MIDAS2 metagenotyping approach, and filter thresholds can have a big impact on precision and recall (Zhao et al., 2022a[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-bib-0025]). Users can adjust post-alignment filters via the following command-line options (default values indicated):\n         \n--mapq 10: Discard read alignments with alignment quality <10;\n--mapid 0.94: Discard read alignments with alignment identity <0.94;\n--aln_readq 20: Discard read alignments with mean quality <20;\n--aln_cov 75: Discard read alignments with alignment coverage <0.75;\n--aln_baseq 30: Discard bases with quality <30;\n--paired_only: Only use properly aligned read pairs (both reads in a pair are retained if one of the reads passes the filter);\n--fragment_length 5000: Maximum fragment length for paired-end alignments.\nFor paired-ends read input, it is crucial to set a proper --fragment_length when --paired_only is specified. Incorrect fragment length affects the number of properly aligned read pairs. If the length is too short, few reads will be aligned but the alignment step runs faster.",
    "2. Single-sample SNV calling: In recognition of the need for single-sample consensus allele calling, we provided the option --advanced to the run_snps command. This causes SNVs to be called using the pileup results for individual samples. SNVs are called for all the species in the rep-genome index. In the --advanced mode, per-species pileup results will report the within-sample major allele and minor allele for any genomic sites covered by at least two post-filtered reads. Custom filters can be applied to these outputs. Users are advised to use the setting --ignore_ambiguous to avoid falsely calling major/minor alleles for sites with tied read counts. The previously introduced post-alignment filter parameters can be used in --advanced mode:\n         \nfor sample_name in SRR172902 SRR172903\ndo\n  midas2 run_snps \\\n    --sample_name ${sample_name} \\\n    -1 reads/${sample_name}.fastq.gz \\\n    --midasdb_name newdb --midasdb_dir midasdb_custom \\\n    --prebuilt_bowtie2_indexes bt2_index_custom/repgenomes \\\n    --prebuilt_bowtie2_species bt2_index_custom/repgenomes.species \\\n    --select_threshold=-1 \\\n    --advanced --ignore_ambiguous \\\n    --num_cores 8 midas2_output_custom_2\ndone\nThe output files are generated automatically under the directories: midas2_output_custom_2/SRR172902/snps/and midas2_output_custom_2 /SRR172903/snps/.\nOnce the single-sample SNV run is complete without any reported error, check for the output files (see Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.604#cpz1604-prot-0003]).\n3. Population SNV filters: The population SNV analysis of MIDAS2 is by default only performed for species that are sufficiently well covered by aligned reads in sufficiently many samples.\n         \n--genome_coverage 0.4: Select species with horizontal coverage > 40%;\n--genome_depth 5: Select species with vertical coverage >5×;\n--sample_counts 2: Select species present in more than two relevant samples.\nFor each genomic site for a given species, a sample is considered to be “relevant” if the corresponding site depth falls between the range defined by the input arguments site_depth and site_ratio × genome_coverage; otherwise, it is ignored for the across-samples SNV compute.\n         \n--site_depth 5: Minimal site depth >5;\n--site_ratio 3: Maximum site depth less than three times the vertical genome depth;",
    "--snp_maf 0.05: Minimal minor allele frequency to call an SNV is 0.05.\nFor each species, a genomic site is considered to be “relevant” if the site prevalence across samples meets the range defined by the input arguments snv_type and site_prev. By default, common SNVs are reported.\n         \n--site_prev 0.9: Minimal proportion of samples in which site is present is 90%;\n--site_type common: Report common (alternatively rare) population SNVs;\n--snp_type bi,tri,quad: Report all possible SNVs or specify SNVs with two, three or four alleles only.\n4. Chunk size: MIDAS2 subdivides the pileup work by splitting the species’ genomes into smaller units called chunks. The chunk size is set so that each chunk takes a reasonable time to run (default chunk_size = 1000000). In order to compute chunk-level population SNVs, all the pileup results of sites within the given chunk across all the samples need to be read into RAM. Therefore, at any given moment, a maximum number of pileup results, calculated from: total CPU cores × total number of sites per chunk × total number of relevant samples, will be read into RAM. Users can customize the chunk size according to their computing environment. There is a trade-off between chunk size, running time, and RAM usage. When metagenotyping hundreds or thousands of samples, MIDAS2 dynamically adjusts to a smaller chunk size (--robust_chunk).\n         \n--chunk_size 1000000: Number of sites in one chunk (smaller chunk size means less RAM needed but longer running time);\n--robust_chunk: Dynamically adjust chunk_size based on species prevalence."
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}