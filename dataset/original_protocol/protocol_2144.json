{
  "id": 2258,
  "origin_website": "Cell",
  "title": "Inferring disease progression and gene regulatory networks from clinical transcriptomic data using PROB_R",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nInfer potential temporal disease progression\nTiming: 2 h\nThis section describes the procedures for inferring potential temporal disease progression from the prepared dataset and selecting temporally changing genes (TCGs) of interest.\nTo begin, download and install required R packages in your R environment. Additionally, you need to download the R files we provide and save them in your current working directory. Then you can load the dataset into Rstudio. The file main.R runs following codes.\n# Package names\npackages=c(\"trend\", \"pheatmap\", \"OmnipathR\", \"tidyr\", \"gprofiler2\", \"minerva\", \"reshape2\", \"ggplot2\",\"Biobase\",\"GEOquery\",\"monomvn\",\"igraph\",\"survival\",\"Brq\");\n# Install packages not yet installed\ninstalled_packages=packages %in% rownames(installed.packages())\nif (any(installed_packages == FALSE)) {\ninstall.packages(packages[!installed_packages])\n}\n# make sure that these R files are in your current working directory.\nsource(\"PROB_GEOinstall.R\");\nsource(\"Progression_Inference.R\");\nsource(\"ODE_Bayesian_Lasso.R\");\nsource(\"BL_to_csv.R\");\nsource(\"Locate_Key_Genes.R\");\nsource(\"KM_analysis.R\");\nsource(\"Time_course.R\");\nsource(\"trans_cytoscape.R\");\n# load GSE7390 dataset\nGene_Data=read.csv(\"Gene_GSE7390.csv\");\nrow.names(Gene_Data)=Gene_Data[,1];\nGene_Data=Gene_Data[,-1];\nGene_Data=data.frame(Gene_Data);\nTo infer potential temporal disease progression from your data, you need to use Progression_Inference() function. This function is based on a graph-based random walk method and returns the pseudo progression status for each patient and pseudo time-series of expressions of all genes. An example of pseudo temporal expression is shown for gene MCM10 (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1728-Fig1.jpg\nFigure 1. Pseudo temporal dynamics of gene expression along latent disease progression\nShown is an example for the gene MCM10. The values of x-axis and y-axis are standardized.\nPI=Progression_Inference(Gene_Data);\nsave(PI,file=\"PI.Rdata\");\npseudo_series=PI$Ordered_Data;\npseudo_time=PI$Sampled_Time;\nplot(pseudo_time,pseudo_series[\"MCM10\",],type=\"l\",xlab=\"pseudo time\",ylab=\"MCM10 expression\");\n# You can plot out pseudo time series of any interested genes by replacing \"MCM10\" here with other specified gene names.\nNote: Progression_Inference() is the function to infer the disease progression. The input object is your cross-sectional transcriptomic data, genes in row and samples in column. The last row is grade information of each sample. The output object contains the following elements.",
    "Accumulated_Transition_Matrix: the accumulated transition matrix used in the step of feature extraction with diffusion maps.\nTemporal_Progression: TPD value of each gene.\nOrdered_Data: reordered samples against temporal progression.\nSampled_Time: sampled time points in the smoothed trajectory.\nOrder: The order of each sample in the inferred pseudo-temporal progression.\nBased on the expression data reordered by PROB_R, we focus on temporally changing genes (TCGs) that have monotone increasing or decreasing trends. We employ a trend analysis technique based on Mann-Kendall test (Mann, 1945[href=https://www.wicell.org#bib11]) (Kendall, 1955[href=https://www.wicell.org#bib8]) to select TCGs. In this case study, we select 100 top TCGs according to the Mann-Kendall test p values.\n#---Identify TCGs-------------------------\nlibrary(trend)\nngenes=nrow(pseudo_series)-1;\nTCG_mark=rep(FALSE,ngenes);\npval_trend=rep(0,ngenes);\nfor(i in 1:ngenes){\n  trial=as.numeric(pseudo_series[i,]);\n  res.t=mk.test(trial);\n#use Mann-Kendall test to identify temporal trend of each gene\n  if(res.t$pvalg<0.05) TCG_mark[i]=TRUE;\n  pval_trend[i]=res.t$pvalg;\n}\nTCGid=order(pval_trend,decreasing=FALSE)[1:100];\nsave(TCGid,file=\"TCGid.Rdata\");\ngrade2=pseudo_series[ngenes+1,];\nTCG_series=rbind(pseudo_series[TCGid,],grade2);\nsave(TCG_series,file=\"TCG_series.Rdata\");\nTCG_names=row.names(pseudo_series)[TCGid];\nYou can draw a heatmap to show the expression profile of the selected genes that express with significant trends during breast cancer progression. It shows that the selected TCGs are divided into two groups (temporally upregulated or downregulated alongside the breast cancer progression) (Figure 2[href=https://www.wicell.org#fig2]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1728-Fig2.jpg\nFigure 2. Clustering heatmap of TCGs\nThe color in each cell represents the standardized expression level of corresponding gene. The left side of the figure shows clustering structure of TCGs.\nlibrary(pheatmap)\ndev.off()\nData=TCG_series[-nrow(TCG_series),];\nM=apply(Data,1,max)\nA=apply(Data,1,mean)\nS=apply(Data,1,sd)\nD=(Data-A)/S\ndev.new()\npheatmap(D,cluster_row=T, cluster_cols=F, clustering_distance_rows='euclidean',clustering_method = \"ward.D\", color = colorRampPalette(c(\"CornflowerBlue\", \"white\", \"firebrick3\"))(200), fontsize=9, fontsize_row=6,labRow=NA, show_colnames = FALSE)\nInfer GRNs and visualize the network\nTiming: 2 h\nThis section describes the procedures for inferring and visualizing GRN.\nSpecify prior network structure. Before applying ODE Bayesian Lasso method (Park and Casella, 2008[href=https://www.wicell.org#bib12]) to infer GRNs between 100 TCGs, we firstly specify a prior network structure to increase accuracy or interpretation of inferred networks. The prior network structure consists of two parts.",
    "The first part of the prior structure comes from possible TCGs interactions provided by OmniPath. OmniPath is a large integrated resource of prior knowledge of molecular regulatory interactions including protein-protein and gene regulatory interactions, enzyme-PTM relationships, protein complexes, protein annotations and intercellular communication (Türei et al., 2016[href=https://www.wicell.org#bib18]).\nlibrary(OmnipathR)\nlibrary(tidyr)\nlibrary(gprofiler2)\niai_all=import_all_interactions();\nw1_all=which((iai_all$source_genesymbol %in% TCG_names) & (iai_all$target_genesymbol %in% TCG_names));\nntcg=length(TCG_names);\nprior_PPI=matrix(rep(0,ntcg∗ntcg),nrow=ntcg,ncol=ntcg);\nfor(i in w1_all){\n  sel=iai_all[i,];\nprior_PPI[which(TCG_names==sel$target_genesymbol),which(TCG_names==sel$source_genesymbol)]=1;\n}\nThe second part comes from the highly co-expressed gene pairs based on the assumption that the whole GRN is rather sparse, gene pairs with top 5% mutual information are also included into the prior network structure as additional edges.\nlibrary(minerva);\nGene_TCGs=t(Gene_Data[TCGid,]);\nMI=mine(Gene_TCGs)$MIC;\nMI95=quantile(MI,0.95);\nprior=(MI>MI95);\nfor(i in 1:100) prior[i,i]=FALSE;\nApply ODE_Bayesian_Lasso() function on pseudo temporal expression data of selected TCGs to infer the regulatory network by incorporating the prior network information.\n>set.seed(1);\n>Breast_BL=ODE_Bayesian_Lasso(TCG_series,pseudo_time,prior|prior_PPI);\nNote: ODE_Bayesian_Lasso() is a function to infer the GRN with ODE Bayesian Lasso method. The input objects contain your transcriptomic data of selected TCGs, pseudo time samples and your prior network. Elements of the output object are listed below.\nAdjacent_Matrix: the matrix of the posterior mean of each parameter.\nAdjusted_Adjacent_Matrix: 0–1 matrix, 1 entry occurs only when edges have 95% or more credible level.\nPresence_Probability: credible level of each edge.\nStandard_Deviations: posterior standard deviation of each parameter.",
    "Critical: Here we use “prior|prior_PPI” to combine two parts of the prior network. If you want to use your own prior network structure, replace “prior|prior_PPI” with a n × n matrix A, here n is the number of your TCGs (n=100 here). Each element of the matrix should be “TRUE/FALSE” or “1/0”. If A(i,j) is TRUE or 1, it means that the edge with the j-th TCG as source node and the i-th gene as target node is considered as a candidate edge in the GRN. Otherwise, this edge is not considered in the model. (Do not reverse the source and target node!)\nUse bubble plot to visualize the adjacent matrix of the inferred GRNs (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1728-Fig3.jpg\nFigure 3. Bubble plot of adjacent matrix of the inferred GRNs\nThe node color represents the posterior mean of regulatory coefficient for each edge, with red for positive and green for negative. The node size represents the standardized absolute value of the edge coefficient, which is calculated as the absolute posterior mean divided by the standard deviation.\nlibrary(reshape2)\nlibrary(ggplot2)\nBL3=Breast_BL;\nam=BL3$Ajacent_Matrix;\nrownames(am)=colnames(am)=TCG_names;\nsd=BL3$Standard_Deviations;\nrow_id=(apply(abs(am),1,sum)>1e-5);\ncol_id=(apply(abs(am),2,sum)>1e-5);\nam=am[row_id,col_id];\nsd=sd[row_id,col_id];\ndata_melt=melt(am);\nnames(data_melt)=c('Gene1','Gene2','Value');\np=ggplot(data_melt,aes(x=Gene2,y=Gene1,size=abs(am)/sd,color=am))+geom_point()+theme(axis.text.x = element_text(angle=90,hjust=1))+\n  ylab(\"Target\n  genes\")+xlab(\"Genes\")+scale_colour_gradient(low=\"green\",high=\"red\");\np\nChoose threshold of credible level of edges to visualize the network. In the returned list of ODE_Bayesian_Lasso() function, the matrix Presence_Probability tells us how credible an edge exists in the GRN. We select a threshold to filter out those edges with low credible level for visualization purpose or for further analysis.",
    "Here we provide a data-driven method to select the threshold of edge credible level. It is based on the assumption that the structures of GRNs tend to follow a scale-free principle. It means that the network degree sequence often follows a power-law distribution (Albert and Barabasi, 2001[href=https://www.wicell.org#bib1]). For each possible edge threshold (a real number ranging from 0.01 to 0.99), we have a network degree sequence. Then we apply linear regression with a logarithm link function on the empirical density of the degree sequence and use R-square statistic for evaluation. If an edge threshold corresponds to a higher R-square value, it means that this network is more inline with scale-free feature. The code for calculating the R-square is as follows.\nlibrary(igraph)\nBL3=Breast_BL;\ncah=(1:99)/100;\npower=rep(0,99);\nr2=rep(0,99);\nfor(i in 1:99){\n  alpha=cah[i];\n  BL3graph=graph_from_adjacency_matrix(BL3$Presence_Probability>alpha);\n  degs=degree.distribution(BL3graph);\n  degs=degs[-1];\n  x=(1:length(degs));\n  no0=(degs>0);\n  x=x[no0];y=-log(degs[no0]);\n  fit=lm(y∼x);\n  power[i]=fit$coefficients[2];\n  r2[i]=cor(x,y)ˆ2;\n}\nThe edge threshold with highest R-square value is determined as follows:\n> which(r2==max(r2))/100\n> 0.93\nSimilarly, if you want to visualize the network based on the scale-free edge threshold, you can use BL_to_csv() function to convert the network data to a .csv format file for Cytoscape input.\n> BL_to_csv(Breast_BL,0.93,”GSE7390_GRNs.csv”,TCG_names);\nNote: In the original paper of PROB (Sun et al., 2021[href=https://www.wicell.org#bib16]), the threshold is chosen as 0.95, which means that only edges with more than 95% credible level are left in the final network. If you want to follow the original paper, you can use the following code:\n>BL_to_csv(Breast_BL,0.95,\"GSE7390_GRNs.csv\",TCG_names);\nThen you can upload this “GSE7390_GRNs.csv” file into Cytoscape to visualize the network. You can choose the layout and edit style of your network in Cytoscape. In this example we use a circular layout. For each edge, red color represents positive regulation and blue color represents negative regulation (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1728-Fig4.jpg\nFigure 4. Gene regulatory networks with threshold 0.95 as edge credible level",
    "The color of the edge represents the sign of the edge, i.e., red for positive regulation and green for negative regulation, respectively.\nIdentify key genes in disease progression\nTiming: 2 h\nThis section describes the procedures for identifying key genes within the inferred GRN.\nIdentify key genes with eigenvector centrality measure.\nuse Locate_Key_Genes() function to calculate hub scores of each gene in the GRN. We draw a barplot to assist the identification of the key genes with highest hub scores (Figure 5[href=https://www.wicell.org#fig5]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1728-Fig5.jpg\nFigure 5. Top 5 genes ranked according to the hub scores\nEig_scores=Locate_Key_Genes(Breast_BL,TCG_names);\ncut=5;\nlibrary(ggplot2)\ntrt=names(Eig_scores)[1:cut];\noutcome=Eig_scores[1:cut];\ndf=data.frame(trt,outcome)\np=ggplot(df, aes(reorder(trt,-outcome), outcome)) +\n  geom_bar(aes(fill=outcome),stat=\"identity\")+xlab(\"\")+ylab(\"Hub scores\")+\n  scale_fill_gradient(low = \"Yellow\", high = \"Red\", na.value = NA)+\n  theme_minimal()#+theme(axis.text.x = element_text(angle=90, hjust=1));\n  p\nYou can also draw time-course graphics of the key genes using Time_course() function, as shown in Figure 6[href=https://www.wicell.org#fig6].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1728-Fig6.jpg\nFigure 6. Time course curves of the top 5 genes\n> Time_course(Eig_scores,cut=5,TCG_series,pseudo_time)\nFurther analysis or validation of the key genes.\nThe barplot above (Figure 5[href=https://www.wicell.org#fig5]) suggests that FOXM1 is the most important gene in the inferred GRN during breast cancer progression. To verify the statistical significance of the prognostic power of FOXM1, we analyze the association of FOXM1 expression with survival time data of breast cancer patients in the GSE7390 dataset. The survival time data can be extracted using the following codes:\nSys.setenv(VROOM_CONNECTION_SIZE=1e8);\nlibrary(GEOquery)\nlibrary(Biobase)\nmy_id=\"GSE7390\";\ngset=getGEO(my_id,GSEMatrix =TRUE, getGPL=FALSE);\nFUN7=function(strg){return(as.numeric(substring(strg,first=7)))};\nFUN8=function(strg){return(as.numeric(substring(strg,first=8)))};\nFUN9=function(strg){return(as.numeric(substring(strg,first=9)))};\nos=as.array(gset[[\"GSE7390_series_matrix.txt.gz\"]]@phenoData@data[[\"characteristics_ch1.15\"]]);\nos=apply(os,1,FUN=FUN7)/365;\neos=as.array(gset[[\"GSE7390_series_matrix.txt.gz\"]]@phenoData@data[[\"characteristics_ch1.16\"]]);\neos=apply(eos,1,FUN7);\nrfs=as.array(gset[[\"GSE7390_series_matrix.txt.gz\"]]@phenoData@data[[\"characteristics_ch1.13\"]]);\nrfs=apply(rfs,1,FUN=FUN8)/365;\nerfs=as.array(gset[[\"GSE7390_series_matrix.txt.gz\"]]@phenoData@data[[\"characteristics_ch1.14\"]]);\nerfs=apply(erfs,1,FUN8);\ndmfs=as.array(gset[[\"GSE7390_series_matrix.txt.gz\"]]@phenoData@data[[\"characteristics_ch1.17\"]]);\ndmfs=apply(dmfs,1,FUN=FUN9)/365;\nedmfs=as.array(gset[[\"GSE7390_series_matrix.txt.gz\"]]@phenoData@data[[\"characteristics_ch1.18\"]]);\nedmfs=apply(edmfs,1,FUN=FUN9);\n#os,rfs,dmfs: survival time data with respect to overall survival, relapse-free survival and distant metastasis-free survival.\n#eos,erfs,edmfs: 0/1 vector for samples labeling whether corresponding events are observed.",
    "Then you can use KM_analysis() function to draw survival probability curves of patients with high or low expression of FOXM1. The function also calculates the log-rank p-values with respect to overall survival (OS), relapse-free survival (RFS) and distant metastasis-free survival (DMFS) (Figure 7[href=https://www.wicell.org#fig7]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1728-Fig7.jpg\nFigure 7. Clinical relevance of FOXM1 for breast cancer patients\nThe red curve corresponds to low level of gene expression and the blue curve corresponds to high expression level. The log-rank test p values are used to assess the statistical significance of difference between the two K-M survival curves.\n#---KM analysis\ncut=1;\ntop_id=names(Eig_scores);\npar(mfcol=(c(cut,3)))\nfor(i in 1:cut){\n  ng=top_id[i]; #ng is the gene that you want to apply KM analysis.\n  KM_analysis(os,eos,ng);text(4,0.4,\"OS\",cex=1.5);\n  KM_analysis(rfs,erfs,ng);text(4,0.4,\"RFS\",cex=1.5);\n  KM_analysis(dmfs,edmfs,ng);text(4,0.4,\"DMFS\",cex=1.5);}"
  ],
  "subjectAreas": [
    "Bioinformatics",
    "Systems Biology",
    "Health Sciences",
    "Cancer",
    "Gene Expression"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}