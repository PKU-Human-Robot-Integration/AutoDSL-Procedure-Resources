{
  "id": 2787,
  "origin_website": "Cell",
  "title": "Implementation of a graph-embedded topic model for analysis of population-level electronic health records",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nThe following are detailed instructions on how to implement the method. We have created a simulated dataset Simulation_data and show examples of each step in a tutorial jupyter notebook called Tutorial. Those can be found in the repository https://github.com/li-lab-mcgill/getm[href=https://github.com/li-lab-mcgill/getm].\nData preprocessing for topic modeling (scripts/data_utils.py)\nTiming: 1 h\nThis section describes 1). The data filtration by participants’ ethnic group, so to reduce potential confounding by ethnic groups 2). The creation of medication and condition sets according to medication/condition’s relatedness to pain 3). The preparation of the input file for the topic model.\nFilter out UK Biobank data of which the individuals are not European descent.\nTo reduce potential confounding caused by ethnic groups, we focus on only the European descents.\nBased on UK Biobank Field 21000, we create a dictionary indicating whether an individual is a European descent. The key of the dictionary is the individual id and the value is the Boolean type object. We can refer to the function create_dict() for implementation.\n/∗ Create a dictionary indicating whether an individual is a European descent∗/\n>white_dict = create_dict(eth_data, “ethnicity”, “white”)\nFilter UKB phenotype data by individual ids according to the dictionary from previous step.\n>med_data_eth = [white_dict[u] for u in med_data[user_id]]\n>med_data[\"ethnicity”] = med_data_eth\n>filtered_med_data = med_data[med_data[\"ethinicity”]==1]\nUse active ingredients as medications.\nExtract active ingredients of each medication’s name in UKB field 20002.\nReplace medication codes from UKB 20002 with their corresponding active unique ingredients.\nEach active ingredient is considered as a unique medication.\nRemove duplicate conditions.\nCreate different sets of medications and conditions. Of each set, keep/remove certain medication or condition based on their relatedness with medical outcome of interest (such as chronic pain, etc.) using physician’s curated lists or odds ratios:",
    "For each interested pain type, get a medication list and a condition list curated by physicians that are correlated this type of pain.\nCalculate the odds ratio of each condition and medication with respect to this specific pain type as the outcome. Create a medication list and condition list with medications and conditions with top odds ratio.\nCreate new different filtered medication sets by removing from the entire medication set the medications of physician curated list or odds ratio or the union of both. Create new filtered condition sets similarly.\nPlease refer to function create_filtered_set() for implementation.\n> new_med_set = create_filtered_set(med_set, gp_related_med)\nFor N individuals, selected medication set of M medications and selected condition set of C conditions, create a Python NumPy array   X ∈  R  N ×  (  M + C  )     , of which we set 1 if we observe medication or condition for the individual, otherwise we set 0. We can refer to the function combine_data() and create_input_file() for implementation.\n>combined_data = combine_data(filtered_cond_data, filtered_med_data)\n>X, med_idx, cond_idx = create_input_file(combined_data, new_med_set, new_cond_set)\nSave the array using NumPy’s save() method from previous step to the file location specified by data_path while running GETM.\n> np.save(data_path, X)\nData preprocessing for graph learning (scripts/data_utils.py)\nTiming: 2 h\nThis section describes 1). The construction of medication and condition knowledge graphs 2). The creation of input files for the graph model.\nCreate a tree graph of all non-duplicate conditions based on coding taxonomy designed by UKB team (i.e., data-field 20002).",
    "Note: The graph contains more condition nodes than that were observed of the individuals. The unobserved nodes are mainly from higher levels of the hierarchical tree (e.g., disease categories). We do not delete any nodes from the graph. Extra nodes help to learn more knowledge for those observed condition during message passing of graph model (Node2Vec).\nCreate a text file consisted of two columns in the format of <node1, node2>, where node1 and node2 are two connected nodes from tree graph in step 13. The number of rows is the number of all edges in the graph. We can refer to function create_cond_graph() for implementation.\n> cond_graph = crate_cond_graph(cond_tree, saved_cond_graph)\nSave the text file.\nCreate a tree graph of medications (or medication groups) based on Anatomical Therapeutical Chemical (ATC) classification system.\nMap active ingredients from UKB data-field 20003 to the fifth level codes of ATC by ingredient name.\nReplace the related ATC codes with the corresponding active ingredients from UKB data. For ATC codes mapped to same active ingredient, merge all corresponding nodes to one single node in graph created in step 16.\nCreate a text file consisted of two columns in the format of <node1, node2>, where node1 and node2 are two connected nodes from tree graph in step 18.\nPlease refer to function create_med_graph() for implementation of steps 16–20.\n> med_graph = create_med_graph(med_tree, saved_med_graph)\nSave the text file.\nData preprocessing for pain prediction\nTiming: 1 h\nThis section illustrates how to extract UKB pain-related phenotype labels for supervised learning.\nDefine the outcome (e.g., chronic musculoskeletal pain).\nCreate a binary vector   Y ∈  R  N × 1     based on individuals’ answers from the related data-field.",
    "Note: For details about all UKB pain-related phenotype labels we extracted, please refer to section 10.3.2 in Wang et al.1[href=https://www.wicell.org#bib4] Briefly, we use the data from step 4 to collected 9 pain-related labels.\nSave the vector   Y   as a NumPy array using save() method.\nGraph modeling on taxonomical knowledge graphs\nTiming: 1 h\nThis section describes how to run separate graph models (i.e., node2vec4[href=https://www.wicell.org#bib2]) on medication and condition knowledge to get pre-trained medication and condition embeddings. The embeddings are vectors projected to latent space which capture the structural knowledge of medications or conditions. The embeddings are inputs for topic modeling described in later steps.\nModify the script subjob/run_node2vec.sh.\ngraph_file = path to save .txt file containing graph information (i.e., text file from steps 15 or 21).\nNote: if tuning other parameters is required, please refer to details about each parameter in scripts/node2vec.py.\n> bash run_node2vec.sh\nThe output are medication embeddings of all medications on the medication knowledge graph and condition embeddings of all conditions on the condition knowledge graph.\nNote: The embedding of a medication or condition is a vector in dimension D on latent space. D is a hyperparameter which is 128 in our setting. The output is a .txt file of which each row is in the format <node_id, embedding>.\nFind and extract the rows of medication ids and condition ids of the medication set and condition set selected in step 11 for topic modeling.\nSave the medication embeddings and condition embeddings of the selected sets from the previous step. The embeddings are saved as NumPy matrix using the save() method.\nTopic inference\nTiming: 2 h\nThis section describes how to run the graph topic model by appropriately loading input files and setting up the hyperparameters.\nModify the script subjob/run_metm.sh.",
    "data_path = path to load input data from step 12.\nsave_path = path to save outputs.\nvocab_size1 = the number of unique medications.\nvocab_size2 = the number of unique conditions.\nembedding1 = path to load the pretrained medication embedding obtained from step 28.\nembedding2 = path to load the pretrained condition embedding obtained from step 28.\nNote: if tuning other parameters is required, please refer to details about each parameter in scripts/main_multi_etm_sep.py.\n> bash run_metem.sh\nThe outputs are medication-specific topic mixture    β  (  m e d  )    ε   R  K × M     which is K topics’ distribution over M medications, condition-specific topic mixture    β  (  c o n d  )    ε   R  K × C     which is K topics’ distribution over C conditions and individual topic mixture   θ  ε   R  N × K     which is N individuals’ distribution over K topics.\nPain prediction\nTiming: 30 min\nModify the script subjob/ run_prediction.sh.\ninput_file = path to load   θ  .\nlabel_file = path to load   Y  .\nsave_label = path to load the predicted labels.\nNote: if tuning other parameters is required, please refer to details about each parameter in scripts/prediction.py.\n> bash run_prediction.sh\nThe output is predicted label array    Y ˆ    which is a probability of being positive."
  ],
  "subjectAreas": [
    "Computer Sciences",
    "Health Sciences",
    "Systems Biology"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics"
  ]
}