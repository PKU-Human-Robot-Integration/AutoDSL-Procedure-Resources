{
  "id": 3188,
  "origin_website": "Cell",
  "title": "Master regulator activity QTL protocol to implicate regulatory pathways potentially mediating GWAS signals using eQTL data",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nHere we describe step-by-step how to infer the tissue-specific ARACNe co-expression network, infer expression regulator activities with VIPER, identify representative phenotypic master regulators (MRs), and run eQTL and aQTL analyses. To demonstrate this protocol, we will use lymphoblastoid cell line expression and genotype data from GEUVADIS with a simulated phenotype. Results from controlled access adipose expression, genotype, and BMI data from the TwinsUK Study as used in Hoskins et al. (2021)1[href=https://www.wicell.org#bib1] are also shown as examples from a more polished and biologically meaningful analysis. Alternatively, the reader may use their own data while following the protocol. Required formats for input files are noted throughout the protocol and demonstrated by the provided GEUVADIS data files.\nInferring ARACNe co-expression network\nTiming: 2–96 h (for 462 samples in GEUVADIS toy dataset with 100 bootstraps run all in parallel or serially, respectively)\nGene regulatory networks dynamically evolve in response to the cell’s microenvironment and importantly determine the cell state.7[href=https://www.wicell.org#bib7],8[href=https://www.wicell.org#bib8],9[href=https://www.wicell.org#bib9],10[href=https://www.wicell.org#bib10] Therefore, when leveraging a co-expression network to infer expression regulator activities, it is important to use a network relevant to the cell type or tissue under study. ARACNe (Algorithm for the Reconstruction of Accurate Cellular Networks) is a tool designed to infer gene regulatory networks from transcriptomic data sets based on the mutual information between the genes’ expression.5[href=https://www.wicell.org#bib5],6[href=https://www.wicell.org#bib6] In this step we will infer a lymphoblastoid cell line-specific ARACNe network from log2 transformed, RPKM normalized RNA-seq data from the GEUVADIS Study using the Java executable for ARACNe-AP within a Linux shell.\nNavigate to your working directory containing the ARACNe executable jarfile, the expression data, and expression regulator list file.\nCalculate the mutual information threshold for the expression data.\n> java -Xmx16G -jar aracne.jar -e GEUVADIS_filtered_samples_expressed_genes_logRPKMs_with_symbols.txt -o GEUVADIS_100boots --tfs Expression_regulator_list_from_Hoskins_et_al_2021.txt --pvalue 1E-8 --seed 1 --calculateThreshold",
    "Critical: We have provided an expression regulator list as gene symbols that includes transcription factors, transcription co-factors, and signal transduction factors in humans. However, the user may use their own defined list of expression regulators using whatever gene identifiers they prefer (e.g., Entrez IDs, Ensembl Gene IDs, etc.). Indeed, if the user is working with non-human data, they must generate their own list of expression regulators for their species of study using gene identifiers matching their transcriptomic data to use as the input for the --tfs argument. The regulator list file is a simple text file with one gene identifier per line.\nNote: The arguments used in this command are as follows: -e is the expression data file, -o is the name of the desired output directory, --tfs is the file listing expression regulator names, --pvalue is the P-value threshold for network edge inclusion (1E-8 is standard), --seed is the random number generator seed number that allows for reproducibility of inferences, and --calculateThreshold sets the mode to calculate the mutual information threshold for network edge inclusion, which is required for subsequent bootstrap network inferences. Please see the ARACNe-AP documentation at https://github.com/califano-lab/ARACNe-AP[href=https://github.com/califano-lab/ARACNe-AP] for further details regarding its arguments.",
    "Note: ARACNe network inference should be run with expression data for at least 100 samples of the same tissue or cell type, though higher sample numbers would improve statistical power for detecting significant mutual information between genes, thereby yielding a denser network.6[href=https://www.wicell.org#bib6] While homogeneity between samples will allow for the inference of a more context-specific network, there is a balance to be struck between homogeneity of samples and sufficient variance in the expression of regulators and target genes to enable detection of mutual information. Therefore, using samples of the same type but with diversity among their genetics and/or environmental exposures would likely yield a denser and more broadly applicable tissue or cell type-specific co-expression network. However, heterogeneous cellularity within samples is not ideal as it results in a network representing a blending of multiple cell types that may not yield accurate activity inferences with VIPER when applied to samples that greatly deviate from the average cellular distribution among samples used to infer the ARACNe network.\nNote: The RNA-seq expression values should be adequately normalized to account for library size and gene length (e.g., RPKM, FPKM, or TPM). If using a sample type likely to have significant RNA composition bias (i.e., a large overrepresentation of reads mapping to a small subset of genes), as commonly occurs for example with glandular epithelial tissue, then other normalizations may be warranted (e.g., GeTMM).11[href=https://www.wicell.org#bib11] Log2 transformation may also be desirable to reduce heteroskedasticity within the data. The expression data file should be formatted as a tab-delimited text file with genes by rows and samples by columns with gene IDs in the first column and a header as the first row that includes sample IDs.",
    "Note: It is recommended that the expression data be filtered to exclude genes with very low to no expression across all samples prior to ARACNe network inference. The user may use their discretion for expression filtering, but one approach is to keep only genes with >0.1 TPM in ≥20% of samples AND ≥6 read counts (unnormalized) in ≥20% of samples, as described for GTEx v8 expression data analysis (https://gtexportal.org/home/datasets[href=https://gtexportal.org/home/datasets]).\nFrom the same directory, run 100 bootstrap network inferences (each with a different --seed value) using commands of the following form.\n> java -Xmx16G -jar aracne.jar -e GEUVADIS_filtered_samples_expressed_genes_logRPKMs_with_symbols.txt -o GEUVADIS_100boots --tfs Expression_regulator_list_from_Hoskins_et_al_2021.txt --pvalue 1E-8 --seed 1\nCritical: This step is the most computationally intensive of the protocol. It would be most efficient to use a computer cluster to which the 100 individual bootstrap ARACNe commands (each with the seed flag set to a different number from 1 to 100) may be submitted and run in parallel. Please consult the documentation for your computer cluster for details on submitting parallel jobs. Trying to run this many bootstrap networks serially would require ∼96 h in total. Therefore, for any readers that do not currently have access to a computer cluster, or who simply wish to conserve computational resources and time, we have made the resulting consolidated 100 bootstrap GEUVADIS lymphoblastoid (and 300 bootstrap TwinsUK adipose) ARACNe network available in the GitHub repository as described in the key resources table[href=https://www.wicell.org#key-resources-table].",
    "Note: The authors of ARACNe recommend a minimum of 100 bootstraps.6[href=https://www.wicell.org#bib6] However, our testing indicated that with sufficient sample size, increasing the number of bootstraps increases the density of the final consolidated ARACNe network (in so far as the sampling space has not been saturated). The significance of network edges added by increasing bootstraps will be lower than those present with fewer bootstraps, but the contribution to VIPER’s inference of regulator activities for each target gene is weighted by the significance of the corresponding edge. Consequently, adding more edges with diminishing significance does not greatly alter inferred activities. However, regulator activities will only be inferred for regulators with at least 25 target genes in the ARACNe network to ensure robustness of the inference, which means denser networks do enable activity inferences for more total regulators. For the TwinsUK adipose expression data we found that a 100 bootstraps network yielded activity inferences for 2,739 regulators, 300 bootstraps yielded inferences for 3,928 regulators, and 900 bootstraps yielded inferences for 4,213 regulators. Despite these differences, among the regulators with activities inferred from all networks, the correlations among the activities based on networks with differing bootstraps were all very high (Pearson r > 0.98), which is consistent with VIPER’s previously demonstrated robustness.12[href=https://www.wicell.org#bib12]\nConsolidate the bootstrap networks into a single, final ARACNe network, which we rename and copy without its header (for a subsequent step) using the following commands.\n> java -Xmx32G -jar aracne.jar -o GEUVADIS_100boots --consolidate\n> mv ./GEUVADIS_100boots/network.txt ./GEUVADIS_100boots/GEUVADIS_100boots_ARACNe_network.txt\n> awk 'BEGIN{OFS=\"\\t\"} NR>1' ./GEUVADIS_100boots/GEUVADIS_100boots_ARACNe_network.txt > ./GEUVADIS_100boots/GEUVADIS_100boots_ARACNe_network_no_header.txt\nInferring regulator activities with VIPER\nTiming: 30 min",
    "The VIPER algorithm integrates enrichment of expected expression changes among a regulator’s target genes with confidence in the regulator-target network edges and target overlap between different regulators (i.e., pleiotropy) to infer regulator activities from the expression of downstream target genes.12[href=https://www.wicell.org#bib12] In this step we use the VIPER algorithm as implemented in the MRaQTL package to infer the activities of 4,046 expression regulators based on the GEUVADIS expression data and the 100 bootstraps GEUVADIS lymphoblastoid cell line ARACNe network inferred in the previous step. However, we will also show figures generated from the TwinsUK adipose dataset as an example of a more polished analysis. If the reader would like to replicate the TwinsUK results or use their own data, they may simply replace the corresponding file names throughout the following steps.\nStart an R/RStudio session and, using the following commands, load the MRaQTL package, and set your working directory to that containing the expression data, covariables data, and the tissue-specific ARACNe network without a header (as generated in Step 4).\n> library(MRaQTL)\n> setwd(\"/path/to/data/\")\nUse the prepActExp() function to run the regulator activity inference with VIPER, check the distribution of gene-wise correlations between regulator expression and activity, and prepare and output the expression and activity data for subsequent eQTL/aQTL analyses.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2760-Fig1.jpg\nFigure 1. Density plots of paired regulator expression-activity correlations\n(A and B) Density plots of Pearson correlations between paired expression and activity values across samples for each expression regulator for which VIPER could infer activity using the (A) GEUVADIS toy dataset, or (B) TwinsUK adipose dataset.\n> prepActExp(\n\"GEUVADIS_filtered_samples_expressed_genes_logRPKMs_with_symbols.txt\",\"GEUVADIS_filtered_samples_select_covars.txt\",\n\"GEUVADIS_100boots_ARACNe_network_no_header.txt\",\n\"Toy_data\")",
    "Note: The four arguments used in this command correspond to the expression data file, the covariables file, the ARACNe network file (without a header), and a prefix string for labeling the output files, in that order. For full details on the function and its arguments, enter “?prepActExp” in the R console or search for the function in the RStudio Help tab.\nNote: Depending on the OpenBLAS library version currently installed on the system, the user might receive the error “return code from pthread_create() is 22.” In this case, the reader should manually install the preprocessCore package with threading disabled using the following command in their R session:\n> BiocManager::install(\"preprocessCore\", configure.args=\"--disable-threading\", force = TRUE)\nNote: If the reader opted to use a pre-made ARACNe network, they must first save a copy of it without a header to use it as the network input for the prepActExp() function. An awk command for doing this was provided in Step 4, but the file is likely small enough that the header could be removed manually using a standard text editor.\nNote: In this step the covariables file is only used by the R script to ensure the output activity and normalized expression data files have the same samples in the same order, which is important for the eQTL and aQTL analysis steps later in the protocol. The covariables file should be formatted as a tab-delimited text file with covariables by rows and samples by columns with covariable names in the first column and a header as the first row that includes sample IDs.",
    "Note: In addition to the normalized expression and activity data, the script outputs a density plot for all paired correlations between each regulator’s expression and activity (see Figure 1[href=https://www.wicell.org#fig1]). As transcript expression level is an imperfect proxy for gene product activity given various post-transcriptional and post-translation regulatory phenomena, we do expect the correlation between regulator expression and activity to be less than perfect. However, such correlations should still tend to be high for most regulators, as they are for this demonstrated analysis (Figure 1[href=https://www.wicell.org#fig1]). See problem 3[href=https://www.wicell.org#sec5.5] in the troubleshooting[href=https://www.wicell.org#troubleshooting] section if this plot indicates most correlations are weak (i.e., Pearson r < 0.7).\nIdentifying representative putative phenotypic master regulators (MRs)\nTiming: 30 min",
    "Phenotypic cell states can be identified by, and are importantly determined by, their transcriptional state.7[href=https://www.wicell.org#bib7],8[href=https://www.wicell.org#bib8],9[href=https://www.wicell.org#bib9],10[href=https://www.wicell.org#bib10] Gene regulatory networks are key to the progression from one cell state to another and to the maintenance of cellular homeostasis by canalizing genetic and environmental information in the establishment of stable transcriptional states.7[href=https://www.wicell.org#bib7],8[href=https://www.wicell.org#bib8],9[href=https://www.wicell.org#bib9],10[href=https://www.wicell.org#bib10] The canalization of genetic information by gene regulatory networks is dramatically demonstrated in cancers and other genetically induced disease states wherein many distinct mutational profiles may converge on the same transcriptional and phenotypic state.8[href=https://www.wicell.org#bib8],13[href=https://www.wicell.org#bib13] Furthermore, a growing body of regulatory network-based analyses have indicated that the canalization of genetic and environmental information occurs through master regulators (MRs) that are organized by positive feedback relationships into tightly connected regulatory modules that importantly determine the transcriptional state.8[href=https://www.wicell.org#bib8],13[href=https://www.wicell.org#bib13] Based on this conceptual framework, we use a master regulator (MR) analysis to focus our trans-eQTL and aQTL analyses on a subset of regulators that best represent these MR modules, thereby greatly reducing the multiple testing burden while simultaneously enriching for regulators that are important for establishing the transcriptional state associated with the phenotype of interest. Specifically, we select representative phenotypic MRs based on ranked importance in a random forest classification or regression model predicting phenotype from inferred regulator activities. The MR analysis is split into two steps: (1) random forest cross-validation analysis to determine a suitable number of representative phenotypic MRs, and (2) final random forest model training for the selection of representative phenotypic MRs.\nIf still open, you may continue working in the same R session used above and move on to Step 8. Otherwise, start an R/RStudio session, load the MRaQTL package, and set your working directory to that containing the inferred activity data (as generated in Step 6), and phenotype data as in Step 5.",
    "Use the rfCrossVal() function to perform random forest cross-validation analysis to estimate how many regulators are needed to effectively minimize the mean cross-validation error. For this demonstration with the GEUVADIS dataset, a simulated phenotype labeled “Sim_pheno” is used as the phenotype of interest.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2760-Fig2.jpg\nFigure 2. Phenotype distributions in the training and test sets\n(A and B) Overlayed density plots for the (A) “Sim_pheno” values among GEUVADIS samples, or (B) BMI measurements among TwinsUK samples for the training (blue line) and test (red line) sets. The phenotype distributions are suitably similar between the training and test sets for both datasets.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2760-Fig3.jpg\nFigure 3. Cross-validation random forest plots\n(A and B) Cross-validated prediction performance of random forest regression models with the number of predictors sequentially reduced by five starting with 500. Models were trained to predict (A) “Sim_pheno” for the GEUVADIS dataset, or (B) BMI for the TwinsUK dataset from regulator activities 12 independent times, each with a unique seed. The plot compares the number of predictors included in the model versus the mean cross-validation error, and error bars indicate the standard deviation of the 12 analyses. Users should choose a feature count shortly after where the curve begins to flatten. For this protocol we chose 100, which determines the number of representative “Sim_pheno” or BMI MRs selected in the next step.\n> rfCrossVal(\"Toy_data_regulators_activities.txt\",\n\"GEUVADIS_simulated_phenotype.txt\",\"Sim_pheno\",\"Toy_data\")",
    "Critical: It is essential that the phenotype data come from the same cohort as the transcriptomic data. For the demonstration of this protocol, we use a phenotype data file that only includes the “Sim_pheno” simulated phenotype as a continuous variable. However, users may input a phenotype file with multiple different phenotypes (one per column) since one of the arguments passed to the rfCrossVal() function specifies for which phenotype you wish to identify representative phenotypic MRs. Indeed, the user may wish to run MR and QTL analyses for each relevant phenotype. The phenotype file should be formatted as a tab-delimited text file with samples by rows and phenotypes by columns with sample IDs in the first column and a header as the first row that includes the phenotype names. Both continuous and binary (e.g., case-control status) phenotypes are supported, though their outputs differ as a reflection of the use of random forest regression versus classification, respectively.\nNote: The four arguments used in this command correspond to the regulator activities data file generated in Step 6, the phenotype file, a string indicating the phenotype column name, and a prefix string for labeling the output files, in that order. For full details on the function and its arguments, enter “?rfCrossVal” in the R console or search for the function in the RStudio Help tab. Note that there are six additional arguments that provide greater control over this analysis but for this example we use their defaults.",
    "Note: One of the outputs of this step is a plot overlaying the distributions of the phenotype of interest for the training and test sets (Figure 2[href=https://www.wicell.org#fig2]). This can indicate potential biases in the phenotype between the two sets. For this demonstration analysis, we see that for the GEUVADIS and TwinsUK datasets, the “Sim_pheno” and BMI distributions are well matched between the training and test sets, respectively (Figure 2[href=https://www.wicell.org#fig2]). If your phenotype distributions are uneven, see problem 4[href=https://www.wicell.org#sec5.7] in the troubleshooting[href=https://www.wicell.org#troubleshooting] section for possible remedies.\nNote: This analysis begins by testing linear models associating each regulator’s activity to the phenotype of interest as a first step to focus the analysis on the most relevant regulators and reduce the computational burden. By default, only the most significant regulators with a Bonferroni-adjusted P ≤ 0.05 are used in the cross-validation random forest modeling up to a maximum of 500, but with a minimum of 100. For this demonstrated analysis, out of 1,574 significantly associated with “Sim_pheno”, the top 500 regulators are used. If there are few regulators with activities significantly associated to your phenotype according to the linear models (e.g., less than ∼100), which you can check in the function’s standard output log file, see problem 5[href=https://www.wicell.org#sec5.9] in the troubleshooting[href=https://www.wicell.org#troubleshooting] section.",
    "Critical: In addition to the phenotype distribution plot previously mentioned, the rfCrossVal() function outputs a log file with the standard output generated by the function, the R workspace (to be used in the next step), and a plot of mean cross-validation error as a function of feature count. The cross-validation plot is the key result that indicates how many regulators are needed to effectively minimize the phenotype prediction error (Figure 3[href=https://www.wicell.org#fig3]). A feature count at which the prediction error stabilizes indicates the number of representative phenotypic MRs we will select (typically ∼100) in the next step when training and testing the final phenotypic MR random forest model. If the prediction error fails to stabilize, see problem 6[href=https://www.wicell.org#sec5.11] in the troubleshooting[href=https://www.wicell.org#troubleshooting] section.\nUse the finalRF() function to train the final phenotypic MR random forest model and identify the representative putative phenotypic MRs. Based on the previous step, we will identify 100 representative “Sim_pheno” MRs.\n> finalRF(\"Toy_data_rfcv_workspace.RData\",\n\"Toy_data_regulators_QNorm_INT_expression.txt\",\n\"Sim_pheno\",\"Toy_data\",100)\nCritical: One of the outputs of this script is a text file with summary statistics for the comparison of predicted (based on the final MR random forest model) and actual phenotype values for both the training and test sets (linear model statistics generated by stats::lm() function for continuous phenotypes and confusion matrix statistics generated by the caret::confusionMatrix() function for binary phenotypes). For this protocol demonstration with the simulated phenotype, the associations should both be quite significant (Ptraining = 2.26 × 10−50 and Ptest = 7.03 × 10−17). However, if the P-values are poor for either the training or test set with your own data, the MR analysis should not be trusted. See problem 7[href=https://www.wicell.org#sec5.13] in the troubleshooting[href=https://www.wicell.org#troubleshooting] section.",
    "Note: The finalRF() function is run with five arguments corresponding to the R workspace file from the previous step, the file for the regulators normalized expression data generated in Step 6, a string indicating the phenotype column name, a prefix string for labeling the output files, and the number of representative phenotypic MRs desired (based on the random forest cross-validation plot), in that order. For full details on the function and its arguments, enter “?finalRF” in the R console or search for the function in the RStudio Help tab.\nNote: While having good prediction within the training and test sets is a minimum requirement for trusting the putative representative phenotypic MRs, when possible, it is ideal to validate their generalized predictive value in an independent expression data set. Toward this end, the script will also output the R workspace that includes the final trained MR random forest model that may be used for such validation.\nPerforming activity QTL (aQTL) and eQTL analyses\nTiming: 20 min",
    "The ultimate aim of this protocol is the identification of master regulators (MRs) that may mediate phenotypic influences of germline genetic variants identified through genome-wide association studies (GWAS). As discussed above, MRs represent theoretical bottlenecks in gene regulatory networks through which genetic information may be canalized in the establishment of the phenotype-associated transcriptional state. Consequently, such genetic influences may be detectable in trans on the expression and/or activity of the representative phenotypic MRs. Indeed, we have previously shown not only that MR trans-eQTLs and aQTLs can colocalize with GWAS signals even in the absence of any colocalizing cis-eQTL, but that aQTLs are advantageous over eQTLs in such trans analyses.1[href=https://www.wicell.org#bib1] Therefore, in this step we will perform cis-eQTL and aQTL analyses on all regulators and trans-eQTL and aQTL analyses on the representative phenotypic MRs identified in the previous step. Once again, we will provide the commands for analyzing the GEUVADIS dataset, but we must re-emphasize that in this context it serves as a toy dataset which is not expected to generate clean, biologically meaningful results. For this reason, we also display the results from the TwinsUK dataset comparing BMI GWAS-significant variants4[href=https://www.wicell.org#bib4] to the inferred adipose BMI MRs as an example of a well-polished analysis that is meaningful.\nIf still open, you may continue working in the same R session used above and move on to Step 11. Otherwise, start an R/RStudio session, load the MRaQTL package, and set your working directory to that containing all the normalized expression and activity data generated in previous steps as well as the phenotype and covariables data as in Step 5.\nUse the matrixQTL() function to run cis-eQTL and aQTL analyses on the regulators with the following commands, respectively.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2760-Fig4.jpg\nFigure 4. QQ-plots for the all-regulator and MR eQTL and aQTL analyses",
    "(A–H) QQ-plots comparing the observed versus expected distributions of -log10P for all tested cis (red) and trans (blue) QTLs from the following analyses: (A and E) eQTL analysis of all regulators and significant GWAS variants, (B and F) aQTL analysis of all regulators and significant GWAS variants, (C and G) eQTL analysis of representative phenotypic MRs and significant GWAS variants, (D and H) aQTL analysis of representative phenotypic MRs and significant GWAS variants. Panels (A–D) represent results with the GEUVADIS toy dataset, while panels (E–H) represent results from the TwinsUK adipose dataset.\n> matrixQTL(\n\"GEUVADIS_filtered_samples_WHR_significant_bi-allelic_SNPs.dosage\",\n\"GEUVADIS_WHR_significant_bi-allelic_SNPs_locations_in_GRCh37.map\",\n\"Toy_data_regulators_QNorm_INT_expression.txt\",\n\"GEUVADIS_expressed_genes_locations_in_GRCh37.map\",\n\"GEUVADIS_filtered_samples_select_covars.txt\",\n\"Toy_data_all_regs_eQTL\")\n> matrixQTL(\n\"GEUVADIS_filtered_samples_WHR_significant_bi-allelic_SNPs.dosage\",\n\"GEUVADIS_WHR_significant_bi-allelic_SNPs_locations_in_GRCh37.map\",\n\"Toy_data_regulators_activities.txt\",\n\"GEUVADIS_expressed_genes_locations_in_GRCh37.map\",\n\"GEUVADIS_filtered_samples_select_covars.txt\",\n\"Toy_data_all_regs_aQTL\")\nNote: The matrixQTL() function is run here with six arguments corresponding to the imputed genotype dosage file, the SNP map file, the expression or activity data file, the gene map file, the covariables data file, and a prefix string for labeling the output files, in that order. A covariables file is recommended but optional, as NULL is the default value. For full details on the function and its arguments, enter “?matrixQTL” in the R console or search for the function in the RStudio Help tab.\nNote: For this demonstration we have arbitrarily restricted the genotype data to significant waist-hip ratio (WHR) GWAS variants. For a real analysis, the variants analyzed should be chosen based on the GWAS results of a complex trait of interest for which the cell/tissue context being studied is likely relevant.",
    "Note: The SNP map file should be formatted as a tab-delimited text file with 3 columns labeled in a header as “snp”, “chr”, and “pos”, with the first column containing SNP IDs, the second containing chromosome IDs (e.g., chr1, chrX, etc.), and the third column containing chromosomal coordinates (based on the same reference genome as the gene map file). The gene map file should be formatted as a tab-delimited text file with 4 columns labeled in a header as “Gene”, “chr”, “s1”, and “s2”, with the first column containing gene IDs, the second containing chromosome IDs (e.g., chr1, chrX, etc.), and the third and fourth column containing chromosomal coordinates corresponding to the start and end sites of the gene (based on the same reference genome as the SNP map file). For this demonstration of the protocol, both map files use GRCh37 coordinates. See the GEUVADIS files for examples of the required formatting.",
    "Note: For the GEUVADIS dataset we are only adjusting for sex and ancestry categories (Finnish, Tuscan, Utah, Yoruba). Population heterogeneity can strongly confound QTL analyses and adjusting for categories is a crude approach. For a real analysis it would preferable to increase the population homogeneity by sample filtering and then further adjust for residual population admixture effects by including the top 3–5 genotype-based principal components as covariables, which was the approach used for the TwinsUK adipose data analyses.1[href=https://www.wicell.org#bib1] Alternative or additional covariables may be added for this step as the user deems appropriate, but we would strongly recommend excluding any covariables that are well correlated with the phenotype of interest as it may diminish any associations that are relevant to the mediation of the phenotype. Therefore, if PEER factors are being included as covariables to adjust for unknown batch effects, it would be wise to include the phenotype of interest as a covariable in the PEER factor training to ensure all inferred factors are uncorrelated with it.14[href=https://www.wicell.org#bib14] Considerations of sample QC and covariable inclusion are key to the success of any QTL analyses.\nNote: These eQTL and aQTL analyses with all regulators are focusing on cis rather than trans associations, which is why the P-value thresholds are being set to 1.0 and 0.05, respectively. This will still save the nominally significant trans-QTL results, but the trans P-value threshold may be adjusted according to the user’s interest in saving the trans-QTL results for all regulators.",
    "Note: The matrixQTL() function outputs QQ-plots from the Matrix eQTL package that indicates the observed versus expected distributions of -log10(P-values) for the cis and trans QTLs tested (Figure 4[href=https://www.wicell.org#fig4]). If these plots show little to no -log10P above expectation (i.e., above the diagonal), see problem 9[href=https://www.wicell.org#sec5.17] in the troubleshooting[href=https://www.wicell.org#troubleshooting] section. Note that the GEUVADIS dataset runs into this problem, which is probably due at least in part to insufficient adjustment for population admixture. This is not a problem for the TwinsUK adipose analysis.\nAlternatives: The matrixQTL() function uses functions imported from the MatrixEQTL R package15[href=https://www.wicell.org#bib15] for rapid QTL analyses, but users may use any eQTL analysis tool or package they prefer. The only difference between aQTL and traditional eQTL analyses is the use of inferred regulator activities in place of normalized expression values. If an alternative eQTL analysis tool or package is used in place of the matrixQTL() function, the user will need to format the input data accordingly.\nUse the matrixQTL() function to run trans-eQTL and aQTL analyses restricted to the representative phenotypic MRs.\n> matrixQTL(\n\"GEUVADIS_filtered_samples_WHR_significant_bi-allelic_SNPs.dosage\",\n\"GEUVADIS_WHR_significant_bi-allelic_SNPs_locations_in_GRCh37.map\",\n\"Toy_data_MRs_only_QNorm_INT_expression.txt\",\n\"GEUVADIS_expressed_genes_locations_in_GRCh37.map\",\n\"GEUVADIS_filtered_samples_select_covars.txt\",\n\"Toy_data_MR_eQTL\",cisP=1,transP=1)\n> matrixQTL(\n\"GEUVADIS_filtered_samples_WHR_significant_bi-allelic_SNPs.dosage\",\n\"GEUVADIS_WHR_significant_bi-allelic_SNPs_locations_in_GRCh37.map\",\n\"Toy_data_MRs_only_activities.txt\",\n\"GEUVADIS_expressed_genes_locations_in_GRCh37.map\",\n\"GEUVADIS_filtered_samples_select_covars.txt\",\n\"Toy_data_MR_aQTL\",cisP=1,transP=1)\nNote: These analyses are run as for the cis analyses above, but with the MR filtered expression or activity data and with the trans P threshold fully relaxed to 1. Here the cis P threshold is still set to 1 (the default), which will again save all the cis-QTL results, though they should be identical to the corresponding QTLs generate in the previous cis-QTL analyses with all regulators.",
    "Note: The eQTL and aQTL summary statistics files include a column for FDR. However, the MatrixEQTL package at the heart of the matrixQTL() function does not account for the LD between SNPs nor for correlations between gene expression or activities, which in general leads to overly stringent multiple testing correction. As mentioned above, one of the primary advantages to restricting the trans-QTL analyses to representative phenotypic MRs is the dramatic reduction of the multiple testing burden, which provides greater power in detecting relevant associations. Therefore, when applying multiple testing corrections, use only the MR trans-QTL results rather than the all-regulators trans-QTL results that may have been saved from the cis-focused analyses above. For examples of multiple testing correction of QTL results while appropriately accounting for both LD of variants and gene correlations, see Hoskins et al. (2021) and Huang et al. (2018).1[href=https://www.wicell.org#bib1],16[href=https://www.wicell.org#bib16]"
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Bioinformatics",
    "Systems Biology",
    "Genetics",
    "Gene Expression"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}