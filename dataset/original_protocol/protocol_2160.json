{
  "id": 2276,
  "origin_website": "Cell",
  "title": "Protocol for single-nucleus ATAC sequencing and bioinformatic analysis in frozen human brain tissue",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nPart one: Wet lab protocol\nTiming: 7–10 min for each sample dissection. Additionally, an interval of 3–4 min between each sample is required to prechill the accessories\nTiming: 1.5–2 hfor nuclei isolation\nTiming: ∼5 min for calculation and 5 min for dilution\nTiming: ∼6 h for 4 major steps including Transposition, GEM (Gel Beads- in-emulsion) Generation & Barcoding, Post GEM Incubation Cleanup and Library Construction\nTiming: 70–80 minfor transposition\nTiming: 1.5 hfor GEM generation & barcoding\nTiming: ∼50 minfor post GEM incubation cleanup\nTiming: ∼2 hfor library construction\nTiming: 2 working daysfor sequencing\nThe objective of part one is to isolate nuclei from frozen human brain samples and process it for single-nucleus ATAC-seq library preparation and sequencing.\nFrozen human brain tissue dissection:\nNote: Required amount of tissue is 50(±5) mg flash frozen brain tissue.\nNote: This step is required to aliquot the exact amount of tissue for the assay.\nCritical: Do not thaw the tissue at any point. Use enough dry ice to fully cover the tubes containing tissue.\nFill the dissection box with dry ice, making sure that the surface is completely covered and full of dry ice as shown in Figure 1[href=https://www.wicell.org#fig1].\nNote: Wait for at least 15–20 min after the initial filling for the chamber to cool down completely.\nKeep 50–100 mg of Drierite absorbent (with indicator; 8 mesh) within the box to absorb excess moisture.\nDissect each sample carefully in the dissection box on a petri-dish. The top and bottom of each dish can be used for separate samples.\nAliquot tissue in the prechilled 1.5 mL tube and then quickly weigh on the scale.\nNote: Required amount of tissue per sample is 50(+/- 5) mg (around 0.5 cm size) flash frozen brain tissue.",
    "Immediately place the samples on dry ice and finally in the storage box (already on dry ice).\nWipe the spatula and forceps with 70% ethanol. Discard the petri-dish in biohazard bins.\nAt the end of the day, leave the dry ice in the box, and the next morning, clean the box with 10% bleach (contact time 10 min) and then 70% ethanol.\nPause point: Store the tissue samples at −80°C or proceed to the next step (step 2.a).\nNuclei isolation from frozen human brain tissue for snATAC-seq.\nNote: This step is required for preparing a single nucleus suspension (of optimum concentration and quality) from the desired brain tissue.\nNote: Reagents needed include freshly prepared Wash Buffer (1×), freshly prepared 1× Lysis Buffer, Lysis Dilution Buffer, freshly prepared 0.1× Lysis Buffer, Sucrose Cushion Buffer I, Diluted Nuclei Buffer (See the ‘buffers for single nucleus isolation[href=https://www.wicell.org#sec2.2]’ section for required reagents and buffer recipes).\nCritical: Set the centrifuge temperature at 4°C before starting the experiment (before step 2.a).\nCritical: Do not thaw the tissue before adding the Lysis Buffer.\nCritical: Make fresh Wash Buffer and Lysis Buffer. Do not store.\nCritical: Do not start with more than 8 samples.\nCritical: Do not freeze isolated nuclei following nuclei isolation.\nAdd 500 μL chilled 0.1× Lysis Buffer to the frozen brain tissue and immediately homogenize 15 times using a pellet pestle (Fisherbrand™ Pellet Pestle™ Cordless Motor with RNase-Free Disposable Pellet Pestles, Catalog No.12-141-364).\nCritical: Avoid bubble formation during this step.\nIncubate the lysate for 5 min on ice.\nPipette mix 10 times. You can use a wide-bore pipette tip if needed.\nIncubate the lysate for 10 min on ice.\nAdd 500 μL Wash Buffer (chilled) to each tube and pipette mix 5–7 times.",
    "Pass the suspension through a 70 μm Cell Strainer (prewet the strainer with 1× nuclease-free and sterile PBS) into a 15 mL marked and precooled tube.\nAdd 1.8 mL Sucrose Cushion Buffer I to the 15 mL tube and pipette mix 10 times.\nPrepare two sucrose gradients by adding 500 μL Sucrose Cushion Buffer I to two new marked 2 mL tubes.\nThe nuclei suspension (2.8 mL) of each sample will be divided into 2 tubes (2 mL tubes with Sucrose Cushion Buffer I) in this step.\nCarefully layer 1.4 mL of nuclei suspension (half of the total volume, i.e., 2.8 mL) to the top of each 2 mL tube containing Sucrose Cushion Buffer I. Do not mix.\nCentrifuge the tubes (containing nuclei suspension and Sucrose Cushion Buffer I) at 13000 g for 45 min at 4°C.\nCheck the myelin content (a white sticky layer as shown in Figure 2[href=https://www.wicell.org#fig2]A) at the top and sidewall of the tube and carefully remove the myelin (if needed), using 1 mL pipette tips or a sterile and nuclease free spatula, without disturbing the pellet.\nCarefully remove the supernatant leaving 100 μL in each tube and resuspend the nuclei pellet by gentle pipetting (∼10 times). Do not vortex the cell suspension for mixing.\nAdd 500 μL Wash Buffer and gently pipette mix 8–10 times or until nuclei are completely resuspended.\nCarefully pass the resuspended nuclei through a 40 μm Flowmi Cell Strainer into a new 1.5 mL tube.\nCombine the 2 aliquots of the same sample at this point. Total volume (in the new 1.5 mL tube) after combining both the filtered cell suspension (of same sample) should be ∼1200 μL.",
    "Determine the nuclei concentration using a cell counter. Take 10 μL of the nuclei suspension and 1 μL of DAPI or trypan blue (please check the amount to be added) for the counting.\nCentrifuge the tube with cell suspension (from step n) at 500 g for 5 min at 4°C.\nRemove the supernatant without disturbing the pellet.\nResuspend the pellet (final nuclei pellet) in chilled Diluted Nuclei Buffer.\nNote: Resuspend the pellet in nuclei buffer using the concentration table provided in the kit (Chromium Next GEM Single Cell ATAC Reagent Kits v1/v1.1) manual.\nDilution of Nuclei Stock:\nNote: Total no. of nuclei loaded onto the Chromium chip is 10,000–15,000.\nNote: Total volume needed = 5 μL (for 10× Genomics kit). Please double check the specific kit user manual to ensure correct volume for your kit.\nNote: Recovery efficiency factor = 1.53 (The recovery efficiency factor is determined empirically by 10× Genomics; for scATAC reagent kit, the value is 1.53).\nNote: Targeted Nuclei Recovery = Total number of nuclei desired for the experiment, and is different from the actual number of nuclei loaded.\n  V o l u m e  o f  N u c l e i  S t o c k  ( μ L ) =   ( Targeted   Nuclei  Recovery  × 1.53 )   Nuclei   Stock   Concentration   ( nuclei / μL )    \n  V o l u m e  o f  D i l u t e d  N u c l e i  B u f f e r   ( μ L )  = 5  μl  −  volume   of   Nuclei   Stock    ( μL )   \nLibrary preparation: For library preparation, please refer to the kit’s detailed instructions. We use the Chromium Next GEM Single Cell ATAC Reagent Kits v1/v1.1.\nNote: For instrument and accessories needed, please refer to the kit user guide.",
    "Note: For reagents, plasticware and kits needed, please refer to the kit user guide.\nTransposition:\nNote: This step is required for fragmentation of the DNA in open regions of chromatin and addition of adapter sequences.\nPrepare and add Transposition Mix (see the detailed instruction in the kit user manual) to a tube.\nAdd the calculated volume of Nuclei Stock and Diluted Nuclei Buffer to the tube containing Transposition Mix and gently pipette mix.\nNote: Check the kit’s instruction for the total volume.\nIncubate the tubes in a thermal cycler (please refer to the user guide for the incubation temperatures and time required).\nGEM Generation & Barcoding.\nNote: Objective of this step includes generation of GEMs (by combining barcoded Gel Beads, transposed nuclei, Master Mix, and Partitioning Oil on a Chromium Next GEM Chip H), thermal cycling of the GEMs (for production of 10× barcoded single-stranded DNA) and breaking the GEMs for recovering the pooled fractions.\nProtocol:\nPrepare Master Mix with the kit reagents.\nAssemble Chromium Next GEM Chip H.\nLoad Chromium Next GEM Chip H with Master Mix and Transposed Nuclei in row labeled 1.\nLoad Chromium Next GEM Chip H with Gel Beads in row labeled 2.\nLoad Chromium Next GEM Chip H with partitioning oil in row labeled 3.\nRun on the Chromium Controller.\nTransfer GEMs to a tube strip.\nIncubate GEMs in a thermal cycler (please refer to the user guide for the required incubation temperatures and time).\nPause point: Store at 15°C for up to 18 h or at −20°C for up to 1 week or proceed to the next step.\nPost GEM Incubation Cleanup.\nNote: This step is important for removing leftover biochemical reagents and unused barcodes from the post GEM reaction mixture by using Dynabeads and Solid Phase Reversible Immobilization (SPRI) beads, respectively.\nProtocol:",
    "Add Recovery Agent to each sample (DO NOT pipette mix).\nCarefully remove and discard the Recovery Agent/Partitioning Oil (pink) from the bottom of the tube.\nPrepare Dynabeads Cleanup Mix, add to the sample and incubate for a specific period as per the instruction.\nUsing a magnetic separator, remove the supernatant and perform two ethanol (freshly prepared 80% ethanol) washes.\nImmediately add Elution Solution and incubate for the time listed in the kit manual.\nUsing a magnetic separator, separate the supernatant and transfer it to another tube.\nAdd SPRIselect reagent to each sample and incubate.\nUsing the magnetic separator, remove the supernatant and perform two ethanol (freshly prepared 80% ethanol) washes.\nAfter removing from the magnet, immediately add Elution Solution and incubate for the time listed in the kit manual.\nUsing a magnetic separator, separate the supernatant and transfer it to another tube.\nPause point: Store at 4°C for up to 72 h or at −20°C for up to 2 weeks or proceed to the next step.\nLibrary Construction:\nNote: The objective of this step is to construct the final libraries containing the P5 and P7 sequences (used in Illumina bridge amplification).\nPrepare Sample Index PCR Mix (as per the user guide) and add it to the sample.\nAdd individual Single Index primers to each well and record assignment.\nIncubate in a thermal cycler (please refer to the user guide for the incubation temperatures and time required).\nAfter incubation add the SPRIselect reagent to each sample and incubate again for 5 min.\nUsing a magnetic separator, transfer the supernatant to a new strip tube.\nAgain, add SPRIselect reagent to each sample and incubate again for 5 min.\nUsing the magnetic separator, remove the supernatant and perform two ethanol (freshly prepared 80% ethanol) washes.",
    "After removing from the magnet, immediately add Buffer EB, pipette mix and incubate for the time listed in the kit manual.\nUsing a magnetic separator, transfer the supernatant to a new strip tube. (The sample is now ready for post library construction quality control and sequencing).\nMeasure the DNA concentration (ng/μL) of the sample with Qubit and determine the average fragment size.\nNote: We use Agilent TapeStation High Sensitivity D1000 ScreenTape or Agilent Bioanalyzer High Sensitivity DNA chip to determine the average fragment size.\nCalculate the dsDNA library concentration (from ng/μL to nM) using the following formula:\n  C o n c e n t r a t i o n   (  n M  )  =   concentration   (  ng μL  )    660  (  g mol  )  ∗ average   library   size    ( bp )    ∗  1000000  \nNormalize the samples to an appropriate concentration for library pooling before sequencing.\nNote: Library loading concentration differs with the instrument, consult sequencing instrument manual for additional details.\nA representative information sheet is shown below for better understanding.\ntable:files/protocols_protocol_1744_7.csv\nPool libraries and dilute as necessary (to the appropriate concentration in nM/pM, e.g., final loading concentration for NovaSeqTM is 300 nM).\nNote: Check the instrument manual for the final pool volume and concentration.\nPause point: Store at 4°C for up to 72 h or at −20°C for long-term storage.\nSequencing:\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1744-Fig1.jpg\nFigure 1. Dissection box setup\nThe precleaned box is placed on an absorbent pad and the inner surface of the insulated box is fully covered with dry ice. All required things including a spatula, petri-dishes, labeled 1.5 mL tubes and forceps are precooled in dry ice. 50–100 mg of Drierite absorbent is also placed within the box to reduce the moisture level.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1744-Fig2.jpg\nFigure 2. Representative images of myelin and isolated nuclei",
    "(A) Myelin content (after step 2.k; a white sticky layer as shown here) at the top and sidewall of the tube after centrifugation at 13000 g for 45 min at 4°C.\n(B) Isolated single nucleus counting (step 2.q) by Countess 3 FL Automated Cell Counter. After filtration with a 40 μm Flowmi Cell Strainer and combining the aliquots (steps 2.o and 2.p), 1 μL of DAPI was added to 10 μL of cell suspension and loaded to the slides. The visual field indicates optimal cell lysis (≥ 85% DAPI count) with high quality, round nuclei and absence of cell debris or large clumps.\nNote: Verify the compatibility of the sequencer with the kit and proceed accordingly.\nNote: A representative information sheet for sequencing a sample (using the above protocol and library produced by 10× Genomics kit) is shown below for a better understanding.\ntable:files/protocols_protocol_1744_8.csv\nPart two: Data analysis section\nTiming: ∼2–3 h per samplefor generating chromatin accessibility counts matrix using cellranger-atac. Runtime varies based on the size of the input files and the available computational resources. We suggest running each sample in parallel if a high-performance computing cluster is accessible\nTiming: ∼20–30 min per samplesfor creating ArrowFiles. Using multithreading will significantly reduce the processing time\nTiming: ∼20–30 minfor snATAC-seq data preparation and object conversion\nTiming: ∼2.5 hfor pseudo-bulk replicates and calling peaks\nTiming: less than 20 min, depending on the sample sizesfor conversion of the ArchRProject to SeuratObject and further processing\nTiming: 3–5 min per sampleto add a gene score/activity matrix to SeuratObject\nTiming: ∼100 minfor Signac cell-type identification with reference mapping\nTiming: ∼ 4–5 working daysfor advanced secondary analysis",
    "The objective of part two is to align the sequencing data for snATAC-seq to the reference genome, obtain chromatin accessibility count matrix and process it for downstream analysis including identification of differential accessibility regions and other advanced secondary analyses.\nGenerating chromatin accessibility counts matrix using cellranger-atac.\nNote: There are two main approaches to process sequencing data produced from Chromium snATAC libraries: 10× Genomics Cloud Analysis or cellranger-atac software. Please refer to 10× Genomics’ instructions for the Cloud analysis[href=https://www.10xgenomics.com/products/cloud-analysis].\nNote: Here we demonstrate how to use the cellranger-atac count pipeline to filter reads, align to a reference genome, count cell barcodes, identify transposase cut sites, detect chromatin accessibility peaks, generate chromatin accessibility counts matrix, and perform preliminary clustering analysis.\nNote: Before proceeding, please refer to the Fastq input data format[href=https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/fastq-input].\nNote: Please see the following example of sample format from our dataset:\nSample-100_S5_L008_I1_001.fastq.gz\nSample-100_S5_L008_R1_001.fastq.gz\nSample-100_S5_L008_R2_001.fastq.gz\nSample-100_S5_L008_R3_001.fastq.gz\nSample-43_S1_L008_I1_001.fastq.gz\nSample-43_S1_L008_R1_001.fastq.gz\nSample-43_S1_L008_R2_001.fastq.gz\nSample-43_S1_L008_R3_001.fastq.gz\nInput and output files’ path for cellranger-atac:\n>Input_path='Your_Fastq_Input_path/'\n>Output_path='Your_Project_Output_path/cellranger_atac_output/'\nPath to reference annotation:\n>annotation='Your_atac_annotation_Path/refdata-cellranger-arc-GRCh38-2020-A-2.0.0/'\nUse cellranger-atac count to generate single-nucleus accessibility counts:\n>cellranger-atac count \\\n    --id=$Output_path/Your_Sample \\\n    --reference=$annotation \\\n    --fastqs=$Input_path \\\n    --sample=$Your_Sample_Name \\\n    --localcores=32 \\\n    --localmem=128\nCreating ArrowFiles and an ArchRProject from cellranger-atac output and constructing TileMatrix using ArchR pipeline. We create ArrowFiles for each sample to reduce memory usage in R. An ArrowFile is simply a path to access information related to the individual sample, and ArchR will update the ArrowFile with additional information.\nNote: Here is a good time to refer to the ArchR website[href=https://www.archrproject.com/].\nArchR accepts fragments files from cellranger-atac’s output to create ArrowFiles and an ArchRProject.",
    "Construct the input file path of fragments samples. For the >createArrowFiles() function in the next step, we will provide the sample fragment files, saved in the format of ‘fragments.tsv.gz’, for the required arguments, inputFiles and sampleNames. In our tutorial, sequencing outputs have a pattern as “Sample-” followed by a number, such as Sample-100, Sample-101, and Sample-10.\n>cellranger_dir='Path_to_cellranger/cellranger_atac_output'\n>sample_names=dir(cellranger_dir)[grepl('Sample',dir(cellranger_dir))]\n>sample_files=paste0(cellranger_dir, sample_names, '/outs/fragments.tsv.gz')\nCreate ArrowFiles. ArchR by default generates a ‘TileMatrix’ of genome-wide 501-bp bins that makes quantifying accessible peaks easier as their length is fixed. We use the default 501-bp size, since ArchR suggests that the majority of peaks in snATAC-seq are less than 500-bp (Granja et al., 2021[href=https://www.wicell.org#bib4]). Based on our previous testing, we have found it provides enough resolution for cell-type identification. However, the size of the tile matrix can be adjusted in one of the two options: 1) Reconstruct the tile matrix by adjusting the tile size when creating ArrowFiles. For example, if we want to create a TileMatrix with only 200-bp, we can adjust >creatArrowFiles(TileMatParams = list(tileSize = 200)). 2) Add the new TileMatrix to ArchRProject by computing counts for new fixed-width tile using >addTileMatrix(input = ArchRProject, tileSize = 200). ArchR also provides a ‘GeneScoreMatrix’ to store predicted gene expression based on weighting insertion counts in tiles near a gene promoter.\n>library(ArchR)\n>addArchRGenome(\"hg38\") # Setting default genome to Genome Reference Consortium Human Build 38 Organism: Homo sapiens (human)\n# >addArchRThreads(1) # This could be a fix if issue happens due to multi-threading\n>ArrowFiles <- createArrowFiles(\n      inputFiles = sample_files,\n      sampleNames = sample_names,\n      minTSS = 1, # Do not set this too high because you can always increase later\n      minFrags = 500,\n      addTileMat = TRUE,\n      addGeneScoreMat = TRUE\n)",
    "Per-cell quality control. A stringent quality control (QC) is vital to minimize the contribution of low-quality data. In the previous step, we set lenient cutoffs for the minimum number of mapped ATAC-seq fragments required per cell (minFrags) and the minimum numeric transcription start site enrichment score (minTSS) so that we can initially assess the quality of the data. For each sample, ArchR automatically generates a cell density heatmap of TSS enrichment score and number of ATAC-seq fragments, and we provide examples in Figures 4[href=https://www.wicell.org#fig4]A–4C to help demonstrate how to determine the filtering cutoff in step 7h after creating the ArchRProject using > ArchRProject().\nInferring snATAC-seq doublets with ArchR. During the cell barcoding process, the nanodroplet can encapsulate more than one cell, and due to this technical mistake, they are considered as a single nucleus.\n>doubScores <- addDoubletScores(\n    input = ArrowFiles,\n    k = 10, # Refers to how many cells near a \"pseudo-doublet\" to count.\n    knnMethod = \"UMAP\", # Refers to the embedding to use for nearest neighbor search with doublet projection.\n    LSIMethod = 1\n)\nCreate an ArchRProject for your study. ArchRProject is the data structure to hold the data and to perform all the downstream analysis.\n>proj1 <- ArchRProject(\n    ArrowFiles = ArrowFiles,\n    outputDirectory = \"/Path_to_YourProject/ArchR/\", #Output directory for ArchRProject and ArrowFiles\n    copyArrows = TRUE #This is recommended so that if you modify the Arrow files you have an original copy for later usage.\n)\nPause point: Saving and loading ArchRProject.\nNote: If you want to pause at any time, please save your R session in ‘.rda’ or save your ArchRProject using the following command.\n>saveArchRProject(ArchRProj = proj1, outputDirectory = \"/Path_to_YourProject/ArchR/\", load = FALSE)\nNote: ArchRProject can be reloaded by using the following command:\n>proj1 <- loadArchRProject(path = \"/Path_to_YourProject/ArchR/\", force = FALSE, showLogo = TRUE)",
    "Add metadata to ArchRProject. We can supply sample information (metadata), such as batch number, gender, etc, to annotate the cells. Sample IDs in the metadata file should match those in the ArchRProject.\n# Read in sample metadata:\nmetadata <- read.csv('/Path/metadata.csv')\n# Add metadata to cellColData of ArchRProject\n# In our example, ArchRProject Sample information in cellColData matches the SampleName in metadata\n>for(meta in names(metadata)){\n  proj1@cellColData[[meta]] <-metadata[match(as.character(proj1@cellColData$Sample), metadata$SampleName), meta]\n}\nFilter doublets from ArchRProject. Please refer to the function >filterDoublet() and the default argument filterRatio = 1 for more information if stringent filtering is needed.\n>proj1 <- filterDoublets(proj1)\nAdditional quality control removal of cell outliers. TSS enrichment score is calculated based on fragment ratios centered at TSS to fragments in TSS flanking regions. In Figure 4[href=https://www.wicell.org#fig4], many cells in Sample 1 (panel A) have a relatively lower TSS enrichment score and a lower number of fragments compared to Samples 2 and 3 (panels B-C). If a significant number of nuclei from a sample have a low TSS enrichment score, it indicates poor quality of the snATAC-seq experiment. Additionally, the total number of peak fragments (nFrag) reflects the sequencing depth and cellular complexity. Nuclei with very few reads can be excluded due to low sequencing depth. Meanwhile, nuclei with an extremely high number of fragments may represent doublets, if not filtered by >filterDoublet(), or other artifacts.\n>proj1 <- proj1[which(proj1$TSSEnrichment > 2 & proj1$nFrags > 3000 & proj1$nFrags < 30000)]",
    "snATAC-seq data preparation and object conversion. Due to the sparsity of the snATAC-seq data, standard dimensionality reduction methods cannot be used. Instead, a layered dimensionality reduction approach called latent semantic indexing (LSI) is used with snATAC-seq data. LSI uses combined steps of term frequency-inverse document frequency (TF-IDF), a normalization method that can be used to process sparse data, and singular value decomposition (SVD), a dimensionality reduction method, to assess how important a peak is to a sample.\nDimensionality reduction with snATAC-seq.\n>proj1 <- addIterativeLSI(\n  ArchRProj = proj1,\n  useMatrix = \"TileMatrix\",\n  name = \"IterativeLSI\",\n  iterations = 2,\n  clusterParams = list(#See Seurat::FindClusters\n      resolution = c(0.2),\n      sampleCells = 10000,\n      n.start = 10\n  ),\n  varFeatures = 25000, # default\n  dimsToUse = 1:30\n)\nOptional: If strong batch effect differences are observed when plotting with >plotEmbedding() from ArchR, batch effect correction with Harmony can be implemented by using >addHarmony() in ArchR. The name of the column in cellColData, a matrix containing the data associated with each nucleus, can be used to group cells together for Harmony batch correction, such as ‘Batch’ or ‘Sample’.\n>proj1 <- addHarmony(\n  ArchRProj = proj1,\n  reducedDims = \"IterativeLSI\",\n  name = \"Harmony\",\n  groupBy = \"Batch\")\nSingle nucleus clustering. Clustering is standard practice for both snRNA-seq and snATAC-seq for cell-type grouping and to illustrate transcriptomic and epigenomic signatures of each cell type. Most single-nucleus clustering methods compute the nearest neighbor to identify communities of cell clusters. We can cluster cells in ArchR using >addClusters().\nNote: Please be aware that a change is needed for the argument, reducedDims, in both functions (addHarmony and addClusters) if a different dimensionality reduction was applied, e.g., ‘IterativeLSI’ or ‘Harmony’.\n# Clustering using Seurat’s >FindClusters() function\n>proj1 <- addClusters(\n  input = proj1,\n  reducedDims = \"IterativeLSI\",\n  method = \"Seurat\",\n  name = \"Clusters\",\n  resolution = 0.8 #Default\n)",
    "Single-nucleus cluster embedding. Embeddings such as Uniform Manifold Approximation and Projection (UMAP) or t-distributed stochastic neighbor embedding (t-SNE) are used to visualize nuclei in a low-dimensional space. The primary difference between UMAP and t-SNE is the interpretation of distance between the cluster communities. Both UMAP and t-SNE maintain the local cluster community structure. However, UMAP also preserves most of the global structure in data, which means clusters near each other in UMAP are informative, compared to their location in t-SNE.\n#Uniform Manifold Approximation and Projection (UMAP)\n>proj1 <- addUMAP(\n  ArchRProj = proj1,\n  reducedDims = \"IterativeLSI\",\n  name = \"UMAP\",\n  nNeighbors = 30, #Default\n  minDist = 0.1,\n  metric = \"cosine\"\n)\n>addUMAP()computes the UMAP embedding and adds it to ArchRProject. Code for visualization is shown later in step 9, where we present two options for cell-type identification.\nPseudo-bulk replicates and calling peaks. ArchR combines a group of similar nuclei to form a pseudo-bulk sample. The pseudo-bulk replicates overcome the sparsity problem of the snATAC-seq data for peak calling, which identifies the area in a genome that has been enriched. With the pseudo-bulk replicates generated, we can call peaks to identify accessible regions in chromatin. A peak set containing annotation for each peak is created and saved to ArchRProject.\nCreate pseudo-bulk replicates by grouping nuclei by cluster to overcome the binary (open or close) phenomenon of chromatin accessibility.\n>proj1 <- addGroupCoverages(ArchRProj = proj1, groupBy = \"Clusters\")\n# Clusters was defined by the labels generated from addClusters() function\nCall peaks with MACS version 2. Model-based Analysis of ChIP-Seq (MACS) version 2 currently is the default peak caller of the ENCODE ATAC-seq pipeline. ArchR pipeline uses MACS2 with the function >addReproduciblePeakSet() to produce peaks with a 501-bp fixed-width.\n>pathToMacs2 <- findMacs2()\n>proj1 <- addReproduciblePeakSet(\n    ArchRProj = proj1,\n    groupBy = \"Clusters\",\n    pathToMacs2 = pathToMacs2\n)",
    "# add peaks matrix\n>proj1 <- addPeakMatrix(proj1)\nOptional: In addition to assigning cell identity through gene scores, ArchR allows us to align cells from a snATAC-seq dataset with cells from a snRNA-seq dataset by using >FindTransferAnchors() function from the Seurat package.\nObject conversion from ArchR to Signac. Both ArchR and Signac are popular snATAC-seq analysis packages with a comparable set of features. Some software functions are constantly under development and likely to change over time. Users can use only the Signac or ArchR pipeline during the whole analysis process. However, in this protocol, we provide an option to help with data formatting from ArchRProject to Signac SeuratObject, retaining the fixed-width peak matrix for its advantage in computation, as peak length does not need to be normalized in the downstream analysis. After data conversion, researchers can access additional analysis pipelines and other customized functions for the analysis, such as label transfer, co-accessibility analysis, and trajectory analysis.\nLoad our object conversion package ArchRtoSignac.\n>library(ArchRtoSignac)\nSet cellranger-atac directory (with fragments files).\n>fragments_dir <-'/Your_path_to_cellranger_atac_output/'\nGet the gene annotation, which includes information related to genomic locations and their associated annotations, from Ensembl database in GRanges Object for the SeuratObject, using ArchRtoSignac GitHub wrapper function >getAnnotation(). Since the function utilizes an in-house function >GetGRangesFromEnsDb() from the Signac package to get gene annotation, the reference provided must be an Ensemble reference genome. >getAnnotation()also changes the annotation to UCSC genome style, which is used by both ArchR and Signac.\nNote: These arguments will be used when running this function:",
    "Reference: An Ensembl genome reference used for the function GetGRangesFromEnsDb to extract gene annotations from EnsDb (for example, EnsDb.Hsapiens.v86). seqStyle: Changes the sequence style of the annotation extracted from EnsDb to ‘UCSC’ since Signac maps to hg38. refversion: The assembly release and versions of the UCSC genome reference (for example, ‘hg38’).\n>annotations <- getAnnotation(\n    reference = EnsDb.Hsapiens.v86,\n    seqStyle = 'UCSC', refversion = 'hg38')\nObtain the fixed-width peak matrix from ArchRProject and changing the row names of the peak matrix to their matched chromosome range using ArchRtoSignac GitHub wrapper function >getPeakMatrix().\n>pm <- getPeakMatrix(ArchRProject= proj1)\nMake a list of the samples.\n>samples <- unique(proj1@cellColData$Sample)\nConvert the ArchRProject to SeuratObject by creating a list of Seurat objects for each sample with their corresponding peak matrix and then merging objects from each sample with the ArchRtoSignac wrapper function >ArchR2Signac()\nNote: These arguments will be used when running this function:\nArchRProject: Input ArchRProject. samples: A unique sample list for all processed samples from ArchRProject. fragments_dir: A path to the cellranger-ATAC output. The directory contains all samples’ folders before '/outs/fragments.tsv.gz'. pm: peak matrix recently acquired from ArchRProject by using getPeakMatrix() function in the previous step. reference: The same Ensembl genome reference used previously for getting the annotation. seqStyle: The same sequence style used for getting the annotation. refversion: The same assembly release and versions of UCSC genome reference used for getting the annotation.\n>seurat_atac <- ArchR2Signac(\n    ArchRProject = proj1,\n    samples = samples, # Provide a list of unique sample\n    fragments_dir = fragments_dir, # directory of the cellranger output, the folder that contains all samples\n    pm = pm, # getting peak martix\n    output_dir = '/outs/',\n    seqStyle = 'UCSC',\n    refversion = 'hg38', # write the reference version\n    reference = EnsDb.Hsapiens.v86, # choose the EnsDb as the reference\n    annotation = annotations\n)",
    "Check if the cells are in the right order before adding other information to SeuratObject.\nNote: This is extremely important for downstream analysis.\n>all.equal(colnames(seurat_atac),\n    gsub('#', '_', rownames(proj1@cellColData)))\n#NOTE: Ideally, this should return TRUE\nAdd dimension reduction, 'Harmony' and/or 'IterativeLSI', from ArchRProject to the SeuratObject using ArchRtoSignac wrapper function >addDimRed(). Additionally, UMAP embeddings will be automatically added to Signac SeuratObject when running this step.\nNote: reducedDims: The argument for the reduction dimension can be transferred from ArchRProject to Signac SeuratObject\n>seurat_atac <- addDimRed(\n    ArchRProject = proj1,\n    SeuratObject = seurat_atac,\n    reducedDims = 'IterativeLSI' #default\n)\n#add both 'Harmony' and ‘IterativeLSI’:\n#reducedDims = c('IterativeLSI', 'Harmony')\nAdd gene score or gene activity matrix to SeuratObject. Gene activity matrix from Signac and gene score matrix from ArchR similarly construct expression predictions for genes by assessing their chromatin accessibility. Under the default setting, Signac calculates gene activity by summing the fragments intersecting with gene body and promoter regions. The gene score matrix in ArchR implements a comparable approach as in Signac. However, it also considers the activity of possible distal regulatory regions using an exponential weighting model, where peaks further away from the gene have lower priority. Different models’ performances will vary differently for datasets, so there is not a universal best fit approach to predict gene activity (Granja et al., 2021[href=https://www.wicell.org#bib4]). There are two different options to add a gene score/activity matrix: 1) Transfer the ArchR gene score matrix to the SeuratObject. 2) Add a new gene activity matrix using Signac functions to the SeuratObject.\n# Option 1: Transfer gene score matrix from ArchR to Signac using getGeneScoreMatrix() function in the ArchRtoSignac package:\n>gsm <- getGeneScoreMatrix(\n    ArchRProject = proj1,\n    SeuratObject = seurat_atac)\n>seurat_atac[['RNA']] <- CreateAssayObject(counts = gsm)\n# Option 2: Add gene activity matrix using Signac:\n>gene.activities <- GeneActivity(seurat_atac)\n>seurat_atac[['RNA']]<-CreateAssayObject(counts=gene.activities)\n>seurat_atac <- NormalizeData(\n    seurat_atac,\n    assay='RNA',",
    "normalization.method='LogNormalize',\n    scale.factor = median(seurat_atac$nCount_RNA)\n)\n# change the cell identity classes\nIdents(seurat_atac) <- seurat_atac$Clusters\nPause point: Saving and loading SeuratProject.\nNote: Here is a good time to pause and save your SeuratObject before moving forward. The output directory can be set and created as follows.\n>data_out <- \"/Output_directory/\"\n>dir.create(data_out)\nNote: >saveRDS() saves your SeuratObject in .rds format with Sys.Date() in the file name, and the SeuratObject can be loaded through >readRDS().\n>saveRDS(seurat_atac, paste0(data_out, 'Seuratobj_AD_atac_inprogress_',Sys.Date(),'.rds'))\n# For example: when Sys.Date() is 2022-02-14\n>seurat_atac <- readRDS(paste0(data_in, 'Seuratobj_AD_atac_inprogress_2022-02-14.rds'))\nSignac cell-type identification. Option 1: Signac manual cell-type identification with chromatin accessibility. Using the chromatin accessibility of each cell-type at canonical cell-type marker genes is a standard practice to decipher the cell clusters’ identities. This involves manual inspection of coverage plots showing the accessibility of given genomic regions (e.g., cell-type marker genes).\n>DimPlot(\n      seurat_atac,\n      reduction = \"umap\",\n      group.by = \"Clusters\",\n      label = FALSE,\n      repel = TRUE,\n      raster=FALSE) + ggtitle(\"snATAC-seq Clusters\")\n>CoveragePlot(\n      object = seurat_atac,\n      region = 'given_genomic_region', #CSF1R; Input Format: chr5-150086500-150087000\n      extend.upstream = 10000,\n      extend.downstream = 10000,\n      group.by = “Clusters”\n)\nOption 2: Signac cell-type identification with reference mapping.\nNote: The second profiling option utilizes other datasets as a reference and maps snATAC-seq data onto it. We believe this method provides some advantages. Firstly, due to the sparsity of the snATAC-seq data, using a reference from a well-annotated high-quality dataset, a published resource, or an atlas would help us better interpret our data. Ideally, the reference dataset should be sequenced from the same or similar biological sample for accurate prediction. Additionally, we can integrate snATAC-seq with snRNA-seq and analyze them together, especially if unique information related subclusters are present.\n>MapQuery() transfers anchor information from a reference dataset, integrates the two datasets, and projects the query data into the coordinates of a provided reference UMAP.",
    "Find a set of anchors between the reference and query object by using >FindTransferAnchors(). Please refer to the function source page regarding the suggested selection for dimensional reduction arguments, reduction and reference.reduction.\nNote: Switching the default assay of the query dataset is needed when the query and reference datasets' default assays do not share features. We use a snRNA-seq reference dataset in our example, so we need to use gene activity score (RNA assay) in our query snATAC-seq dataset for reference mapping.\n># Switch default assay to RNA assay\n>DefaultAssay(seurat_atac) <- 'RNA'\n>transfer.anchors <- FindTransferAnchors(\n    reference = seurat_reference,\n    query = seurat_atac,\n    reduction='cca', #Dimensional reduction selection.\n    dims = 1:30\n)\nRerun the mapping process by >RunUMAP() on the selected reference dataset with the argument return.model = TRUE to compute UMAP and store the UMAP model to run >MapQuery() later. Our reference, a snRNA-seq dataset, is integrated and analyzed using Liger, which relies on integrative non-negative matrix factorization (inmf). We specified the reference reduction based on this previous integration process, so please adjust the reduction argument accordingly.\n>seurat_reference <- RunUMAP(seurat_reference,\n    reduction = 'inmf',\n    # reduction ='reduction_used_for_the_reference'; for example, pca, inmf and etc.\n    dims = 1:30, n.neighbors=30L, min.dist=0.10, return.model=TRUE\n)\nFor the transferring reduction, please refer to >FindTransferAnchors() function source page. We chose 'cca', a suggested reduction for the projection from snRNA-seq to snATAC-seq. Additionally, ‘lsiproject’ is advised for the projection from snATAC-seq to snATAC-seq, and ‘pcaproject’ is for the projection from snRNA-seq to snRNA-seq.\nMap the snATAC-seq dataset onto the provided reference using >MapQuery(), enabling cell-type label transferring from reference dataset to the query dataset.\n>seurat_atac <- MapQuery(\n    anchorset = transfer.anchors,\n    reference = seurat_reference,\n    query = seurat_atac,\n    refdata = list(cluster = \"Cell.Type\"),\n    reference.reduction = 'inmf',\n    reduction.model = \"umap\"\n)",
    "Figure 5[href=https://www.wicell.org#fig5] shows UMAPs of mapped query nuclei from snATAC-seq to a reference dataset as an example. All extracted nuclei that passed QC are shown in Figure 5[href=https://www.wicell.org#fig5]A. However, due to the sparsity of the snATAC-seq data, you should choose to filter predicted cells with a desired cutoff to limit the number of false positives after using >MapQuery() for reference mapping. After adjusting the predicted.cluster.score parameter as shown in Figures 5[href=https://www.wicell.org#fig5]B–5D, nuclei in ATAC-seq with high predicted cluster scores can be preserved for future analysis. Additionally, please be careful to not remove too many nuclei.\nRemove nuclei with low predicted cluster scores.\n>seurat_atac_90 <- subset(seurat_atac, predicted.cluster.score >= 0.90)\nNote: Results (Figures 6[href=https://www.wicell.org#fig6] and 7[href=https://www.wicell.org#fig7]) of step 9 Signac cell-type identification are in the expected outcomes[href=https://www.wicell.org#expected-outcomes] section.\nDifferentially accessible regions.\nNote: One of the standard practices in a snATAC-seq study is finding differentially accessible regions (DAR) between comparison groups by cell type. We can use the same function as in Seurat >FindMarkers() to perform a differential accessibility test. Due to the sparsity of snATAC-seq data, we would suggest lowering the minimum fraction of cells, min.pct. Furthermore, test.use can be changed as desired; however, Signac suggests using a logistic regression framework (Stuart et al., 2021[href=https://www.wicell.org#bib12]), which can account for latent variables, such as technical and/or biological variables.\nFind the differentially accessible peaks.\n# Change the Default assay to peaks\n>DefaultAssay(seurat_atac) <- 'peaks'\n# Change the identity classes to the comparison groups for your experiment (e.g., Group1 and Group2 specified in metadata column Group)\n>Idents(seurat_atac) <- seurat_atac$Group\n>da_peaks <- FindMarkers(\n    object = seurat_atac,\n    ident.1 = \"Group1\", # For example: Disease\n    ident.2 = \"Group2\", # For example: Control\n    min.pct = 0.01,\n    logfc.threshold = 0,\n    test.use = 'LR',\n    # test.use = 'LR': a logistic regression framework to determine differentially accessible regions\n    latent.vars = 'Variables_to_test'",
    "# For example latent.vars = c(\"Batch\",\"Age\",\"Sex\",\"PMI\"), used only when test.use is one of 'LR', 'negbinom', 'poisson', or 'MAST'\n)\nAdvance secondary analysis.\nPseudotime trajectory analysis using Monocle3. During development, disease progression, or in response to environmental or drug stimuli, cells may transition between different states, which likely have different genetic or epigenetic signatures, due to genes being silenced or newly activated. Monocle3, originally created for snRNA-seq data, can detect gene expression dynamics and trajectory over time within cell types. We can, however, utilize Monocle3 to perform trajectory analysis for snATAC-seq trajectory with the help of its extension Cicero, where single-nucleus chromatin accessibility changes place each cell in a predicted position in trajectory (Pliner et al., 2018[href=https://www.wicell.org#bib8]; Cao et al., 2019[href=https://www.wicell.org#bib2]). Afterward, differential accessibility analysis can be performed to determine changes in chromatin accessibility across the cell states. Depending on the goals of your studies, we can perform trajectory analysis on cell lineages or a cell-type (for example, microglia), and we can do this by subsetting the cell clusters. In order to use Monocle3 for trajectory analysis, the SeuratObject needs to be converted to a cellDataset object using >as.cell_data_set().\n>as.cell_data_set() is a SeuratWrapper function. Install SeuratWrappers and its dependencies first before using the conversion function.\n>remotes::install_github('satijalab/seurat-wrappers')\n>library(SeuratWrappers)\nConvert the group of nuclei you wish to study from snATAC-seq SeuratObject to cellDataset object.\n>cd <-as.cell_data_set(seurat_atac.CellsofInterestGroup)\nIn order to compute pseudotime estimates for a trajectory, a start node or root needs to be identified, which we can do with >get_earliest_principal_node(). We can also select cells through the interactive function in Monocle3 using >order_cells() without specifying the root nodes or root cells. Additionally, we can use pre-selected cells if the start is known by supplying the parameter, >root_cells = \"a vector of pre-selected cells\", in >order_cells().",
    "Note: Please refer to Monocle3’s documentation[href=https://cole-trapnell-lab.github.io/monocle3/docs/trajectories/] for the helper function used for identification of root principal points.\nCalculate the measurement of cell progression in pseudotime.\n>cd<-order_cells(cd, root_pr_nodes=get_earliest_principal_node(cd))\nCis-regulatory network analysis using Cicero. One important piece of information from snATAC-seq data is the linkage of candidate cis-regulatory elements to their potential target genes, and this provides an opportunity to investigate common and specific regulatory mechanisms across different cell types. This linkage is known as co-accessibility, the correlation of accessibility between two peaks. Cicero computes the correlation between all pairs of peak sites within 500 kb with a distant-dependent penalty and therefore provides co-accessibility scores for pairs of peaks in snATAC-seq data (Pliner et al., 2018[href=https://www.wicell.org#bib8]). Additionally, Cicero groups highly co-accessible groups of peaks into “cis co-accessibility networks” (CCANs), which are modules of highly co-accessible sites. Co-accessible peaks in CCANs may be physically close to form a chromatin hub, where they interact with a common set of transcriptional factors in a loop (Pliner et al., 2018[href=https://www.wicell.org#bib8]).\nWe use Cicero, which is an extension of Monocle3, previously used for trajectory analysis, to perform cis-regulatory network analysis, and therefore, the SeuratObject needs to be converted to a cellDataset object using >as.cell_data_set() as in trajectory analysis. However, it then needs to be further made into a Cicero object by using >make_cicero_cds().\n>cd <- as.cell_data_set(seurat_atac.CellsofInterestGroup)\n>atac.cicero <- make_cicero_cds(cd, reduced_coordinates = reducedDims(cd)$UMAP)\nSelect the genomic region of interest from the SeuratObject, and convert the chromosome sizes to a data frame before running Cicero to find co-accessibility.\n>conns <- run_cicero(atac.cicero, genomic_coords = genome.df, sample_num = 100)\nIdentify cis co-accessibility networks (CCANs).\n>ccans <- generate_ccans(conns)\nNote: Please refer to the Cicero function in Signac[href=https://satijalab.org/signac/articles/cicero.html] and Cicero for Monocle3[href=https://cole-trapnell-lab.github.io/cicero-release/docs_m3/] for more detailed information and visualization.",
    "DNA sequence motif and transcription factor footprinting analysis. After identification of differentially accessible peaks, we may also want to determine the binding activities of transcription factors, especially to those at accessible chromatin sites. Signac provides two separate and complementary approaches for performing motif analysis: one by finding the overrepresented motifs in the set of differentially accessible peaks we found in Part Two step 10, and another one by computing per-cell motif activity scores using chromVAR (Schep et al., 2017[href=https://www.wicell.org#bib10]) and then identify differentially active motifs using >FindMarkers().\nIdentify overrepresented motifs.\n>enriched.motifs <- FindMotifs(object = seurat_atac, features = da_peaks)\nCompute and identify differential motif activities.\n#>BiocManager::install(\"BSgenome.Hsapiens.UCSC.hg38\")\n>seurat_atac <- RunChromVAR(\n    object = seurat_atac,\n    genome = BSgenome.Hsapiens.UCSC.hg38\n)\n>DefaultAssay(seurat_atac) <- 'chromvar'\n>differential.activity <- FindMarkers(\n    object = seurat_atac,\n    ident.1 = \"Group1\", # For example: Disease\n    ident.2 = \"Group2\", # For example: Control\n    only.pos = TRUE,\n    mean.fxn = rowMeans,\n    fc.name = \"avg_diff\"\n)\nWe can then examine the footprints of the overrepresented motifs or motifs with differential activity by using >Footprint(). Transcription factor footprinting allows us to predict the precise binding location of a TF at a particular locus.\nGenomic regions enrichment of annotations analysis. Coding regions with corresponding gene names are usually well documented with their biological functions; however, non-coding regions comparatively lack this information, especially at distal binding sites. GREAT maps cis-regulatory elements to neighboring genes within 5 kb upstream and 1 kb downstream of the TSS to predict their functions based on functional annotation databases and therefore associates cis-regulatory elements to not only their proximal binding events. GREAT (McLean et al., 2010[href=https://www.wicell.org#bib5]) is available online[href=http://great.stanford.edu/] and can be used in R with >library(rGREAT). Please be aware that the default reference is hg19 in rGREAT[href=http://www.bioconductor.org/packages/release/bioc/html/rGREAT.html] version 4, and the reference genomes can be changed through species = \"hg38\" or \"mm10\" in >submitGreatJob().",
    ">job = submitGreatJob(bed, species = \"hg38\")\nNote: Please refer to the rGREAT tutorial[href=https://bioconductor.org/packages/devel/bioc/vignettes/rGREAT/inst/doc/rGREAT.html] for more details.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1744-Fig3.jpg\nFigure 3. Representative trace\nA representative TapeStation profile from 50 mg of frozen human brain tissue (PFC). 2 μL of DNA from each sample (from step 4.d.ix) was mixed with 2 μL of High Sensitivity D1000 Sample Buffer followed by vortex and brief centrifugation. The ladder and the samples were then loaded into the TapeStation instrument to run.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1744-Fig4.jpg\nFigure 4. Example output of per-cell quality control\nExample of per-cell QC as output by ArchR.\n(A) In Sample 1, a high percentage of nuclei have low TSS enrichment scores and low fragments numbers.\n(B and C) In Samples 2 and 3, most of the nuclei have good TSS enrichment scores and fragments numbers. However, further filtering is still needed to remove outliers that are low quality (potential doublets or artifacts).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1744-Fig5.jpg\nFigure 5. Example output of MapQuery predicted clusters with different cutoff scores\nPredicted cluster scores were obtained from mapping snATAC-seq onto a reference dataset.\n(A–D) Example UMAPs showing all nuclei (A), nuclei with predicted cluster score >= 0.75 (B), nuclei with predicted cluster score >= 0.90 (C), and nuclei with predicted cluster score >= 0.95 (D).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1744-Fig6.jpg\nFigure 6. UMAPs of snATAC-seq clusters and coverage plots for cell-type identification\n(A) Cell clusters from snATAC-seq identified in ArchR pipeline.\n(B) Coverage plots of CSF1R in each cell cluster shows the pseudo-bulk chromatin accessibility profiles over a 30 kb genomic region to facilitate cell-type identification. The promoter/ TSS is highlighted in gray with gene model and chromosome position shown below. Gene with chromosome position: CSF1R (chr5: 150086500–150087000) for microglia.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1744-Fig7.jpg\nFigure 7. snRNA-seq identified cell-types as reference and snATAC-seq MapQuery predicted cell-types",
    "(A) Cell-type of each cluster is predicted, and cell-type labels are transferred from reference snRNA-seq data (Morabito et al., 2021[href=https://www.wicell.org#bib6]).\n(B) Examples of pseudo-bulk chromatin accessibility profiles for neurons, oligodendrocytes, astrocytes, and microglia at their canonical cell-type marker genes. The promoter/TSS is highlighted in gray with gene model and chromosome position shown below. Gene with chromosome position: SYNPR (chr3: 63278010–63278510) for neurons, MOBP (chr3: 39467500–39468000) for oligodendrocytes, GFAP (chr17: 44915000–44915500) for astrocytes and CSF1R (chr5: 150086500–150087000) for microglia"
  ],
  "subjectAreas": [
    "Genomics",
    "Sequence Analysis",
    "Bioinformatics",
    "Health Sciences",
    "Neuroscience",
    "Sequencing"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}