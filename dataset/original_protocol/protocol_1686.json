{
  "id": 1792,
  "origin_website": "Cell",
  "title": "From microbial community structure to metabolic inference using paprica",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nStep 1: Installing paprica\nTiming: 5 min\nUsers familiar with Docker containers can use the paprica Docker image at https://hub.docker.com/repository/docker/jsbowman/paprica[href=https://hub.docker.com/repository/docker/jsbowman/paprica] instead of installing the dependencies:\n> docker pull jsbowman/paprica:latest\n> docker run -it jsbowman/paprica\n> cd /paprica\nIf you do not use Docker and install the required dependencies, different issues could arise (Troubleshooting 1[href=https://www.wicell.org#sec6.1] and 2[href=https://www.wicell.org#sec6.3]).\nThe full installation of paprica includes downloading the paprica repository from GitHub. An example of how to run paprica using real data is available at: https://www.polarmicrobes.org/analysis-with-paprica/[href=https://www.polarmicrobes.org/analysis-with-paprica/]\nInstall paprica and activate scripts by running the following code:\n> git clonehttps://github.com/bowmanjeffs/paprica.git[href=https://github.com/bowmanjeffs/paprica.git]\n> cd paprica\n> chmod a+x ∗py\n> chmod a+x ∗sh\nYou can test paprica by:\n>./paprica-run.sh test bacteria\nNote: If you want to create an environmental variable to run paprica in docker, you can learn more about it here: https://docs.docker.com/compose/environment-variables/[href=https://docs.docker.com/compose/environment-variables/]. It is not required to create an environmental variable to run paprica, if the paprica dependencies are up to date.\nStep 2: Preparing input for paprica\nTiming: 3 min\nOnce the data is QC’d and in a fasta file format, we need to construct a loop to run paprica on multiple fasta files. Because many of the programs executed by paprica are intrinsically parallelized we do not recommend executing multiple iterations of paprica in parallel. Doing so will result in only a small increase in efficiency. To execute our loop, we need to create a text file with a list of the samples to run. This file contains the name of samples without the file extension (.fasta). If you execute the “deunique_dada2.py” script, all of your fasta files will end with .exp.fasta. You can create the file of sample names by running this bash loop in the same directory as your samples:",
    "> for f in ∗.exp.fasta; do printf '%s\\n' \"${f%.fasta}\" >> samples.txt;\ndone\nStep 3: Run paprica for bacteria\nTiming: ∼ 5 h for 120 samples for Bacteria and Archaea (CPU cores: 18)\nThe first time you run paprica on a 16S rRNA gene library it will determine which reads belong to the domains Bacteria and Archaea. There are separate reference trees and databases for these domains so they should be handled separately, but because these reads are derived from the same library they can be recombined in post-processing. For a multi-sample analysis, you will need to execute two scripts:\n“paprica-run.sh”: This is the core analysis in paprica that will place reads on a 16S + 23S rRNA gene tree compromised of all completed genomes in Refseq. It will map the enzymes, pathways, and genome parameters at each point of placement to the query reads, and it will use the points of placement to provide a consensus taxonomy for each query read. To do this paprica-run.sh will internally execute three scripts:\n“paprica-pick_domain.py”: It identifies the domain of your input reads (archaea, bacteria).\n“paprica-place_it.py”: It does a phylogenetic placement of query reads.\n“paprica-tally_pathways.py”: It finds pathways and other information associated with each point of placement.\nNote: If you want to run paprica with default settings you don’t need to do any changes here (see limitations[href=https://www.wicell.org#limitations] for further information). If you encounter issues, see Troubleshooting 3[href=https://www.wicell.org#sec6.5] and 4[href=https://www.wicell.org#sec6.7].\n“paprica-combine_results.py”: This will create abundance tables for edges, unique reads, enzymes, and pathways, and a table of predicted genome parameters.\nCopy the “paprica-run.sh” script into the current directory where we have the sample files. You can run this code to run the analysis for Bacteria (Troubleshooting 5[href=https://www.wicell.org#sec6.9]):\n> cp ∼/paprica/paprica-run.sh paprica-run.sh\n> while read f; do ./paprica-run.sh $f bacteria; done < samples.txt",
    "Note: At this point we have individual analysis files for all the samples. We want to combine these results into abundance tables for edges, unique reads, enzymes, and pathways. Here we use another core script of paprica to generate these tables.\nPause point: This is a good pausing point. Depending on the CPU cores of your computer, this analysis should run for ∼2.5 h.\nThe “paprica-combine_results.py” script can now be used to combine your files into tables of abundance by running this:\n> paprica-combine_results.py -domain bacteria -o 2021_mangrove_study\nNote: The prefix that you’d like to give to the output files is set by the -o flag in the command above.\nAfter running the script, this will produce abundance tables for community structure and predicted metabolic pathways, enzymes, and genome parameters.\nStep 4: Run paprica for Archaea\nTo run paprica for Archaea we’ll modify the code in step 4 to specify this domain:\n> while read f; do ./paprica-run.sh $f archaea; done < samples.txt\nAfter running paprica we’ll combine the files as before using the following code:\n> paprica-combine_results.py -domain archaea -o 2021_mangrove_study\nSame as in step 6 this will produce an abundance of matrix tables for community structure, pathways, enzymes, and genome parameters for Archaea.\nThe “paprica-combine_results.py” script will generate the following files:\n[bacteria or archaea].edge_tally.csv: This is an abundance table, giving the 16S rRNA gene copy number-corrected abundances for each edge in each sample. Columns are edges and rows are samples. [bacteria or archaea].unique_tally.csv: This is an abundance and copy number-normalized abundance table of unique sequences or ASVs (amplicon sequence variants).",
    "[bacteria or archaea].taxon_map.csv: This is the taxonomic file that maps edge numbers to the name of the lowest consensus taxonomy (CEGs) or strain name (CCGs), and using this file in combination with many_tests.bacteria.seq_edge_map.csv will give you the taxonomy of the ASVs.\n[bacteria or archaea].seq_edge_map.csv: This file maps ASVs to edge_number and gives the proportion that is placed to that edge number (in case the ASV is placed to multiple edges and you need to correct for this).\n[bacteria or archaea].edge_data.csv: This file contains the mean genome parameters for each sample.\nThe above files will be useful for analysis of the community structure of the samples. Paprica also generates files of pathways and enzymes that can be helpful in trying to understand metabolism:\nbacteria.ec_tally.csv: This file contains enzyme abundance for each sample.\nbacteria.path_tally.csv: This file contains metabolic pathway abundance for each sample.\nStep 5: Identify and extract key enzymes for the nitrogen cycle\nTiming: ∼ 5 min\nClone the downstream_paprica repository: https://github.com/avishekdutta14/downstream_paprica[href=https://github.com/avishekdutta14/downstream_paprica]\n> git clonehttps://github.com/avishekdutta14/downstream_paprica.git[href=https://github.com/avishekdutta14/downstream_paprica.git]\n> cd downstream_paprica\n> chmod a+x ∗py\nWe’ll use the script “enzyme_view_v2.py”, this script helps to name E.C. (Enzyme Commission) numbers and extracts the genes related to the sulfur and nitrogen cycles. The input for this script is the file generated in the “paprica-combine_results.py” script (bacteria.ec_tally.csv) and enzyme_final.csv (present in the repository). Run the following:\n> python3 enzyme_view_v2.py\nFiles generated running “python3 enzyme_view_v2.py”:\nenzyme_view.csv: This file is the enzyme abundance for each sample with E.C. numbers for enzyme names.\nnitrogen_cycle.csv: This file is the enzyme abundance associated with the nitrogen cycle.\nsulfur_cycle.csv: This file is the enzyme abundance associated with the sulfur cycle."
  ],
  "subjectAreas": [
    "Genomics",
    "Bioinformatics",
    "Systems Biology",
    "Metabolism",
    "Microbiology",
    "Evolutionary Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}