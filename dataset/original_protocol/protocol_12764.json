{
  "id": 15191,
  "origin_website": "Jove",
  "title": "Novel Sequence Discovery by Subtractive Genomics",
  "procedures": [
    "1. De novo  Assemble Starting Sequence\nNOTE: Any Next-Generation Sequence (NGS) data can be used, as long as an assembly can be produced from those data. Suitable input data includes Illumina, PacBio, or Oxford Nanopore reads assembled into a fasta file. For concreteness, this section describes an Illumina-based transcriptomic assembly specific to the zebra finch study we performed7; however be aware that the specifics will vary by project. For our example project, raw data were derived from a MiSeq and approximately 10 million paired reads were obtained from each sample.\nUse Trimmomatic 0.3214 to remove Illumina adaptors and low-quality bases. On the command line, enter:\njava -jar trimmomatic-0.32.jar PE -phred33 forward.fq.gz reverse.fq.gz -baseout quality_and_adaptor_trimmed ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:40\nUse PEAR15 v. 0.9.6 to create high-quality merged reads from trimmomatic output paired reads, using default parameters. On the command line, enter:\npear -f <quality_and_adaptor_trimmed_1P.fastq> -r <quality_and_adaptor_trimmed_2P.fastq>\nUse Reptile v. 1.116 to error-correct the reads produced through PEAR. Follow the step-by-step protocol described in17.\nUse Trinity v. 2.4.018 in default mode to assemble the corrected sequences. For strand-specific libraries, use the -SS_lib_type parameter. The output is a fasta file (your_assembly.fasta). On the command line, enter:\nTrinity --seqType fq --SS_lib_type FR –max_memory 10G –output Trinity_output --left quality_and_adaptor_trimmed_forward_paired_reads.fq –right quality_and_adaptor_trimmed_reverse_paired_reads.fq –CPU 10\n\tNOTE: The output will be placed in a new directory, Trinity_output, and the assembly will be named 'Trinity.fasta' which can be renamed as Your_assembly.fasta if desired. See the Trinity website for more details: https://github.com/trinityrnaseq/trinityrnaseq/wiki/Running-Trinity.\n2. BLAST the Assembly against the Reference Sequence",
    "NOTE: Use this step when the reference is an assembly or long reads like Sanger; if it is composed of raw Illumina reads, see step 3 below for mapping reads to the query. All BLAST steps were completed with version 2.2.29+ though the commands should work on any recent BLAST version.\nMake a BLAST database of the reference sequence (nucleotide_reference.fasta) at the command line. Enter into the command line the following:\nmakeblastdb -dbtype nucl -in nucleotide_reference.fasta -out nucleotide_reference.db\nBLAST-match the query assembly (generated in step 1) to the reference database. To obtain an output file, use [-out BLAST_results.txt] and to generate tabular output (required for subsequent processing steps with Python scripts), use [-outfmt 6]. These options can be combined in any order, so an example complete command is [blastn -query your_assembly.fasta -db nucleotide_reference.db -out BLAST_results.txt -outfmt 6]. If an e-value setting is desired, use the -evalue option with an appropriate number, for example [-evalue 1e-6]. Be aware however that the subtractive cycle effectively inverts the evalue setting in as described in the discussion.\nFor increased stringency, use protein sequences from the assembly as the BLAST query with translated nucleotide BLAST (tBLASTn), which performs 6-way translation of the (nucleotide) database. This method is recommended for most non-model systems, avoiding the problem of incomplete protein annotations.\n\t\nEnsure the correct genetic code is selected for the organism being studied, using the -db_gencode option. To obtain protein sequences for the query, run the TransDecoder.LongOrfs command (from TransDecoder package v. 3.0.1) to identify the longest open reading frames from assembled query sequences. The command is [TransDecoder.LongOrfs -t your_assembly.fasta]; the output will be placed in directory called 'transcripts.transdecoder_dir' and will contain a file called longest_orfs.pep containing the longest predicted protein sequences from each sequence in your_assembly.fasta.",
    "To use tBLASTn, run the command [tblastn -query longest_orfs.pep -db nucleotide_reference.db -out BLAST_results.txt -outfmt 6]. If a high-quality protein reference is available, use protein-protein matching with BLASTp rather than tBLASTn.\nMake a BLAST database of the protein reference [makeblastdb -dbtype prot -in protein_reference.fasta -out protein_reference.db] and then [blastp -query longest_orfs.pep -db protein_reference.db -out BLAST_results.txt -outfmt 6]. Make sure to save the results as a file for downstream processing, and use tabular (outfmt 6) to ensure the Python scripts can parse them correctly.\n3. Map Reads onto the Assembly\nNOTE: This method can be used if the reference dataset consists of raw genomic reads, rather than assembled sequences or Sanger sequences, in which case use BLAST (step 2.1).\nUsing BWA -MEM v. 0.7.1219 or bowtie220, map the downloaded raw reads (raw_reads.fastq) onto the query assembly. The output will be .sam format. Commands are as follows: first index the assembly: [bwa index your_assembly.fasta], and then map the reads [bwa mem your_assembly.fasta raw_reads.fastq >mapped.sam]. (Note the '>' symbol here is not a greater-than sign; instead it instructs the output to go into the file mapped.sam).\n4. Use Python Script to Remove any Matching Sequences\nNOTE: Provided scripts work with Python 2.7.\nFollowing Step 2, use subtractive Python script by using the command [./Non-matching_sequences.py your_assembly.fasta BLAST_results.txt]. Before running the script, ensure that the BLAST output file is in format 6 (tabular). The script will output a file with non-matching sequences in fasta format named your_assembly.fasta_non-matching_sequences_BLAST_results.txt.fasta and also the matching sequences for records, as your_assembly.fasta_matching_sequences_BLAST_results.txt.fasta. The non-matching file will be the most important, as a source of potential T sequences for testing and further cycles of subtractive genomics.",
    "Following Step 3, run the Python script removeUnmapped.py to take as input the .sam from step 3.1, and identifies the names of query sequences without any matching reads and saves them to a new text file. Use the command [./removeUnmapped.py mapped.sam] and the output will be mapped.sam_contigs_with_no_reads.txt. (The program will generate a slimmed-down sam file with all unmapped reads removed; this file can be ignored for purposes of this protocol but may be useful for other analyses).\nAs the output of the previous step is a list of sequence names in a text file called mapped.sam_contigs_with_no_reads.txt, extract a fasta file with these sequences: [./getContig.py your_assembly.fasta mapped.sam_contigs_with_no_reads.txt]. The output will be a file called mapped.sam_contigs_with_no_reads.txt.fasta.\n5. Design Primers for the Sequence that Remains\nNOTE: At this point there is a fasta file containing candidate T sequences. This section describes qPCR to experimentally test whether they come from T or from previously unknown regions of R. If the subtraction in step 4 removed all sequences, then either the initial assembly failed to include T, or the subtraction may have been too stringent.\nUse Geneious21 to determine optimal primer sequences manually.\n\t\nHighlight a candidate sequence of 21-28 bp for the Forward primer. Avoid runs of 4 or more of any base. Try to target a region with a fairly uniform combination of all basepairs. A single G or C at the 3' end is beneficial, helping to anchor the primer.\nClick on the Statistics tab on the right-hand side of the screen to view that sequence's estimated melting temperature (Tm) as the candidate region is highlighted. Look to obtain a melting temperature between 55-60 °C, while avoiding repeats and long runs of G/C.",
    "Follow steps 5.1.1. and 5.1.2 to choose a reverse primer, situated 150-250 base pairs 3' of the forward primer. While the primer lengths do not need to match, the predicted Tm should be as close as possible to the Tm of the forward primer. Be sure to reverse complement the sequence (if right-clicking in Geneious while the sequence is highlighted it is a menu option).\nUse the Primer Design function, which is found in the top tool bar in the sequence window.\n\t\nClick on the Primer Design button. Insert the region to amplify under Target Region.\nUnder the Characteristics tab, insert desired size, melting temperature (Tm), and %GC (see step 5.1.1.).\nClick OK to have primers generated. Order the primers through a custom oligo service.\nValidate primers with control DNA (encoding both T and R) to optimize Tm and extension time. Use regular Taq and gel electrophoresis to see the band size, but optimization can also be performed with qPCR following the methods in step 6.\n\t\nMake 10X dilutions of both forward and reverse primers so that the primers have a concentration of 10 μM.\nUse a PCR mix of 0.5 μL of dNTP, 0.5 μL of forward primer, 0.5 μL of reverse primer, 0.1 μL of Taq polymerase, 2 μL of template, 0.75 μL of magnesium, 2.5 μL of buffer, and 18.15 μL of water so that there is 25 μL per template with a concentration of 5 ng/μL.\nTest the primers at different melting temperatures in the PCR program. Usually optimal performance is observed melt temperatures slightly below the predicted Tm of the primers, but not usually above 60 °C. Also test for optimal extension times using this guide: 1 min per 1000 bp (thus, usually 10-30 seconds depending on amplicon length).",
    "Perform end-point gel electrophoresis to confirm that the primers amplify the expected sequence. Run 25 μL of the qPCR product mixed with 5 μL of 6X glycerol dye on a 2% TAE agarose gel at 200 V for 20 min.\n6. qPCR Validation of the Remaining Sequence\nNOTE: This step requires primers validated and PCR conditions established in step 5.\nRun each template in triplicate with the following mix; 12.5 μL of PowerSYBR Green master mix, 0.5 μL of forward primer with a concentration of 10 μM, 0.5 μL of reverse primer with a concentration of 10 μM, 10.5 μL of water, and 1 μL of template DNA (at a concentration of 2 ng/μL), so that each well contains 25 μL of total volume.\nRun a qPCR program informed by the validated temperature and extension time from step 4. We designed and validated all primers to be compatible with a two-stage cycle, 95 °C for 10 min initial melt, then 40 cycles of 95 °C for 30 s and 60 °C for 1 min. However, a three-stage (melt-anneal-extend) program may be more optimal for the primers and should be adapted if necessary. We recommend that final denaturing curves be generated at least the first time the primers are employed in qPCR to validate the amplification of a single DNA product.\nMeasure qPCR/SYBR Green signals relative to actin (or any other suitable 'R' control) by Ct. For all cases calculate the average and standard deviation of 2-(gene Ct - β-actin Ct).\n(Optional) Perform end-point gel electrophoresis to confirm correct product size detection by qPCR. Here, run 25 μL of the qPCR product mixed with 5 μL of 6x glycerol dye on a 2% TAE agarose gel at 200 V for 20 min.",
    "7. Repeat with a New Reference to Pare Down the Data.\nNOTE: If step 6 validated the identified sequences from T, end the cycle here (Figure 2A). However, a variety of considerations may motivate a continuation of the cycle, for example if many R sequences remain in the file or if none of the candidate T sequences were validated by qPCR in step 6.\nObtain a new reference. This step enables a new iteration of the cycle and may include raw genomic data, raw RNA-seq data, or other assembled datasets. Valuable resources for reference data include the Genome database at the National Center for Biotechnology Information (https://www.ncbi.nlm.nih.gov/genome) which stores assembled genomes accessible through FTP (ftp://ftp.ncbi.nlm.nih.gov/genomes/), and the Gene Expression Omnibus (https://www.ncbi.nlm.nih.gov/geo/) where raw next-generation sequence reads are stored. Genome projects may provide their raw sequence data through other project-associated websites and databases.\nSubscription Required. Please recommend JoVE to your librarian."
  ],
  "subjectAreas": [
    "Genetics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}