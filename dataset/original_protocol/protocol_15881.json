{
  "id": 19707,
  "origin_website": "Wiley",
  "title": "Ploidy- and Purity-Adjusted Allele-Specific DNA Analysis Using CLONETv2",
  "procedures": [
    "All reads of a human DNA next-generation sequencing experiment that map within a genomic segment derive from either one of the parental chromosomes of origin. Reads can be split into two sets: a copy-number-neutral set that contains equal numbers of reads from the maternal and paternal chromosomes, and an active reads set that includes sequences from only one parent. Generally speaking, given two random reads, it is impossible to determine whether or not they represent the same allele; however, if the two reads span an informative SNP, the allele of origin can be identified. For reads over informative SNPs, the number of reads (local coverage) supporting the reference or the alternative SNP represents the number of copies and the origin of the alleles present in the tumor sample. Each informative SNP can be characterized by its allelic fraction (AF), which depends on the genomic context. For instance, let us consider the two informative SNPs within a monoallelic deletion of the genomic segment denoted A in Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]A. At position p1, only the alternative allele is present and AF = 1, whereas at position pn, the alternative allele is deleted and AF = 0. In contrast, in the wild-type genomic segment B, the AF values of informative SNPs at positions pn+1 and pm are distributed around 0.5, as both alleles contribute equally to the local coverage. Now, the percentage of neutral reads (known as beta, β) at p1 and pn is equal to 0, regardless of which allele is deleted, whereas at wild-type genomic positions, pn+1 and pm each approximate 1, as no active reads are present. Overall, SNPs within somatically aberrant segments are easier to characterize using the beta values as compared to the AFs, as the former is independent from the deleted allele.",
    "In a heterogeneous tumor sample, the distributions of AFs and betas result from the convolution of the distribution observed in basic wild-type and monoallelic deleted segments. As an example, Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]B depicts the distribution of the AF and the associated beta of the informative SNPs in genomic segments A and B in the case of a normal cell, whereas Figures 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]C and 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]D show how the distributions change in tumor cells with monoallelic deletion of only genomic segment A, or of both A and B, respectively. Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]E represents the case of a tumor sample with one normal cell (Fig. 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]B) and nine tumor cells 1 (Fig. 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]C). The DNA admixture is 1/10, and the AF could assume values around 1/11 or 10/11, whereas beta is 2/11. Genomic segment B is not deleted, and therefore the AF and the beta are as in the normal cell. Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]F represents a more complex situation involving one normal cell (Fig. 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]B), three “tumor cells 1” (Fig. 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]C), and six “tumor cells 2” (Fig. 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]D). The AF and beta of informative SNPs in genomic segment A are as in Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]E, but only the six tumor cells 2 carry the monoallelic deletion of genomic segment B. In this case, the AF distribution modes are centered on 4/14 and 10/14, depending on the depleted base, whereas beta is 8/14. The full characterization of beta is described by Prandi et al. (2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0022]), and in Beltran et al. (2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0005]) we defined CLONET master equations that describe allele-specific copy number of maternal and paternal alleles, cnM and cnP, as a function of the percentage of neutral reads beta, the log2 ratio values adjusted by ploidy logRp, and the DNA admixture G, as:",
    "<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/a1bf5184-54e7-45b4-bcc1-6f65e83dc630/cpbi81-fig-0001-m.jpg</p>\nFigure 1\nCartoon of the computation of beta and allelic fraction of informative SNPs. (A) Example of the allelic fraction (AF) and beta (β) values computed for five genomic positions (p1 to pm) corresponding to five informative SNPs. Positions p1 to pn are within a hemizygously deleted genomic segment, A, whereas genomic positions pn+1 to pm lie within a wild-type genomic segment, B. (B to D) Examples of a normal cell and two different tumor cells. Tumor cells 1 and 2 differ in the status of genomic segment B. Histograms below the cell cartoons report the expected distribution of the AF of SNPs in genomic segments A and B together with the associated beta values. (E and F) Examples of two different tumor samples. Tumor sample 1 includes one normal cell and nine tumor cells with deleted genomic segment A and wild-type genomic segment B. Tumor sample 2 differs from tumor sample 1 in the presence of six tumor cells with a hemizygous deletion of genomic segment B. Expected distribution of the AF of informative SNPs together with estimated beta are depicted below each tumor sample cartoon.",
    "where maternal and paternal allele are arbitrarily assigned. Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0002] sketches the transformation of the log2 ratio space implied by Equation 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-disp-0001]. Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0002]A reports the histogram of the log2 ratio signal in a tumor sample: peaks in the distribution correspond to different copy-number states, whereas deviations from the position of the expected peaks (below) depend on ploidy and DNA admixture values. It is difficult to identify the peak that corresponds to wild-type segments using only log2 ratio signal. When we expand the monodimensional logR space with beta (Fig. 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0002]B), segments that contribute to the same peak along the logR dimension form different clusters in the beta-vs.-logR space. Of note, the beta-vs.-logR plot still reflects ploidy and DNA admixture, whereas the cnM and cnP space (see Equation 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-disp-0001]) allows straightforward interpretation of the copy number and clonality status of each genomic segment.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/5c81d3c5-1996-4d53-a25f-3ab77681f5f3/cpbi81-fig-0002-m.jpg</p>\nFigure 2\nSketch of CLONETv2 copy-number-space transformations. (A) Example of histogram and density plots of the distribution of logR signal in a tumor sample. Expected positions of integer copy numbers in a diploid 100% pure tumor sample are listed below. (B) Expansion of the monodimensional logR signal of panel A in the two-dimensional beta-vs.-logR space. Each dot represents a genomic segment, and vertical dashed lines correspond to integer copy number as in panel A. Color code clusters genomic segments with homogenous copy number. (C) Allele-specific copy-number projection of the beta vs. logR data of panel B. Each dot represents a genomic segment with maternal copy-number allele cnM and paternal copy-number allele cnP. Maternal and paternal alleles are assigned arbitrarily. The color code is consistent with that in panel B.\nThe function compute_beta_table estimates the beta of a genomic segment as described in Carreira et al. (Carreira et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0009]). The function compute_beta_table includes the following input:",
    "seg_tb: a table resulting from DNA segmentation; for each genomic segment, the table reports chromosome, start/end position and the log2 ratio of the tumor over the normal coverage, as defined in the Circular Binary Segmentation algorithm (Olshen, Venkatraman, Lucito, & Wigler, 2004[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0021]);\npileup_normal, pileup_tumor: two tables reporting allelic fraction and coverage of SNPs in normal and matched tumor samples, respectively; for each SNP, each table reports genomic coordinates (chromosome and position), allelic fraction, and coverage;\nmin_af_het_snps, max_af_het_snps: for each SNP in the pileup_normal table, set minimum and maximum allelic fraction to consider the SNP as informative;\nmin_required_snps: the minimum number of informative SNPs in a genomic segment from seg_tb to retain the segment;\nmin_coverage: the minimum mean coverage of informative SNPs to retain a segment.\nAs output, the function compute_beta_table extends the input table seg_tb. For each segment in seg_tb, the function compute_beta_table returns the following values:\n         \nbeta: estimated value for the input segment;\nnsnps: number of informative SNPs in the input segment;\ncov: mean coverage of informative SNPs in the input segment;\nn_beta: estimated value for the input segment considering the matched normal sample. This value is expected to be 1, except in the case of germline copy-number variation or sequencing-related errors.",
    "The interpretation of the function compute_beta_table output is not an easy task due to the identifiability problem — i.e., the fact that more than one combination of ploidy and DNA admixture fit the observed data (Li & Xie, 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0019]). However, upon definition of ploidy and DNA admixture, Equation 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-disp-0001] completely defines the absolute copy numbers of both alleles. We will exploit this capability in Support Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0005], where Equation 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-disp-0001] is used to plot the expected beta and logR ratio against estimated values. The optional parameter plot_stats of the compute_beta_table function plots useful summary statistics for a \"sanity check\" of the output. In particular, when plot_stats is TRUE, the function returns:\n         \nnumber of processed segments: the number of segments in the input seg_tb table;\nnumber of segments with a valid beta estimate: the number input segments for which beta value is computed; this value is affected by the number of informative SNPs and their mean coverage;\nquantiles of input segment lengths: the quantiles of the distribution of the length of the input segments; the expected distribution depends on the segmentation algorithm used to produce the seg_tb table, but in general small values result in a low number of informative SNPs, whereas large segments may indicate undersegmentation that in turn affects beta estimates;\nquantiles of informative SNPs input segment coverage: the quantiles of the distribution of the mean coverage of the input segments; expected coverage depends on the sequencing experiment, but a low value may indicate problems with the input sample;",
    "quantiles of number of informative SNPs per input segment: the quantiles of the distribution of the number of informative SNPs in the input segments; expected number of informative SNPs per kb is ∼0.33 (based on common SNPs), and therefore, this value combined with input segment lengths gives information about the quality of the pileup data.\nNecessary Resources\nHardware\n64-bit computer running Linux with ≥8 GB RAM\nSoftware\nThe library has been tested with R version 3.5.2 and the R libraries parallel 3.5.2, ggplot2 3.1.0, sets 1.0-18, arules 1.6-3, and ggrepel 0.8.0\n1. Prepare tumor and normal pileups as described in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0002] or with other computational tools. The output of this step comprises two files, tumor.pileup and normal.pileup.\n2. Prepare tumor segmented data in the file tumor_segments.txt with columns compatible with the parameter seg_tb described above.\n3. Run R from the command line:\n         \n$ R\n4. Install CLONETv2 for the first time:\n         \n> install.packages(“CLONETv2”)\n5. Load the library:\n         \n> library(CLONETv2)\n6. Load input files:\n         \n> seg_tb <- read.table(system.file(“sample.seg”, package = “CLONETv2”),header = T, as.is=T)\n> pileup_tumor <- read.table(system.file(“sample_tumor_pileup.tsv”, package = “CLONETv2”),header = T, as.is=T)\n> pileup_normal <- read.table(system.file(“sample_normal_pileup.tsv”, package = “CLONETv2”),header = T, as.is=T)\n7. Compute beta for each input segment with default parameters:\n         \n> bt <- compute_beta_table(seg_tb, pileup_tumor, pileup_normal)\n8. Compute beta activating the plot_stats parameter:\n         \n> bt <- compute_beta_table(seg_tb, pileup_tumor, pileup_normal, plot_stats=T)\nThis results in the following output:\n         \nComputed beta table of sample “sample1”\nNumber of processed segments: 65\nNumber of segments with valid beta: 49 (75%)\nQuantiles of input segment lengths:\n0%: 2860\n25%: 17504185\n50%: 38004799\n75%: 59311449\n100%: 147311449\nQuantiles of input segment coverage:\n0%: 47.0000\n25%: 137.7893\n50%: 168.3820\n75%: 186.6769\n100%: 695.6145\nQuantiles of number of informative SNPs per input segment:\n0%: 0\n25%: 12\n50%: 99\n75%: 213\n100%: 404",
    "This protocol describes the steps used to prepare pileup data from a set of SNPs and matched tumor and normal .bam (BAM) files (Li et al., 2009[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0018]). The tables pileup_normal and pileup_tumor report allelic fraction and coverage for a set of SNP positions. Candidate SNP positions can be downloaded directly from the dbSNP FTP server (ftp://ftp.ncbi.nlm.nih.gov/snp/[href=http://ftp://ftp.ncbi.nlm.nih.gov/snp/]). We suggest starting from the largest possible set of SNPs, as the larger the number of informative SNPs, the more reliable the CLONETv2 estimates. Pileups from BAM files can be obtained using any of several tools. Here we describe how to prepare pileups using ASEQ (Romanel, Lago, Prandi, Sboner, & Demichelis, 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0025]), a tool freely available at http://demichelislab.eu/tools/ASEQ[href=http://demichelislab.eu/tools/ASEQ].\nNecessary Resources\nHardware\n64-bit computer running Linux with ≥8 GB RAM\nSoftware\nASEQ, curl\nInput files\nBAM files tumor.bam and normal.bam containing aligned reads from genomic sequencing experiments of matched tumor and normal DNA samples, respectively\nVCF (Degner et al., 2009[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0015]) file known_snp_positions.vcf reporting known SNP positions; ASEQ requires that the input VCF only lists SNPs, i.e., columns ALT and REF must contain one of the values A, C, G, or T. ASEQ parameters include:\nmrq: minimum read quality (ASEQ does not consider as part of the pileup reads with read quality < mrq);\nmbq: minimum base quality (ASEQ does not consider as part of the pileup bases with quality < mbq);\nmdc: minimum depth of coverage (ASEQ output only reports positions with coverage ≥ mdc);\nthreads: number of threads available for ASEQ computation.\n1. Download and uncompress the last version of ASEQ:\n         \n$ curl\nhttp://demichelislab.unitn.it/lib/exe/fetch.php?media=aseq-v1.1.11-linux64.tar.gz[href=http://demichelislab.unitn.it/lib/exe/fetch.php?media=aseq-v1.1.11-linux64.tar.gz]\n> aseq-v1.1.11-linux64.tar.gz\n$ tar xvf aseq-v1.1.11-linux64.tar.gz\nASEQ code will be available in the subfolder binaries/linux64/.\n2. Download and uncompress ASEQ examples:\n         \n$ curl\nhttp://demichelislab.unitn.it/lib/exe/fetch.php?media=aseq-examples.tar.gz[href=http://demichelislab.unitn.it/lib/exe/fetch.php?media=aseq-examples.tar.gz]\n> aseq-examples.tar.gz\n$ tar xvf aseq-examples.tar.gz\nASEQ examples will available in the subfolder examples/VCF_samples/.",
    "3. Run ASEQ on example data 1:\n         \n$./binaries/linux64/ASEQ mode=PILEUP vcf=examples/VCF_samples/sample1.vcf bam=examples/BAM_samples/sample1.bam mbq=20 mrq=20 mdc=1 threads=1 out=.\nASEQ produces the file sample1.PILEUP.ASEQ, reporting allelic fraction and read coverage from the BAM file sample1.bam, for each position in the VCF file sample1.vcf. The parameters mbq = 20 and mrq = 20 tell ASEQ to ignore, respectively, bases and reads with quality <20. The parameter mdc = 1 instructs ASEQ to ignore positions in the BAM file with no reads. The parameters and the format of the output file .PILEUP.ASEQ are compatible with pileup data required in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001].",
    "Segmentation algorithms partition input genomic space into segments with homogenous coverage. Given a pair of matched tumor and normal samples, the logR value of a genomic segment is the log2 of the ratio between the tumor coverage and the normal sample coverage within the segment. To account for different mean coverage in different sequencing experiments, logR is normalized over the ratio between the mean tumor and the mean normal coverage; this applies both to whole-genome and whole-exome data. In the case of higher coverage in the tumor sample, if without normalization the ratio between the mean tumor and the mean normal coverage is X, a wild-type segment would have logR = log2(X), whereas the expected value is 0 (i.e., same number of alleles between tumor and normal samples). The normalization would, however, introduce a bias whenever the difference in mean coverage between the tumor and the normal sample was due to the presence of an abnormal number of alleles in the tumor (aneuploid) genome. In this case, the normalization leads to a shift in the logR signal. Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0003]A shows an example of a diploid genome sample with 127× and 69× mean tumor and mean normal coverage, respectively. The logR signal is centered on 0, as expected (green line). Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0003]B highlights a more complex case: tumor and normal mean coverage are comparable (125× and 117×, respectively), but the position of the wild-type segments (orange line) is shifted with respect to the expected value (green line). The shift is representative of the total number of alleles in the genome, and ploidy can be estimated as:\n         \n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/70ffe2f5-ea06-4513-9029-f508062998bd/cpbi81-fig-0003-m.jpg</p>\nFigure 3",
    "Examples of diploid and aneuploid sample. Histograms of the logR of a diploid tumor sample (A) and an aneuploid tumor sample (B) are shown. Green line, expected value; orange line, value corresponding to wild-type segments; turquoise line, value corresponding to segments with copy number 4.\nThe proof (Equation 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-disp-0002]) is reported in the paper originally describing CLONET (Prandi et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0022]). The example in Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0003]A has a logR shift of 0 and ploidy of 2, whereas the example in Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0003]B has a logR shift of –0.34 and a ploidy of 2.53.\nThe function compute_ploidy builds on this definition and is implemented to identify wild-type genomic segments and to estimate how far the logR values deviate from 0. The key step in the search is to restrict the genomic segments space to those with beta = 1, i.e., those with an equal number of maternal and paternal copies. In Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0003]B, this step excludes segments with logR around 0, as their beta is significantly lower than 1 and represent segments with copy number 3 (see Basic Protocol 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0006]). In this context, the green line in Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0003]B is centered on wild-type segments, and the turquoise vertical line identifies segments of copy number 4. The function compute_ploidy includes the following input parameters:\n         \nbeta_table: a table created using the function described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001];\nmax_homo_dels_fraction (default 0.05): homozygous deletions can provide a confounding factor in the determination of sample ploidy; the parameter sets a percentage of genomic segments that will not be used for ploidy computation as putative homozygous deletion, and overestimating this value does not affect ploidy computation;\nbeta_limit_for_neutral_reads (default 0.90): in theory, neutral reads correspond to beta = 1, but experimental noise lowers this value; therefore only segments with beta above the limit are used to compute ploidy;",
    "min_coverage (default 20): only genomic segments with average coverage at least min_coverage are used to compute DNA admixture;\nmin_required_snps (default 10): only genomic segments covering at least min_required_snps informative SNPs are considered for DNA admixture computation.\nThe function returns the ploidy for the input sample.\nNecessary Resources\nHardware\n64-bit computer running Linux with ≥4 GB RAM\nSoftware\nThe library has been tested with R version 3.5.2 and R libraries parallel 3.5.2, ggplot2 3.1.0, sets 1.0-18, arules 1.6-3, ggrepel 0.8.0.\n1. Run R from the command line:\n         \n$ R\n2. Compute beta table as described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001].\n3. Compute ploidy from beta table bt:\n         \n> pl <- compute_ploidy(bt)",
    "DNA admixture is defined as the percentage of non-tumor cells in a tumor sample. DNA admixture is an important confounding factor in genomic analysis, as it dilutes somatic aberration signal across all genomic and molecular alterations. Relevant to genomic analyses, it dilutes somatic copy-number aberration (SCNA) and SNV signal. In a 100% pure tumor sample, the expected coverage across a monoallelic (i.e., hemizygous) deletion should be about half of coverage of wild-type segments, and therefore the logR should be equal to –1 (i.e., log2(½)). However, if the purity is 50%, then only half of the total number of cells harbor the hemizygous deletion, and the expected logR is log2(¾), or around –0.415. Similarly, the value of beta of a genomic segment varies depending on the level of DNA admixture. In Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001], we saw that the beta of a hemizygous deletion in a 100% pure sample is 0, as no neutral reads are present. However, 50% admixture would increase beta to ⅔, as for each tumor active read there would be two neutral read from the admixed cells. The original CLONET manuscript (Prandi et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0022]) describes the equations that define the expected logR and beta corresponding to the spectrum of tumor admixture. The function compute_dna_admixture searches the (logR, beta) space defined by the function compute_beta_table (Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001]) for a value of DNA admixture that better explains the observed value in the beta_table. The function compute_dna_admixture also requires the ploidy value, as computed by the function compute_ploidy (Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003]), to account for the shift in logR values due to possible aneuploidy tumor genomes. The function compute_dna_admixture has the following input parameters:\n         \nbeta_table: a table created using the function described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001];\nploidy_table: a table created using the function described in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003];",
    "min_coverage (default 20): only genomic segments with average coverage at least min_coverage are used to compute DNA admixture;\nmin_required_snps (default 10): only genomic segments covering at least min_required_snps informative SNPs are considered for DNA admixture computation;\nerror_tb: the number of informative SNPs and the coverage of the considered segment affect the accuracy of the estimation of beta of a genomic. The table error_tb reports, for each combination of number of informative SNPs and coverage, the expected error around the beta estimate. CLONETv2 embeds a pre-computed error_tb (details in Prandi et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0022]) previously tested in several studies (Beltran et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0004]; Beltran et al., 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0005]; Faltas et al., 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0016]). However, specific experimental settings, such as ultra-deep targeted sequencing or low-pass whole-genome sequencing, may require an ad hoc error_tb table.\nThe function returns the estimated DNA admixture for the input sample as well as minimum and maximum DNA admixture values accounting for errors around beta estimates.\nNecessary Resources\nHardware\n64-bit computer running Linux with ≥4 GB RAM\nSoftware\nThe library has been tested with R version 3.5.2 and the R libraries parallel 3.5.2, ggplot2 3.1.0, sets 1.0-18, arules 1.6-3, and ggrepel 0.8.0\n1. Run R from the command line:\n         \n$ R\n2. Compute beta table as described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001].\n3. Compute ploidy table as described in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003].\n4. Given beta table bt and ploidy pl, compute DNA admixture:\n         \n> adm <- compute_dna_admixture(bt, pl)",
    "Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001] describes how to derive the value of beta for a genomic segment. A tumor sample is then described as a set of (beta, logR) values extending the usual logR space and enabling the computation of ploidy and DNA admixture in Basic Protocols 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003] and 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004], respectively. To help interpreting the results of Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001] to 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004], CLONETv2 provides the function check_ploidy_and_admixture that plots beta-vs.-logR space for a given samples. Figure 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0004]A and 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0004]B show the values of beta against the logR of the same samples presented in Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0003]A and B, respectively. For each genomic segment, the plot reports the logR as well as the beta computed by function compute_beta_table. To help the user, the function predicts expected (beta, logR) given the input ploidy and DNA admixture level according to the equations described in CLONET paper (Prandi et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0022]). Predicted values are computed for different combinations of allele-specific copy numbers (see Basic Protocol 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0006]) and represented as red circles. Comparing the expected (red circles) and the observed (gray dots) values helps the interpretation of the estimates. For instance, segments with logR near 0 in Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0003]B cannot be wild type, as their betas are ∼0.8, a value compatible with the presence of three DNA copies.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/67294f2d-6142-4798-ae11-1054ef026417/cpbi81-fig-0004-m.jpg</p>\nFigure 4\nExamples of beta-vs.-logR space. Panels A and B extend the logR histograms of Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0001]A and B, respectively, to the beta-vs.-logR space. Each gray dot represents a genomic segment. Large light-red circles represent expected (beta, logR) values corresponding to the estimated ploidy and DNA admixture (reported above the corresponding plot). A circle corresponding to clonal homozygous deletions, if represented, would be at coordinate (–∞, 1).\nNecessary Resources\nHardware\n64-bit computer running Linux with ≥4 GB RAM\nSoftware",
    "The library has been tested with R version 3.5.2 and the R libraries parallel 3.5.2, ggplot2 3.1.0, sets 1.0-18, arules 1.6-3, and ggrepel 0.8.0\n1. Run R from the command line:\n         \n$ R\n2. Follow Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001], 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003], and 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004] to compute beta table bt, ploidy table pl, and DNA admixture table adm, respectively.\n3. Compute basic beta-vs.-logR plot:\n         \n> check_plot <- check_ploidy_and_admixture(bt,pl,adm)\ncheck_plot is a ggplot object (Wickham, 2009[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0032]) that can be customized by the user (e.g., for font size, color, line width).\n4. Print final plot with the command:\n         \n> print(check_plot)",
    "Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0003] suggests a relation between the values (beta, logR) for a genomic segment and its allele-specific copy number. Consider a 100% pure tumor sample and a genomic segment with wild-type logR, in which the log2 ratio is equal to 0; then beta could either be equal to 1 (if one copy each of the maternal and paternal alleles are present) or be equal to 0 (if the two alleles come from the same parent: the copy-neutral loss of heterozygosity, or CN-LOH, case). The approach is generalized in Beltran et al. (2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0005]) by defining the exact equations that relates (logR, beta) to allele-specific copy number, given the ploidy and the DNA admixture. Figure 5[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0005]A shows an example in which CLONETv2 identifies three classes of loss of heterozygosity: the well-characterized classes of hemizygous deletion and CN-LOH, and the less common gain-LOH, in which one allele is lost but the total copy number (logR value) is consistent with a gain of DNA. Mapping (logR, beta) space to allele-specific copy-number space (Fig. 5[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0005]B) simplifies interpretation the genomic landscape of a sample. Of note, the allele-specific copy-number signal in Figure 5[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0005]B does not contain information about the ploidy and purity of the original sample, making it easy to compare samples with different ploidy and purity values. The example highlights the novelty and power of allele-specific copy-number analysis. The function compute_allele_specific_scna_table transforms (logR, beta) pairs into allele-specific copy-number pairs (cnA, cnB). The function requires estimates of purity and ploidy and has the following parameters:\n         \nbeta_table: a table created using the bt function described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001];\nploidy_table: a table created using the pl function described in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003];\nadmixture_table: a table created using the adm function described in Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004];",
    "error_tb: the same error_tb used in the function compute_dna_admixture of Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004], step 4;\nallelic_imbalance_th (default 0.5): function compute_allele_specific_scna_table also returns integer values cnA.int and cnB.int for cnA and cnB, respectively. The value cnA.int is the rounded-off value of cnA if |cnA.int - cnA| < allelic_imbalance_th; otherwise cnA.int is not defined. cnB.int is defined similarly with respect to cnB.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/00071874-2226-43a7-ab8a-b4dd0ff174b4/cpbi81-fig-0005-m.jpg</p>\nFigure 5\nFrom beta-vs.-logR to allele-specific copy-number space. (A) Beta vs. logR of a tumor sample (as in Fig. 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0002]). (B) Allele-specific plot obtained by transforming the tumor sample data from A. Each dot corresponds to a genomic segment for which the copy-number values of the two alleles are reported (with higher copy-number values conventionally reported in the x axis). Colored arrows and circles show how combinations of beta and logR correspond to different allele-specific copy-number values. Color code: gray, wild type; light blue, hemizygous deletion; red, gain; yellow, CN-LOH (copy-neutral loss of heterozygosity); orange, gain-LOH (loss of heterozygosity in which one allele is lost and the logR indicates a gain of DNA).\nThe function compute_allele_specific_scna_table extends input beta_table with columns related to allele-specific copy-number:\n         \nlog2.corr: logR value adjusted by ploidy and purity: i.e., the logR value the segment would have in a diploid 100% pure tumor sample;\ncnA,\ncnB: number of copies of major (cnA) and minor (cnB) allele; the values do not contain information about ploidy and purity — indeed, cnA + cnB equals 2 × 2log2.corr;\ncnA.int,\ncnB.int: integer number of copies of major and minor alleles, respectively.\nNecessary Resources\nHardware\n64-bit computer running Linux with ≥4 GB RAM\nSoftware\nThe library has been tested with R version 3.5.2 and the R libraries parallel 3.5.2, ggplot2 3.1.0, sets 1.0-18, arules 1.6-3, and ggrepel 0.8.0\n1. Run R from the command line:\n         \n$ R",
    "2. Follow Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001], 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003], and 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004] to compute beta table bt, ploidy table pl, and DNA admixture table adm, respectively.\n3. Given beta table bt, ploidy table pl, and DNA admixture table adm, compute the allele-specific SCNA table:\n         \n> as_tb <- compute_allele_specific_scna_table(bt, pl, adm)",
    "A somatic aberration is clonal if all the tumor cells harbor the aberration. Suppose a 100% pure tumor sample with monoallelic deletions of genomic segments D1 and D2, with 100% and 50% clonality, respectively: i.e., all tumor cells harbor D1 deletion, but only 50% harbor D2 deletion. The expected logR is then log2(½) = –1 for D1 and log2(¾) (about –0.415) for D2. Note that the expected logR for D2 is the same that would result given a clonal deletion in a 50% pure sample (see Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004]). This is because, in genomic region D2, the reads sequenced from cells not harboring the deletion cannot be distinguished from those derived from admixed non-tumor cells. The same consideration holds for the expected proportion of neutral reads, beta. The CLONET equations (Carreira et al., 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0009]) build on this intuition and define a map from (logR, beta) pairs to the clonality of somatic copy-number aberrations. However, fluctuations in the level of coverage that introduce noise in the logR signal, as well as limitations in the sensitivity of the inference of beta due to the number of available informative SNPs, make it difficult to compare the clonality levels of aberrations across different tumor samples. To facilitate such clonality comparisons, the function compute_scna_clonality_table returns a minimum and maximum estimated clonality value and a discretized clonality status. The function considers DNA admixture level, distribution of logR values, and errors around beta estimates and assigns to each genomic segment a minimum and a maximum observed clonality. Lower and upper bound for clonality are used to assign to define the segment clonality status, among clonal, uncertain.clonal, uncertain.subclonal, subclonal, and not.analysed.",
    "Clonal and subclonal statuses correspond to more reliable clonality calls, whereas an uncertain prefix is used when clonality estimate can be affected by the noise of the input data. For instance, Figure 6[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0006] reports the example of a tumor sample with two clusters of hemizygous deletions: clonal in (–0.6, 0.45) and subclonal in (–0.25, 0.8). Segments in (–0.9, 0.53) correspond to a region with subclonal homozygous deletion, in which 20% of the tumor cells lack both alleles whereas the other 80% retain one allele. Uncertain clonality status calls refer to segments at (–0.45, 0.58) and at (–0.63, 0.51); compared to clonal segments, the former shows markedly different beta but borderline logR (uncertain.subclonal), and the latter shows only small deviation in beta (uncertain.clonal segment). Not.analysed segments include wild-type segments and aberrant segments with (logR, beta) values that do not fit CLONETv2 model. The function compute_scna_clonality_table takes a beta table and the associated estimates of purity and ploidy together with the following parameters:",
    "beta_table: a table created using the function described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001];\nploidy_table: a table created using the function described in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003];\nadmixture_table: a table created using the function described in Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004];\nerror_tb: same error_tb used in the function compute_dna_admixture of Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004]; error around beta is propagated to clonality estimate and used in its discretization;\nclonality_threshold (default = 0.85): the function compute_scna_clonality_table returns minimum and maximum clonality for input genomic segments; clonality_threshold is used to discretize clonality as described by Prandi et al. (2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0022]);\nbeta_threshold (default = 0.9): input beta values below beta_theshold are marked as potentially aberrant and used for clonality estimates.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/dba52079-5939-42c3-b5b4-345500811464/cpbi81-fig-0006-m.jpg</p>\nFigure 6\nExample of tumor sample with subclonal copy number. Plot of beta vs. logR of a tumor sample with subclonal copy-number segments. Each dot represents a genomic segment, and the color code indicates clonality status as indicated in the color legend.\nThe function compute_scna_clonality_table extends input beta_table with clonality-related columns:\n         \nclonality: real value representing the estimated percentage of tumor cells with uniform copy number for a given genomic segment;\nclonality.min,\nclonality.max: real values representing minimum and maximum estimated clonality given the distribution of beta and logR values;\nclonality.status: discretized clonality.\nNecessary Resources\nHardware\n64-bit computer running Linux with ≥4 GB RAM\nSoftware\nThe library has been tested with R version 3.5.2 and the R libraries parallel 3.5.2, ggplot2 3.1.0, sets 1.0-18, arules 1.6-3, and ggrepel 0.8.0\n1. Run R from the command line:\n         \n$ R\n2. Follow Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001], 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003], and 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004] to compute beta table bt, ploidy table pl, and DNA admixture table adm, respectively.\n3. Given beta table bt, ploidy table pl, and DNA admixture table adm, compute the SCNA clonality table:\n         \n> clonality_tb <- compute_scna_clonality_table(bt, pl, adm)",
    "Each SNV is characterized by the variant allele fraction (VAF), i.e., the proportion of reads supporting the alternative allele; intuitively, the VAF is representative of the amount of tumor DNA harboring the mutation (as no alternative read is expected from the admixed normal cells). Therefore, low VAF values correspond to low clonality. In a 100% pure diploid sample, a clonal monoallelic SNV within a wild-type genomic segment is expected to show a VAF of 0.5 (for simplicity, we here ignore the reference mapping bias; Degner et al., 2009[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0015]) whereas, in the same setting, an SNV that is present in the 60% of the tumor cells is expected to show a VAF of 0.3. However, several technical and biological factors influence VAF value, including DNA admixture, ploidy, and somatic copy-number status. In Faltas et al. (2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-bib-0016]), we extended the original implementation to deal with SNVs in the context of allele-specific copy number. SNV VAF ranges over a finite set of values dictated by the DNA copy-number state: for instance, a clonal SNV in a copy number aberrant segment (CN = 3) in a 100% pure diploid sample may have VAF equal to ⅓, ⅔, or 1, depending on the number of alleles harboring the mutation. By utilizing the sample admixture estimate and the its lower and upper bounds (function compute_dna_admixture), we first estimate the minimum and maximum clonality and next, as for SCNA, assign a discretize clonality value (clonal, uncertain.clonal, uncertain.subclonal, or subclonal). Figure 7[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0007]A shows an example of SNV clonality (y axis) distributions per discretized class (x axis) regardless of the copy number of the genomic segments harboring the SNVs (Fig. 7[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-fig-0007]B). Given a tumor sample, the function compute_snv_clonality takes as input the following parameters:",
    "snv_read_count: a table reporting in each row the genomic coordinates of an SNV together with the numbers of reference and alternative reads covering the mutated position;\nbeta_table: a table created using the function described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001];\nploidy_table: a table created using the function described in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003];\nadmixture_table: a table created using the function described in Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004];\nerror_tb: the same error_tb used in the function compute_dna_admixture of Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004]; error around beta is propagated to assess clonality estimate boundary and in turn is used for its discretization;\nerror_rate (default = 0.05): fraction of SNVs to exclude based on adjusted VAF distribution.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/839d71bb-2f77-4186-aa2f-c6045b4c0589/cpbi81-fig-0007-m.jpg</p>\nFigure 7\nExample of clonality analysis of SNVs. (A) Box plot reporting the clonality values of the SNVs of a tumor sample. The clonality value (y axis) distributions are shown including all variants of a tumor sample, stratified by the automatically assigned clonality status class (x axis). (B) For each SNV in panel A, allele-specific copy-number data of the genomic segment containing the mutations are reported.\nThe function compute_snv_clonality extends the input table snv_read_count with clonality-related columns:\n         \ncnA, cnB: allele-specific copy numbers of the genomic segment containing the SNV;\nt_af_corr: tumor VAF adjusted for ploidy, admixture, and allele-specific copy number;\nSNV.clonality: percentage of tumor cells harboring the SNV;\nSNV.clonality.status: discretized SNV.clonality.\nNecessary Resources\nHardware\n64-bit computer running Linux with ≥4 GB RAM\nSoftware\nThe library has been tested with R version 3.5.2 and the R libraries parallel 3.5.2, ggplot2 3.1.0, sets 1.0-18, arules 1.6-3, and ggrepel 0.8.0\n1. Run R from the command line:\n         \n$ R\n2. Follow Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0001], 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0003], and 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpbi.81#cpbi81-prot-0004] to compute beta table bt, ploidy table pl, and DNA admixture table adm, respectively.",
    "3. Read an SNV table snv_reads with columns rc_ref_tumor and rc_alt_tumor for reference and alternative read counts, respectively:\n         \n> read.table(system.file(“sample_snv_read_count.tsv”, package = “CLONETv2”),header = T, as.is=T, comment.char = “\", check.names = F, na.strings = ”-\")\n4. Given beta table bt, ploidy table pl, and DNA admixture table adm, compute the clonality of SNVs:\n         \n> snv_clonality_tb <- compute_snv_clonality(“sample1”, snv_reads, bt, pl, adm)"
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}