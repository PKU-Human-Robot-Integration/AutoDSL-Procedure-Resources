{
  "id": 4074,
  "origin_website": "Cell",
  "title": "An in silico drug repositioning workflow for host-based antivirals",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nDefine the druggable target gene set\nTiming: ∼3 days\nAny user-defined target gene set can be used for this protocol towards more general applications. As a specific example, the definition of target gene set against Coronaviridae viruses is shown in the following steps.\nCollect public datasets to define Coronaviridae-specific HDGs.\nCollect the references performing high throughput genetic perturbation screening for Coronaviridae virus resistance in human cells. In these studies, gene-trap, RNAi and CRISPR techniques are employed to perturb a gene’s function. For example, use the search key word “SARS-CoV-2 AND screen” to collect SARS-CoV-2 virus-related screening references from PubMed (https://pubmed.ncbi.nlm.nih.gov/[href=https://pubmed.ncbi.nlm.nih.gov/]). References for other Coronaviridae viruses such as MERS-CoV and SARS-CoV can be collected similarly. Pinpoint the datasets reporting the viral resistance HDGs associated with these references.\nCollect scattered HDGs for Coronaviridae viruses from individual literatures in which specific genes are shown to be critical or essential for complete viral life cycle (non-screen study).\nFilter the collected data to pinpoint HDGs. If a host gene or its encoding protein is shown only to physically interact with viral proteins or regulated by viral genes but without functional implication on viral life cycle upon gene’s loss-of-function, the gene is not classified as a HDG. A gene is defined as a HDG only when it meets any of the following criteria:\nIts loss-of-function impedes or reduces viral infection or activity by experimental evidence in non-screen studies.\nIt has been clearly classified into HDG group in screen studies.",
    "When HDG group is not specified in screen studies, arbitrarily take the top ∼5% of all the interrogated genes in the positive selection list as HDGs with a custom log-fold change cutoff in CRISPR knockout or RNAi screens. For example, in a typical result output generated by MAGeCK (Li et al., 2015[href=https://www.wicell.org#bib3]; Li et al., 2014[href=https://www.wicell.org#bib4]) analytic pipeline for CRISPR screens, genes can be ranked according to their negative or positive selection trend by jointly considering the log-fold change and statistical significance of their corresponding guide RNAs. HDGs can be arbitrarily defined as the top ∼5% of all the genes with a log-fold change of 1.0 (loose cutoff) or 2.0 (stringent cutoff).\nDefine high confidence HDG gene set for Coronaviridae family viruses.\nAs there are several independent studies and datasets for HDG identification against Coronaviridae family viruses, we only take a subset of HDGs that occurs more than once among different datasets as high confidence HDGs for further analysis. A total of 165 high confidence HDGs are defined for Coronaviridae viruses (Figure 1[href=https://www.wicell.org#fig1]A). After that, prepare a HDG file in the structure of “gene symbol + amino acid sequence” (Figure 1[href=https://www.wicell.org#fig1]B, Supplemental File S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Mmc1.zip]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Fig1.jpg\nFigure 1. Prepare DeepCPI input file\n(A) Gene symbol list of target gene set exemplified by 165 high confidence HDGs for Coronaviridae viruses.\n(B) The structure, layout and information of the text files for drugs and targets.\n(C) The structure, layout and information of the merged text file generated as DeepCPI input.\nNote: In addition to PubMed, public integrated database such as “CRISP-view” (http://crispview.weililab.org/[href=http://crispview.weililab.org/]) can also be used to search high throughput genetic screen studies or datasets (Cui et al., 2021[href=https://www.wicell.org#bib1]). In addition, virus-specific HDGs for 10 families and 29 species of RNA viruses can be downloaded from (Li et al., 2021[href=https://www.wicell.org#bib5]).",
    "Define the cohort of candidate drugs or chemicals for repurposing\nTiming: ∼1 day\nCollect FDA approved drug information.\nDrug information is extracted from Database: DrugBank (version 5.1.7, released 2020-07-02; https://www.drugbank.ca[href=https://www.drugbank.ca]) (Wishart et al., 2018[href=https://www.wicell.org#bib14]). Open DrugBank website -> Download -> Structures -> Structure External Links -> Approved -> Download. (#Download FDA approved drug data with InChI (the IUPAC International Chemical Identifier) information from the DrugBank website)\nExtract the DrugBank ID and InChI, and save them as separate files in the structure of “DrugBank ID + InChI” (Supplemental File S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Mmc1.zip]).\nA total of 2457 FDA approved drugs are collected with InChI information. Note that the InChI value is required for DeepCPI.\nCollect natural compound information.\nNatural compound information is downloaded from Database: Traditional Chinese Medicine Systems Pharmacology (TCMSP) (version 2.3, released 2014-05-31; https://tcmspw.com/tcmsp.php[href=https://tcmspw.com/tcmsp.php]) which is a unique systems pharmacology platform of Chinese herbal medicines (Ru et al., 2014[href=https://www.wicell.org#bib10]).\nFilter the pool of 1455 natural compounds for better druggability by requiring each candidate passing the criteria of oral bioavailability (OB) ≥ 30.0%, drug-likeness (DL) ≥ 0.18 and blood-brain barrier (BBB) ≥ -0.30. Finally, 1062 selected natural compounds with InChI information are kept for the downstream DTI analysis.\nExtract the compound ID and InChI, and save them as separate files in the structure of “compound ID + InChI” (Supplemental File S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Mmc1.zip]).\nNote: The above drug cohort information used in this protocol can be found in Table S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Mmc2.zip].\nPrepare DeepCPI input file\nTiming: ∼2 h (variable)\nDeepCPI requires two layers of information for DTI prediction: “the InChl information of drugs” and “the amino acid sequence of target gene-encoding proteins”.\nPrepare a txt file (e.g., “Drugbank_Approved.txt” or “TCM_selected.txt”) containing the InChl information for each drug (Figure 1[href=https://www.wicell.org#fig1]B, Supplemental File S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Mmc1.zip]).",
    "Prepare a txt file (e.g., “Coronaviridae_HDGs.txt”) containing the amino acid sequence for each target protein (Figure 1[href=https://www.wicell.org#fig1]B, Supplemental File S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Mmc1.zip]). The amino acid sequences are extracted from UniProt database (https://www.uniprot.org/[href=https://www.uniprot.org/]).\nSave the two files (“Coronaviridae_HDGs.txt” and “Drugbank_Approved.txt”) under the same directory.\nOpen Terminal.\nChange directory to where the files (“Coronaviridae_HDGs.txt” and “Drugbank_Approved.txt”) are located by typing “cd /your/working/path”.\nRun python script “DrugTargtPairGenerator.py” by typing “python DrugTargtPairGenerator.py --f1 Coronaviridae_HDGs.txt --f2 Drugbank_Approved.txt” to generate a merged txt file (e.g., “Drug_Target_Pair.txt”) with each possible drug-target pair (Figure 1[href=https://www.wicell.org#fig1]C).\nDTI prediction by DeepCPI\nTiming: ∼2h\nRun the DeepCPI pipeline and calculate the DeepCPI score for drug-target pair.\nPaste the merged input file (e.g., “Drug_Target_Pair.txt”) into the DeepCPI folder and rename it as “example.tsv”. (#DeepCPI uses “example.tsv” as default input file)\nOpen Terminal.\nActivate conda environment by typing “source activate DeepCPI”.\nChange directory to the home directory of the DeepCPI folder named “DeepCPI-master” by typing “cd [The path of DeepCPI]”. (e.g., “cd /…/DeepCPI-master“)\nRun the DeepCPI pipeline under the DeepCPI folder by typing the command “python DeepCPI.py”.\nA file named “Prediction_results.tsv” is generated at the end of the run. Each drug-target pair is assigned a DeepCPI score (range 0–1) representing their interaction potential. The higher score indicates higher interaction potential.\nChange directory to where the files (“Prediction_results.tsv”, “Coronaviridae_HDGs.txt”, and “Drugbank_Approved.txt” stored under the same directory) are located by typing “cd /your/working/path”.\nRun python script “MatricesGenerator.py” by typing “python MatricesGenerator.py --f1 Prediction_results.tsv --f2 Coronaviridae_HDGs.txt --f3 Drugbank_Approved.txt” to create a score matrices    T  C P I     named “Prediction_results.matrix.txt” with DeepCPI score for each drug-target pair (   x  C P I    ), where l refers to the length of drug list and k refers to the length of target list:",
    "T  C P I   ∈  R  l × k   ,  x  C P I   ∈  T  C P I    \nRun python script “FilterOutNonSignificant.py” by typing “python FilterOutNonSignificant.py -f Prediction_results.matrix.txt -c 0.892” to filter out the non-significant DTI scores and only keep the confident scores. The output file is “Prediction_results.matrix.filtered.txt”. The optimal standardized DeepCPI score threshold (0.892, sensitivity: 37.2%, specificity: 86.8%) is determined by receiver operating characteristics (ROC) analysis with benchmark datasets (Li et al., 2021[href=https://www.wicell.org#bib5]). This pre-defined threshold may change when different benchmark datasets are used to evaluate DeepCPI performance. Once defined, such threshold is applicable to any DTI analysis using DeepCPI for different target gene sets and drug sets.\n   T  C P I _ s i g   =  {      x ,  i f  x ≥ 0.892        0 ,  i f  x < 0.892       x ∈  T  C P I    \nOptional: When more DTI prediction algorithms are applied to alleviate the bias of each algorithm and improve the prediction precision, each method generates a prediction score for the same drug-target pair. However, the score distribution pattern is usually different between different methods. To make these DTI scores comparable, a z-score based normalization is recommended as exemplified in the following steps to standardize DeepCPI score. DTI scores derived from other prediction algorithms can be normalized in the similar manner.\nOpen and run R script “ZscoreNormalization.Rmd” to generate z-score matrices    Z  C P I     named “z_Prediction_results.txt”, where, μ is mean value of the original scores and σ is standard deviation of the original scores:\n   z  C P I   =     x  C P I   −   μ  C P I     σ  C P I    ,   x  C P I   ∈  T  C P I    \nOpen Terminal.",
    "Change directory to where the files (“z_Prediction_results.txt”, “Coronaviridae_HDGs.txt”, and “Drugbank_Approved.txt” stored under the same directory) are located by typing “cd /your/working/path”.\nRun python script “MatricesGenerator.py” by typing “python MatricesGenerator.py --f1 z_Prediction_results.txt --f2 Coronaviridae_HDGs.txt --f3 Drugbank_Approved.txt”. This command will create a z-score matrices    Z  C P I     named “z_Prediction_results.matrix.txt” with standardized DeepCPI score for each drug-target pair (   z  C P I    ), where l refers to the length of drug list and k refers to the length of target list:\n   Z  C P I   ∈  R  l × k   ,   z  C P I   ∈  Z  C P I    \nRun python script “FilterOutNonSignificant.py” by typing “python FilterOutNonSignificant.py -f z_Prediction_results.matrix.txt -c 0.641”. This command will filter out the non-significant DTI scores and only keep the confident scores. The output file is “z_Prediction_results.matrix.filtered.txt”. The optimal standardized DeepCPI score threshold (0.641, sensitivity: 73%, specificity: 51.9%) is determined by receiver operating characteristics (ROC) analysis with benchmark datasets (Li et al., 2021[href=https://www.wicell.org#bib5]). This pre-defined threshold may change when different benchmark datasets are used. Once defined, such threshold for standardized DeepCPI score is applicable for different target gene sets and drug sets.\n   Z  C P I _ s i g   =  {     z ,  i f  z ≥ 0.641        0 ,  i f  z < 0.641       z ∈  Z  C P I    \nPrioritize repurposed drug candidates\nTiming: ∼10 min\nRepurposed drug candidates are ranked primarily according to their targeting range (the number of target) and targeting strength (the interaction potential of target).\nPrioritize the drug candidates using P_score that only considers the HDG target-associated DTIs. P_score is calculated for each drug candidate by the following formula, where    x  C P I _ s i g     represents filtered DeepCPI score for each drug-target pair and k refers to the length of target list.",
    "P _ s c o r  e  C P I   =    ∑   i = 1  k   x i  C P I _ s i g   / k ,   x  C P I _ s i g   ∈  T  C P I _ s i g    \nOpen the file “Prediction_results.matrix.filtered.txt” using Excel sheet. Drugs are listed in rows and targets are listed in columns.\nFor each drug, calculate P_score using the above formula (AVERAGE function). The higher of P_score, the better the corresponding drug is prioritized.\nThe drug candidates can be ranked according to their P_score.\nOptional: If using normalized z-score, calculate P_score for each drug candidate corresponding to each DTI prediction method by the following formula exemplified by DeepCPI, where    z  C P I _ s i g     represents filtered DeepCPI score for each drug-target pair and k refers to the length of target list. Drug candidates can be ranked by integrative consideration of multiple P_score derived from each DTI prediction methods.\n  P _ s c o r  e  C P I   =     ∑   i = 1  k   z i  C P  I  s i g      k  ,   z  C P I _ s i g   ∈  Z  C P I _ s i g    \nMolecular docking analysis of top ranked drugs\nTiming: ∼4 h\nTo further examine the potential binding interface and free energy between top ranked drugs and their predicted target proteins, molecular docking analysis can be performed. Using Baricitinib (one of the top ranked repurposed drugs against Coronaviridae viruses) and its predicted target DYRK1A as an example, molecular docking analysis is performed as in the following steps. The docking parameters may vary depending on the interrogated drug/target pair.\nPrepare the ligand.",
    "Download the chemical structure file for Baricitinib (PubChem CID: 44205240) from PubChem website (https://pubchem.ncbi.nlm.nih.gov/[href=https://pubchem.ncbi.nlm.nih.gov/]) in SDF format (named as “Baricitinib.SDF”).\nOpen a PyMOL software browser and input the ligand file “Baricitinib.SDF”.\nExport and save as “ligand.PDB” formatted file.\nOpen the AutoDock software and input the “ligand.PDB” file (Figure 2[href=https://www.wicell.org#fig2]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Fig2.jpg\nFigure 2. Pre-processing procedures of molecular docking analysis\n(A) Illustration of “Input the ligand” step by AutoDock software.\n(B) Illustration of “Choose the torsions of the ligand” step in AutoDock.\n(C) Illustration of “Output ligand.pdbqt file” step in AutoDock.\n(D) Illustration of “Remove waters of protein” step in AutoDock.\n(E) Illustration of “Add polar hydrogens of protein” step in AutoDock.\n(F) Illustration of “Delete pre-embedded ligand” step in AutoDock.\n(G) Example of “Delete the other chains and solvents of the protein” step (D chain of DYRK1A in 6SIE.pdb) in AutoDock.\nClick “Ligand->Torsion Tree” and select “Choose Torsions” module (Figure 2[href=https://www.wicell.org#fig2]B). The red chemical bond means un-rotatable, the green chemical bond means rotatable.\nOutput and save as “ligand.pdbqt” formatted file (Figure 2[href=https://www.wicell.org#fig2]C).\nPrepare the protein receptor.\nThe protein structure of DYRK1A (PDB: 6EIS) is downloaded from RCSB PDB website (http://www1.rcsb.org[href=http://www1.rcsb.org]) in PDB format.\nOpen a PyMOL software browser to input the file “6SIE.pdb”.\nRemove waters (Figure 2[href=https://www.wicell.org#fig2]D) and add polar hydrogens (Figure 2[href=https://www.wicell.org#fig2]E).\nChoose the primary ligand of DYRK1A at the 321st amino acid position of A chain, and remove the pre-embedded ligand (Figure 2[href=https://www.wicell.org#fig2]F).\nDelete the other chains (B, C, and D chains of DYRK1A in 6SIE.pdb) and solvents of the protein (Figure 2[href=https://www.wicell.org#fig2]G).\nSave as “protein.pdb” formatted file.\nOpen the AutoDock software and input the “protein.pdb” file.\nSet the atoms using “Assign AD4 type” module (Figure 3[href=https://www.wicell.org#fig3]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Fig3.jpg\nFigure 3. Continued procedures of molecular docking analysis",
    "(A) Illustration of setting the atoms using “Assign AD4 type” module in AutoDock software.\n(B) Illustration of computing the Gasteiger charges for protein molecules in AutoDock.\n(C) Illustration of exporting and saving as “protein.pdbqt” formatted file in AutoDock.\n(D) Example of setting the center of grid box size to cover the active pocket in AutoDock.\n(E) Illustration of outputting the Lamarckian GA result.\n(F) Illustration of showing the interactions between ligand and protein.\n(G) Illustration of analyzing different conformations of the ligand.\n(H) Example of docking result showing the interaction between Baricitinib and DYRK1A.\nCompute the Gasteiger charges for protein molecules (Figure 3[href=https://www.wicell.org#fig3]B).\nExport and save as “protein.pdbqt” formatted file (Figure 3[href=https://www.wicell.org#fig3]C).\nSet the grid box.\nOpen the “Grid” module and input the “protein.pdbqt” file.\nSet map types and input the “ligand.pdbqt” file.\nOpen “Grid Box” module to set the position of grid box.\nSet the center of grid box size: X center: -0.424, Y center: -16.948, Z center: -8.144. Then, set the number of points in X (60), Y (60) and Z (60) dimension of grid box to cover the active pocket (Figure 3[href=https://www.wicell.org#fig3]D).\nSave as “dock.gpf” formatted file.\nAnalyze the grid docking.\nChoose the “Docking” module, and input the protein and ligand files (“protein.pdbqt” and “ligand.pdbqt”).\nClick “Docking->Search Parameters” and choose “Genetic Algorithm” module.\nClick “Docking->Docking Parameters” and use the default settings.\nOutput the Lamarckian GA result and save as “dock.dpf” formatted file (Figure 3[href=https://www.wicell.org#fig3]E).\nRun the “AutoGrid” and “AutoDock” module with “dock.gpf” and “dock.dpf” file, respectively. A “dock.dlg” file is then generated.\nOpen the “dock.dlg” file and protein file (“protein.pdbqt”).\nShow the interactions between ligand and protein (Figure 3[href=https://www.wicell.org#fig3]F).",
    "Analyze the conformations of ligand and click this button (imgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/784-Fx3.jpg) (Figure 3[href=https://www.wicell.org#fig3]G). The DashBoard shows the binding energy under different ligand conformations with the lowest binding energy of -8.07 kcal/mol for potential interaction between Baricitinib and DYRK1A A chain.\nOutput the complex interactions, and save as “result.pdbqt” formatted file.\nVisualize the results of docking.\nOpen the PyMOL browser and input the “result.pdbqt” file.\nSet the shape and color of the protein or the ligand.\nDisplay the background as “white”.\nOutput and save the picture of docking result as “docking.png” file (Figure 3[href=https://www.wicell.org#fig3]H).\nNote: Other molecular docking software can also be utilized. The binding interface and free energy may differ when using different molecular docking platforms.\nNote: If there is no structure of interrogated target protein available in PDB website, protein structure prediction by homology modeling may be performed. If there is only apo-structure available where the target protein is not in complex with drugs or small molecules, binding pocket prediction or blind docking can be performed with molecular docking software.\nOptional: If a deeper computational investigation on the binding-function relationship is needed, molecular dynamics (MD) simulation can be performed as elaborated in other literatures (Maximova et al., 2016[href=https://www.wicell.org#bib6]; Mei et al., 2021[href=https://www.wicell.org#bib7]; Yang et al., 2020[href=https://www.wicell.org#bib15])."
  ],
  "subjectAreas": [
    "Immunology",
    "Bioinformatics",
    "Microbiology",
    "Molecular Biology",
    "Structural Biology",
    "High Throughput Screening"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}