{
  "id": 19687,
  "origin_website": "Wiley",
  "title": "mOTUs: Profiling Taxonomic Composition, Transcriptional Activity and Strain Populations of Microbial Communities",
  "procedures": [
    "This protocol describes the basic profiling routine of mOTUs for metagenomic and metatranscriptomic short-read (e.g., Illumina) sequencing data with default settings. For metagenomic data, the output is a profile of microbial community members and their relative abundances. By default, the microbial community compositions are summarized into abundances of mOTUs, i.e., phylogenetic marker gene-based operational taxonomic units at species-level resolution (Mende et al., 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-bib-0008]; Sunagawa et al., 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-bib-0010]). For metatranscriptomic data, the output follows the same format, but reflects the relative taxonomic composition of transcriptionally active community members.\nNecessary Resources\nHardware/Software\nThe mOTU profiler is a command-line tool that requires a 64-bit Linux or MacOS system with at least 16 GB of RAM and its runtime scales almost linearly with the number of input sequences (see Strategic Planning). Installation instructions are provided in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\nInput Files\nPaired-end or single-end short-read sequencing data (see Strategic Planning for more details) in FASTQ format. For demonstration purposes we have deposited sequencing files on Zenodo (https://zenodo.org/record/5012695[href=https://zenodo.org/record/5012695]).\nOutput Files\nThe output of mOTUs is a two-column, tab-separated table. The first column contains taxonomic identifiers, by default at the rank of mOTUs (i.e., species level), and the values in the second column correspond to their relative abundances in the profiled sample. The profile can also be generated at other taxonomic ranks (see Support Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0005]). Profiles from multiple samples can be merged into a single file with taxonomic identifiers in the first column and abundances of the profiled samples in the following columns.\n1. Install mOTUs as described in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\n2. Create a work folder and download the sequencing reads from Zenodo:\n         \nmkdir basic_protocol_1\ncd basic_protocol_1\nwget https://zenodo.org/record/5012695/files/protocol_profile.zip\nunzip protocol_profile.zip\ncd protocol_profile\nPrecomputed results of all steps shown in this protocol can be found in the protocol_profile/bp1_precomputed folder.",
    "3. Generate a mOTUs profile with paired-end sequencing read files from a single sample:\n         \nmotus profile -f input/ERR479298s.1.fq.gz -r\ninput/ERR479298s.2.fq.gz -n ERR479298s -o ERR479298s-default.motus\nUnpaired reads can also be profiled and/or added to the command using the -s option. Multiple sequencing files can be used as input for a single profiling run. The order, orientation, and naming are required to follow the conventions described in Strategic Planning.\nThe optional argument -n adds the sample name to the profile. This is important if profiles are merged to retain sample names as column names.\n4. The output of mOTUs is a two-column, tab-separated table. The first column lists the identifiers of all mOTUs and the second column shows the relative abundance of each mOTU in the profiled sample. For example, meta_mOTU_v3_12429 has a relative abundance of 16%:\n         \ngrep \"meta_mOTU_v3_12429\" ERR479298s-default.motus\nPrevotella species incertae sedis [meta_mOTU_v3_12429] 0.1597971398\n5. Individual profiles can be merged into a single file to facilitate comparative downstream analyses using the motus merge command. Here, we merge the profile created in the previous step with a precomputed profile:\n         \nmotus merge -i ERR479298s-default.motus,bp1_precomputed/ERR479045- default.motus -o merged.motus\nAlternatively, all profile files can be placed into a single folder and the -i option can be replaced by the -d option, setting the folder name as value.\n6. The format of the merged profile is identical to the single sample profile with additional columns for each sample added:\n         \ngrep \"meta_mOTU_v3_12429\" merged.motus\nPrevotella species incertae sedis [meta_mOTU_v3_12429]  0.1597971398  0.0000000000\n7. The profiling and merging routines have finished successfully if and when the output file (e.g., ERR479298s-default.motus or merged.motus) is created and the tool reports that no error has occurred. A guideline on how to interpret the profiling results can be found in Guidelines for Understanding Results.",
    "The mOTU profiler can be used to generate metagenomic single nucleotide variation (SNV) profiles of the mOTUs marker genes and provides a computationally efficient alternative to generating SNV profiles from whole-genome sequences. These profiles are subsequently used to produce between-sample distances for individual mOTUs, providing access to strain population diversity patterns for as many as 33,750 species. To this end, mOTUs will first align metagenomic sequencing reads against its marker gene database and then process the alignments using the metaSNV package (Costea et al., 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-bib-0007]).\nNecessary Resources\nHardware/Software\nThe mOTU profiler is a command-line tool that requires a 64-bit Linux or MacOS system with at least 16 GB of RAM and its runtime scales almost linearly with the number of input sequences (see Strategic Planning). Installation instructions are provided in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\nInput Files\nMetagenomic SNV profiling is a pipeline split into two parts:\n               \nmotus map_snv requires paired-end or single-end short read sequencing data (see Strategic Planning for more details) in FASTQ format\nThe BAM alignment files produced by motus map_snv serve as input for the motus snv_call routine\nFor demonstration purposes we have deposited sequencing and alignment files on Zenodo (https://zenodo.org/record/5012568[href=https://zenodo.org/record/5012568])\nOutput Files\nThe motus map_snv command will create one BAM file per execution\nThe motus snv_call command will create an output folder with four files/directories:\n               \nTwo files containing the read coverage information for each mOTU, both horizontal, i.e., the percentage of bases covered by at least one read (*.perc.tab file), and vertical, i.e., the average number of reads covering each base (*.cov.tab file)\nPer mOTU filtered allele frequencies of identified SNVs across samples (filtered-* directory)\nPer mOTU genetic distances between samples (distances-* directory)",
    "For the files containing distance information, both regular Manhattan (*mann.dist files) and dominant allele (*allele.dist files) distances are provided. The dominant allele distance is a Manhattan distance that only takes positions with a frequency change above 50% (i.e., change of the dominant allele) into account.\nThe SNV profiling routine is split into two steps (motus map_snv and motus snv_call) that need to be executed sequentially. The first step aligns sequencing reads of a single sample against a reduced mOTUs centroid database. The second step uses alignments from multiple samples to calculate metagenomic SNV profiles and distances using metaSNV.\n1. Install mOTUs as described in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\n2. Create a work folder and download the sequencing reads from Zenodo:\n         \nmkdir basic_protocol_2\ncd basic_protocol_2\nwget https://zenodo.org/record/5012568/files/protocol_snv.zip\nunzip protocol_snv.zip\ncd protocol_snv\nPrecomputed results of all steps shown in this protocol can be found in the protocol_snv/bp2_precomputed folder.\n3. Execute the motus map_snv command to align reads from a paired-end sequencing sample against the mOTUs centroid database:\n         \nmotus map_snv -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-default.bam\nUnpaired reads can also be profiled and/or added to the command using the -s option. Multiple sequencing files can be used as input for a single profiling run. The order, orientation, and naming are required to follow the conventions described in Strategic Planning.\n4. The motus snv_call command takes a folder containing BAM files as input. Execute the following command to run motus snv_call:\n         \nmotus snv_call -d bp2_precomputed/bams/ -o motus-snvcall-default\nBAM files produced by other tools or those created by the motus profile command cannot be used as an input for the motus snv_call command. Only BAM files produced by the motus map_snv command can be used.",
    "motus snv_call requires at least two BAM files as input. We provide a set of 20 precomputed BAM files for this example.\n5. Execute the following command to inspect the marker gene-based distances between metagenomic SNV profiles, which can be found in the distances-m2-d5-b80-c5-p0.9 folder:\n         \ncat motus-snvcall-default/distances-m2-d5-b80-c5-\np0.9/meta_mOTU_v3_12235.filtered.mann.dist\n      SAMEA2466942-default.bam    SAMEA2467017-default.bam\ntable:\n﻿0,1,2\nSAMEA2466942-default.bam,0.0,0.6728930543446672\nSAMEA2467017-default.bam,0.6728930543446672,0.0\n6. The motus map_snv step has finished successfully when the output alignment file is created (e.g., ERR479298-default.bam). The motus snv_call step has finished successfully when all result files are present and the tool reports “Successfully finished” in the command line. A guideline on how to interpret the SNV results can be found in Guidelines for Understanding Results.",
    "The mOTU profiler is written in Python 3 and can be executed on a 64-bit Linux or MacOS system. There are external dependencies that need to be pre-installed. This can be done either by manual installation or, preferably, by using the conda package manager.\nNecessary Resources\nHardware\nAs described in Strategic Planning\nSoftware\nBWA, to align sequencing reads against the mOTUs database. Tested with version BWA-0.7.17 (r1188); https://github.com/lh3/bwa[href=https://github.com/lh3/bwa].\nSAMtools, to read the alignment files produced by BWA. Tested with version 1.6 or higher; https://github.com/samtools/samtools[href=https://github.com/samtools/samtools].\nPython as the runtime for the mOTU profiler. Tested with version 3.6.5 or higher; https://www.python.org/downloads/[href=https://www.python.org/downloads/].\nOptional: metaSNV, for SNV calling and processing. Tested with version 1.0.3; http://metasnv.embl.de/[href=http://metasnv.embl.de/]. The metaSNV package is only needed for the snv_call command (Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0002] and Support Protocol 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0006]).\nOptional: miniconda, for installation using conda; https://docs.conda.io/en/latest/miniconda.html[href=https://docs.conda.io/en/latest/miniconda.html]\nFiles\nThe latest mOTUs package (tar.gz file); https://github.com/motu-tool/mOTUs[href=https://github.com/motu-tool/mOTUs]\nOption A: Installation using the Conda Package Manager\n1a. The installation using the conda package manager is generally preferable, as it encapsulates the entire installation process into a single command once conda is installed. Execute the following command to install conda:\n         \ncurl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nsh Miniconda3-latest-Linux-x86_64.sh\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\nIf conda is already installed on the system, only the config steps need to be executed.\nIf working on a MacOS system, the download link has to be replaced by: https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh[href=https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh].\n2a. Install the latest version of mOTUs using conda:\n         \nconda install -c bioconda motus=3.0.0\nOption B: Manual installation",
    "1a. Both mandatory dependencies (BWA and SAMtools) can be downloaded from their respective GitHub repositories. Up-to-date installation instructions are provided by the developers. The metaSNV source code can be downloaded from http://metasnv.embl.de/[href=http://metasnv.embl.de/] along with installation instructions. Python (version 3.6.5 or higher) should be installed following the instructions on the official website (https://www.python.org/downloads/[href=https://www.python.org/downloads/]).\n2a. The manual installation consists of three steps. In step 1, the release files are downloaded from the official GitHub repository. The installation script in step 2 will download the database. The test routine in step 3 checks whether dependencies are installed correctly and whether profiling a test dataset yields the expected results. Execute the following commands to download and install mOTUs:\n         \nwget https://github.com/motu-tool/mOTUs/archive/refs/tags/3.0.0.tar.gz\ntar -xzvf 3.0.0.tar.gz\ncd mOTUs-3.0.0\npython setup.py\npython test.py\necho export PATH=`pwd`:$PATH >> ∼/.bashrc\nsource ∼/.bashrc\nThis example shows the installation of version 3.0.0 which was released in June 2021. The installation of other versions (https://github.com/motu-tool/mOTUs/releases[href=https://github.com/motu-tool/mOTUs/releases]) works accordingly.\nMacOS users can use curl -OL as a drop-in replacement for wget.",
    "The motus profile routine is an analysis pipeline that consists of three steps, namely map_tax, calc_mgc, and calc_motu, which are internally executed in that order. Each step produces the output files that are needed for the next step, and therefore it can be useful to run the commands individually, e.g., to test different parameter settings, without the need to run the entire pipeline. This is especially useful, as the first step (map_tax) accounts for most of the CPU time needed to calculate profiles.\nNecessary Resources\nHardware/Software\nThe mOTU profiler is a command-line tool that requires a 64-bit Linux or MacOS system with at least 16 GB of RAM and its runtime scales almost linearly with the number of input sequences (see Strategic Planning). Installation instructions are provided in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\nInput Files\nPaired-end or single-end short-read sequencing data (see Strategic Planning for more details) in FASTQ format. For demonstration purposes we have deposited sequencing files on Zenodo (https://zenodo.org/record/5012695[href=https://zenodo.org/record/5012695]).\nOutput Files\nThe output of mOTUs is a two-column, tab-separated table. The first column contains taxonomic identifiers, by default at the rank of mOTUs (i.e., species level), and the values in the second column correspond to their relative abundances in the profiled sample. The profile can also be generated at other taxonomic ranks (see Support Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0005]). Profiles from multiple samples can be merged into a single file with taxonomic identifiers in the first column and abundances of the profiled samples in the following columns.\nThe intermediate output files produced by mOTUs contain:\n               \nalignments of reads against the mOTUs database in BAM format\nmarker gene abundances in a two-column, tab-separated table\n1. Install mOTUs as described in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\n2. Create a work folder and download the sequencing reads from Zenodo:\n         \nmkdir support_protocol_2\ncd support_protocol_2\nwget https://zenodo.org/record/5012695/files/protocol_profile.zip\nunzip protocol_profile.zip",
    "cd protocol_profile\nPrecomputed results of all steps shown in this protocol can be found in the protocol_profile/sp2_precomputed folder.\n3. Execute the following command to align paired-end sequencing reads against the mOTUs database and store alignments in a BAM file:\n         \nmotus map_tax -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-default.bam\nUnpaired reads can also be profiled and/or added to the command using the -s option. Multiple sequencing files can be used as input for a single profiling run. The order, orientation, and naming are required to follow the conventions described in Strategic Planning.\nThe optional argument -n adds the sample name to the profile. This is important if profiles are merged to retain sample names as column names.\n4. Parse the alignments in the BAM file and produce an intermediate file that assigns each insert to its marker gene cluster:\n         \nmotus calc_mgc -i ERR479298s-default.bam -n ERR479298s -o ERR479298s-default.mgc\n5. The output of the calc_mgc step is a two-column, tab-separated table with the first column representing the name of the marker gene cluster and the second column containing the insert count (see Background Information and Fig. 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-fig-0001]):\n         \n    head -n 10 ERR479298s-default.mgc\n# map_tax 3.0.0 | gene database: nr3.0.0 | 84 | calc_mgc 3.0.0 -y insert.scaled_counts -l 75\ntable:\n﻿0,1\nERR479298s,\nCOG0495.mOTU.v25.0000273,476.9980996151712\nCOG0552.mOTU.v2.0001907,52.97275139363133\nCOG0533.mOTU.v2.0001890,312.27285022688824\nCOG0525.mOTU.v25.0000325,363.7120130887338\nCOG0215.ext_mOTU_v3_003085,48.85735226138667\nCOG0172.mOTU.v2.0002099,101.5497931033204\nCOG0525.mOTU.v2.0001728,3.4031882043690063\nCOG0525.mOTU.v25.0000424,2.255959601538731\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/b725575c-71f7-4705-97c4-3a7db16fc5f4/cpz1218-fig-0001-m.jpg</p>\nFigure 1",
    "Marker gene clusters. Marker genes (MGs) represent the basic unit to which metagenomic and metatranscriptomic sequencing reads are mapped using the motus map_tax command. Marker genes (represented as circles) from the same species (in this example, all COG0012 genes from Prevotella copri) are clustered into marker gene clusters (MGC). The execution of motus calc_mgc quantifies the abundance of each of up to 10 MGCs per mOTU using a predefined metric (see Fig. 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-fig-0003]). For each MGC, one centroid sequence (in blue) is selected to generate a reduced set (only centroid sequences) of MGs that is used as the reference database for the motus map_snv command.\n6. To calculate the abundance of each mOTU, execute the motus calc_motu command, which generates the mOTUs output file:\n         \nmotus calc_motu -i ERR479298s-default.mgc -n ERR479298s -o ERR479298s-default.motus\n7. The output of mOTUs is a two-column, tab-separated table. The first column lists the identifiers of all mOTUs and the second column shows the relative abundance of each mOTU in the profiled sample. For example, meta_mOTU_v3_12429 has a relative abundance of 16%:\n         \ngrep \"meta_mOTU_v3_12429\" ERR479298s-default.motus\nPrevotella species incertae sedis [meta_mOTU_v3_12429]  0.1597971398\n8. The routines finished successfully if and when the output file (e.g., ERR479298s-default.motus) is created and the tool reports that no error has occurred. A guideline on how to interpret the profiling results can be found in Guidelines for Understanding Results.",
    "Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0001] and Support Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0004] illustrate the core functionality of the profiling routine using default settings for the most common metagenomic short read sequencing approaches. These settings were chosen to provide a balanced tradeoff between sensitivity and specificity. However, mOTUs offers flexibility in changing these settings according to user preference. This section describes all available options and their effects on the resulting profiles. It also introduces how profiles can be exported in BIOM format, and how results can be aggregated at different taxonomic ranks. The last section of this protocol shows how user-generated profiles can be merged with over 11,000 precomputed profiles from publicly available metagenomes and metatranscriptomes.\nNecessary Resources\nHardware/Software\nThe mOTU profiler is a command-line tool that requires a 64-bit Linux or MacOS system with at least 16 GB of RAM and its runtime scales almost linearly with the number of input sequences (see Strategic Planning). Installation instructions are provided in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\nInput Files\nPaired-end or single-end short-read sequencing data (see “Strategic Planning” for more details) in FASTQ format. For demonstration purposes we have deposited sequencing files on Zenodo (https://zenodo.org/record/5012695[href=https://zenodo.org/record/5012695]).\nOutput Files\nThe output of mOTUs is a two-column, tab-separated table. The first column contains taxonomic identifiers, by default at the rank of mOTUs (i.e., species level), and the values in the second column correspond to their relative abundances in the profiled sample. The profile can also be generated at other taxonomic ranks (see Support Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0005]). Profiles from multiple samples can be merged into a single file with taxonomic identifiers in the first column and abundances of the profiled samples in the following columns.\nAlternative output formats supported by mOTUs are Bioboxes (http://bioboxes.org/[href=http://bioboxes.org/]) and BIOM (https://biom-format.org/[href=https://biom-format.org/]).\nThe intermediate output files produced by mOTUs contain:",
    "alignments of reads against the mOTUs database in BAM format\nmarker gene abundances in a two-column, tab-separated table\nThe optional arguments of the motus profile command modify its runtime, the way sequencing reads are filtered and counted, and the format of the reported output.\nNOTE: This protocol describes how to set optional arguments to change the default behavior of mOTUs. Each analysis step in this protocol is therefore self-contained and does not rely on output data of any other analysis step.\n1. Install mOTUs as described in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\n2. Create a work folder and download the sequencing reads from Zenodo:\n         \nmkdir support_protocol_3\ncd support_protocol_3\nwget https://zenodo.org/record/5012695/files/protocol_profile.zip\nunzip protocol_profile.zip\ncd protocol_profile\nPrecomputed results of all steps shown in this protocol can be found in the protocol_profile/sp3_precomputed folder.\n3. Runtime: Most of the runtime of the motus profile command is spent computing alignments of input sequences against the marker gene database using the BWA aligner. Using multiple cores for the alignment step will lead to a near-linear decrease in runtime if the number of cores is lower than 16. Further increasing the number of cores will still improve runtime but at a lower rate. The number of cores used by mOTUs for the alignment step can be adjusted with the -t option. Here we run mOTUs with 1, 8, or 16 cores, which leads to a decrease in runtime (1600 s, 300 s, 191 s):\n         \ntime motus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-t_1.motus -t 1\ntime motus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-t_8.motus -t 8\ntime motus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-t_16.motus -t 16",
    "4. Length filtering: The length and similarity of a sequencing read aligned to a marker gene reference sequence determine whether the read is considered for the subsequent counting step. The default minimum length cutoff is set to 75 bases. If a substantial fraction of the sequencing reads is shorter than 75 bases, the -l option can be used to reduce the minimum alignment length to increase the fraction of mapped reads. Here we set the -l argument to a minimum alignment length of 50:\n         \nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-l_50.motus -l 50\nUsing a significantly lower cutoff than the average read length (e.g., 50 for reads with an average length of 100) will increase the mapping rate and also the probability of retaining misalignments for the downstream steps. The combined use of other settings, such as using a higher value for the option -g (see next section), can compensate for potential misalignments.\n5. Presence/absence: The mOTU profiler provides an option (-g) to adjust the precision and recall of species identification. Each mOTU consists of a minimum of 6 and up to 10 marker gene clusters (MGCs, see Fig. 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-fig-0001]). To avoid the spurious detection of taxa, the number of detected MGCs can be used to adjust the confidence level. The -g option in motus profile (and in motus calc_motu) controls the minimum number of detected MGCs (to which reads are mapping) required to call a mOTU as being present in a sample. The default value is set to 3, representing half the minimum number of MGCs per mOTU. Execute the following commands to profile with different values for the -g option:\n         \nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-g_3.motus -g 3\nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-g_1.motus -g 1",
    "motus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-g_6.motus -g 6\nHigher values will increase precision at the cost of recall. Lowering this value will identify more species (-g 1 = 723, -g 3 = 335, -g 6 = 193), albeit at lower precision. Values above 6 should be used with caution, as some mOTUs may become undetectable if they contain fewer MGCs than the set value (see Fig. 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-fig-0002]).\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/6962c162-b97f-48e2-ae6a-7dbf5b811734/cpz1218-fig-0002-m.jpg</p>\nFigure 2\nAbundance estimation by the mOTUs profiler. Metagenomic or metatranscriptomic reads mapped against the mOTUs database containing marker gene sequences from 10 gene families (COG0012, COG0016, etc.) are retained for the quantification of mOTUs. Each mOTU consists of a minimum of 6 marker genes. Marker genes not associated with any mOTU (unlinked) are grouped into a single cluster (Unassigned). The minimum number of detected MGCs define the detection threshold for a mOTUs. This value (default = 3) can be adjusted to avoid the spurious detection of taxa using the -g option. For each mOTUs passing the cutoff, MGC abundances are quantified (see Fig. 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-fig-0003]) and the median of MGC with non-zero counts abundances used as a basis for generating the output profile.\n6. Quantification: There are three modes to quantify the abundance of mOTUs, namely base.coverage, insert.raw_counts, and insert.scaled_counts (Fig. 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-fig-0003]). These alternatives can be selected using the -y option in the motus profile (and motus calc_mgc) command. The abundance of each mOTU is calculated as the median across all its MGCs with non-zero values. Execute the following commands to profile with different values for the -y option.\n         \nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-y_insert.raw_counts.motus -y insert.raw_counts",
    "This simplest counting algorithm quantifies MGCs by the number of inserts mapping to their associated marker gene members. The resulting counts are affected by gene-length differences, as longer genes recruit more reads. This option should therefore be used with caution.\nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-y_base.coverage.motus -y base.coverage\nTo account for gene length differences and for varying read lengths, this counting algorithm quantifies marker gene clusters using the mean coverage. The total alignment length of all reads mapping against the marker genes of a MGC cluster are divided by the length of the associated marker genes.\nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-y_insert.scaled_counts.motus -y insert.scaled_counts\nThe default counting algorithm normalizes the number of mapped inserts by marker gene length and additionally rescales them to the same range as the initial counts. This is done by multiplying by a scaling factor calculated as formula:\n$\\Sigma \\ ( {inserts} )/\\Sigma \\ ( {inserts/lengt{h_{gene}}} )$\n, i.e., the sum of all mapped inserts divided by the sum of all gene length−normalized insert counts. The read counts are processed in this way to remove the effects of gene length differences, while ranging on a scale comparable to read counts.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/8a1c6eac-9fa0-44ec-a0c6-578ed9492859/cpz1218-fig-0003-m.jpg</p>\nFigure 3",
    "Illustration of mOTU quantification methods. The different quantification methods of mOTUs are illustrated with two genes (Gene1 and Gene2). Gene2 is three times longer than Gene1. Both genes recruit the same number of inserts (6), which are depicted by horizontal blue lines with diamond-shaped arrowheads. If insert.raw_counts is selected, the number of inserts is summed up for each gene. If base.coverage is selected, the total number of bases that were mapped is divided by the length of the respective gene. For the default setting, insert.scaled_counts, insert.raw_counts are first normalized by length and then scaled by total abundance. For example, assuming length(Gene1) = 1000, length(Gene2) = 3000, and total_inserts = 12, then insert.scaled_counts(Gene1) = 12 * (6/1000)/(6/1000 + 6/3000) = 12 * ¾ = 9.\n7. Output formats: The command motus profile creates by default a tab-separated file in which the columns correspond to the taxonomic annotation of each mOTU and its abundance. The mOTU profiler also supports the BIOM (https://biom-format.org/[href=https://biom-format.org/]) output format, which can be invoked using the flag -B. The option -C can be used to generate an output file compliant with the CAMI/Bioboxes (http://bioboxes.org/[href=http://bioboxes.org/]) format. Execute the following commands to generate profiles with either BIOM or Bioboxes format:\n         \nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-B.biom -B\nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-C_precision.cami -C precision\nThe -C option should be used for reproducing the challenge results (Meyer et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-bib-0002]). Further details can be found at: https://github.com/motu-tool/mOTUs[href=https://github.com/motu-tool/mOTUs].",
    "8. Taxonomy: The mOTU profiler uses the standard taxonomic hierarchy with seven ranks (kingdom, phylum, class, order, family, genus, and mOTU), where the typical species level is substituted by the equivalent mOTU level, which is reported by default. The flags -p and -q will add the NCBI taxonomy ID to the profile or report the full taxonomy, respectively. The profiles can be further aggregated at a different taxonomic level using the -k option. Execute the following command to add the associated NCBI taxonomy ID (here: 1262806) as a new column to the profile:\n         \nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-p.motus -p\ngrep \"meta_mOTU_v3_12886\" ERR479298s-p.motus\nClostridium sp. CAG:433 [meta_mOTU_v3_12886]  1262806  0.0184576392\nExecute the following command to report the full taxonomy path:\n         \nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-q.motus -q\ngrep \"meta_mOTU_v3_12886\" ERR479298s-q.motus\nmeta_mOTU_v3_12886 k__Bacteria|p__Firmicutes|c__Clostridia|o__Clostridiales|f__Clostridiaceae|g__Clostridium|s__Clostridium sp. CAG:433 0.0184576392\nExecute the following command to aggregate the taxonomic path at a different taxonomic level (here: phylum):\n         \nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-k_phylum.motus -k phylum\ngrep \"Actinobacteria\" ERR479298s-k_phylum.motus\nActinobacteria  0.0079714597\n...\n9. Counts/relative abundance: \nmotus profile reports, by default, relative abundances of each mOTU. The relative abundances are directly calculated from the counts (bases or inserts; see Quantification). The output format can be modified using the -c flag. Execute the following commands to either report relative abundances (default) or to report counts (-c) instead:\n         \nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-default.motus\ngrep \"meta_mOTU_v3_12886\" ERR479298s-default.motus\nClostridium sp. CAG:433 [meta_mOTU_v3_12886]  0.0184576392\nmotus profile -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-c.motus -c\ngrep \"meta_mOTU_v3_12886\" ERR479298s-c.motus\nClostridium sp. CAG:433 [meta_mOTU_v3_12886]  40",
    "10. Merge profiles: Users who generated profiles in the default mOTUs output format and using the -c flag (reporting counts instead of relative abundances, see above) can add their profiles to precomputed profiles to contextualize and compare the taxonomic profiles of their samples with previously published ones. For the release of version 3.0.0 of mOTUs, we provided precomputed profiles from more than 11,000 public metagenomes and metatranscriptomes that are directly accessible via the motus merge command. Execute the following commands to merge the precomputed profile with either all mouse gut profiles, all mouse and dog gut profiles, or all public profiles, respectively.\n         \nmotus merge -i sp3_precomputed/ERR479298s-c.motus -a mouse -o merged.mouse.motus\nmotus merge -i sp3_precomputed/ERR479298s-c.motus -a mouse,dog -o merged.mouse.dog.motus\nmotus merge -i sp3_precomputed/ERR479298s-c.motus -a all -o merged.all.motus",
    "Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0002] explains the core functionality of the metagenomic SNV profiling mode using default settings. The preconfigured settings filter both metagenomic samples and genomic positions to offer a good tradeoff between sensitivity and specificity. However, some use cases may require custom settings instead. This section provides an in-depth explanation of all options and describes their effects to the resulting profiles.\nNecessary Resources\nHardware/Software\nThe mOTU profiler is a command-line tool that requires a 64-bit Linux or MacOS system with at least 16 GB of RAM and its runtime scales almost linearly with the number of input sequences (see Strategic Planning). Installation instructions are provided in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\nInput Files\nMetagenomic SNV profiling is a pipeline split into two parts:\n               \nmotus map_snv requires paired-end or single-end short read sequencing data (see Strategic Planning for more details) in FASTQ format\nThe BAM alignment files produced by motus map_snv serve as input for the motus snv_call routine\nFor demonstration purposes we have deposited sequencing and alignment files on Zenodo (https://zenodo.org/record/5012568[href=https://zenodo.org/record/5012568])\nOutput Files\nThe motus map_snv command will create one BAM file per execution\nThe motus snv_call command will create an output folder with four files/directories:\n               \nTwo files containing the read coverage information for each mOTU, both horizontal, i.e., the percentage of bases covered by at least one read (*.perc.tab file), and vertical, i.e., the average number of reads covering each base (*.cov.tab file)\nPer mOTU filtered allele frequencies of identified SNVs across samples (filtered-* directory)\nPer mOTU genetic distances between samples (distances-* directory).\nFor the files containing distance information, both regular Manhattan (*mann.dist files) and dominant allele (*allele.dist files) distances are provided. The dominant allele distance is a Manhattan distance that only takes positions with a frequency change above 50% (i.e., change of the dominant allele) into account.",
    "The SNV profiling routine is composed of two steps: motus map_snv first aligns sequencing reads of a single sample against the reduced mOTUs centroid database, and motus snv_call subsequently processes alignments from multiple samples to calculate metagenomic SNV profiles and genetic distances. Details are described in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0002].\nNOTE: This protocol describes how to set optional arguments to change the default behavior of mOTUs. Each analysis step in this protocol is therefore self-contained and does not rely on output data of any other analysis step.\n1. Install mOTUs as described in Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.218#cpz1218-prot-0003].\n2. Create a work folder and download the sequencing reads from Zenodo:\n         \nmkdir support_protocol_4\ncd support_protocol_4\nwget https://zenodo.org/record/5012568/files/protocol_snv.zip\nunzip protocol_snv.zip\ncd protocol_snv\nPrecomputed results of all steps shown in this protocol can be found in the protocol_snv/sp4_precomputed folder.\n3. Runtime: Most of the runtime of the SNV profiling routine is spent computing alignments of input sequences against the marker gene database using the BWA aligner. Using multiple cores for the alignment step will lead to a near-linear decrease in runtime (up to 16 cores, further increases will still improve runtime, but at a lower rate). Execute the following command to use 16 cores (-t 16) for alignment:\n         \nmotus map_snv -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-default.bam -t 16\n4. Length filtering: The length and similarity of a sequencing read aligned to a marker gene reference sequence determine whether the read is considered for the subsequent counting step. The default minimum length cutoff is set to 75 bases. If a substantial fraction of the sequencing reads is shorter than 75 bases, the -l option can be used to reduce the minimum alignment length to increase the fraction of mapped reads. Execute the following command to set the -l option to a minimum alignment length of 50:",
    "motus map_snv -f input/ERR479298s.1.fq.gz -r input/ERR479298s.2.fq.gz -o ERR479298s-l_50.bam -l 50\nUsing a significantly lower cutoff than the average read length (e.g., 50 for reads with an average length of 100) will increase the mapping rate and also the probability of retaining misalignments for the downstream steps. The combined use of other settings, such as using a higher value for the option -g (see next section), can compensate for potential misalignments.\n5. Sample support: The first step of the motus snv_call routine will calculate the vertical (average number of reads covering each base) and horizontal (percentage of bases covered by at least one read) coverage of each mOTU for each sample and then select only those mOTUs that fulfil the coverage-filtering criteria. By default these thresholds are 5× vertical coverage and 80% horizontal coverage, and can be controlled by the -fd and -fb options, respectively. In addition, a mOTU will be selected only if at least a given number of samples meet the coverage criteria (2 samples by default). This number can be controlled with the -fm option. Execute the following commands to alter filtering criteria:\n         \nmotus snv_call -d bp2_precomputed/bams/ -o motus-snvcall-fd_10 -fd 10\nOnly mOTUs with a vertical coverage of 10 will pass the filter. Using this value will remove more mOTUs, as it is more conservative compared to the default (≥5).\nmotus snv_call -d bp2_precomputed/bams/ -o motus-snvcall-fb_90 -fb 90\nOnly mOTUs with a horizontal coverage of ≥90% will pass the filter. Using this value will remove more mOTUs, as it is more conservative compared to the default (≥80%).\nmotus snv_call -d bp2_precomputed/bams/ -o motus-snvcall-fm_3 -fm 3\nOnly mOTUs where at least 3 samples fulfill coverage conditions will be reported. Using this value will remove more mOTUs, as it is more conservative compared to the default (at least 2 samples).",
    "6. Base coverage: The previous filtering step selected mOTUs and filtered samples based on coverage values across whole mOTUs. This second filtering step will retain genomic positions for SNV calling within an individual mOTU. To that end, only positions in a mOTU that have enough coverage in at least a given proportion of filtered samples are retained. The base coverage threshold is controlled with the -fc option, and is set to a minimum of 5× coverage. The proportion of samples is controlled with the -fp option and is set to a minimum of 90% of the samples by default. Execute the following commands to alter filtering criteria:\n         \nmotus snv_call -d bp2_precomputed/bams/ -o motus-snvcall-fc_10 -fc 10\nOnly positions with a vertical coverage of 10 will pass the filter. Using this value will remove more positions as it is more conservative compared to the default (5).\nmotus snv_call -d bp2_precomputed/bams/ -o motus-snvcall-fp_1.0 -fp 1.0\nOnly positions where all samples fulfill coverage criteria will be reported. Using this value will remove more positions, as it is more conservative compared to the default (at least 90% of the samples).\n7. Keep intermediate files: The arguments -K and -v allow users to control the reporting of the SNV profiling routine. First, -K will provide the user with all the intermediary files created by metaSNV. Second, -v controls the verbosity of the motus snv_call command according to four standardized levels of specificity. Execute the following command to keep intermediate files and enable verbose logging:\nmotus snv_call -d bp2_precomputed/bams/ -o motus-snvcall-k-v_4 -K -v 4"
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}