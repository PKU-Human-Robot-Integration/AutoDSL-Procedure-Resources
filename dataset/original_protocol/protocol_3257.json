{
  "id": 3450,
  "origin_website": "Cell",
  "title": "Protocol for PPP1R15A-inhibited mouse model establishment with subcutaneous B16F1 tumor and single-cell analysis",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nMouse model establishment\nTiming: 4 weeks\nThis procedure describes the construction of mouse model, including the chemical injection and tumor cell implantation. Mice used are six- to eight-week-old male C57BL/6 mice.\nSeparate the C57BL/6 mice into two groups randomly: the control group and the Sephin1 group. Each group should contain about 8–12 mice.\nChemical injection.\nInject the Sephin1 group mice with 100 μL Sephin1 solution intraperitoneally, while the control group with equal volume of control solution.\nInject both groups three times per week for two weeks (Day 1, 3, 5 in each week).\nTumor implantation. Proceed with tumor implantation two days after the last Sephin 1 pre-treatment.\nCollect cultured B16F1 cells with trypsinization as described above.\nResuspend the cells with PBS at a concentration of   2.4 ×  10 6   /mL. Then measure cell concentration and viability with AO/PI using the equipment Cellometer K2.\nInject each mouse with 125 μL of cell suspension subcutaneously at the left side of mouse abdomen for a total of   3 ×  10 5    living cells per mouse.\nMeasure the tumors are measured every 2–3 days for a total of 15 days post-injection.\nMeasure the shortest and longest tumor diameters (d and D) with a Vernier caliper every one or two days.\nCalculate the tumor volume (V) as:   V =  d 2  × D / 2  .\nCritical: Keep the prepared B16F1 cells at 4°C before implantation implant the cells within 30 min after preparation.\nSingle-cell sample preparation & library construction\nTiming: 4 h\nThis procedure describes the single-cell sample preparation process, including the separation of mouse peripheral blood mononuclear cells (PBMCs) and tumor immune cells.",
    "Mouse PBMCs separation. Collect the blood samples from two time points, the day of tumor cell implantation (Day 0) and 15 days after implantation (Day 15). Then isolate PBMCs from two mice in each group at each time point. Collect PBMCs with density gradient separation method.\nCollect the peripheral blood samples from the mouse eyes. About 100–200 μL of samples can be collected from each mouse.\nMix each sample with 200 μL EDTA,. Then add an equal volume of PBS of the blood-EDTA mixture.\nMeasure the total volume of blood sample, EDTA and PBS. Then add the mixture onto the surface of an equal volume of Ficoll-Paque PREMIUM in 15 mL centrifuge tube.\nCentrifuge at 18°C–20°C with 400 × g for 20 min with an acceleration of 5 and a deceleration of 3.\nCarefully remove the tubes from the centrifuge to avoid disturbing the layers. PBMCs are enriched at the interphase fluffy white layer (Figure 5[href=https://www.wicell.org#fig5]). Then collect the mononuclear cells carefully without pipetting the adjacent plasma and Ficoll-Paque PREMIUM fluids.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3026-Fig5.jpg\nFigure 5. Layer distribution of Ficoll-separated peripheral blood sample\nNote: If needed, remove the red blood cells by resuspending the cells in ACK lysing buffer and incubating for 3 min at room temperature. Add 1–2 mL of ACK lysing buffer into each sample. After three minutes, add 10 mL PBS into each tube. Then centrifuge the cells with 400 × g, 4°C for 5–10 min and wash cells once with PBS.\nStain the cells with AO/PI and quantify the cells using the machine Cellometer K2 (Nexcelom Bioscience).",
    "Note: The hemocytometer and trypan blue can also be used for cell calculation as an alternative. The percentage of living cells should be more than 70% and the number of living cells should be larger than   2 ×  10 5    to ensure experimental success.\nMouse tumor immune cell separation. Collect the tumors from mice 15 days post-injection. Choose two mice for tumor immune cells separation in each group. Measure the tumor weight before the immune cell separation procedure.\nCollect the tumor tissues and cut them into small pieces (approximately 1–2 mm3).\nDigest the tumor tissues with the mouse tumor dissociation kit (Miltenyi/MACS, 130-096-730), and then filter the prepared cells with the 30 μm MACS SmarterStrainer.\nIncubate the cells with mouse CD45-specific antibody (BioLegend, 157607) for 30 min and then incubate with propidium iodide solution with the volume ratio of 1:100 immediately before FACS cell sorting (Nexcelom Bioscience, CS1-0109-5mL).\nSort the cells on a BD SORP FACSAria with standard procedure to capture CD45-positive and living cells.\nUse the isolated single-cell suspensions for 10× library construction following standard procedures. The library construction kits include the Chromium Next GEM Single Cell 5′ Library & Gel Bead Kit v1.1 (16 rxns, PN-1000165), Chromium Single Cell 5′ Library Construction Kit (16 rxns, PN-1000020), Chromium Single Cell V(D)J Enrichment Kit (Mouse T cell, 96 rxns, PN-1000071), Chromium Next GEM Chip G Single Cell Kit (48 rxns, PN-1000120) and Single Index Kit T Set A (96 rxns, PN-1000213).\nSequence all samples on an Illumina NovaSeq PE150 platform.",
    "Note: All the gene expression libraries are sequenced with a data size of 270 millions of clusters. The data size of each TCR-enriched library is 34 millions of clusters. In addition, the average number of reads per cell is not less than 30 M in the expression data and not less than 15 M in the TCR-enriched data.\nSingle-cell data analysis\nTiming: 4 weeks\nThis procedure describes the bioinformatics analysis of the single-cell data obtained from the last procedure, including raw data processing, data integration, regulon analysis, differentially expressed genes analysis and cell-cell communication analysis. All the steps are completed in Linux, R and Python platforms. Detailed code used in this protocol can be found at this link: https://github.com/LisaWang2022/B16F1-mouse-single-cell-analysis[href=https://github.com/LisaWang2022/B16F1-mouse-single-cell-analysis].\nCellRanger analysis of the single-cell expression data and TCR enrichment data. This procedure is completed with CellRanger version 6.0.0.\nCellRanger process of single-cell expression data. Complete this step with the CellRanger function “cellranger count”. Set the local cores as 12 and the expect cells to 8000. Download the reference dataset from the 10× Genomics website: https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-mm10-2020-A.tar.gz[href=https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-mm10-2020-A.tar.gz].\nNote: This step is performed on Python.\n#!/usr/bin/python\n#-∗-coding:UTF-8-∗-\nimport os,re\nfilelist=os.listdir(\"/data2/project/sephin_mouse_data/\")\ndef dataprocess(sample,data):\n  datadir=\"/data2/project/sephin_mouse_data/\"\n  os.chdir(datadir)\n  samlist1=[]\n  samlist2=[]\n  for da in data:\n    if re.match(sample,da) and re.search('.fq.gz',da):\n      if re.search('_1',da):\n        samlist1.append(da)\n      elif re.search('_2',da):\n        samlist2.append(da)\n  samline1=' '.join(samlist1)\n  samline2=' '.join(samlist2)\n  os.system('cat '+samline1+' > processed_fastqs/'+sample+'_S1_L001_R1_001.fastq.gz')\n  os.system('cat '+samline2+' > processed_fastqs/'+sample+'_S1_L001_R2_001.fastq.gz')\n  os.chdir('/home/wangrj/wangrj/wangrj/MOUSE_SEPHIN1_RESULTS')\n  os.system('/home/wangrj/wangrj/wangrj/softwares/cellranger-6.0.0/cellranger count --localcores=12 --id='+sample+'_output --transcriptome=/data1/database/refdata-cellranger-mm10-1.2.0 --fastqs=/data2/project/sephin_mouse_data/processed_fastqs/ --sample='+sample+' --expect-cells=8000')\n#main\nsamplelist=['BN1d0V5','BN2d0V5','BS1d0V5','BS2d0V5','TN1d15V5','TN2d15V5','TS1d15V5','TS2d15V5','BN1d15V5','BN2d15V5','BS1d15V5','BS2d15V5']\nfor sa in samplelist:\n  dataprocess(sa,filelist)\nCellRanger process of TCR enrichment data. Complete this step with the CellRanger function “cellranger vdj”. Set the localcores to 12. Download the reference data from this website: https://cf.10xgenomics.com/supp/cell-vdj/refdata-cellranger-vdj-GRCm38-alts-ensembl-7.0.0.tar.gz[href=https://cf.10xgenomics.com/supp/cell-vdj/refdata-cellranger-vdj-GRCm38-alts-ensembl-7.0.0.tar.gz].\nNote: This step is performed on Python.\n#!/usr/bin/python\n#-∗-coding:UTF-8-∗-\nimport os,re\nfilelist=os.listdir(\"/data2/project/sephin_mouse_data/\")\ndef dataprocess(sample,data):\n  datadir=\"/data2/project/sephin_mouse_data/\"\n  os.chdir(datadir)\n  samlist1=[]\n  samlist2=[]\n  for da in data:\n    if re.match(sample,da) and re.search('.fq.gz',da):\n      if re.search('_1',da):\n        samlist1.append(da)\n      elif re.search('_2',da):\n        samlist2.append(da)\n  samline1=' '.join(samlist1)\n  samline2=' '.join(samlist2)",
    "os.system('cat '+samline1+' > processed_fastqs/'+sample+'_S1_L001_R1_001.fastq.gz')\n  os.system('cat '+samline2+' > processed_fastqs/'+sample+'_S1_L001_R2_001.fastq.gz')\n  os.chdir('/home/wangrj/wangrj/wangrj/MOUSE_SEPHIN1_RESULTS')\n  os.system('/home/wangrj/wangrj/wangrj/softwares/cellranger-6.0.0/cellranger count --localcores=12 --id='+sample+'_output --transcriptome=/data1/database/refdata-cellranger-mm10-1.2.0 --fastqs=/data2/project/sephin_mouse_data/processed_fastqs/ --sample='+sample+' --expect-cells=8000')\n#main\nsamplelist=['BN1d0V5','BN2d0V5','BS1d0V5','BS2d0V5','TN1d15V5','TN2d15V5','TS1d15V5','TS2d15V5','BN1d15V5','BN2d15V5','BS1d15V5','BS2d15V5']\nfor sa in samplelist:\n  dataprocess(sa,filelist)\nIntegration of different data. Include the integration of different samples in expression data and TCR data and the integration of expression data and TCR enrichment data.\nIntegration of all single-cell expression data.\nNote: This step is performed on R.\nFirst, load the packages used for analysis afterwords. The single-cell expression data are imported into R and integrated with Seurat (version 3.2.3).\nlibrary(Seurat)\nlibrary(cowplot)\nlibrary(future)\nlibrary(Matrix)\noptions(future.globals.maxSize = 1000000 ∗ 1024ˆ2)\nSecond, load each data and pre-process each sample. To minimize information loss and filter out low-quality and duplicated cells at the same time, genes expressed in at least 2 cells are kept, and cells with more than 100 but less than 4000 genes are kept.\nfilelist<-c(\"BN1d0V5\",\"BN2d0V5\",\"BS1d0V5\",\"BS2d0V5\",\"BN1d15V5\",\"BN2d15V5\",\"BS1d15V5\",\"BS2d15V5\",\"TN1d15V5\",\"TN2d15V5\",\"TS1d15V5\",\"TS2d15V5\")\nnamelist<-c(\"Day0_Blood_Normal_1\",\"Day0_Blood_Normal_2\",\"Day0_Blood_Sehpin1_1\",\"Day0_Blood_Sephin1_2\",\"Day15_Blood_Normal_1\",\"Day15_Blood_Normal_2\",\"Day15_Blood_Sephin1_1\",\"Day15_Blood_Sephin1_2\",\"Day15_Tumor_Normal_1\",\"Day15_Tumor_Normal_2\",\"Day15_Tumor_Sehpin1_1\",\"Day15_Tumor_Sephin1_2\")\nmouse.data<-list()\nfor(i in 1:length(filelist)){\nfl=filelist[i]\nsname=paste0(\"/storage/work/wangrj/MOUSE_SEPHIN1_RESULTS/Exp/\",fl,\"_output/outs/filtered_feature_bc_matrix/\")\n  sample.raw<-Read10X(sname)\n  sample<-CreateSeuratObject(counts=sample.raw,project=\"MOUSE_SEPHIN1\",min.cells=2)\n  sample$COMPARE<-namelist[i]\ngname<-gsub(\"_1\",\"\",namelist[i])\ngname<-gsub(\"_2\",\"\",gname)\nsample$SAMPLE<-gname\n  sample<-subset(sample,subset=nFeature_RNA>100)\n  sample<-NormalizeData(sample,verbose=FALSE)\n  sample<-FindVariableFeatures(sample,selection.method=\"vst\",nfeatures=4000)\n  mouse.data<-c(mouse.data,list(sample))\n}\nnames(mouse.data)<-namelist\nThird, integration the expression data and perform dimensionality reduction and cluster finding analysis.\nplan(\"multiprocess\", workers = 8)\nmouse.anchors<-FindIntegrationAnchors(object.list=mouse.data,dims=1:40)\nmouse.data<-IntegrateData(anchorset=mouse.anchors,dims=1:40)\nDefaultAssay(mouse.data)<-\"RNA\"\nmouse.data<-FindVariableFeatures(mouse.data)\nmouse.data$percent.mt<-PercentageFeatureSet(mouse.data,pattern=\"ˆmt-\")\nmouse.data<-ScaleData(mouse.data,vars.to.regress = \"percent.mt\")\nmouse.data<-RunPCA(mouse.data,npcs=100)\nmouse.data <- FindNeighbors(mouse.data, reduction = \"pca\", dims = 1:50, nn.eps = 0.5)\nmouse.data <- FindClusters(mouse.data, resolution = 3, n.start = 10)\nmouse.data<-RunUMAP(mouse.data,reduction=\"pca\",dims=1:50)\nmouse.data<-RunTSNE(mouse.data,reduction=\"pca\",dims=1:50)\nsaveRDS(mouse.data,\"mouse_sephin1_all_combined_norm_by_mt.rds\")\nIntegration of all TCR enrichment data.\nNote: This step is performed on R.\nAnalyze and integrate the TCR contig matrix using scRepertoire (version 1.2.1).2[href=https://www.wicell.org#bib2]\nIntegrate with the gene expression data.\nSeparate and annotate TCRs by their distribution in one sample.",
    "Note: If the percentage of the clone number of one clonotype in all clones of the sample was between 0.1 and 1, the clonotype was classified as “hyperexpanded”; if the percentage was between 0.01 and 0.1, the classification was “large”. “Medium” was used to denote a percentage between 0.001 and 0.01, and “small” indicated a percentage between    10  − 4     and 0.001.\nlibrary(scRepertoire)\nlibrary(stringr)\nlibrary(ggsci)\ncsvlist<-c(\"BN1d0.csv\",\"BN2d0.csv\",\"BS1d0.csv\",\"BS2d0.csv\",\"BN1d15.csv\",\"BN2d15.csv\",\"BS1d15.csv\",\"BS2d15.csv\",\"TN1d15.csv\",\"TN2d15.csv\",\"TS1d15.csv\",\"TS2d15.csv\")\ncontig_list<-list()\nfor(cl in csvlist){\n  filename<-paste0(\"/storage/work/wangrj/MOUSE_SEPHIN1_RESULTS/VDJ_analysis/immunarch_files/TCR/\",cl)\n  csvfile<-read.csv(filename,stringsAsFactors=F)\n  csvfilter<-csvfile[,c('barcode','is_cell','contig_id','high_confidence','length','chain',\n        'v_gene','d_gene','j_gene','c_gene','full_length','productive','cdr3',\n        'cdr3_nt','reads','umis','raw_clonotype_id','raw_consensus_id')]\n  contig_list<-c(contig_list,list(csvfilter))\n}\ncombined <- combineTCR(contig_list,samples=c(\"Day0_Blood\",\"Day0_Blood\",\"Day0_Blood\",\"Day0_Blood\",\"Day15_Blood\",\"Day15_Blood\",\"Day15_Blood\",\"Day15_Blood\",\"Day15_Tumor\",\"Day15_Tumor\",\"Day15_Tumor\",\"Day15_Tumor\"),ID=c(\"Normal\",\"Normal\",\"Sephin1\",\"Sephin1\",\"Normal\",\"Normal\",\"Sephin1\",\"Sephin1\",\"Normal\",\"Normal\",\"Sephin1\",\"Sephin1\"),cells=\"T-AB\")\nIntegration of expression data and TCR enrichment data.\nNote: This step is performed on Python and R. Plots of different TCR types are made with ggplot2 (version 3.3.5).\nFirst, calculate the TCR clonotype frequency by scRepertoire and save the results to csv file. This step is completed by R.\nlibrary(scRepertoire)\nlibrary(stringr)\nlibrary(ggsci)\ntheCall <- function(x) {\n  if (x == \"gene\") {\n    x <- \"CTgene\"\n  } else if(x == \"nt\") {\n    x <- \"CTnt\"\n  } else if (x == \"aa\") {\n    x <- \"CTaa\"\n  } else if (x == \"gene+nt\") {\n    x <- \"CTstrict\"\n  }\n  return(x)\n}\nclonoTypes<-c(None = 0, Rare = 1e-04, Small = 0.001, Medium = 0.01,\n      Large = 0.1, Hyperexpanded = 1)\ncloneCall<-theCall(\"gene\")\ndf1<-lapply(combined,\"[[\",cloneCall)\ndf2<-lapply(combined,\"[[\",\"barcode\")\ndata_out<-c()\nfor(i in 1:length(df1)){\n  Barcode<-df2[[i]]\n  CTgene<-df1[[i]]\n  datasub<-data.frame(Barcode,CTgene)\n  datasub$Num<-i\n  data_out<-rbind(data_out,datasub)\n}\nwrite.csv(data_out,\"VDJ_analysis/data_to_match.csv\",quote=F,row.names=F)\nSecond, make the csv file containing the TCR type result that can be mapped on the expression data. This step is completed on Python.\n#!/usr/bin/python\n#-∗-coding:UTF-8-∗-\ndef cal_var_type(number):\n  TYPE='None'\n  if number==0:\n    TYPE='None'\n  elif number<=0.0001:\n    TYPE='Rare'\n  elif number>0.0001 and number<=0.001:\n    TYPE='Small'\n  elif number>0.001 and number<=0.01:\n    TYPE='Medium'\n  elif number>0.01 and number<=0.1:\n    TYPE='Large'\n  else:\n    TYPE='Hyperexpanded'\n  return TYPE\nfilename=open('data_to_match.csv').readlines()\nfilename.pop(0)\n#barfile=open('../mouse_cluster_by_lym_detailed.csv').readlines()\nbarfile=open('../data_reanalysis/mouse_cluster.csv').readlines()\nbarfile.pop(0)\nbarcode=[]\nfor bf in barfile:\n  bfline=bf.strip().split(',')\n  barcode.append(bfline[0])\ntcr_result=[]\nfor i in range(12):\n  tsub=[]\n  for fn in filename:\n    fnline=fn.strip().split(',')\n    tcr_bar=fnline[0]\n    tcr_type=fnline[1]\n    num=int(fnline[2])-1\n    if num==i:\n      tsub.append([tcr_bar,tcr_type])\n    tcr_result.append(tsub)\ntcr_final={}\nfor i in range(12):\n  sub=tcr_result[i]\n  barsub=[]\n  typesub=[]",
    "for j in range(len(sub)):\n    barsub.append(sub[j][0])\n    typesub.append(sub[j][1])\n  typeeach=list(set(typesub))\n  type_per={}\n  for te in typeeach:\n    per=float(typesub.count(te))/len(typesub)\n    type_per[te]=per\n  for k in range(len(barsub)):\n    barline=barsub[k].split('_')\n    barfinal=barline[3]+'_'+barline[4]\n    perfinal=type_per[typesub[k]]\n    typefinal=cal_var_type(perfinal)\n    per_type=str(perfinal)+','+typefinal\n    tcr_final[barfinal]=per_type\noutfile=open('../data_reanalysis/matched_tcr_result.csv','w+')\noutfile.write('Barcode,Percentage,Var_type\\n')\nfor bc in barcode:\n  if bc in tcr_final:\n    outline=bc+','+tcr_final[bc]+'\\n'\n  else:\n    outline=bc+',0,None\\n'\n  outfile.write(outline)\noutfile.close()\ntcr_specific=open('tcr_specific_cells.csv','w+')\nfor tf in tcr_final:\n  if tf in barcode:\n    continue\n  else:\n    tcr_specific.write(tf+'\\n')\ntcr_specific.close()\nThird, mapping the TCR type results to the Seurat object containing the expression data, and make the DimPlot graphs and calculate the TCR type specific genes.\nlibrary(scRepertoire)\nlibrary(stringr)\nlibrary(ggsci)\nClonotype<-read.csv(\"matched_tcr_result.csv\",header=T)\nmouse.data$TCR_type<-Clonotype$Var_type\npdf(\"cluster_by_tcr_type_graph.pdf\",height=5,width=7)\nDimPlot(mouse.data,group.by=\"TCR_type\",cols=c(\"red\",\"orange\",\"blue\",\"grey\",\"green\"))\ndev.off()\npdf(\"cluster_by_tcr_type_graph_splitted.pdf\",height=10,width=9)\nDimPlot(mouse.data,split.by=\"SAMPLE\",group.by=\"TCR_type\",cols=c(\"red\",\"orange\",\"blue\",\"grey\",\"green\"),ncol=2)\ndev.off()\nIdents(mouse.data)<-mouse.data$TCR_type\ntcr_all_markers<-FindAllMarkers(mouse.data,min.pct=0.25)\nwrite.csv(tcr_all_markers,\"tcr_all_markers.csv\",quote=F)\nRegulon analysis with Single-Cell Regulatory Network Inference and Clustering (SCENIC).\nSCENIC (version 1.1.2-01)3[href=https://www.wicell.org#bib3] analysis is performed to analyze the activity of important transcription factors and their related genes.\nRandomly select 5000 cells from all 12 samples to identify the coexpression network with higher activities using GENIE3 (version 1.8.0).\nPerform SCENIC analysis on all cells, and filter specific regulons from the coexpression network.\nCalculate the activities of different regulons in different sample types and cell types.\nCalculate the regulon specificity score (RSS) of each sample 4 in order to identify the sample-specific regulons of each sample type.4[href=https://www.wicell.org#bib4]\nlibrary(SCENIC)\nlibrary(Seurat)\nlibrary(GENIE3)\nlibrary(AUCell)\nlibrary(foreach)\nlibrary(RcisTarget)\nlibrary(pheatmap)\nlibrary(ComplexHeatmap)\nlibrary(dplyr)\ncounts<-data@assays$RNA@counts\ncounts<-as.matrix(counts)\nGene<-rownames(counts)\ncountsnew<-cbind(Gene,counts)\ncell_type<-data$Cluster_name\nCell<-rownames(data@meta.data)\nmeta<-data.frame(Cell,cell_type)\n#SCENIC\nSample<-data$SAMPLE\nCluster<-data$seurat_clusters\nCelltype<-data$Cluster_name\nGroup<-data$GROUP\ncellinfo<-data.frame(Sample,Cluster,Celltype,Group)\nscenicOptions <- initializeScenic(org=\"mgi\", dbDir=\"./SCENIC_database\", nCores=10)\n#randomly select 5000 cells for GENIE3\nnames<-colnames(count)\nnumber<-length(names)\nsnumber<-sample(number,5000)\nexp_sub<-counts[,snumber]\ngenesKept <- geneFiltering(exp_sub, scenicOptions)\nexp_sub_filtered <- exp_sub[genesKept, ]\nrunCorrelation(exp_sub_filtered, scenicOptions)\nexp_sub_log <- log2(exp_sub_filtered+1)\nrunGenie3(exp_sub_log, scenicOptions)\n### Build and score the GRN\nexprMat_log <- log2(counts+1)\nscenicOptions@settings$dbs <- scenicOptions@settings$dbs[\"10kb\"] # Toy run settings\nrunSCENIC_1_coexNetwork2modules(scenicOptions)\nrunSCENIC_2_createRegulons(scenicOptions, coexMethod=c(\"top5perTarget\")) # Toy run settings\nrunSCENIC_3_scoreCells(scenicOptions, exprMat_log)\n#results\ncoexp<-readRDS(\"int/1.6_tfModules_asDF.Rds\")\nregulonAUC<-loadInt(scenicOptions,\"aucell_regulonAUC\")\nrss<-calcRSS(AUC=getAUC(regulonAUC),cellAnnotation=cellinfo[colnames(regulonAUC),\"Celltype\"])\nrssPlot<-plotRSS(rss)\nrssPlot$plot\npdf(\"rssPlot_by_sample.pdf\",height=5,width=8)\nrssPlot$plot\ndev.off()\n#heatmap\nregulonAUC <- loadInt(scenicOptions, \"aucell_regulonAUC\")\nregulonAUC <- regulonAUC[onlyNonDuplicatedExtended(rownames(regulonAUC)),]\nregulonActivity_byCellType <- sapply(split(rownames(cellinfo), cellinfo$Celltype),\n        function(cells) rowMeans(getAUC(regulonAUC)[,cells]))\nregulonActivity_byCellType_Scaled <- t(scale(t(regulonActivity_byCellType), center = T, scale=T))\npdf(\"heatmap_by_cluster.pdf\",height=7,width=9)\nComplexHeatmap::Heatmap(regulonActivity_byCellType_Scaled, name=\"Regulon activity\")\ndev.off()",
    "Analysis of differentially expressed gene patterns between clusters.\nDifferentially expressed genes in different clusters or samples are identified with the FindMarkers package of Seurat.\nThe differentially expressed genes are then used to perform enrichment analyses, including Gene Set Variation Analysis (GSVA) and Gene Set Enrichment Analysis (GSEA), which are completed with the R packages GSVA (version 1.30.0) and fgsea (version 1.8.0).\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(Seurat)\nlibrary(fgsea)\nlibrary(msigdbr)\nlibrary(ClusterProfiler)\n#differentiate genes were calculated by FindMarkers\nfilelist<-dir(\"diff_gene_by_group/tumor_diff/\")\n###################\n#use fgsea\n###################\n#get gmt file\n#the newest gmt files can be downloaded from msigDB.\ngobp_pathway<-gmtPathways(\"/home/wangrj/wangrj/wangrj/mouse_breasttumor/BD_second/gskb_gmt_files/unfiltered/MousePath_GO_BP_gmt.gmt\")\nkegg_pathway<-gmtPathways(\"/home/wangrj/wangrj/wangrj/mouse_breasttumor/BD_second/gskb_gmt_files/unfiltered/MousePath_Metabolic_KEGG_gmt.gmt\")\n#draw picture of each cell type in tumor sample\ndraw_gsea_barplot<-function(fl){\n  #get ranks from foldchange data\n  diffgene<-read.csv(paste0(\"diff_gene_by_group/tumor_diff/\",fl),row.name=1)\n  diffgene<-subset(diffgene,p_val_adj<0.05)\n  diffgene<-subset(diffgene,p_val<0.05)\n  diffgene$gene<-rownames(diffgene)\n  diffgene$gene<-toupper(diffgene$gene)\n  diffgene<-diffgene[!duplicated(diffgene$gene),]\n  rownames(diffgene)<-diffgene$gene\n  rownames(diffgene)<-toupper(rownames(diffgene))\n  diff_frame<-data.frame(rownames(diffgene),diffgene$avg_logFC)\n  ranks<-deframe(diff_frame)\n#gsea analysis\n  fgseaRes <- fgsea(pathways = gobp_pathway, stats = ranks,nperm=1000,minSize = 3,maxSize = 500)\n  fgdata<-fgseaRes[order(fgseaRes$NES),]\n  upgene<-fgdata[(length(rownames(fgdata))-20):length(rownames(fgdata)),]\n  downgene<-fgdata[1:20,]\n  geneall<-rbind(downgene,upgene)\n  #geneall<-subset(fgdata,pval<=0.05)\n  geneall$Group<-\"NA\"\n  for(i in 1:length(geneall$ES)){\n    if(geneall$NES[i]>0 & geneall$pval[i]<=0.05){\n      geneall$Group[i]=\"Up\"\n    }\n    else if(geneall$NES[i]<0 & geneall$pval[i]<=0.05){\n      geneall$Group[i]=\"Down\"\n    }\n    else if(geneall$pval[i]>0.05){\n      geneall$Group[i]=\"Unsig\"\n    }\n}\ncolnames(geneall)[1]<-\"Pathway\"\ngeneall$Group<-factor(geneall$Group,levels=c(\"Up\",\"Down\",\"Unsig\"))\ngeneall$Pathway<-gsub(\"GO_BP_MM_\",\"\",geneall$Pathway)\ngeneall$Pathway<-factor(geneall$Pathway,levels=as.character(geneall$Pathway))\n#barplot\nclname<-gsub(\"_diff_genes.csv\",\"\",fl)\nclname<-gsub(\" \",\"_\",clname)\npdfname<-paste0(\"gsva_plots/tumor_gsva_barplot_gobp_\",clname,\".pdf\")\ntitlename=paste0(\"GSEA_analysis_\",clname)\nggplot(geneall,aes(x=Pathway,y=NES,fill=Group))+geom_bar(stat=\"identity\")+\nscale_fill_manual(values = c(\"#FF0099\",\"#6699FF\",\"lightgrey\"))+\ncoord_flip()+guides(fill = \"none\")+theme_classic()+labs(title=titlename)+\ngeom_text(data = subset(geneall, NES>0 & pval<=0.05),aes(x=Pathway, y= 0, label= paste0(Pathway,\" \")),hjust = \"outward\")+\ngeom_text(data = subset(geneall, NES>0 & pval>0.05),aes(x=Pathway, y= 0, label= paste0(Pathway,\" \")),color=\"darkgrey\",hjust = \"outward\")+\ngeom_text(data = subset(geneall, NES<0 & pval>0.05),aes(x=Pathway, y= 0, label= paste0(\" \",Pathway)),color=\"darkgrey\",hjust = \"inward\")+\ngeom_text(data = subset(geneall, NES<0 & pval<=0.05),aes(x=Pathway, y= 0, label= paste0(\" \",Pathway)),hjust = \"inward\")+\ntheme(plot.title=element_text(hjust=0.5,size=18),axis.line.y=element_blank(),axis.ticks.y=element_blank(),axis.text.y=element_blank(),axis.title=element_text(size=15))\nggsave(pdfname,height=4,width=9)\n}\nUse the AddModuleScore package of Seurat to analyze the expression activities of genes involved in important pathways related to antitumor immunity.\nNote: All the processes are completed on Python (version 2.7.5) and R (version 3.6.3) platforms. Plots are made with the ggplot2 (version 3.3.5), ggpubr (version 0.4.0), pheatmap (version 1.0.12) and ComplexHeatmap (version 2.8.0) packages in R. The scripts below show an example of AddModuleScore analysis of cytotoxic related scores.\nlibrary(Seurat)",
    "library(cowplot)\nlibrary(future)\nlibrary(Matrix)\nlibrary(ggplot2)\nlibrary(ggpubr)\nlibrary(dplyr)\nlibrary(patchwork)\nlym<-readRDS(\"lymphocytes_all.rds\")\n#genelist are from the gskb database.\ncyt_regulation_score<-list(c(\"Pnp\",\"Cd1d1\",\"Il12a\",\"Il23a\",\"Ptprc\",\"H2-T23\",\"H2-M3\",\"H2-K1\",\"B2m\",\"Tap1\",\"Tap2\",\"Il12b\",\"P2rx7\",\"Abcb9\",\"H2-D1\",\"Xcl1\"))\ncyt_diff_regulation_score<-list(c(\"Sart1\",\"Hsp90aa1\"))\ncyt_score<-list(c(\"Serpinb9\",\"Gzmb\",\"Ctsc\",\"Ctsh\"))\nlym<-AddModuleScore(lym,features=cyt_regulation_score,ctrl=20,name=\"Cytotoxic_Regulation_Signatures\")\nlym<-AddModuleScore(lym,features=cyt_diff_regulation_score,ctrl=5,name=\"Cytotoxic_Diff_Regulation_Signatures\")\nlym<-AddModuleScore(lym,features=cyt_score,ctrl=10,name=\"Cytotoxic_Signatures\")\nCyto_score<-lym$Cytotoxic_Signatures1\nCyto_reg_score<-lym$Cytotoxic_Regulation_Signatures1\nCyto_diff_reg_score<-lym$Cytotoxic_Diff_Regulation_Signatures1\nGroup<-lym$GROUP\nSample<-lym$SAMPLE\nlym$Tissue_days<-paste(lym$TISSUE,lym$DAYS,sep=\"_\")\nTissue<-lym$Tissue_days\nCluster<-lym$Cluster_name\nCluster_detailed<-lym$Cluster_detailed\ndata<-data.frame(Group,Cyto_score,Cyto_reg_score,Cyto_diff_reg_score,Sample,Tissue,Cluster,Cluster_detailed)\nggplot(subset(data,Cluster==\"Cd8+ T cells\"),aes(x=Group,y=Cyto_score,fill=Group))+geom_boxplot()+\ntheme_classic()+facet_wrap(∼Tissue)+\n#stat_compare_means(map_signif_level=T,label.x.npc=\"middle\")+\ntheme(text=element_text(size=15))\nggsave(\"Cyto_score_graph_CD8_no_label.pdf\",height=5,width=6)\nCell-cell communication analysis. This procedure is completed with the R package (version 1.0.0).5[href=https://www.wicell.org#bib5]\nChoose five cell types that played important roles in the antitumor immunity for communication analysis.\nCalculate and compare the communication numbers and strengths between the normal and Sephin1 groups in different tissues.\nlibrary(CellChat)\nlibrary(ComplexHeatmap)\nlibrary(ggplot2)\nmdata<-readRDS(\"mouse_all_data_20211017.rds\")\n#celltype: CD4, CD8, NK, macrophage, DC\ncelltypes<-c(\"Cd4+ T cells\",\"NK cells\",\"Cd8+ T cells\",\"Macrophages\",\"DCs\")\nmsub<-subset(mdata,Cluster_name %in% celltypes)\nsaveRDS(msub,\"mouse_Tcell_NK_Mac_DC.rds\")\ncellchat_cal<-function(subdata){\n  m_cellchat<-createCellChat(subdata,group.by=\"Cluster_name\")\n  groupsize<-as.numeric(table(m_cellchat@idents))\n  ccdb<-CellChatDB.mouse\n  showDatabaseCategory(ccdb)\n  m_cellchat@DB<-ccdb\n  m_cellchat<-subsetData(m_cellchat)\n  m_cellchat<-identifyOverExpressedGenes(m_cellchat)\n  m_cellchat<-identifyOverExpressedInteractions(m_cellchat)\n  m_cellchat<-projectData(m_cellchat,PPI.mouse)\n  m_cellchat<-computeCommunProb(m_cellchat,raw.use=F,population.size=T)\n  m_cellchat<-filterCommunication(m_cellchat,min.cells=10)\n  df.net<-subsetCommunication(m_cellchat)\n  m_cellchat<-computeCommunProbPathway(m_cellchat)\n  df.netp<-subsetCommunication(m_cellchat,slot.name=\"netP\")\n  m_cellchat<-aggregateNet(m_cellchat)\n  groupSize<-as.numeric(table(m_cellchat@idents))\n  return(m_cellchat)\n}\n#calculate cellchat results of every sample type\nsamlist<-unique(msub$SAMPLE)\nmsub_cc<-list()\nfor(sa in samlist){\n  sub<-subset(msub,SAMPLE==sa)\n  cchat<-cellchat_cal(sub)\n  msub_cc<-c(msub_cc,list(cchat))\n}\nnames_title<-c(\"Normal_B_d0\",\"Sephin1_B_d0\",\"Normal_B_d15\",\"Sephin1_B_d15\",\"Normal_T_d15\",\"Sephin1_T_d15\")\nnames(msub_cc)<-names_title\nsaveRDS(msub_cc,\"mouse_Tcell_NK_Mac_DC_cellchat_by_sample.rds\")\nmsub_cc<-readRDS(\"mouse_Tcell_NK_Mac_DC_cellchat_by_sample.rds\")\n#netgraph of normal and sephin1 group\ntsub<-c(msub_cc[[5]],msub_cc[[6]])\n#weight.max <- getMaxWeight(tsub, attribute = c(\"idents\",\"weight\"))\nweight.max<-getMaxWeight(msub_cc, attribute = c(\"idents\",\"weight\"))\npdf(\"netgraph_five_celltypes.pdf\",height=5,width=6)\nfor(i in 1:6){\n  print(netVisual_circle(msub_cc[[i]]@net$weight, weight.scale = T,\n      label.edge= F, edge.weight.max = weight.max[2],\n      edge.width.max = 20, arrow.size=0.05,arrow.width=0.1,\n      title.name = paste0(\"Interaction weight - \", names(msub_cc)[i])))\n}\ndev.off()\n#different types of graph of differentiated pathways\ncellchat <- mergeCellChat(msub_cc, add.names = names(msub_cc))\ntitlenames<-c(\"Day0_Blood\",\"Day15_Blood\",\"Day15_Tumor\")\n#netgraph\npdf(\"differentiated_netgraph_five_celltypes.pdf\",height=5,width=6)\nfor(i in 1:3){\n  num1<-2∗i-1\n  num2<-2∗i\n  tname<-titlenames[i]\n  print(netVisual_diffInteraction(cellchat, comparison=c(num1,num2),weight.scale = T,\n        measure = \"weight\",title.name=tname))\n}\ndev.off()\n#bubbleplot of selected cell types\nsiglist<-c(\"APP\",\"MIF\",\"MHC-I\",\"SEMA4\")\npdf(\"bubble_plot_of_selected_celltypes_and_selected_pathways_0718.pdf\",height=6,width=8)\nfor(i in 1:3){\n  tname<-titlenames[i]\n  tname1<-paste0(\"Increased signaling in \",tname,\", NK & Cd8\")\n  tname2<-paste0(\"Decreased signaling in \",tname,\", NK & Cd8\")\n  print(netVisual_bubble(cellchat,signaling=siglist,source=c(\"NK cells\",\"Cd8+ T cells\"),target=c(\"NK cells\",\"Cd8+ T cells\"),comparison = c(2∗i-1, 2∗i), max.dataset = 2∗i,\n        title.name = tname1, remove.isolate = F,angle.x=45))\n  print(netVisual_bubble(cellchat,signaling=siglist,source=c(\"NK cells\",\"Cd8+ T cells\"),target=c(\"NK cells\",\"Cd8+ T cells\"),comparison = c(2∗i-1, 2∗i), max.dataset = 2∗i-1,\n        title.name = tname2, remove.isolate = F,angle.x=45))\n}\ndev.off()\nbubble_data<-list()\nfor(i in 1:3){\n  tname<-titlenames[i]\n  tname1<-paste0(\"Increased signaling in \",tname)\n  tname2<-paste0(\"Decreased signaling in \",tname)",
    "bubble_data<-c(bubble_data,list(netVisual_bubble(cellchat,source=c(\"NK cells\",\"Cd8+ T cells\"),target=c(\"NK cells\",\"Cd8+ T cells\"),comparison = c(2∗i-1, 2∗i),\n        title.name = tname1, remove.isolate = T,return.data=T)$communication))\n}\nnames(bubble_data)<-c(\"Day0_Blood\",\"Day15_Blood\",\"Day15_Tumor\")\n#calculate the strength of each pathway and compare\n#strength=prob1+prob2+....\nresult_list<-list()\nresult_all<-c()\nrnames<-c(\"Day0_Blood\",\"Day15_Blood\",\"Day15_Tumor\")\nfor(i in 1:3){\n  result<-c()\n  sub1<-bubble_data[[i]]\n  samplename<-unique(sub1$dataset)\n  pathway<-unique(sub1$pathway_name)\n  for(sn in samplename){\n    grlist<-str_split(sn,\"_\",simplify=T)\n    gr<-grlist[1]\n    for(pt in pathway){\n      sub2<-subset(sub1,pathway_name==pt & dataset==sn)\n      str_each<-sum(sub2$prob)\n      num_each<-length(sub2$prob)\n      deach<-data.frame(sn,pt,str_each,num_each,rnames[i],gr)\n      result<-rbind(result,deach)\n    }\n  }\ncolnames(result)<-c(\"Sample\",\"Pathway\",\"Strength\",\"Number\",\"Tissue\",\"Group\")\nresult_list<-c(result_list,list(result))\nresult_all<-rbind(result_all,result)\n}\nggplot(result_all,aes(x=Pathway,y=Strength,fill=Group))+\n  geom_bar(stat=\"identity\",position=\"dodge\")+facet_wrap(∼Tissue)+theme_bw()+\n  theme(text=element_text(size=15),axis.text.x=element_text(angle=90,hjust=1))\n#heatmap making, final heatmap was drawn by ComplexHeatmap in personal desktop.\npathway_name<-unique(result_all$Pathway)\nresult_all<-data.table(result_all)\nresult_map<-c()\nsample_name<-c(\"Normal_B_d0\",\"Sephin1_B_d0\",\"Normal_B_d15\",\"Sephin1_B_d15\",\"Normal_T_d15\",\"Sephin1_T_d15\")\nfor(pn in pathway_name){\n  deach<-c()\n  for(sn in sample_name){\n    sub1<-subset(result_all,Sample==sn)\n    if(pn %in% sub1$Pathway){\n      sub2<-subset(sub1,Pathway==pn)\n      str_num<-sub2$Strength[1]\n    }\n    else{\n      str_num<-0\n    }\n    deach<-c(deach,str_num)\n  }\nresult_map<-rbind(result_map,deach)\n}\ncolnames(result_map)<-sample_name\nrownames(result_map)<-pathway_name\nacol<-rep(c(\"Day0_Blood\",\"Day15_Blood\",\"Day15_Tumor\"),each=2)\nacol<-data.frame(acol)\nrownames(acol)<-colnames(result_map)\ncolnames(acol)<-\"Tissue\"\nlibrary(scales)\nlibrary(dplyr)\nresult_map1<-log10(100+result_map)\nresult_new<-scale(result_map1)\nresult2<-scale(result_map)\np1=pheatmap(result_map,cluster_rows = F,cluster_cols = F,scale=\"row\",gaps_col=c(2,4),\n  labels_col=rep(c(\"Normal\",\"Sephin1\"),3),angle_col=0,annotation_col=acol)\nanno<-apply(result_map,1,sum)\np2=rowAnnotation(foo=anno_barplot(anno))\nsiglist_mac<-c(\"SPP1\",\"THBS\",\"TGFb\",\"APP\",\"CD45\",\"TNF\",\"IL2\")\npdf(\"bubble_plot_of_Cd4_mac_and_selected_pathways_by_heatmap.pdf\",height=9,width=6)\nfor(i in 1:3){\n  tname<-titlenames[i]\n  tname1<-paste0(\"Increased signaling in \",tname,\", Mac & Cd4\")\n  tname2<-paste0(\"Decreased signaling in \",tname, \", Mac & Cd4\")\n  print(netVisual_bubble(cellchat,source=c(\"Macrophages\",\"Cd4+ T cells\"),target=c(\"Macrophages\",\"Cd4+ T cells\"),comparison = c(2∗i-1, 2∗i), max.dataset = 2∗i,\n        title.name = tname1, remove.isolate = F,signaling=siglist_mac))\nprint(netVisual_bubble(cellchat,source=c(\"Macrophages\",\"Cd4+ T cells\"),target=c(\"Macrophages\",\"Cd4+ T cells\"),comparison = c(2∗i-1, 2∗i), max.dataset = 2∗i-1,\n        title.name = tname2, remove.isolate = F,signaling=siglist_mac))\n}\ndev.off()\nSingle-cell result confirmation by FACS analysis and in vitro experiments\nTiming: 2 weeks\nThis procedure describes the FACS analysis and in vitro experiments in accordance with the single-cell analysis results.\nFACS analysis of tumor microenvironment. Tumor tissues are dissociated by the above-mentioned procedure. The weight of each tumor tissue should be measured before this procedure.\nStimulate the cells with Cell Activation Cocktail with Brefeldin A (BioLegend, 423303) at a cell density of approximately 5 × 10ˆ6 cells/mL.\nNote: This step is performed to stimulate the secretion of IFNγ. The volume ratio of the cocktail and the cell suspension was 1:500.\nAfter stimulating at 37°C for 4 h, centrifuge the cells at 400 × g for 7 min and discard the supernatant.",
    "Incubate the cells with appropriate surface markers, including CD45 (Thermo Fisher, 12-0451-83; BioLegend, 103105; BioLegend, 157607), CD3E (BD Pharmingen, 553064), CD4 (BioLegend, 100548), CD8A (Thermo Fisher, 25-0081-81), NK1.1 (Thermo Fisher, 48-5941-80), FOXP3 (BioLegend, 126419), PD-1 (Thermo Fisher, 17-9985-82), CD11b (BioLegend, 101215), F4/80 (BioLegend, 123125), TCRβ (BioLegend, 109205) and reagents from a LIVE/DEAD Viability Kit (ThermoFisher, L34994/L34963) for 30 min. The volume ratio of the LIVE/DEAD Viability Kit to the cell suspension is 1:1000, and the ratio of other antibodies to the cell suspension is 1:200. The concentration of cell suspension is no more than    10 8   /mL.\nCentrifuge the cells at 1500 rpm for 5 min and wash with PBS once.\nFix and permeabilize cells with Cytofix/Cytoperm Kit (554714, BD Pharmingen) as instructed by manufacturer (https://www.bdbiosciences.com/en-us/products/reagents/flow-cytometry-reagents/research-reagents/buffers-and-supporting-reagents-ruo/fixation-permeabilization-kit.554714[href=https://www.bdbiosciences.com/en-us/products/reagents/flow-cytometry-reagents/research-reagents/buffers-and-supporting-reagents-ruo/fixation-permeabilization-kit.554714]) for 30 min at 4°C.\nCentrifuge the cells at 1500 rpm for 5 min, and then discard the supernatant completely.\nIncubate the cells with a mouse IFNG-specific antibody (BioLegend, 505806) for 30 min at 4°C. The ratio of the antibody to the cell suspension is 1:200. The concentration of cell suspension is no more than    10 8   /mL.\nWash and resuspend the cells with BD Perm/Wash buffer from the Cytofix/Cytoperm Kit according to the manufacturer’s instructions (https://www.bdbiosciences.com/en-us/products/reagents/flow-cytometry-reagents/research-reagents/buffers-and-supporting-reagents-ruo/fixation-permeabilization-kit.554714[href=https://www.bdbiosciences.com/en-us/products/reagents/flow-cytometry-reagents/research-reagents/buffers-and-supporting-reagents-ruo/fixation-permeabilization-kit.554714]).\nPerform FACS analysis with a CytoFLEX LX from Beckman Coulter (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/3026-Fig4.jpg\nFigure 4. FACS gating strategy for cell sorting1[href=https://www.wicell.org#bib1]\nFirstly gating the CD45+ immune cells (A), then gating Cd4+ and Cd8+ T cells by CD3E & CD4/CD8A (B & C), NK cells by NK1.1 (D), Cd4+ regular T cells by CD4 and FOXP3 (E), exhausted Cd8+ T cells by CD8A and PD1 (F) and active Cd8+ T cells by CD8A and IFN-γ (G).",
    "In vitro analysis of the effect of Sephin1 on mouse CD8+ T cells. This procedure is used to confirm the suppression effect of Sephin1 on CD8+ T cells in vitro.\nFirst prepare a round-bottom 96-well plate with 100 μL PBS supplemented with 1 μg/mL anti-mouse CD3ε (BioXCell, BE0001-1-5MG) and anti-mouse CD28 (BioXCell, BE0015-1-5MG) the day before CD8+ T-cell isolation. Discard the solution completely before use.\nIsolate the CD8+ T cells from the spleen tissue of 6–8 week-male C57BL/6 mice with a MojoSort Mouse CD8 T Cell Isolation Kit (BioLegend, 480035) according to the standard protocol.\nAfter separation, firstly incubate the isolated CD8+ T cells with reagents from a CFSE Cell Division Tracker Kit (BioLegend, 423801) according to the manufacturer’s instructions (https://www.biolegend.com/en-us/products/cfse-cell-division-tracker-kit-9396[href=https://www.biolegend.com/en-us/products/cfse-cell-division-tracker-kit-9396]) and then resuspend the cells in RPMI 1640 medium (Gibco, 11875093) supplemented with 10% FBS (Biological Industries, 04-001-1A) and 1% Pen Strep (Gibco, 15140122).\nAdd mouse IL2 (Novoprotein, CK24) and IL7 (Novoprotein, CC73) into the medium for a concentration of 20 ng/mL to stimulate the proliferation of T cells. The cell concentration is between 5   ×  10 5    /mL to 106/mL.\nIncubate the isolated CD8+ T cells in the precoated 96-well plates (step 14. a.) for 72 h.\nCentrifuge at 400 × g for 5 min to collect the cells. Remove the supernatant completely.\nStain with a LIVE/DEAD Fixable Violet Dead Cell Stain Kit (Invitrogen, L34963), PerCP/Cyanine 5.5-conjugated anti-mouse CD8a antibody (BioLegend, 100733) and PE-conjugated anti-mouse IFN-γ antibody (BioLegend, 163503) as described above.\nAnalyze the prepared cells on a CytoFLEX LX machine from Beckman Coulter."
  ],
  "subjectAreas": [
    "Immunology",
    "Bioinformatics",
    "Cancer"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Bioinformatics & Computational Biology"
  ]
}