{
  "id": 3210,
  "origin_website": "Cell",
  "title": "Computational workflow for investigating highly variable genes in single-cell RNA-seq across multiple time points and cell types",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\n      Before identification and investigation of time-course HVGs and their\n      dynamic expression profiles, the scRNA-seq data must be pre-processed and\n      quality controlled, which are summarized briefly here, and are described\n      in details through GitHub (https://github.com/vclabsysbio/scRNAseq_DVtimecourse[href=https://github.com/vclabsysbio/scRNAseq_DVtimecourse]). Note that these steps have also been comprehensively described\n      elsewhere.16[href=https://www.wicell.org#bib16],17[href=https://www.wicell.org#bib17],18[href=https://www.wicell.org#bib18]\nQC and filtering single-cell RNA-seq data\nTiming: ∼ 1–2 h/sample (for steps 1 to\n      3)\n    \n      The quality control and filtering scRNA-seq data were performed separately\n      on individual samples, before data integration and cell type annotation\n      (Figure 1[href=https://www.wicell.org#fig1]). The QC stage comprises correcting of\n      ambient RNAs, exclusion of dead and low quality cells and potential\n      doublets, in prior to the downstream bioinformatic analyses. Raw and\n      filtered expression matrices generated by the\n      cellranger count function are required as the inputs of this step -\n      see key resources table[href=https://www.wicell.org#key-resources-table].\n    \nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2780-Fig1.jpg\n          Figure 1. Overview of bioinformatic pipeline of scRNA-seq data\n          analysis described in this protocol\n        \nHVGs, highly variable genes.\nNote:\nFigure 1[href=https://www.wicell.org#fig1] illustrates the overview of the bioinformatic\n      pipeline described in this protocol.\n    \nNote: R packages and codes required for\n      the QC and filtering step are provided in Github URL:\n      https://github.com/vclabsysbio/scRNAseq_DVtimecourse[href=https://github.com/vclabsysbio/scRNAseq_DVtimecourse]. Complete datasets used for this step are deposited in Mendeley Data:\n      https://data.mendeley.com/datasets/6ry3x7r8hf/3[href=https://data.mendeley.com/datasets/6ry3x7r8hf/3].\n    \nCorrect ambient RNAs using SoupX.11[href=https://www.wicell.org#bib11]\nNote: Check for the expression levels of\n      ambient RNAs in your datasets. If an excessive amount is observed, users\n      can apply several ambient RNA removal tools such as SoupX11[href=https://www.wicell.org#bib11]\n      to correct their expression levels. For more details of predicting and\n      correcting the expression values of ambient RNAs, please refer to the\n      SoupX tutorial.11[href=https://www.wicell.org#bib11]\n        Exclude the cells expressing excessive mitochondrial genes, in this\n        example, more than 10% in the total transcript counts.\n      \nNote: Check the distribution of percent\n      mitochondrial genes (percent.mt) to determine suitable cut-offs in your\n      scRNA-seq datasets. For details, please refer to the Seurat toolkit.2[href=https://www.wicell.org#bib2]",
    "Predict and discard doublets using doubletFinder.12[href=https://www.wicell.org#bib12]\nNote: For droplet-based scRNA-seq, we\n      recommend excluding “doublets” and “multiplets”. For more details about\n      the optimal cut-offs in each parameter, please refer to doubletFinder.12[href=https://www.wicell.org#bib12]\n      Data normalization, integration, and cell type annotation\n    \nTiming: ∼ 2 h (for steps 4 to 7)\n    \n      After filtering out low quality cells and correcting the expression values\n      of ambient RNAs, the data are used as inputs for normalization,\n      integration, and cell type annotation. Seurat objects of individual\n      samples after QC and filtering step are used as the inputs of this step.\n    \n        Run the standard preprocessing workflow for each individual sample.\n        \n            Import and create a list of individual Seurat objects after the QC\n            and filtering step.\n          \n            Run the SCTransform function, a regularized negative\n            binomial regression.19[href=https://www.wicell.org#bib19]\n            Apply the first 30 principal components (PCs) for cell clustering.\n          \n            Identify cell clusters by the shared nearest neighbor (SNN) method\n            using the Louvain algorithm with multilevel refinement.\n          \n        Integrate all the samples. We used the following settings in our\n        examples here: three thousand (3,000) features, a Louvain algorithm with\n        multi-level refinement for clustering and the resolution of three. Other\n        parameters are as default.\n      \n        Normalize the transcript counts of each cell using the\n        NormalizeData() function.\n      \n        Identify major immune cell types using known canonical marker genes (as\n        described in\n        Table S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2780-Mmc1.pdf]).\n      \nNote: For cell type annotation, in our\n      examples we first labeled different clusters of T cells with the same name\n      in order to group them together as a single “T cells” cluster, which was\n      subsequently re-clustered into subpopulations.\n    \nNote: High heterogeneity of PBMCs,\n      especially at the subpopulation levels, might be difficult to identify\n      using the known marker genes (Table S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2780-Mmc1.pdf]). Alternatively, reference-based for cell type annotation such as\n      SingleR,20[href=https://www.wicell.org#bib20] Azimuth,21[href=https://www.wicell.org#bib21] and\n      ScType22[href=https://www.wicell.org#bib22] can be applied.\n    \n      Highly variable gene (HVG) identification and pathway enrichment analysis",
    "across multiple time points – Dengue case study\n    \nTiming: ∼ 10–15 min (for steps 8 to 14)\n      Here, we describe the process for obtaining HVGs, which represent the\n      variations in transcriptional levels across several biological conditions\n      (typically >2 conditions, in our case, four time points from two\n      DENV-infected patients and two healthy controls) in multiple immune cell\n      types of interest. The inputs of this step are the integrated scRNA-seq\n      Seurat objects from the previous pro-processing and cell type annotation\n      described above (Figure 1[href=https://www.wicell.org#fig1]).\n    \nNote: We first performed a pseudo-bulk\n      expression analysis by calculating the average transcription levels of all\n      the genes. Then, principal component analysis (PCA) of the averaged gene\n      expression in each cell type was performed (Figure 2[href=https://www.wicell.org#fig2]A). This PCA of each cell type was used to extract the genes that\n      demonstrate the largest variation across biological conditions, – to be\n      referred to as “Highly Variable Genes (HVGs)”. In this example, the most\n      apparent differences are between the four time points, whereas those\n      between the two DENV patients are relatively small. Finally, we\n      investigated the biological pathways associated with the HVGs that show\n      common and unique expression dynamics among different cell types and\n      biological conditions (Figure 2[href=https://www.wicell.org#fig2]B). The workflow is\n      described step-by-step below.\n    \nNote: Processed scRNA-seq dataset used in\n      this step is deposited in Mendeley Data:\n      https://data.mendeley.com/datasets/6ry3x7r8hf/3[href=https://data.mendeley.com/datasets/6ry3x7r8hf/3]\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2780-Fig2.jpg\n          Figure 2. The relative expression levels of highly variable genes\n          (HVGs) in each biological process (BP) of interest, across the four\n          time points and major immune cell types, from two dengue-infected\n          patients and two healthy controls\n        \n          (A and B) Figures were modified from Arora et al., 20221[href=https://www.wicell.org#bib1]\n          (A). PCA of average gene expression in each major immune cell type of\n          interest. (B). Dotplot representing relative expression levels of",
    "HVGs. The BPs of the HVGs across the four major immune cell types of\n          interest here are highlighted in red texts, monocyte-specific BPs are\n          in blue, and B cell-specific BPs are in green.\n        \n        Subset the integrated Seurat object according to their major cell types\n        into monocytes, NK cells, T cells, and B cells/plasma cells/plasmablasts\n        - the main immune cell types of interest in this study.\n      \n# Load libraries\nlibrary(Seurat)\nlibrary(gprofiler2)\nlibrary(ggplot2)\n# Set your working directory, pointing to the folder where all your\n          input and output files will be saved\nsetwd(\"PATH/TO/YOUR/WORKING/DIRECTORY\")\n# Load integrated data\nsc_integrated <- readRDS(file =\n          \"PATH/TO/YOUR/WORKING/DIRECTORY/sc_integrated.rds\")\n# Subset each cell type\nIdents(sc_integrated) <- \"Cell_Types\"\neach_celltype_list <- list()\neach_celltype <- c(\"Monocytes\" , \"NK cells\" ,\n          \"T cells\" , \"B cells\")\nfor (RN in each_celltype) {\n  each_celltype_list[[RN]] <- subset(sc_integrated ,\n          idents = RN)\n}\nnames(each_celltype_list) <- each_celltype\n        Calculate the average gene expression levels in each cell type across\n        biological conditions of interest.\n        \n            Set the object’s identity class based on condition of interest using\n            the Idents() function.\n          \n            Calculate the average gene expression using the\n            AverageExpression() function.\n          \n# Calculate average gene expression in each cell type across severity\n          and time\nAvg_expression_list <- list()\nfor (RN in 1:length(each_celltype_list)) {\n  Idents(each_celltype_list[[RN]]) <-\n          \"ST\"\n  Avg_expression_list[[RN]] <-\n          AverageExpression(each_celltype_list[[RN]] , assays = \"RNA\"\n          , slot = \"data\")\n  Avg_expression_list[[RN]] <-\n          as.data.frame(Avg_expression_list[[RN]]$RNA)\n}\nnames(Avg_expression_list) <- names(each_celltype_list)\n        Construct the principal components (PCs) of the average gene expression\n        levels in each cell type using the prcomp() function in R (Figure 2[href=https://www.wicell.org#fig2]A).\n      \n# Construct Principal Components (PCs) in each cell type\npca_out <- list()\npca_perc <- list()\ndf_pca <- list()\nfor (RN in 1:length(Avg_expression_list)) {\n  pca_out[[RN]] <-\n          prcomp(t(Avg_expression_list[[RN]]))\n  pca_perc[[RN]] <-\n          round(100∗pca_out[[RN]]$sdevˆ2/sum(pca_out[[RN]]$sdevˆ2),1)\n  df_pca[[RN]] <- data.frame(PC1 = pca_out[[RN]]$x[,1],\n          PC2 = pca_out[[RN]]$x[,2], sample =\n          colnames(Avg_expression_list[[RN]]))\n  # Add metadata can be differences in each dataset\n  df_pca[[RN]]$Severity <- c(rep(\"DF\" , 4) ,",
    "rep(\"DHF\" , 4) , \"Healthy\" ,\n          \"Healthy\")\n  df_pca[[RN]]$Time <- c(\"Day-2\" ,\n          \"Day-1\" , \"Def\" , \"Wk2\" ,\n          \"Day-2\" , \"Day-1\" , \"Def\" ,\n          \"Wk2\" ,\"Healthy I\" , \"Healthy II\")\n  df_pca[[RN]]$Time <- factor(df_pca[[RN]]$Time ,\n          levels = c( \"Day-2\" , \"Day-1\" , \"Def\" ,\n          \"Wk2\" , \"Healthy I\" , \"Healthy\n          II\"))\n}\nnames(pca_out) <- names(Avg_expression_list)\nnames(pca_perc) <- names(Avg_expression_list)\nnames(df_pca) <- names(Avg_expression_list)\nNote: Please add metadata based on your\n      datasets.\n    \n        Visualize the PCA results using the ggplot2 package.14[href=https://www.wicell.org#bib14]\n# Visualize PCA results\nfor (RN in 1:length(df_pca)) {\n  pca_plot<- ggplot(df_pca[[RN]], aes(PC1,PC2, color =\n          Time))+ geom_point(aes(shape = Severity ), size=6 , stroke = 1.4)+\n          labs(x=paste0(\"PC1 (\",pca_perc[[RN]][1],\"%)\"),\n          y=paste0(\"PC2 (\",pca_perc[[RN]][2],\"%)\")) +\n          scale_color_manual(values=c(\"darkgoldenrod2\",\n          \"#ff7400\",\"#ff1218\", \"#47849c\" ,\n          \"darkgrey\" , \"gray6\")) + theme(axis.text =\n          element_text(size = 17 , face=\"bold\" , colour =\n          \"black\") , axis.title.y =\n          element_text(color=\"black\", size=15, face=\"bold\")\n          , axis.title.x = element_text(color=\"black\", size=17,\n          face=\"bold\") , legend.title = element_text(face =\n          \"bold\" , size = 17) , legend.text = element_text(size = 16)\n          , legend.key.size = unit(1, \"cm\") , legend.key.width =\n          unit(0.5,\"cm\") , legend.key = element_rect(fill =\n          \"white\") ) + ggtitle(names(df_pca[RN]))\nplot(pca_plot)\n}\nNote: Color and shape can be manually\n      adjusted based on your data.\n    \n        Union the top 500 genes from the first and second PCs of each immune\n        cell type – referred to as “HVGs” herein.\n      \n# Union top 500 genes from PC1 and PC2 from all cell types\nHVGs_each_celltype <- list()\nfor (RN in 1:length(pca_out)) {\n  HVGs_each_celltype[[RN]] <-\n          union(rownames(data.frame(sort(abs(pca_out[[RN]]$rotation[,\"PC1\"]),\n          decreasing=TRUE)[1:500])) ,\n          rownames(data.frame(sort(abs(pca_out[[RN]]$rotation[,\"PC2\"]),\n          decreasing=TRUE)[1:500])))\n}\nnames(HVGs_each_celltype) <- names(pca_out)\n# unique HVGs based on number of cell types\nHVGs <- unique(c(HVGs_each_celltype[[1]] , HVGs_each_celltype[[2]]\n          , HVGs_each_celltype[[3]] , HVGs_each_celltype[[4]]))\nCritical: Edit the\n      unique() function based on the numbers of cell types in your\n      dataset. In this case, we investigated four major immune cell types:\n      monocytes, NK cells, T cells, and B cells.\n    \nNote: To find the optimal numbers of top",
    "genes that exhibit high variations in PCs, users can construct and\n      investigate a histogram plot where the y-axis represents PC loading\n      calculated from the prcomp() function in R, and the x-axis shows\n      the numbers of genes (Figure S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2780-Mmc1.pdf]).\n    \nExample code.\n# Extract PC loading values calculated from prcomp()\nPC1_mono <- sort(abs(pca_out[[1]]$rotation[,\"PC1\"]),\n          decreasing=TRUE)\nPC1_NK <- sort(abs(pca_out[[2]]$rotation[,\"PC1\"]),\n          decreasing=TRUE)\nPC1_Tcells <- sort(abs(pca_out[[3]]$rotation[,\"PC1\"]),\n          decreasing=TRUE)\nPC1_Bcells <- sort(abs(pca_out[[4]]$rotation[,\"PC1\"]),\n          decreasing=TRUE)\n# Plot\nplot(density(PC1_mono)$y, density(PC1_mono)$x,type=\"l\" ,\n          col = \"orange\" , ylab = \"PC1 loading values\",\n          xlab = \"Number of genes\" , main = \" \" , ylim =\n          c(0,0.02) , xlim = c(0, 2000))\n# Add lines\nlines(density(PC1_NK)$y, density(PC1_NK)$x,type=\"l\" , col =\n          \"red\" , lwd=1)\nlines(density(PC1_Tcells)$y, density(PC1_Tcells)$x,type=\"l\"\n          , col = \"blue\" , lwd=1)\nlines(density(PC1_Bcells)$y, density(PC1_Bcells)$x,type=\"l\"\n          , col = \"green\" , lwd=1)\n# Add a legend\nlegend(1550, 0.020, legend = c(\"Monocytes\", \"NK\n          cells\", \"T cells\" , \"B cells\"), fill=c(\n          \"orange\",\"red\",\"blue\",\"green\"\n          ) , box.lty=0 )\n# Add vertical dashed blue line at x = 500\nabline(v=500, col=\"blue\" , lty = \"dashed\")\n        Perform a pathway enrichment analysis of the HVGs of all cell types\n        using gProfiler2.13[href=https://www.wicell.org#bib13]\n            All the genes in the genome are used as the background gene set.\n          \nPerform the pathway analysis using the gost() function.\n# Pathway enrichment analysis\n# Extract all genes that will be used as the background for pathway\n          analysis\nbg <- rownames(Avg_expression_list[[1]])\n# Pathway enrichment analysis using gProfiler2\nGO_out <- gost(query = HVGs , organism = \"hsapiens\" ,\n          correction_method = \"fdr\" , custom_bg = bg , significant =\n          TRUE , user_threshold = 0.05 , evcodes = TRUE , sources =\n          \"GO:BP\")\nNote: Beside gProfiler2,13[href=https://www.wicell.org#bib13]\n      alternatively, functional enrichment analysis can be performed using\n      several computational/web tools such as clusterProfiler,23[href=https://www.wicell.org#bib23]\n      Gene Ontology Consortium,24[href=https://www.wicell.org#bib24] Database for Annotation,\n      Visualization and Integrated Discovery (DAVID),25[href=https://www.wicell.org#bib25]\n      Kyoto Encyclopedia of Genes and Genomes (KEGG),26[href=https://www.wicell.org#bib26] and\n      Reactome.27[href=https://www.wicell.org#bib27]\nSave your outputs (optional).",
    "# Save outputs\nsaveRDS(Avg_expression_list, file =\n          \"PATH/TO/YOUR/WORKING/DIRECTORY/Avg_expression_list.rds\")\nsaveRDS(GO_out , file =\n          \"PATH/TO/YOUR/WORKING/DIRECTORY/GO_out.rds\")\nwrite.csv(HVGs , file =\n          \"PATH/TO/YOUR/WORKING/DIRECTORY/HVGs.csv\", row.names =\n          F)\nwrite.csv(bg , file =\n          \"PATH/TO/YOUR/WORKING/DIRECTORY/bg.csv\", row.names =\n          F)\n      Investigating dynamic expression patterns of HVGs across all time points\n      and cell types\n    \nTiming: ∼ 5–10 min (for steps 15 to 23)\n      In this section, we describe the normalization method used to obtain\n      relative expression levels of HVGs associated with biological pathways of\n      interest, across four different time points as well as cell types (Figure 2[href=https://www.wicell.org#fig2]B). The integrated Seurat object, average gene expression levels in each\n      cell type, and the selected GO:BP (biological process gene ontology) terms\n      from the pathway enrichment analysis are used as the inputs of this step.\n    \n        Import the integrated Seurat object, average gene expression levels in\n        each cell type, and biological pathways of interest into R.\n      \n# Load libraries\nlibrary(Seurat)\nlibrary(gprofiler2)\nlibrary(ggplot2)\nlibrary(tidyverse)\n# Set your working directory, pointing to the folder where all your\n          input and output files will be saved\nsetwd(\"PATH/TO/YOUR/WORKING/DIRECTORY\")\n# Load objects\nsc_integrated <- readRDS(file = file =\n          \"PATH/TO/YOUR/WORKING/DIRECTORY/sc_integrated.rds\")\nAvg_expression_list <- readRDS(file =\n          \"PATH/TO/YOUR/WORKING/DIRECTORY/Avg_expression_list.rds\")\nselected_GO_out <- readRDS(file =\n          \"PATH/TO/YOUR/WORKING/DIRECTORY/selected_GO_out.rds\")\nselected_GO_out <- selected_GO_out$result\n        Calculate the mean value of each gene across all cells from the\n        integrated Seurat object.\n      \n# Calculate the mean value of each gene from all cells\nexp_matrix <- GetAssayData(sc_integrated , slot = \"data\"\n          , assay = \"RNA\") %>% data.frame() %>%\n          rownames_to_column()\nrownames(exp_matrix) <- exp_matrix$rowname\nexp_matrix$rowname <- NULL\nexp_matrix$Mean <- rowMeans(exp_matrix)\nexp_matrix$Gene <- rownames(exp_matrix)\nMean_all_cells <- exp_matrix[c(\"Gene\" ,\n          \"Mean\")]\n        Create a list of HVGs in each “Gene Ontology: Biological processes\n        (GO:BP)”.\n      \n# Create a list of HVGs in each GO:BP\ngenes_each_GO <- list()\nfor (RN in 1:nrow(selected_GO_out)) {\n  temp <-\n          strsplit(unique(paste(as.character(selected_GO_out$intersection[RN]) ,\n          sep = \",\")) , \",\")\n  genes_each_GO[[RN]] <- temp[[1]]\n}\nnames(genes_each_GO) <- selected_GO_out$term_name",
    "Extract the average gene expression values of HVGs in each selected\n        GO:BP.\n      \n# Extract average gene expression values of HVGs\nAvg_expression_each_GO <- list()\ntemp_list <- list()\nfor (RN in 1:length(Avg_expression_list)) {\n  for (JA in 1:length(genes_each_GO)) {\n    temp_list[[JA]] <-\n          Avg_expression_list[[RN]][rownames(Avg_expression_list[[RN]]) %in%\n          genes_each_GO[[JA]],]\n    names(temp_list)[[JA]] <-\n          names(genes_each_GO)[[JA]]\n  }\nAvg_expression_each_GO[[RN]] <- temp_list\n}\nnames(Avg_expression_each_GO) <- names(Avg_expression_list)\n        Normalize each gene by adding a pseudocount of 1 (to avoid undefined\n        results from a zero denominator – in unexpressed genes), and then divide\n        by the mean value from all cells.\n      \n# Normalise each gene by adding a pseudocount of 1, and divide by\n          mean value from all cells.\nAvg_expression_each_GO_norm <- list()\nfor (RN in 1:length(Avg_expression_each_GO)) {\n  temp <- Avg_expression_each_GO[[RN]]\n  for (JA in 1:length(temp)) {\n    temp_1 <-\n          Mean_all_cells[Mean_all_cells$Gene %in% rownames(temp[[JA]]),]\n    temp_1\n    temp[[JA]] <- (temp[[JA]] + 1) /\n          (temp_1$Mean + 1)\n  }\n  Avg_expression_each_GO_norm[[RN]] <- temp\n}\nnames(Avg_expression_each_GO_norm) <-\n          names(Avg_expression_list)\n        Calculate the sum of the normalized average gene expression of all HVGs\n        belonging to each GO:BP of interest.\n      \n# Sum of each gene in each GO:BP\nSum_avg_expression_each_GO <- list()\nfor (RN in 1:length(Avg_expression_each_GO_norm)) {\n  temp <- Avg_expression_each_GO_norm[[RN]]\n  for (JA in 1:length(temp)) {\n    temp[[JA]][names(Avg_expression_each_GO_norm[RN]),]\n          <- colSums(temp[[JA]])\n  }\n  Sum_avg_expression_each_GO[[RN]] <- temp\n}\nnames(Sum_avg_expression_each_GO) <-\n          names(Avg_expression_each_GO_norm)\n        Create a big dataframe, where each row represents each GO:BP and each\n        column represents each cell type in each condition.\n      \n# Create list of summation each GO:BP in each cell type\nSum_exp_each_GO_celltype <- list()\nfor (RN in 1:length(genes_each_GO)) {\n  Sum_exp_each_GO_celltype[[RN]] <-\n          rbind(tail(Sum_avg_expression_each_GO[[1]][[RN]] , 1) ,\n    tail(Sum_avg_expression_each_GO[[2]][[RN]] ,\n          1) ,\n    tail(Sum_avg_expression_each_GO[[3]][[RN]] ,\n          1) ,\n    tail(Sum_avg_expression_each_GO[[4]][[RN]] ,\n          1))\n}\nnames(Sum_exp_each_GO_celltype) <- names(genes_each_GO)\n# Create a big dataframe, each row represents each GO:BP, and each\n          column represents each cell type in each condition.\n# matrix_size = 1 : (no_of_cell_types x biological_conditions)\nno_cell_types <- 4\nno_samples <- 10\nmatrix_size <- no_cell_types ∗ no_samples\nInput_dot_plot <- as.data.frame(matrix(1:matrix_size, nrow = 1,",
    "ncol = matrix_size))\ncolnames(Input_dot_plot) <- c(paste(\"Monocytes\" ,\n          names(Sum_exp_each_GO_celltype[[1]])) , paste(\"NK\" ,\n          names(Sum_exp_each_GO_celltype[[1]])) , paste(\"T\" ,\n          names(Sum_exp_each_GO_celltype[[1]])) , paste(\"B\" ,\n          names(Sum_exp_each_GO_celltype[[1]])))\nfor (RN in 1:length(genes_each_GO)) {\n  temp <- Sum_exp_each_GO_celltype[[RN]]\n  temp <- cbind(temp[1,],temp[2,] , temp[3,] ,\n          temp[4,])\n  colnames(temp) <- c(paste(\"Monocytes\" ,\n          names(Sum_exp_each_GO_celltype[[1]])) , paste(\"NK\" ,\n          names(Sum_exp_each_GO_celltype[[1]])) , paste(\"T\" ,\n          names(Sum_exp_each_GO_celltype[[1]])) , paste(\"B\" ,\n          names(Sum_exp_each_GO_celltype[[1]])))\n  Input_dot_plot <- rbind(Input_dot_plot , temp)\n}\nInput_dot_plot <- Input_dot_plot[-1,]\nrownames(Input_dot_plot) <- names(genes_each_GO)\n        Calculate the z-score across all samples and cell types for\n        visualization (Figure 2[href=https://www.wicell.org#fig2]B).\n      \n# For visualization, calculate z-score by row\nInput_dot_plot_zscore <-\n          t(apply((Input_dot_plot[,1:length(Input_dot_plot)]), 1,\n          function(x){\n  mean <- mean(x)\n  SD <- sd(x)\n  Z_score <- (x-mean)/SD\n  Z_score\n}))\nInput_dot_plot_zscore <-\n          as.data.frame(Input_dot_plot_zscore)\n# Convert to long format for plot\nforplot <- gather(Input_dot_plot_zscore %>%\n          rownames_to_column(\"GO\"), key = \"ST\" , value =\n          \"Expression\" , -GO)\nforplot <- forplot %>% separate(col = \"ST\" , into =\n          c(\"Cell_Types\" , \"Patients\" ,\n          \"time\"),sep = \" \" , remove = F)\nforplot$time <- factor(forplot$time , levels = c(\"Day-2\"\n          , \"Day-1\" , \"Def\" , \"Wk2\" ,\n          \"I\" , \"II\"))\nforplot$Cell_Types <- factor(forplot$Cell_Types , levels =\n          c(\"Monocytes\" , \"NK\" , \"T\" ,\n          \"B\"))\nforplot$Patients <- factor(forplot$Patients , levels =\n          c(\"DF\" , \"DHF\" , \"Healthy\"))\n        Visualize the results using the ggplot2 package.14[href=https://www.wicell.org#bib14]\n# Visualize the relative expression of HVGs over all samples and cell\n          types\nggplot(forplot, aes(x=time, y=GO , color= Expression , size =\n          Expression)) + geom_point(alpha = 1.5) + theme_classic() +\n          scale_colour_gradient2( low = \"blue\", mid =\n          \"white\", high = \"red\", space = \"Lab\" ,\n          limits = c(-max(forplot$Expression),max(forplot$Expression)) ) +\n          xlab(\"\") + scale_size_continuous(range = c(5,5)) +\n          facet_grid(∼Cell_Types+Patients , scales = \"free\", space =\n          \"free\") + labs(color = paste(\"z-score\")) +\n          theme(axis.text.x = element_text(angle = 60, hjust=1),\n          axis.text=element_text(size=20) , axis.title.y =\n          element_text(size=25), strip.background = element_rect(colour =\n          \"white\", fill = c(\"gray\",\"darkorange3\",\n          \"gray\")), legend.text = element_text(size = 15),\n          legend.title = element_text(size = 20),legend.key.size = unit(1,\n          \"cm\")) + ylab(\"Significant GO terms\")",
    "HVG identification and pathway enrichment analysis across early and late\n      time points in immune cell types - COVID-19 case study\n    \nTiming: ∼ 10–15 min\n      In addition to the dengue data published in our earlier study,1[href=https://www.wicell.org#bib1]\n      here we also demonstrate the application of this framework on another\n      time-course scRNA-seq study. We retrieved processed scRNA-seq data from a\n      COVID-19 study,10[href=https://www.wicell.org#bib10] which was deposited on FASTGenomics\n      (https://www.fastgenomics.org/[href=https://www.fastgenomics.org/]). We selected two COVID-19 patients (“cohort 1”) with the donor IDs\n      \"C19-CB-0009″ and \"C19-CB-0012″, whose samples were obtained at\n      the same “days after symptom onset”; together with two healthy donors,\n      \"P15F″ and \"P17H\". We used the same cell type annotation as\n      initially characterized by the authors of the study.10[href=https://www.wicell.org#bib10]\nNote: Using our framework to analyze this\n      COVID-19 dataset, we observed distinct overall transcriptome profiles\n      between early and late phases of the infection in each of the cell types\n      of interest, while the differences between the two patients were\n      relatively small (Figure 3[href=https://www.wicell.org#fig3]A). Moreover, the overall\n      expression patterns of the two healthy donors were nicely grouped together\n      and clearly separated from the COVID-19 patients at all the time points\n      (Figure 3[href=https://www.wicell.org#fig3]A). We next identified HVGs and virtualized\n      their dynamic expression patterns, for different groups of biological\n      pathways that the HVGs are associated with (Figure 3[href=https://www.wicell.org#fig3]B). Interestingly, we observed clear up-regulation of the HVGs in the\n      early infection associated with “response to type I interferon”,\n      “interferon-mediated signaling pathway”, and “type I interferon-mediated\n      signaling pathway” in monocytes (Figure 3[href=https://www.wicell.org#fig3]B, labeled in\n      blue), which have also been described in the original paper,10[href=https://www.wicell.org#bib10]\n      but using a different analytical framework.10[href=https://www.wicell.org#bib10] In\n      addition to this, our analysis and visualization also revealed\n      cell-type-specific expression dynamics of the HVGs associated with certain\n      biological pathways, such as “natural killer cell mediated cytotoxicity”\n      HVGs being specifically upregulated in NK cells; “T cell receptor V(D)J",
    "recombination” HVGs being expanded in CD4+ and CD8+ T cells, and several B\n      cells-related pathways such as “B cell activation”, “humoral immune\n      response”, and “B cell mediated immunity“ being up-regulated specifically\n      in B cells at the early infection (Figure 3[href=https://www.wicell.org#fig3]B), all of\n      which have not been mentioned in the original study.10[href=https://www.wicell.org#bib10]\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2780-Fig3.jpg\n          Figure 3. The relative expression values of HVGs in each biological\n          process (BP) across two COVID-19 patients during the early time point\n          (d9; 9 days after symptom onset) and late time point (d16; 16 days\n          after symptom onset), together with two healthy controls\n        \n          (A) PCA of average gene expression in each cell type. Different colors\n          represent the days after symptom onset, while different shapes\n          represent individual samples.\n        \n          (B) Dotplot showing the relative expression levels of HVGs related to\n          each BP. The time-specific BPs described in the original paper10[href=https://www.wicell.org#bib10]\n          are labeled in blue. The NK-specific BP is highlighted in purple,\n          T-specific BP is in dark red, and B-specific BPs are in green. P1 =\n          covid-19 patient 1; P2 = covid-19 patient 2; HC = healthy controls.\n          d9 = 9 days after symptom onset; d16 = 16 days after symptom onset."
  ],
  "subjectAreas": [
    "Rnaseq",
    "Immunology",
    "Bioinformatics",
    "Systems Biology",
    "Gene Expression",
    "Single Cell"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}