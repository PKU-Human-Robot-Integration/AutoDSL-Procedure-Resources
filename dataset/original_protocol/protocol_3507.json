{
  "id": 3708,
  "origin_website": "Cell",
  "title": "Open-source computational framework for studying Drosophila behavioral phase",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nBehavior experiments\nTiming: 2–3 weeks\nPlace the tip of the CO2 gun into the vial of the flies and tilt the vial upside down. Remove the plug from the vial and place flies onto the fly pad connected to the CO2 cylinder keeping the CO2 flow to the flypad. Using a brush carefully place one fly into each glass tube and then block the entry to the tube using a small piece of yarn (CYC4) or paper (~1 cm long).\nMake sure to remove all of the flies from the stage in under 10 min to reduce overexposure to CO2, too much CO2 can be lethal to the flies. Also, when placing flies into tubes be careful not to damage the fly’s wings, legs, etc.\nOnce flies are placed into their respective tubes, insert each tube into the Trikinetics DAM2 monitor channel. Make sure to slide the tube so that food, wax, and are placed outside each channel port to avoid blocking the infrared beam.\nOnce all tubes are loaded into a monitor (maximum 32 tubes), stabilize the tubes using rubber bands as follows: Using forceps put a rubber band around a set of 16 tubes and then weave the band among these tubes by alternating the placement of the band under one tube and over the next, repeating until the tubes are secured and do not shift when the monitor is moved (see graphical abstract). Be sure to record which monitors numbers (the monitors come already numbered) correspond to each of your experimental genotypes. We also suggest labeling each monitor with the genotypes of the flies they contain.",
    "Once the fly tubes are loaded into the monitors, place them in into incubator(s) previously programmed with the desired environmental conditions. Attach a telephone cable to each monitor and feed all cables into cable splitters that converge on a single cable output for the incubator that is plugged into a computer running the DAM system.\nIdeally, an environmental monitor should be placed inside each incubator to post-hoc confirmation of environmental conditions during the experiment.\nRun the DAM System program and check that it is reading all the monitors. All monitors used in the experiment must appear as green following file scans to ensure that they are all connected. Data should be collected in 1 min bin/scan.\nAllow flies to entrain to the programmed light and or temperature cycle for five to seven days.\nStandard LD experiments consist of 12 h:12 h light dark cycles at a constant 25°C.\nOther photoperiod lengths such as 16:8, 14:10, 10:14, or 8:16 could be used as well, as long as the data are saved properly for phase analysis (see step 12: CRITICAL).\nOur temperature ramp conditions are 12 h of heating (20°C to 28°C) 12 h of cooling (28°C to 20°C) in constant darkness for 8 days.\nOnce the entrainment period ends, then adjust incubator settings to constant conditions (e.g., constant darkness and constant temperature at 25°C for 10–14 days).\nAfter the experiment ends, freeze tubes for at least 6 h to kill flies and then soak them in hot soapy water. Remove paraffin wax, flies, agar, and yarn. Wash and autoclave tubes and dry them before storing for future experiments.\nCritical:",
    "If using Percival Incubators, incubators should be set to “non-ramping” mode for standard LD experiments or “ramping” mode for temperature ramps. For temperature ramps it is important to not overcrowd the incubator. We recommend no more than 10 monitors per incubator, spaced out as much as possible. This keeps the total thermal resistance provided by the monitors, tubes, and cable remains low enough to ensure that every fly is heated and cooled by programmed daily temperature changes, thereby allowing for proper entrainment.\nThe incubator room needs to be dark and well-ventilated while the experiment is running.\nThe incubator room should be as quiet as possible and its door should have cushioning to prevent slamming.\nSaving the data\nTiming: 30 min\nAfter the experiment has been run, data must be processed using these steps.\nDownloading behavior data from incubators\nInsert an USB flash drive on the computer running DAM System software.\nOpen the DAM File Scan program:\nPress “Select Data Input Folder,” choose folder “DAMSystem3Data.”\nAdjust the Monitor Range to include the monitor numbers used for the experiment.\nCheck “verify data” and press “Scan.” Do not exit the DAM application before scanning is complete.\nThe first bin should be at midnight on the day after the experiment was loaded and the last day should be the final full day of the experiment.\nChange the “bin length” to 1 min bins.\nSet “Output Data Types” to “Monitor Counts.”\nSet “Extra Readings” to “Sum into bin.”\nIndicate the “RunName.”\nHit “Save.”\nTo minimize the chances of interfering with the data acquisition computer and avoid interfering with ongoing experiments, transfer the saved experiment to a different computer for analysis.",
    "Optional: Visualizing the data via Actograms. In the steps below we describe how to do this using Clocklab. An analysis protocol has been previously described (Fernandez et al., 2020[href=https://www.wicell.org#bib4]). Alternatively, circadian data can be analyzed using the open access R code Rhythmically (Abhilash and Sheeba, 2019[href=https://www.wicell.org#bib1]).\nOpen DAMFileScan:\nFor the input folder, use the RunName folder, i.e., “yymmdd[initials]”.\nNote: If you get the error message “no monitors found,” open the folder through your computer’s finder and rename each monitor file to “Monitor1,” “Monitor2,” etc.\nAdjust the Monitor Range to include the monitors used for the experiment.\nVerify data and Scan and adjust “Bin length” to “30 min bins.”\n“Output Data type” as “Channel Files” and “Extra Readings” as “sum into bin.”\nCheck “make channel files.”\nHit “Save.”\nOpen Clocklab:\nGo to Clocklab/Export/Preferences and select printing 4 × 4 actograms per page.\nGo to Clocklab/Export/Batch Print(graph).\nSelect the relevant channel files.\nCritical: Keep the data collection computer offline so that there is no risk of losing data collected through DAM file scan during automated updates. Note that some new operative systems may already be programmed to account for changes in daylight savings time and would switch the time even if online. This would result in the 1 min/bin data being collapsed in a 1-h window and would affect data analysis.\nProcessing the data\nTiming: 30 min\nWe provide the data files and the RMarkdown (Rmd) source file with the R code and text narrative, which can be loaded into RStudio and run by code chunk for a complete reproduction of all results and figures. This part of the paper is also posted on GitHub, where one can find the source Rmd document as well as the data files. For details and code regarding this step, see Supplemental methods, section 3.1.",
    "We use R as the programming environment and RStudio as the IDE. The following freely available software installers are available for Windows, Mac, and Linux:\nMiKTeX installers (for PDF output): http://miktex.org/download[href=http://miktex.org/download]\nR installers: http://cran.stat.ucla.edu/[href=http://cran.stat.ucla.edu/]\nRStudio installers: https://www.rstudio.com/[href=https://www.rstudio.com/]\nCritical: MiKTeX is required only for generating PDF documents from the source Rmd file inside RStudio. After the source Rmd document is loaded inside RStudio, the following R packages must be installed and loaded: tidyverse, signal, pracma, circular, scales, reshape2, svglite.\nObtaining phase values Example: Computing the evening phases for the entire sample of 32 flies on the last (5th) day of the LD cycle (LD5).\nUse the DAMFileScan111X (V1.11) to scan Monitor data (text) files and aggregate the data into 15 min bins for a certain time range.\nNote: File names must be of the form MonitorNNN.txt or MonitorNNN.csv, where NNN = 1 to 120, and files must consist of 42 columns, tab or comma delimited, containing data for 32 flies.\nCritical: The time of day for which phase is being determined should be centered on the resulting data file. In our example, lights on is 10:00AM (morning transition) and lights off is 10:00PM (evening transition). Therefore, data was saved in a +/- 12 h window relative to the evening transition on LD5, so that the evening transition (10PM = lights off) is centered on the data file. First bin: 10:15 AM on LD5 Last bin: 10:00 AM on LD6\nNote that the 10:15AM bin represents the fly activity between 10:00AM and 10:15AM, and the 10:00AM bin represents the fly activity between 09:45AM and 10:00AM. The resulting output was saved in the text file LD5APm15mCtM016.txt.",
    "Using the statistical programming language R and the Integrated Development Environment (IDE) RStudio, load the text file LD5APm15mCtM016.txt and do some initial processing before computing the evening phases.\nNote: We used the tidyverse collection of R packages for data analysis and visualizations developed by RStudio.\nLoad the text file (LD5APm15mCtM016.txt in our example) and save it to the data dataframe.\nNote: since this is a tab delimited file we use the readr package (a part of the tidyverse) function read_delim() with the second argument \"\\t\" and col_names = FALSE. If the col_types argument is not set to specify character type for column three (X3) then the 3rd column will be saved as a time column (of type hms).\nCritical: Monitor text files that will be loaded into the program should be located in the same folder as the Rmd file. Otherwise, the code must be modified to reflect the location the monitor file is stored in. The dataframe data has 96 observations for the 96 bins covering the 24 h that we have selected (centered at 10:00PM on LD5), divided into 15 min bins. It has 42 variables, where the last 32 variables (columns) are representing the 32 flies (Table 1[href=https://www.wicell.org#tbl1]).\ntable:files/protocols_protocol_427_1.csv\nRemove the first 10 columns. Because of how data are saved via DAMSystem, activity for the 32 flies is given in the last 32 columns (Column 11 (X11) represents the first fly.).\nNote: It is useful to keep column 3, which is the column of times that specify the bins. The resulting first column will be renamed (it was the 3rd column of times in the original data).\nRename the remaining fly columns.",
    "Note: The function flyname(x) takes as an argument x the name of a fly column, say X11 (for the first fly), and it returns the name fly1. We use the str_sub() function from the stringr package in the tidyverse, which extracts a substring.\nUsing the flyname() function, rename the fly columns 2:33 as fly1, fly2, etc.\nFor plotting, it is useful to add to the data a new variable state for the 96 bins with 48 light and 48 dark values, depending on which part of the light/dark cycle the bin belongs to. Table 2[href=https://www.wicell.org#tbl2] shows the first 12 columns and rows 47:50 of the resulting data. Note that the state changes from light to dark at bin 49 that corresponds to time 22:15, which captures the fly activity between 10:00PM and 10:15PM. This is an important observation for computing the evening phase.\ntable:files/protocols_protocol_427_2.csv\nVisualizing activity\nTiming: 10 min\nThe ggplot2 package from the tidyverse (Wickham and Grolemund, 2016[href=https://www.wicell.org#bib16]) was used for all visualization purposes. For details and code used in this step, see Supplemental methods, section 3.2.\nFor illustration purposes, we visualize the activity of fly1 by using bars centered at the corresponding bins obtained by seq_along(fly1), set as the x variable (Figure 1[href=https://www.wicell.org#fig1]). The bars are colored in light or dark gray based on their state value (with fill=state).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Fig1.jpg\nFigure 1. Plot of fly activity on LD5 centered at ZT12\nAverage activity plots\nTiming: 10 min\nBefore computing the row averages to get the average activity plot, dead flies should be removed. We define a fly to be “dead” if it has zero activity in every single bin. In particular, having a non-zero activity in one bin only would classify the fly as “alive.” For details and code used in this step, see Supplemental methods, section 3.3.",
    "Generate average activity plots.\nCompute the index vector of all live flies using the live_flyindex() function.\nCompute the average activity across all live flies on LD5 by taking row-wise averages.\nCreate the average activity plot with ggplot(), shown in Figure 2[href=https://www.wicell.org#fig2], using the new avg variable inside data that we created in part b.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Fig2.jpg\nFigure 2. The average activity of all live flies on LD5\nSmoothing the data\nTiming: 30 min\nA filter applied on the fly counts removes the high frequencies in the spectrum, i.e., a low-pass filter that smooths out the data.\nApply a Butterworth filter. For details and the code used in this step, see Supplemental methods, section 3.4. The Butterworth filter is a recursive filter of the form: imgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Si1.jpg where uj, j = 1, ..., N is the original signal, and vj, j = 1, ..., N is the filtered signal. Note that this filter depends not only on the current and the previous P original data points, but also on the previously filtered Q points, relative to the current point. Thus, the current filtered value depends not only on a weighted average of the unfiltered values (first sum), but also recursively on the previously computed Q filtered values (second sum). The art of filter design is to compute the values of the P + 1 parameters ap, p = 0, ..., P and the Q parameters bq, q = 0, ..., Q so that the frequency requirements are met. We use a 2nd order low-pass Butterworth filter with P = Q = 2. This filter is causal since it uses only past data and this leads to a phase delay in the filtered data. The phase delay can be removed by additional filtering backward in time.",
    "To compute the Butterworth filter weights, use the function butter() from the signal package.\nThen, use the function filtfilt(), which applies a linear digital filter twice, once forward and once backward in time. The double filter has zero-phase delay and a filter order twice that of the original. Having a zero-phase delay is essential for the phase computations in the context of fly activity.\nFigure 3[href=https://www.wicell.org#fig3] shows the results of applying single and double filters to the noisy data generated by a pure sinusoid. The double filter traces very closely the original pure sinusoidal signal used to generate the noisy data, except around the end points. The phase delay of the single filter is also quite clear.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Fig3.jpg\nFigure 3. Single and double Butterworth filters applied to noisy data generated from a pure sinusoid\nObtaining the evening phase of a single fly\nTiming: 30 min\nA Butterworth filter was applied to smooth out the fly data and compute the evening phase for a single fly using a window centered at 10:00 PM on LD5. For the 15 min bin data the 49th bin was used (first bin in dark state), to represent the evening phase bin relative to which the phase shift was computed. For details and code used in this step, see Supplemental methods, section 3.5.\nTo generate the Butterworth filter parameters, use the butter() function from the signal R package. The arguments are:\nn is the filter order. We first explore the data with n=1,2 for a first and second order filter.",
    "W is the critical frequency of the filter and it must be a scalar for a low-pass filter. For digital filters, W must be between 0 and 1, where 1 is the Nyquist frequency. We start our explorations with either W=0.1 (10 Hz) or W=0.2 (5 Hz).\ntype is set to “low” for a low-pass filter.\nplane is set to “z” for a digital filter.\na, which holds the autoregressive (AR) polynomial coefficients for the recursive part.\nB, which holds the moving average (MA) polynomial coefficients for the weighted sum part.\nCompute the evening phase for a single fly.\nIn the example provided, we found all peaks in the filtered data using the findpeaks() function from the pracma R package and then found the peak whose time index minimizes the distance from the time index of ZT12. Distance is given as the absolute value of the difference.\nWe added to the original data the smoothed data for the single fly, using the mutate() function and applying the double filter filtfilt() to the fly data using the Butterworth filter, described above. Then, we use the findpeaks() function from the pracma R package to find the peak closest to lights off (ZT12). An evening phase value of −0.5 h was obtained for fly18.\nPlotting the raw, unfiltered data with the phase value\nTiming: 15 min",
    "Use the R function phasePlot()which generates plots like one shown in Figure 4[href=https://www.wicell.org#fig4], which includes the raw activity data for fly18. The raw data was smoothed using a first order filter with 5 Hz critical frequency (W=0.2). The filtered data for this particular fly is plotted using a line plot in blue color. Note that the algorithm does not pick the highest peak of activity, but the peak closest to lights off as it can be seen in the case of fly18, where the phase corresponds to the second-highest peak.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Fig4.jpg\nFigure 4. Raw and filtered data for a single fly and its evening phase on LD5 (Figure 6 in supplemental experimental procedures)\nFor details and code used in this step, see Supplemental methods, section 3.6. For detailed information regarding the full phase sample in LD, see Supplemental methods, section 3.7.\nPhase analysis on DD1\nTiming: 30 min\nFor details and code used in this step, see Supplemental methods, section 4 (subsections 4.1 and 4.2)\nLoad in RStudio the DD1 data file DD1APm15mCtM016.txt obtained from DAMFileScan111X. Note that the DD1 data are centered at 10:00PM on DD1. The resulting dataframe has 96 observations for the 96 bins covering the 24 h that we have selected, divided into 15 min bins. It has 42 variables, where the last 32 variables (columns) are representing the 32 flies. Table 3[href=https://www.wicell.org#tbl3] shows the first 12 columns and the first 4 rows of the data. Column 11 (X11) represents the first fly on DD1.\ntable:files/protocols_protocol_427_3.csv\nSupplemental methods, Table 4.\nNext, we performed the same data processing that we did for the LD5 data. Table 4[href=https://www.wicell.org#tbl4] shows the first 12 columns and a slice of rows 47:50 around 10:00 PM of our data.\ntable:files/protocols_protocol_427_4.csv\nSupplemental methods, Table 5.",
    "Note that the table indicates “light” or “dark” for clarity but this refers to subjective day and subjective night, respectively (free running conditions in Drosophila are constant darkness and constant temperature).\nTo illustrate, we show in Figure 5[href=https://www.wicell.org#fig5] the evening phase obtained for fly2, using the optimal filtering parameters obtained by calibrating the filter to the LD5 data. The distribution of the phase sample on DD1 obtained with optimal filter parameters is show in Figure 6[href=https://www.wicell.org#fig6].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Fig5.jpg\nFigure 5. Raw and filtered activity for fly2 and its evening phase on DD1 with optimal filter parameters (Figure 11 in supplemental experimental procedures)\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Fig6.jpg\nFigure 6. The frequency histogram of the phase sample on DD1 (Figure 12 in supplemental experimental procedures)\nCircular data analysis and visualizations\nTiming: 30 min\nIn this section, we illustrate the circular data analysis (Batschelet, 1981[href=https://www.wicell.org#bib2])(Levine et al., 2002[href=https://www.wicell.org#bib8], Pewsey et al., 2013[href=https://www.wicell.org#bib11]) and visualization functionality of the R package circular, which can be installed in RStudio from CRAN. For illustration purposes, we use the actual phase data from our original paper (Fernandez et al., 2020[href=https://www.wicell.org#bib4]). For details and code used in this step, see Supplemental methods, section 5. A good introduction to the analytical aspects of circular statistics can be found in (Pewsey et al., 2013[href=https://www.wicell.org#bib11]), and the R package circular is illustrated in (Batschelet, 1981[href=https://www.wicell.org#bib2]).\nData were obtained from a system entrained to a 24 h environmental cycle (lights on=ZT00). Negative phases represent increased activity (anticipation) before lights on or lights off transitions, thus if a transition was anticipated there would be a negative phase value. On the other hand, the positive phases represent a delay in response relative to ZT00 time set at “midnight” on our clock.",
    "Import the raw phase data into RStudio. The phases dataframe has 7 variables and 64 observations, including NAs. The variables represent the phases for different genotypes. For details and code used in this step, see Supplemental methods, section 5.1.\nTransform the phases into proper hours by taking the original phases modulo 24, and then converting the hours into radians. For details and code used in this step, see Supplemental methods, section 5.2.\nThe zero-hour ZT00 is set at 24 h, or 2π radians. The conversion formula is given by:\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Si11.jpg\nwhere ϕ0 is the raw phase, (ϕ0 mod 24) is taking the raw phase modulo 24, which gives a proper hour on the 24 h clock, and ϕ1 is the converted angular phase, given in radians. We then need to create a circular data object, using the function circular() from the circular package, which contains the phases as angles measured in radians on a 24 h clock.\nWe illustrate the application of the Watson-Wheeler Test for Homogeneity of Angles and the Watson Two-Sample Test of Homogeneity to determine whether the phases for control and experimental lines are significantly different. Watson’s non-parametric two-sample statistic U2 provides a criterion to test whether two samples differ significantly from each other. For both tests, the null hypothesis is that the two samples of angles come from the same underlying population.\nGenerate circular data plots. Applying the generic plot() function to a circular data object, creates a circular data plot. For details and code used in this step, see Supplemental methods, section 5.3.",
    "Figure 7[href=https://www.wicell.org#fig7] shows the plot for the first phase variable (the genotype PdfGal4) in the circular data object. Inside plot(), the argument stack = TRUE allows for different observations corresponding to the same (or close enough) angle to be stacked on the top of each other.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Fig7.jpg\nFigure 7. Pdf-Gal4 phases in radians (Figure 13 in supplemental experimental procedures)\nThe circular mean computes the mean direction of a circular variable. Each angular observation in the circular variable is treated as a unit vector, or a point on the unit circle. The resultant vector of all observations is computed and the direction of the resultant vector is returned as the circular mean, which is implemented in the circular package as a method for the generic function mean(), applied to a circular data object.\nSince the phase data have NA values, we use the na.rm = TRUE argument to remove the NA values.\nNote: NA stands for \"not available,\" and it is a reserved symbol in R used to represent a missing value. For example, the phases corresponding to dead flies would be computed as NAs, because there are no data available for dead flies.\nFor details and code used in this step, see Supplemental methods, section 5.4.\nVisualize the circular mean as the mean direction of a circular variable by plotting an arrow that represents the resultant mean direction vector, using arrows.circular(). The call arrows.circular(data) displays the vectors on the unit circle corresponding to the angles (in radians) in the circular variable data, relative to the zero on the 24 h clock. To display the mean resultant vector, we use the mean resultant length of the circular variable, computed with rho.circular(). This is shown in Figure 8[href=https://www.wicell.org#fig8]\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Fig8.jpg",
    "Figure 8. Mean direction, shown by the blue arrow (Figure 15 in supplemental experimental procedures)\nThe rose diagram represents frequencies in the circular data by areas of sectors on the unit circle and can be added to an existing circular plot using the rose.diag() function. For more details on the many arguments this function has, please refer to the circular package documentation. There are two conventions in the literature regarding rose diagrams. Here we use the default convention of the rose.diag() function, where the radius of a segment is taken to be the square root of the relative frequency. With this convention, when we compare segments in a rose diagram, the ratio of the areas of two segments is the same as the ratio of the relative frequencies, since the segment areas are proportional to the radius squared. See the supplement for more details.\nAdd a rose diagram to a circular plot as well as an arrow pointing in the mean circular direction of the circular data, as shown in Figure 9[href=https://www.wicell.org#fig9]. In the rose.diag() function, the argument bins=16 controls the number of segments, and the argument prop=1.1 scales the size of all segments relative to the outer circle, with larger values increasing the size of the segments, having a default value of one. For details and code used in this step, see Supplemental methods, section 5.5.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/427-Fig9.jpg\nFigure 9. Mean direction vector (in blue), and a rose diagram of PdfGal4 (Figure 16 in supplemental experimental procedures)"
  ],
  "subjectAreas": [
    "Metabolism",
    "Neuroscience",
    "Model Organisms",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}