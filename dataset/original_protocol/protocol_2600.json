{
  "id": 2746,
  "origin_website": "Cell",
  "title": "Protocol to analyze dysregulation of the eIF4F complex in human cancers using R software and large public datasets",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nThe package includes one initiation step, and seven major analysis steps. User can execute each analysis step with one exported function that calls a group of internal functions for data process, data analysis and plotting to achieve a set of analyses. This package organizes all functions related to each analysis step together as one R script under ∼/eIF4F.analysis/R (file names in bold, Figure 2[href=https://www.wicell.org#fig2]E). Although data process, analysis and result plotting functions are set as internal functions, users can access their source code from R scripts and modify the input parameter outside this package for their own usages. The following section explains the definition and organization of each function. The detailed documentation of all (exported and internal) functions within the package is available at the following weblink: https://a3609640.github.io/eIF4F.analysis/reference/index.html[href=https://a3609640.github.io/eIF4F.analysis/reference/index.html].\nAnalysis.R contains ten exported functions in the package to initialize package and to execute all analyses presented in Wu and Wagner (2021).1[href=https://www.wicell.org#bib1] Users can simply execute the following command in RStudio to get all analyses performed and results stored under ∼/eIF4F.analysis/eIF4F_output.\n> source(\"∼/eIF4F.analysis/Script/Analysis.R\")\nStep-1: Library initialization\nTiming:  < 5 min\nInitialization processes rely on three exported functions to define subdirectories for output data, to define the graphic formats (font size and style), and to load data from downloaded data files. The definitions of three initialization functions were stored in ∼/eIF4F.analysis/R/Load.R.\nRun the following command line to create the output directories to store the output files.\n> initialize_dir()\nNote: initialize_dir() creates sub-directories under ∼/eIF4F.analysis/eIF4F_output (Figure 2[href=https://www.wicell.org#fig2]F) to store the output results for each analysis step.\nRun the following command line to create variables that define font type, size, and orientation for plotting.\n> initialize_format()\nRun the following command line to acquire omics datasets from the download data files.\n> initialize_data()",
    "Note: initialize_data() is a wrapper of five data initialization functions that import, trim, clean up and merge datasets from the download data files. These data initialization functions have side effects that populate twelve global variables that process and merge omics and annotation data by sample IDs for the following analysis steps. The data contained by these global variables are available in the form of data frames, as input for our analysis functions, but do not show on the user’s workspace. For users to access them, the data initialization step saves twelve global variables as csv files under ∼/eIF4F.analysis/eIF4F_output/ProcessedData folder (Figure 2[href=https://www.wicell.org#fig2]G).\nAlternatives: Five individual data initialization functions are also accessible to users for execution. Instead of running the wrapper function initialize_data() to generate all twelve global variables at once, users can generate global variables related to each analysis function with the following individual data initialization functions.\n> initialize_cnv_data()\n> initialize_RNAseq_data()\n> initialize_survival_data()\n> initialize_proteomics_data()\n> initialize_phosphoproteomics_data()\ninitialize_cnv_data() reads all CNV related datasets from TCGA, with a few internal functions. The implementation details of each operation are in ∼/eIF4F.analysis/R/CNV.R. initialize_cnv_data() sets the values of three global variables TCGA_CNV_value, TCGA_CNV_sampletype and TCGA_CNVratio_sampletype for CNV analysis (step-2) and stores them as “TCGA_CNV_value.csv”, “TCGA_CNV_sampletype.csv” and “TCGA_CNVratio_sampletype.csv” under the ProcessedData folder.\nTCGA_CNV_value contains the unthresholded CNV value data of tumors from all TCGA cancer types combined, and comes from the dataset, \"Gistic2_CopyNumber_Gistic2_all_data_by_genes\".\nTCGA_CNV_sampletype contains the threshold CNV dataset of tumors from all combined TCGA cancer types. It comes from two datasets: \"Gistic2_CopyNumber_Gistic2_all_thresholded.by_genes\", and the annotation dataset \"TCGA_phenotype_denseDataOnlyDownload.tsv\".\nTCGA_CNVratio_sampletype contains the data of CNV ratios in tumors vs. adjacent normal tissues from individual TCGA cancer types. It comes from two datasets: \"broad.mit.edu_PANCAN_Genome_Wide_SNP_6_whitelisted.gene.xena\", and the annotation dataset, \"TCGA_phenotype_denseDataOnlyDownload.tsv\".",
    "initialize_RNAseq_data() reads the recomputed RNAseq data from both TCGA and GTEx. The implementation details of each operation are within the ∼/eIF4F.analysis/R/DEG.R file. initialize_RNAseq_data() sets one global variable TCGA_GTEX_RNAseq_sampletype for the gene expression analysis (step-3), PCA (step-5) and correlating gene analysis (step-6), and stores TCGA_GTEX_RNAseq_sampletype as “TCGA_GTEX_RNAseq_sampletype.csv” in the ProcessedData folder.\nTCGA_GTEX_RNAseq_sampletype comes from the recomputed RNAseq dataset from both TCGA and GTEx, \"TcgaTargetGtex_RSEM_Hugo_norm_count\", and the annotation dataset \"TcgaTargetGTEX_phenotype.txt\".\ninitialize_survival_data() reads the RNAseq and patient survival data from TCGA. The implementation details of this operation are within the ∼/eIF4F.analysis/R/Survival.R file. This function sets the global variable TCGA_RNAseq_OS_sampletype for survival analysis (step-4), and store TCGA_RNAseq_OS_sampletype as “TCGA_RNAseq_OS_sampletype.csv” inside the ProcessedData folder.\nTCGA_RNAseq_OS_sampletype comes from three datasets: the RNAseq dataset \"EB++AdjustPANCAN_IlluminaHiSeq_RNASeqV2.geneExp.xena\", the survival dataset \"Survival_SupplementalTable_S1_20171025_xena_sp\" and the annotation dataset \"TCGA_phenotype_denseDataOnlyDownload.tsv\".\ninitialize_proteomics_data() reads the proteomics related data from CCLE and CPTAC LUAD, including: proteomics data, annotation data for cancer types, RNAseq data for the correlation analysis on protein RNA levels (step-7 and step-8). The implementation details of this operation are within the ∼/eIF4F.analysis/R/RNAProCorr.R file.\nThis function sets three global variables for the CCLE data: (1) CCLE_RNAseq contains the RNAseq data derived from \"CCLE_expression_full.csv\", (2) CCLE_Anno contains the annotation data derived from \"sample_info.csv\", and (3) CCLE_Proteomics contains the protein expression level data derived from \"protein_quant_current_normalized.csv\". This function stores CCLE_RNAseq, CCLE_Anno and CCLE_Proteomics as “CCLE_RNAseq.csv”, “CCLE_Anno.csv”, and “CCLE_Proteomics.csv” inside the ProcessedData folder.\nThis function sets two global variables as data frames for the CPTAC LUAD data published in Gillette et al. (2020)7[href=https://www.wicell.org#bib7]: (1) CPTAC_LUAD_Proteomics contains proteomics data from \"Protein.xlsx\", and (2) CPTAC_LUAD_RNAseq contains RNAseq data from \"RNA.xlsx\". This function stores CPTAC_LUAD_Proteomics and CPTAC_LUAD_RNAseq as “CPTAC_LUAD_Proteomics.csv” and “CPTAC_LUAD_RNAseq.csv” files in the ProcessedData folder.",
    "initialize_phosphoproteomics_data() reads phospho-proteomics-related data from CPTAC LUAD, and sets two global variables with data frames for the protein expression analysis (step-8). The implementation details of this operation are in the ∼/eIF4F.analysis/R/Proteomics.R file. This function stores two global variables CPTAC_LUAD_Phos and CPTAC_LUAD_Clinic_Sampletype as “CPTAC_LUAD_Phos.csv” and “CPTAC_LUAD_Clinic_Sampletype.csv” in the ProcessedData folder.\nCPTAC_LUAD_Phos contains the phosphoproteomics data published in Gillette et al. (2020)7[href=https://www.wicell.org#bib7] as \"Phos.xlsx\".\nCPTAC_LUAD_Clinic_Sampletype contains the annotation data and is derived from \"S046_BI_CPTAC3_LUAD_Discovery_Cohort_Clinical_Data_r1_May2019.xlsx\" and \"S046_BI_CPTAC3_LUAD_Discovery_Cohort_Samples_r1_May2019.xlsx\".\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2259-Fig3.jpg\nFigure 3. Illustration of internal code structure for analysis functions\n(A) The internal code structure for initialize_data().\n(B) The internal code structure for EIF4F_CNV_analysis().\n(C) The internal code structure for EIF4F_DEG_analysis().\n(D) The internal code structure for EIF4F_Survival_analysis().\nCritical: The first run of data initialization functions creates and stores the processed data from download files. Following runs of the initialization functions will check the existence of processed data files and read them, which take a much shorter time to complete than the first run. Figure 3[href=https://www.wicell.org#fig3]A summarizes the internal code structure for five data initialization functions, and shows twelve global variables in dark gray boxes.\nStep-2: Analyze the copy number variation (CNV) status of EIF4F genes\nTiming:  < 1 min\nThis step performs three types of analyses on CNV statuses of EIF4F genes across TCGA tumors and creates the analysis results both on screen and as pdf files stored in ∼/eIF4F.analysis/eIF4F_output/CNV folder.\nRun the following command line in RStudio.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2259-Fig4.jpg\nFigure 4. Illustrations of internal code structures for analysis functions\n(A) The internal code structure for EIF4F_PCA().\n(B) The internal code structure for EIF4F_Corrgene_analysis().\n(C) The internal code structure for EIF4F_RNA_pro_correlation().\n(D) The internal code structure for EIF4F_Proteomics_analysis().\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2259-Fig5.jpg\nFigure 5. Example CNV analysis outputs from EIF4F_CNV_analysis()",
    "(A) The stacked bar plot shows the overall CNV statuses for EIF4F genes in all tumors combined from 33 TCGA cancer types. Percentage contributions of each group are labeled on the bars.\n(B) The stacked bar plot shows the CNV status for a single EIF4F gene in individual TCGA cancer types.\n(C) The matrix plot shows the co-occurrence of the EIF4F CNV statuses. Each cell is labeled with the Pearson correlation coefficient, and ‘‘X’’ indicate statistical insignificance (p > 0.05, p values not shown).\n(D) The boxplots show, across 33 TCGA cancer types, ratios of EIF4G1 CNV values in malignant tumors to its average CNV value in normal adjacent tissues (NATs) of the same cancer type.\nAdapted from Wu and Wagner (2021).1[href=https://www.wicell.org#bib1]\n> EIF4F_CNV_analysis()\nNote: EIF4F_CNV_analysis() is a wrapper function of three internal composite functions that take input data frames and call internal functions for analysis. Figure 3[href=https://www.wicell.org#fig3]B summarizes the internal code structure for this step. The detailed definitions of all internal functions are in ∼/eIF4F.analysis/R/CNV.R.\nNote: .plot_bargraph_CNV_TCGA() takes the data frame TCGA_CNV_sampletype and calculates the frequency of each CNV status for EIF4F genes in all tumors combined from 33 TCGA cancer types. Its output is a stacked bar plot that ranks the EIF4F gene by the frequencies of copy number gain (Figure 5[href=https://www.wicell.org#fig5]A). .plot_bargraph_CNV_TCGA() also calculates the frequency of CNV status from individual TCGA cancer types. Its output is a number of stacked bar plots, in which cancer types are listed in the alphabetical order (e.g., Figure 5[href=https://www.wicell.org#fig5]B).",
    "Note: .plot_matrix_CNVcorr_TCGA() takes the data frame TCGA.CNV.value and generates a correlation matrix with the unthresholded CNV value data of tumors from all TCGA cancer type combined. This function calculates the correlation coefficients between all pairs of EIF4F genes, and plots the correlation matrix (Figure 5[href=https://www.wicell.org#fig5]C), using the cor.mtest() and corrplot() functions from “corrplot” package.\nNote: .plot_boxgraph_CNVratio_TCGA() takes the data frame TCGA_CNVratio_sampletype and generates boxplots for CNV ratios in tumors vs. normal adjacent tissues (NATs) from individual TCGA cancer types. This function produces a CNV ratio boxplot for each gene in individual TCGA cancer types (e.g., Figure 5[href=https://www.wicell.org#fig5]D).\nStep-3: Compare the gene expression and ratio of EIF4F genes\nTiming:  < 1 min\nThis step compares the EIF4F RNA abundances and ratios across TCGA tumors, and saves the results in the ∼/eIF4F.analysis/eIF4F_output/DEG folder. In this step, means of log-transformed gene expression values or RNA ratios are calculated in different samples, and compared by t-test.\nRun the following command line in RStudio.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2259-Fig6.jpg\nFigure 6. Example expression analysis outputs from EIF4F_DEG_analysis()\n(A) The boxplot represents the comparison of RNAseq expressions across different cancer types.\n(B) The box and whisker plot shows corresponding mRNA expression of the same gene in tumor samples and normal adjacent tissues (NATs).\n(C) The violin plots show the indicated mRNA expression (transcripts per million), in all TCGA cancer patient samples combined. The two-tailed Student’s t tests were performed. ns, not significant; ∗P ≤ 0.05; ∗∗p ≤ 0.01; ∗∗∗p ≤ 0.001; ∗∗∗∗p ≤ 0.0001.\nAdapted from Wu and Wagner (2021).1\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2259-Fig7.jpg\nFigure 7. Example gene expression ratio analysis outputs from EIF4F_DEG_analysis()\n(A) The boxplots depict ratios of RNA counts between two genes, computed from each sample of a particular cancer type, for tumors and NATs considered separately.",
    "(B) The violin plots compare RNA ratios within metastatic tumors, primary tumors, or NATs in all 33 TCGA cancer study groups combined. Dashed lines mark the ratios of 1:1 and 4:1 in all panels. The two-tailed Student’s t tests were performed. ns, not significant; ∗p ≤ 0.05; ∗∗p ≤ 0.01; ∗∗∗p ≤ 0.001; ∗∗∗∗p ≤ 0.0001.\nAdapted from Wu and Wagner (2021).1[href=https://www.wicell.org#bib1]\n> EIF4F_DEG_analysis()\nNote: EIF4F_DEG_analysis() is a wrapper function of two internal composite functions that take input data frames and call internal functions for analysis. Figure 3[href=https://www.wicell.org#fig3]C summarizes the internal code structure for this step. The detailed definitions of all internal functions are in ∼/eIF4F.analysis/R/DEG.R.\nNote: .plot_boxgraph_RNAseq_TCGA() takes the data frame TCGA_GTEX_RNAseq_sampletype and performs three analyses on RNAseq data. It compares the RNA abundance of all EIF4F genes in tumors from 33 TCGA cancer types in a box plot (Figure 6[href=https://www.wicell.org#fig6]A). Then it compares the expression of each EIF4F gene in tumors vs. NATs (e.g., Figure 6[href=https://www.wicell.org#fig6]B). Finally, it compares the RNA expression in primary, metastatic tumors vs. NATs from all combined TCGA cancer types to produce violin plots (Figure 6[href=https://www.wicell.org#fig6]C).\nNote: .plot_boxgraph_RNAratio_TCGA() takes the data frame TCGA_GTEX_RNAseq_sampletype to calculate the RNA ratios of input genes within each TCGA sample, and performs two analyses on the RNA ratios. It first compares RNA ratio in tumors vs. NATs from individual TCGA cancer types by boxplots (e.g., Figure 7[href=https://www.wicell.org#fig7]A). It then compares RNA ratios in primary, metastatic tumors vs. NATs from all combined TCGA cancer types to produce violin plots (Figure 7[href=https://www.wicell.org#fig7]B).\nStep-4: Correlate EIF4F gene expression to patient survival probability\nTiming:  < 1 min\nThis step performs two types of survival analyses on EIF4F gene expression in TCGA tumors, and output results on screen and to the ∼/eIF4F.analysis/eIF4F_output/Survival folder.\nRun the following command line in RStudio.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2259-Fig8.jpg",
    "Figure 8. Example survival analysis outputs from EIF4F_Survival_analysis()\n(A) The KM plot of survival probabilities of TCGA patients with cancer according to mRNA expressions of EIF4G1 in their tumors. Two groups of patients with the top or bottom 20% of gene expression in their tumors were selected from all 10,235 TCGA patients with cancer. Statistical significance of differences in survival probabilities between the two groups was determined by p values yielded from log-rank tests. The shaded areas around each curve depict a 95% confidence region for that curve.\n(B) The KM plot of survival probabilities of TCGA patients with lung adenocarcinoma according to mRNA expressions of EIF4G1 in their tumors. Two groups of patients with the top or bottom 20% of gene expression in their tumors were selected from 508 TCGA patients with lung adenocarcinoma.\n(C) Univariable Cox proportional-hazards regression models for expression of translation initiation genes in all 10,235 patients with cancer from TCGA. The p value indicates the statistical significance of association between gene expression and survival (i.e., a significant fit).\nAdapted from Wu and Wagner (2021).1[href=https://www.wicell.org#bib1]\n> EIF4F_Survival_analysis()\nNote: EIF4F_Survival_analysis() is a wrapper function to call two internal composite functions that take input data frames and call internal functions for analysis. Figure 3[href=https://www.wicell.org#fig3]D summarizes the internal code structure for this step. The detailed definitions of all internal functions are in ∼/eIF4F.analysis/R/Survival.R.",
    "Note: .plot_KM_RNAseq_TCGA() takes the data frame TCGA_RNAseq_OS_sampletype and performs Kaplan-Meier (KM) analysis to associate survival probabilities with gene expression. This function takes arbitrary gene expression cutoff, 0.2 for 20% or 0.3 for 30%, to stratify the patient groups based on the top or bottom precents of gene expression within their tumors. This function performs KM analysis on all combined TCGA cancer types (e.g., Figure 8[href=https://www.wicell.org#fig8]A) or individual cancer type such as “lung adenocarcinoma” (e.g., Figure 8[href=https://www.wicell.org#fig8]B). This function imports the survfit() and survdiff() functions from the “survival” package to analyze the survival probabilities of patient groups, and produces the KM curve plots.\nNote: .plot_CoxPH_RNAseq_TCGA() takes the data frame TCGA_RNAseq_OS_sampletype, and quantitatively relates patient survival and gene expression in tumors by the Cox proportional-hazards (PH) regression method. This function can perform survival analyses on all combined TCGA cancer types or individual cancer type such as “lung adenocarcinoma” as an argument. The function performs both univariable Cox-PH analysis using a single gene expression as the dependent variable (e.g., Figure 8[href=https://www.wicell.org#fig8]C), and multivariable Cox-PH analysis to model patient survival and expressions of all initiation factors together. This composite function imports the analyse_multivariate() function from the “survivalAnalysis” package for regression model. Proportional hazard assumptions of Cox Regression are tested by coxph() and cox.zph() functions from the “survival” package. The resulting plots are produced with the forestplot() function in the “forestplot” package.\nStep-5: Principal component analysis on co-variation of EIF4F expression\nTiming:  < 1 min\nThis step performs the principal component analyses (PCA) on EIF4F expression in GTEx healthy tissues, or/and TCGA tumors, and output results to the ∼/eIF4F.analysis/eIF4F_output/PCA folder.\nRun the following command line in RStudio.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2259-Fig9.jpg\nFigure 9. Example principal component analysis outputs from EIF4F_PCA()",
    "(A) PCA of RNA-seq-derived counts of EIF4G1, EIF4A1, EIF4E, EIF4EBP1, PABPC1, MKNK1, and MKNK2 from 7,388 tissue samples of various healthy tissue types in GTEx. Tissue types were observations, colored for visualization but not used to construct PCs.\n(B) The matrix plot shows the cos2 value for the contribution of each gene to each PC, from the PCA of 7,388 tissue samples of various healthy tissue types in (A).\n(C) PCA of normalized RNA-seq-derived counts of indicated genes from 9,162 primary and 392 metastatic tumors from TCGA and 7,388 healthy tissue samples from GTEx. Sample types were colored after analysis, for visualization.\n(D) The matrix plot shows the cos2 value for the contribution of each gene to each PC, from the PCA of TCGA tumor samples and GTEx normal tissue samples in (C).\n(E) Healthy tissue selection from (C). The tissue types were not used as variables to construct PCs, but were colored afterwards for visualization.\n(F) PCA of standardized RNA-seq-derived counts of indicated genes from 1,011 primary lung tumors (517 LUADs and 494 LUSCs) and 109 NATs from TCGA LUAD and LUSC study groups, and 287 healthy lung tissues from GTEx. Sample types were colored after analysis, for visualization.\nAdapted from Wu and Wagner (2021).1[href=https://www.wicell.org#bib1]\n> EIF4F_PCA()\nNote: EIF4F_PCA() is a wrapper function of two internal composite functions that take input data frames and call internal functions for analysis. Figure 4[href=https://www.wicell.org#fig4]A summarizes the internal code structure for this step. The detailed definitions of all internal functions are in ∼/eIF4F.analysis/R/PCA.R.",
    "Note: .plot_PCA_TCGA_GTEX() takes the data frame TCGA_GTEX_RNAseq_sampletype and selects RNAseq data of three sample types: TCGA primary tumors, TCGA metastatic tumors, or GTEx healthy tissues. It performs separate PCA on EIF4F expression within the selected sample types and produces PCA results as biplots (e.g., Figure 9[href=https://www.wicell.org#fig9]A), scree and matrix plots (e.g., Figure 9[href=https://www.wicell.org#fig9]B). This function call also performs PCA on combined samples of all TCGA primary tumors, TCGA metastatic tumors and GTEx healthy tissues, which produces biplots (e.g., Figure 9[href=https://www.wicell.org#fig9]C), scree and matrix plots (e.g., Figure 9[href=https://www.wicell.org#fig9]D), as well as subset biplots that label only cancer types or healthy tissue types (e.g., Figure 9[href=https://www.wicell.org#fig9]E). This function imports PCA() function from the “FactoMineR” package for PCA, and fviz_pca_biplot(), fviz_eig(), get_pca_var() functions from the “factoextra” packages to produce biplots, scree and matrix plots.\nNote: .plot_PCA_TCGA_GTEX_tumor() takes the data frame TCGA_GTEX_RNAseq_sampletype and selects RNAseq data from one specific TCGA cancer type and its matched healthy tissue from GTEx. This function performs PCA on EIF4F expression within the selected sample types and generates biplots (e.g., Figure 9[href=https://www.wicell.org#fig9]F), scree and matrix plots for PCA results.\nNote: .plot_PCA_CPTAC_LUAD() takes the data frame CPTAC_LUAD_Proteomics and selects proteomics data of input gene list. Due to the missing proteomics data for some inquired initiation proteins in the dataset, this function performs imputed PCA with the estim_ncpPCA() function from the “missMDA” package.\nStep-6: Analyze the correlating genes (CORs) of EIF4F subunits\nTiming:  < 30 min\nThis step analyzes the correlating genes of each EIF4F subunits from tumor or healthy samples, and outputs results to the ∼/eIF4F.analysis/eIF4F_output/COR folder.\nRun the following command line in RStudio.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2259-Fig10.jpg\nFigure 10. Example correlation gene analysis outputs from EIF4F_Corrgene_analysis()",
    "(A) Pearson’s correlation coefficients between EIF4F (EIF4E, EIF4G1, EIF4A1, or EIF4EBP1) and 58,582 other genes were calculated separately across 1,122 lung tumors from LUSC and LUAD TCGA study groups, or across 287 healthy lung tissues from GTEx. Genes with significant positive (R > 0.3) or negative (R < -0.3) correlations were selected for analysis. The Venn diagrams show overlapping posCOR counts for EIF4F genes in healthy lungs.\n(B) The bar plots show the numbers of posCORs identified for each EIF4F gene in tumors or in healthy tissues.\n(C) The heatmap shows the correlation strengths of posCORs and negCORs for EIF4E, EIF4G1, EIF4A1, and EIF4EBP1 in healthy lungs and lung tumors.\n(D) The dot plot shows the enriched pathways in three clusters (K-means) of the heatmap (C) yielded by REACTOME pathway analysis.\nAdapted from Wu and Wagner (2021).1[href=https://www.wicell.org#bib1]\n> EIF4F_Corrgene_analysis()\nNote: EIF4F_Corrgene_analysis() is a wrapper function to call one internal composite function that takes input data frames and calls internal functions for analysis. Figure 4[href=https://www.wicell.org#fig4]B summarizes the internal code structure for this step. The detailed definitions of all internal functions are in ∼/eIF4F.analysis/R/COR.R.\nNote: .plot_Corr_RNAseq_TCGA_GTEX() takes the data frameTCGA_GTEX_RNAseq_sampletype and selects RNAseq data from two sample types: TCGA tumors, or GTEx healthy tissues. This function separately identifies correlating genes (CORs) of EIF4E, EIF4A1, EIF4G1, and EIF4EBP1 from tumor samples or from healthy tissues. The significant CORs for each EIF4F subunit are identified and classified as positive or negative CORs (posCORs and negCORs). This function analyzes the overlap posCORs or negCORs of four EIF4F subunits from tumor samples or healthy tissues as Venn plots (e.g., Figure 10[href=https://www.wicell.org#fig10]A). This function counts the numbers of posCORs and negCORs, and plots them in bar graphs for comparison (e.g., Figure 10[href=https://www.wicell.org#fig10]B).",
    "Note: .plot_Corr_RNAseq_TCGA_GTEX() merges tumor and healthy correlation data, and clusters correlation strengths by similarity in heatmaps (e.g., Figure 10[href=https://www.wicell.org#fig10]C), using the HeatmapAnnotation() and draw() functions from the “ComplexHeatmap” package. Then this function extracts the gene lists identified in the clustering analysis with the row_order() function from “ComplexHeatmap”. Finally, this function performs enriched pathway analysis on the extracted gene lists using the compareCluster() function from the “clusterProfiler” package, and produces dot plots (Figure 10[href=https://www.wicell.org#fig10]D as an example).\nCritical: .plot_Corr_RNAseq_TCGA_GTEX() function only applies to EIF4F and related genes.\nStep-7: Analyze the correlation between RNA and protein expression\nTiming:  < 1 min\nThis step examines the RNA and protein expression correlation in CCLE and CPTAC lung adenocarcinoma (LUAD) datasets, and outputs results to the ∼/eIF4F.analysis/eIF4F_output/RNApro folder.\nRun the following command line in RStudio.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2259-Fig11.jpg\nFigure 11. Example protein RNA correlation analysis outputs from EIF4F_RNA_pro_correlation() function, and example differential (phospho)protein expression analysis outputs from EIF4F_Proteomics_analysis()\n(A) The scatter plot shows the positive correlation between protein and mRNA expression levels of EIF4G1 across 109 LUADs from CPTAC. The significance of each correlation is indicated with a p value.\n(B) The scatter plot shows the correlation of eIF4G1 and eIF4A1 protein expression levels across 109 LUADs from CPTAC. The significance of each correlation is indicated with a p value.\n(C and D) The boxplots show, for eIF4G1, ratios to paired NATs (y axis) of mean peptide abundance. Depicted for NATs and LUADs at each tumor stage are: eIF4G1 whole protein (C) and phosphorylation at serine 1,099 (D). Mean expression from NATs was normalized at 1. The dashed red line marks average abundance in all tumor stages combined, relative to NATs. The two-tailed Student’s t tests were performed. ns, not significant; ∗p ≤ 0.05; ∗∗p ≤ 0.01; ∗∗∗p ≤ 0.001; ∗∗∗∗p ≤ 0.0001.",
    "Adapted from Wu and Wagner (2021).1[href=https://www.wicell.org#bib1]\n> EIF4F_RNA_pro_correlation()\nNote: EIF4F_RNA_pro_correlation() is a wrapper function to call two internal composite functions that take input data frames and call internal functions for analysis. Figure 4[href=https://www.wicell.org#fig4]C summarizes the internal code structure for this step. The detailed definitions of all internal functions are in ∼/eIF4F.analysis/R/RNAProCor.R.\nNote: .plot_scatter_RNApro_CCLE() takes the data frames, CCLE_RNAseq and CCLE_Proteomics, and selects RNAseq and proteomics data for EIF4F genes. It performs the Pearson correlation analysis between proteomics and RNAseq levels, and produces the results as scatter plots.\nNote: .plot_scatter_RNApro_LUAD() takes the data frames, CPTAC_LUAD_RNAseq and CPTAC_LUAD_Proteomics, and selects RNAseq and proteomics data for EIF4F genes. It performs the correlation analysis between the proteomics and RNAseq data for EIF4F genes and produces scatter plots (e.g., Figure 11[href=https://www.wicell.org#fig11]A).\nStep-8: Analyze the protein co-expression and (phospho)protein expression across tumor stages\nTiming:  < 5 min\nThis step examines the protein co-expression and compares (phospho)protein expression in different tumor stages, and outputs results to the ∼/eIF4F.analysis/eIF4F_output/proteomics folder.\nRun the following command line in RStudio.\n> EIF4F_Proteomics_analysis()\nNote: EIF4F_Proteomics_analysis() is a wrapper function to call two internal composite functions that take input data frames and call internal functions for analysis. Figure 4[href=https://www.wicell.org#fig4]D summarizes the internal code structure for this step. The detailed definitions of all internal functions are in ∼/eIF4F.analysis/R/proteomics.R.\nNote: .plot_scatterplot_protein_LUAD() takes the data frame CPTAC_LUAD_Proteomics and selects the proteomics data of tumor samples. It analyzes the correlation between two input proteins across the LUAD tumor samples (e.g., Figure 11[href=https://www.wicell.org#fig11]B).\nNote: .plot_boxgraph_protein_CPTAC() takes the data frames CPTAC_LUAD_Proteomics, CPTAC_LUAD_Phos and CPTAC_LUAD_Clinic_Sampletype, and selects the proteomics, phosphoproteomics and clinical stage data. It generates boxplots to compare the protein (e.g., Figure 11[href=https://www.wicell.org#fig11]C) or phophosphorylation (e.g., Figure 11[href=https://www.wicell.org#fig11]D) levels in tumors of different clinical stages."
  ],
  "subjectAreas": [
    "Proteomics",
    "Rnaseq",
    "Bioinformatics",
    "Cancer"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}