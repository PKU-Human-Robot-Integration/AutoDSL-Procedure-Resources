{
  "id": 2408,
  "origin_website": "Cell",
  "title": "Protocol for stratification of triple-negative breast cancer patients using in silico signaling dynamics",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nTranscriptomic data integration\nTiming: 30 min\nCritical: Steps 1 through 8 require approximately 11 GB of memory space and 6.3 GB of hard disk space.\nIn this step, we first obtain transcriptomic data of cancer patients from TCGA database (Weinstein et al., 2013[href=https://www.wicell.org#bib18]) and normalize the transcriptomic data to be utilized for personalized modeling. We also obtain transcriptomic data of cell lines from the Cancer Cell Line Encyclopedia (CCLE) (Barretina et al., 2012[href=https://www.wicell.org#bib1]), which is used for parameter determination and for training of the ErbB network model (Imoto et al., 2022[href=https://www.wicell.org#bib9]). Subsequently, the batch effect in these datasets is removed using ComBat-seq (Zhang et al., 2020[href=https://www.wicell.org#bib19]) so they can be merged and handled equally as model inputs. The details of this process are as follows.\nStart R.\nNavigate to transcriptomic_data/ and start R:\n>cd transcriptomic_data\n>R\nRead integration.R:\n>source(\"integration.R\")\nNote: The functions executed in this step are defined in this file.\nObtain clinical information from the TCGA breast cancer dataset for manual analysis.\n>outputClinical(\"BRCA\")\nNote: With this function, all clinical information registered in the dataset (e.g., patient ID, age, sex, and race) can be obtained. Under the default settings, the information obtained in this step is not used in Pasmopy (the information required, such as prognosis, stage, and age will be extracted in a later step); however, this information can be used for manual analysis and to check the quality of the dataset. This function uses the “GDCquery clinic” function from TCGA biolinks. The clinical information of patients is saved in “BRCA_clinical.csv”.\nGet patient list and clinical information for TCGA data analysis.\n>outputSubtype(\"BRCA\")",
    "Note: In this step, the clinical information required for model-based patient stratification using Pasmopy, such as patient ID, subtype, age, and prognosis, is obtained. All patients’ information is obtained in this step (patients are selected in the next step). This function uses the “TCGAquery_subtype” function and saves subtype information of the TCGA dataset in “BRCA_subtype.csv”. Pasmopy stores the output in a variable named “subtype,” which is used for the analysis described below.\nPatient Selection.\n>patientSelection(type = subtype,\n          ID = \"patient\",\n          pathologic_stage %in% c(\"Stage_I\", \"Stage_II\"),\n          age_at_initial_pathologic_diagnosis < 60)\nNote: This is the preparation step for retrieving transcriptomic data from the TCGA database. In this step, patients are selected for the analysis that is to follow. Patients are selected by their pathological stage and the age at which they were initially diagnosed, which is listed in the metadata acquired in the previous step (the metadata is stored in the “subtype” variable). In this analysis, stage I and stage II patients who were under 60 years of age at their initial pathological diagnosis were used. In the end, 419 patients were included in subsequent analyses.\nUsers can freely change the selection criteria according to their needs. If the program fails to retrieve transcriptomic data, verify that the attribute names have been typed exactly as they are in the metadata (e.g., “pathologic_stage”, “age_at_initial_pathologic_diagnosis”, “Stage_I”, “Stage_II”). For example, “Stage1” or “StageI” will not work for the TCGA-BRCA analysis because they do not match the attribute names in “BRCA_subtype.csv”.\nThe “Type” argument should be the output of the outputSubtype(“BRCA”) function (the default is “Type=subtype,” do not change it). The “ID” argument is the name of the column that includes the patient ID (if you are using the TCGA-BRCA dataset, use “ ID=\"patient” ”).\nDownload transcriptomic data of breast cancer cells from TCGA.\n>downloadTCGA(cancertype = \"BRCA\",",
    "sampletype = c(\"01\", \"06\"),\n          outputresult = FALSE)\nNote: Next, transcriptomic data are downloaded from TCGA using the conditions set above. “Sampletype” defines which type of tissue is used. The sample type code used herein follow the TCGA coding scheme (https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/sample-type-codes[href=https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/sample-type-codes]). For example, if the argument is set to “01“ and “06”, the function will fetch data from “Primary Solid Tumor” and “Metastatic” samples.\nNote: If “Outputresult = TRUE” is set, the patients’ transcriptomic data will be saved as a .csv file. There is no need to save the data as a .csv file if you continue the following analysis (the default is “false”). The directory in which the file will be saved is the directory in which the code is run (transcriptomic_data).\nDownload transcriptomic data from CCLE.\n>downloadCCLE(cancertype = \"BREAST\",\n          outputresult = FALSE)\nNote: Next, the transcriptomic data of the cell lines are also downloaded from the CCLE database for parameter estimation of the model. Transcriptomic data from four cell lines and time-course training data on signaling activity from the corresponding cell lines were used to estimate the model parameters for this study (described in step 12). The concept of parameter estimation is explained in a subsequent section. In this example code, the https://data.broadinstitute.org/ccle/CCLE_RNAseq_genes_counts_20180929.gct.gz[href=https://data.broadinstitute.org/ccle/CCLE_RNAseq_genes_counts_20180929.gct.gz] dataset is downloaded. Data is selected by cancer type from this dataset.\nNote: If “Outputresult = TRUE” is set, the CCLE transcriptomic data are saved as a .csv file. There is no need to save the data as a .csv file if you continue the following analysis (the default is “false”). The directory in which the file will be saved is the directory in which the code is run (transcriptomic_data).\nMerge TCGA data and CCLE data.\n>mergeTCGAandCCLE(outputresult = FALSE)",
    "Note: Next, TCGA data and CCLE data are merged, but these two transcriptomic datasets have distinct biases in their expression values which are caused by the different experimental settings. This bias is called the “batch effect,” which must be eliminated before merging the datasets. The code above executes ComBat-seq, which is a tool for removing batch effects in sequence data and merging different datasets consecutively. After calculation, the adjusted read counts of each sample are obtained and saved as “totalreadcounts.csv,” which will be used in the next step. If “Outputresult = TRUE” is set, the counts after performing ComBat-seq will be saved as “merged_TCGA_CCLE.csv”.\nNormalize counts.\n>normalization(min=40000000, max=140000000)\nNote: Finally, the read counts are normalized. This normalization allows the comparison of gene expression data between patients. Transcripts per million (TPM) are calculated and relative log expression (RLE) normalization is conducted. In general, TPM normalization adjusts the bias of counts caused by gene length, and RLE normalization adjusts the bias of counts caused by the difference in the number of read counts of each sample. The edgeR is used for RLE normalization. Gene lengths are obtained from the Ensembl database using biomaRt. Samples are selected based on the number of reads within the range of “min” to “max”. After the selection, data from 369 patients remained for further analysis. The output file is “TPM_RLE_postComBat.csv”. This file is later used in step 11.\nConstruction of a comprehensive model of the ErbB signaling network\nTiming: 30 min",
    "This section describes the creation of a mechanistic model from text and the preparation for incorporating gene expression data into the model. pasmopy.Text2Model is a useful Python class for building an ordinary differential equation (ODE) model from a text file describing biochemical reactions. We used this method to build a mechanistic model of the ErbB signaling network (Figure 1[href=https://www.wicell.org#fig1]). For further details of the model, please refer to the following papers: (Birtwistle et al., 2007[href=https://www.wicell.org#bib2]; Imoto et al., 2022[href=https://www.wicell.org#bib9]; Nakakuki et al., 2010[href=https://www.wicell.org#bib11]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1894-Fig1.jpg\nFigure 1. Text-to-model conversion using pasmpy.Text2Model\nThe text contains different types of biochemical events involved in the ErbB signaling, including binding, dissociation, phosphorylation, transcription, translation, and degradation, which can be automatically converted into kinetic equations. Reproduced with permission from iScience (Imoto et al., 2022[href=https://www.wicell.org#bib9]).\nConvert the text file into an executable model.\n>import os\n>from pasmopy import Text2Model\n>Text2Model(os.path.join(\"models\", \"erbb_network.txt\")).convert()\nNote: pasmopy.Text2Model currently contains 14 reaction rules for gene regulation and biochemical reactions. Detailed options for this can be found in the online documentation: https://pasmopy.readthedocs.io[href=https://pasmopy.readthedocs.io].\nRename erbb_network/ to CCLE_name or TCGA_ID, e.g., MCF7_BREAST or TCGA_3C_AALK_01A for individualization of the model.\n>import shutil\n>shutil.move(\n  os.path.join(\"models\", \"erbb_network\"),\n  os.path.join(\"models\", \"breast\", \"TCGA_3C_AALK_01A\")\n)\nEdit SearchParam class.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1894-Fig2.jpg\nFigure 2. Preparation for the incorporation of gene expression data to parameterize and personalize the mechanistic model\n(1) Building a generic model from text. (2) Determining model parameters using transcriptomic data provided in the CCLE database and phospho-protein time-course data. (3) Personalizing the mechanistic model using transcriptomic data provided in the TCGA database. Reproduced with permission from iScience (Imoto et al., 2022[href=https://www.wicell.org#bib9]).\nimport os\nimport numpy as np\nfrom pasmopy import Individualization\nfrom . import __path__\nfrom .name2idx import C, V\nfrom .set_model import initial_values, param_values\nincorporating_gene_expression_levels = Individualization(parameters=C.NAMES, species=V.NAMES, transcriptomic_data=os.path.join(\"transcriptomic_data\",\n\"TPM_RLE_postComBat_BRCA_BREAST.csv\"), gene_expression={",
    "\"ErbB1\": [\"EGFR\"], \"ErbB2\": [\"ERBB2\"], \"ErbB3\": [\"ERBB3\"], \"ErbB4\": [\"ERBB4\"], \"Grb2\": [\"GRB2\"], \"Shc\": [\"SHC1\", \"SHC2\", \"SHC3\", \"SHC4\"], \"RasGAP\": [\"RASA1\", \"RASA2\", \"RASA3\"], \"PI3K\": [\"PIK3CA\", \"PIK3CB\", \"PIK3CD\", \"PIK3CG\"], \"PTEN\": [\"PTEN\"], \"SOS\": [\"SOS1\", \"SOS2\"], \"Gab1\": [\"GAB1\"], \"RasGDP\": [\"HRAS\", \"KRAS\", \"NRAS\"], \"Raf\": [\"ARAF\", \"BRAF\", \"RAF1\"], \"MEK\": [\"MAP2K1\", \"MAP2K2\"], \"ERK\": [\"MAPK1\", \"MAPK3\"], \"Akt\": [\"AKT1\", \"AKT2\"], \"PTP1B\": [\"PTPN1\"], \"GSK3b\": [\"GSK3B\"], \"DUSP\": [\"DUSP5\", \"DUSP6\", \"DUSP7\"], \"cMyc\": [\"MYC\"]}, read_csv_kws={\"index_col\": \"Description\"})\nclass SearchParam(object):\n...\n  def update(self, indiv):\n    x = param_values()\n    y0 = initial_values()\n    for i, j in enumerate(self.idx_params):\n      x[j] = indiv[i]\n    for i, j in enumerate(self.idx_initials):\n      y0[j] = indiv[i + len(self.idx_params)]\n    # As maximal transcription rate\n    x[C.V291] = incorporating_gene_expression_levels.as_reaction_rate(\n                  __path__[0].split(os.sep)[-1], x, \"V291\", \"DUSP\")\n    x[C.V310] = incorporating_gene_expression_levels.as_reaction_rate(\n                  __path__[0].split(os.sep)[-1], x, \"V310\", \"cMyc\")\n    # As initial conditions\n    y0 = incorporating_gene_expression_levels.as_initial_conditions(\n              __path__[0].split(os.sep)[-1], x, y0)\n...\nNote: After editing SearchParam class as above, the model can incorporate gene expression data to estimate the maximal transcription rate and/or the initial amount of nonzero species when it is being parameterized and personalized (Figure 2[href=https://www.wicell.org#fig2]).\nIndividualization of the mechanistic model\nTiming: 3–7 days\nIn this step, the parameters for the personalized kinetic models are determined, including the kinetic constants and weighting factors. It was assumed that the reaction parameters are unique to the molecular species involved in a reaction event and are identical across cell lines and patients. By training the quantitative relationship between expression values of the model species and the temporal patterns of intracellular signaling activities, the models can predict signaling dynamics in each patient upon adding the corresponding transcriptomic data as an input to the model. Phospho-protein time-course datasets obtained from four breast cancer cell lines (MCF-7, BT-474, SK-BR-3, and MDA-MB-231) stimulated with epidermal growth factor (EGF) and heregulin (HRG) were used to train the model parameters (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1894-Fig3.jpg\nFigure 3. Parameter estimation using cell-line datasets",
    "The model parameter was trained on time-series Akt, ERK, and c-Myc phosphorylation levels obtained from four breast cancer cell lines, namely MCF-7, BT-474, SK-BR-3, and MDA-MB-231, stimulated with EGF and HRG. The points (blue squares, EGF; orange triangles, HRG) denote experimental data, solid lines denote simulations, and shaded areas denote the SD. For all panels, error bars denote the SE for three independent experiments. Reproduced with permission from iScience (Imoto et al., 2022[href=https://www.wicell.org#bib9]).\nBuild a mechanistic model to identify model parameters.\n>import os\n>from pasmopy import Text2Model\n>Text2Model(os.path.join(\"models\", \"erbb_network.txt\"), lang=\"julia\").convert()\nRun optimize_parallel.sh.\n>mv erbb_network_jl training\n>cd training\n>mkdir errout\n>sh optimize_parallel.sh # It will take more than a few days to optimize parameters.\n>cd ..\nNote: In this step, BioMASS.jl (Imoto et al., 2020[href=https://www.wicell.org#bib10]) was used, but in most cases, the pasmopy.optimize() function can be used for parameter estimation.\nMove optimization results to patient-specific models.\n>julia\n>using BioMASS\n>param2biomass(“training”);\n>exit()\n>python\n>import shutil\n>breast_cancer_models = []\n>path_to_models = os.path.join(\"models\", \"breast\")\n>for model in os.listdir(path_to_models):\n  if os.path.isdir(os.path.join(path_to_models, model)) and (\n    model.startswith(\"TCGA_\") or model.endswith(\"_BREAST\")\n  ):\n    breast_cancer_models.append(model)\n# Set optimized parameters\n>for model in breast_cancer_models:\n  shutil.copytree(\n    os.path.join(\"training\", \"erbb_network_jl\", \"dat2npy\", \"out\"),\n    os.path.join(path_to_models, f\"{model}\", \"out\"),\n)\nRun patient-specific simulations.\n>import os\n>import shutil\n>from pathlib import Path\n>from pasmopy import PatientModelSimulations\n>import models.breast\n>TCGA_ID = [\n    l.strip() for l in Path(\"models\", \"breast\", \"sample_names.txt\").read_text(\"utf-8\").splitlines()\n]\n# Create patient-specific models\n>for patient in TCGA_ID:\n    if patient != \"TCGA_3C_AALK_01A\":\n      shutil.copytree(\n        os.path.join(\"models\", \"breast\", \"TCGA_3C_AALK_01A\"),\n        os.path.join(\"models\", \"breast\", f\"{patient}\"),\n      )\n# Execute patient-specific models\n>simulations = PatientModelSimulations(models.breast.__package__, TCGA_ID)\n>simulations.run()\nStratification of TNBC patients based on ErbB signaling dynamics\nTiming: 10 min",
    "In this study, in silico signaling dynamics which were generated from personalized kinetic models in the previous step were used to stratify breast cancer patients (Figure 4[href=https://www.wicell.org#fig4]). In the example below, the maximum activation level is used as the dynamic characteristic for the classification of TNBC patients.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1894-Fig4.jpg\nFigure 4. Stratification of breast cancer patients based on the predicted signaling dynamics\n(A) The 369 breast cancer patients are classified based on personalized simulations. The prognostic score for patients who deceased within n-1 to n years are denoted by n, and patients who were alive after 20 years are denoted in yellow. The representative signal response characteristics were extracted from the topmost portion of each cluster. The blue and orange solid lines denote simulations with EGF and HRG stimulation, respectively. Shaded areas denote the SD. The box enclosed with the red dashed line indicates the two clusters in which basal-like patients are enriched.\n(B and C) Kaplan-Meier survival curves of all patients for all clusters (B) and of patients with the TNBC subtype for clusters 3 and 4 (C).\nRun subtyping() function.\n>simulations.subtyping(\n  fname=None,\n  dynamical_features={\n      \"Phosphorylated_Akt\": {\"EGF\": [\"max\"], \"HRG\": [\"max\"]},\n      \"Phosphorylated_ERK\": {\"EGF\": [\"max\"], \"HRG\": [\"max\"]},\n      \"Phosphorylated_c-Myc\": {\"EGF\": [\"max\"], \"HRG\": [\"max\"]},\n  }\n)\nNote: New dynamic characteristics, for example the species’ droprate, can be added as follows:\n>import numpy as np\n> def get_droprate(time_course: np.ndarray) -> float:\n    return - (time_course[-1] - np.max(time_course)) / (len(time_course) - np.argmax(time_course))\n    >simulations.response_characteristics[\"droprate\"] = get_droprate\nVisualize the classification result as a heatmap.\n>cd classification\n# Rscript brca_heatmap.R [n_cluster: int] [figsize: tuple]\n>Rscript brca_heatmap.R 6 8,5"
  ],
  "subjectAreas": [
    "Genomics",
    "Bioinformatics",
    "Systems Biology",
    "Computer Sciences",
    "Cancer",
    "Signal Transduction",
    "Gene Expression"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}