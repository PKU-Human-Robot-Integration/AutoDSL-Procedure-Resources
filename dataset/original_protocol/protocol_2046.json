{
  "id": 2160,
  "origin_website": "Cell",
  "title": "Analyzing single cell transcriptome data from severe COVID-19 patients",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nTiming: ∼2–4 h (Processing the single-cell RNA-seq data)\nTiming: ∼1 week (data collection), 10 min (script execution) (Prepare signature gene marker dataset and ascertain cell type identity of clusters)\nTiming: ∼1 week (compiling the comorbid gene list), 15–20 min (executing the script) (Prepare comorbid gene list and identify subtype with upregulated comorbid gene expression)\nTiming: ∼ 2–4 h (Downstream analysis)\nTiming: ∼ 1–2 h (Pathway enrichment)\nTiming: ∼ 1–2 h (In silico validation)\nTiming: ∼ 1–2 weeks (Gene expression in severe COVID-19 clinical samples)\nTiming: ∼ 1 week (Lung epithelial cell culture: ∼7 days, Monocyte isolation and culture: 24 h, qPCR: 4 h) (Gene expression in spike protein stimulated obese subjects)\nProcessing the single-cell RNA-seq data. This section describes processing of single cell RNA-seq data including the installation of required packages and codes required to execute each step.\nControl dataset processing using Single Cell Experiment and Scanpy: Most of the R packages are available from CRAN and can be installed and accessed as mentioned below:\ninstall.packages('Seurat')\nlibrary(Seurat)\nThis will install the updated version of the softwares. Once you download the expression matrix and metadata from HCA (Human Cell Atlas), process the data to obtain the h5ad file format (a gene expression matrix file format) as stated below in R version 4.0.2.\nlibrary(SingleCellExperiment)\nlibrary(scran)\nlibrary(sceasy)\nlibrary(reticulate)\n#SET working directory pointing to the folder where all your\nfiles are to be saved and the outputs will be saved at that\nlocation\nsetwd(/PATH/TO/YOUR/DIRECTORY)\n# Read matrix\nairway.data <- read.table(file=\"exprMatrix_hg19.tsv\", header =\nT, row.names=1, sep=\"\\t\", as.is=T)\n#Normalize\nairway.data_log <- log(airway.data + 1)\nairway.data_log_mtx <- data.matrix(airway.data_log)\nwrite.csv(airway.data_log_mtx, file =\nexprMatrix_norm_hg19.tsv\")\n#Identify Highly variable genes\nmgv <- modelGeneVar(airway.data_log_mtx)\ntop_hvg <- getTopHVGs(mgv)\nmy_metadata <-\n>read.csv(\"meta_cell_types_merged.tsv\",sep=\"\\t\")\n#generate SCE object\nsce <- SingleCellExperiment(assays = list(logcounts = airway.data_log),colData = my_metadata)\nuse_condaenv('EnvironmentName')\nloompy <- reticulate::import('loompy')",
    "sceasy::convertFormat(sce, from=\"sce\",\nto=\"anndata\",outFile='deprez_cell_types_merged.h5ad')\nAnalyze the h5ad output file generated from the above step using Scanpy library (in Python). Perform principal component analysis (PCAs), select the highly variable PCAs for cluster detection (PhenoGraph) and calculate the cluster connectivity using the partition-based graph abstraction (PAGA) algorithm. The python codes are described in the GitHub repository at Github data: https://github.com/theislab/scanpy[href=https://github.com/theislab/scanpy]. The control dataset 2 can be downloaded as h5ad object and similar steps for filtering, normalization, PCA calculation and clustering can be done using Scanpy. Use UMAP (uniform manifold approximation and projection) to visualize the clusters in reduced dimensional space, and then compare the cluster topography with the UMAP from the original studies. Identify the number of PCAs using elbow plot for data clustering and decide on the highly variable features to be used for downstream analysis.\nCOVID single cell dataset processing using Seurat: Once you download the data from GSE145926, process it using Seurat in R, Github data: https://github.com/zhangzlab/covid_balf[href=https://github.com/zhangzlab/covid_balf]/ seurat_integration.R). The script ‘seurat_integration.R’ carries out the following functions.\nLoad data and create Seurat object.\nPreprocess data, filtering the matrix with nFeature_RNA, nCount_RNA, and percent.mito.\nIntegrate data using Seurat v3.\nScale data in ‘Integrated’ assay and compute PCAs.\nSelect the number of PCs using elbow plot and heatmap.\nCluster the cells and visualize using UMAP.\nScale data in ‘RNA’ assay.\nFind markers for every cluster and visualize their expression using heatmap/feature plot/violin plot/ dot plot. If using R-studio, copy and paste the code from GitHub in a new R-Script. Select the whole script and press the ‘RUN’ icon and observe your outputs in the console window. Else, you can save this code as ‘seurat_integration.R’, open R console on terminal by writing R, change and set the directory and execute seurat_integration.R as shown below. Quit the screen after running the code successfully.\n%R",
    "#R version will be printed on your screen\nsetwd(\"∼/PATH_TO_WORKING_DIRECTORY_WHERE_db.R_IS_SAVED\")\nseurat_integration.R\nq()\nCompare the UMAP with the one generated by (Liao et al., 2020[href=https://www.wicell.org#bib9]).\nSubset the Seurat object using group identity details from the metadata. In this case, we have three groups: Severe(S), Control (C) and Moderate (M) COVID-19 patient data.\nSave each one as a separate R object (as shown below) for further processing as per standard steps (Deprez et al., 2020[href=https://www.wicell.org#bib6]; Liao et al., 2020[href=https://www.wicell.org#bib9]; Madissoon et al., 2019[href=https://www.wicell.org#bib11]; Nassir et al., 2021a[href=https://www.wicell.org#bib12]; Tambi et al., 2021[href=https://www.wicell.org#bib17]).\nsevere<-subset(Seurat_object, idents= “S”)\ncontrol<-subset(Seurat_object, idents= “C”)\nmoderate<-subset(Seurat_object, idents= “M”)\nsaveRDS(severe, file=”/PATH_TO_FILE/severe.rds”)\nsaveRDS(moderate, file=”/PATH_TO_FILE/moderate.rds”)\nsaveRDS(control, file=”/PATH_TO_FILE/control.rds”)\nPrepare signature gene marker dataset and ascertain cell type identity of clusters. This section describes steps in marker dataset preparation and assigning cell type identity to clusters.",
    "Dataset preparation. Marker dataset compilation will depend on the type of single cell data you are processing. Here, we composed an in-house database consisting of canonical markers for cell types associated to human lung region using a combination of literature search (Deprez et al., 2020[href=https://www.wicell.org#bib6]; Grant et al., 2021[href=https://www.wicell.org#bib8]; Madissoon et al., 2019[href=https://www.wicell.org#bib11]; Reyfman et al., 2019[href=https://www.wicell.org#bib14]), PanglaoDB (Franzen et al., 2019[href=https://www.wicell.org#bib7]), and CellMarker (Zhang et al., 2019[href=https://www.wicell.org#bib20]) databases. Deprez et al. provided the single cell map for human healthy airway, constituted by 77,969 cells from 35 different locations, which were clustered into seventeen broad cell types. We extracted the unique markers from the heat map representing the marker gene expression across various cell types. Furthermore, we collected the marker genes from lung single cell map (Madissoon et al., 2019[href=https://www.wicell.org#bib11]) consisting of 57,020 cells, classified into 25 different cell types. Similarly, we enlisted the lung specific markers from other largescale datasets, which characterized single cell heterogeneity of lung tissues. The steps for compiling marker genes are shown in Figure 1[href=https://www.wicell.org#fig1]. In order to download the marker gene files from PanglaoDB and CellMarker database, first install curl on your PC through terminal window executing the following codes.\n#install curl\nsudo apt install curl\n#check if curl is installed\ncurl --version\nNext, open either R-studio or R-terminal and execute the following code which will:\nDownload the data from PanglaoDB and CellMarker database (You can either download the file or use the file we have deposited in Zenodo).\nSelect human, lung data which have sensitivity above 0.5 and keep the genes associated with each cell type in a new list.",
    "Identify only unique list of genes for each cell type and combine all the cell types (collected from literature as well as databases - Figure 1[href=https://www.wicell.org#fig1]) to generate the final database. In our study, we compiled 966 unique marker genes representing 38 cell types (Nassir et al., 2021b[href=https://www.wicell.org#bib13]).\nlibrary(curl)\nlibrary(dplyr)\n#PanglaoDB\nurl <-\n\"https://panglaodb.se/markers/PanglaoDB_markers_27_Mar_2020.tsv.gz\"\ndest<- \"/Users/ Desktop/STAR_protocol-\n_review_comments/new/PanglaoDB_markers_27_Mar_2020.tsv.gz\"\ncurl_download(url,dest)\n#tsv=gzfile(\"PanglaoDB_markers_27_Mar_2020.tsv.gz\")\n#or\ntsv=(\"PanglaoDB_markers_27_Mar_2020.tsv\")\npdb<- read.csv(tsv,header=T,sep = \"\\t\")\npdb_filtered<-filter(pdb, species == \"Hs\" | species == \"Mm Hs\")\npdb_filtered<-filter(pdb_filtered,organ==\"Lungs\")\npdb_filtered<-filter(pdb_filtered,sensitivity_human>=0.5)\npdb1 <- split(as.character(pdb_filtered$official.gene.symbol), pdb_filtered$cell.type)\nView(pdb1)\n#Cellmarker\nurl2<-\n\"http://biocc.hrbmu.edu.cn/CellMarker/download/Human_cell_markers.txt\"\ndest2<- \"/Users/ Desktop/STAR_protocol-\n_review_comments/new/Human_cell_markers.txt\"\ncurl_download(url2,dest2)\ncmdb<- read.csv(\"Human_cell_markers.txt\", header=T, sep=\"\\t\")\ncmdb_filtered<-filter(cmdb,cancerType==\"Normal\")\ncmdb_filtered<-filter(cmdb_filtered,tissueType==\"Lung\")\ncmdb1<-split(as.character(cmdb_filtered$geneSymbol),cmdb_filtered$cellName)\nView(cmdb1)\n# cmdb1[[\"T-cell\"]]<-c(\"CD3D\", \"CD3E\", \"CD3G\", \"CD4\", \"CD8A\",\"CD4\",\n\"CD68\", \"CD8A\")\nlis<-names(pdb1)\nlis2<-names(cmdb1)\n#making list of all cell types\nnam_all_cell<-unique(unlist(c(lis,lis2)))\n#compare cell type names\n#merge\n#Compare genes within- keep only unique\nfor(j in 1:length(nam_all_cell)){\n  d=e=g=h=c()\n  if(j==8)\n  {\n    g<-grep(\"Brush cell\",lis2) #Brush cell labeled as Brush cell (Tuft\ncell) –it gives error using Grep\n  }\n  else if(j==18){\n    g<-grep(\"FOXN4\",lis2) #FOXN4 labeled as FOXN4 +) –it gives error\nusing Grep due to ‘+’\n  }\n  else{\n  g<-grep(nam_all_cell[j],lis2)\n  }\n  d<-length(g)\n  h<-grep(nam_all_cell[j],lis)\n  e<-length(h)\nif((d>0)&(e>0)){\n    x<-unique(unlist(pdb1[h]))\n    y<-unique(unlist(cmdb1[g]))\n    ip<- unique(unlist(c(x,y)))\n    nam_ip<-names(cmdb1[g])\n  }else if(d>0){\n    ip<-unique(unlist(cmdb1[g]))\n    nam_ip<-names(cmdb1[g])\n  }else if(e>0){\n    ip<-unique(unlist(pdb1[h]))\n    nam_ip<-names(pdb1[h])\n  }\n  DF<-as.data.frame(ip,col.names=nam_ip,row.names=NULL)\n  DF<-t(DF)\n  row.names(DF)<-nam_ip\n  write.table(DF,file=\"cell_Type.csv\",row.names =\nTRUE,col.names=FALSE, append=TRUE, sep=\",\")\n  print(DF)\n  }\nIf you are using R-studio, copy and paste the above code in the new R-Script. Select the whole script and press the ‘RUN’ icon and observe your outputs in the console window. Else, you can save this code as ‘db.R’, open R console on terminal by writing R, change and set the directory and execute db.R as shown below. Quit the screen after running the code successfully.\n%R\n#R version will be printed on your screen\n>setwd(\"∼/PATH_TO_WORKING_DIRECTORY_WHERE_db.R_IS_SAVED\")\n>db.R\n>q()",
    "Critical: After collecting data from each source, it is critical to carefully check the cell type names. Even minor difference in names (cell vs Cell vs CELLS) might lead to creation of redundant cell types (ex. Brush cell vs Brush cells - both are the same and should be combined into one).\nCritical: It is critical to exhaustively search the publications for marker database creation as the quality of this database will be reflected directly on cell type assignment. Only going through the databases will hardly take few minutes to hours. It is the literature search which is time consuming, due to the exponential rate at which single cell analysis is being performed on different human tissues.\nCell type assignment Subsequently, use the marker dataset to find the cluster identity (Figure 2[href=https://www.wicell.org#fig2]) employing these steps:\nExtract and plot (boxplot) the normalized expression for all the genes belonging to a specific cell type across all the clusters for the given dataset. Alternatively, you can also calculate the median expression for all the clusters per cell type in the database. The following code can be used for calculating the median.\nlibrary(readxl)\nlibrary(Seurat)\nlibrary(SeuratData)\nlibrary(SeuratDisk)\nlibrary(ggplot2)\nlibrary(glue)\nmy_data <- read_excel(\"cell_type_db1.xls\")\nsevere<-readRDS(\"/Volumes/TR/8thDec2021/Download/severe.rds\")\nlen<-length(my_data)\nnl<-c()\nfeat_new<-c()\n  for(i in 1:len){\n  nl<-c()\n  k=1\n  feat<-my_data[[i]]\n  u<-length(feat)\n  for(j in 1:length(feat)){\n    if(is.na(feat[j])){\n      k=0\n      j=(length(feat))+1\n    }\n    else{\n      nl[[k]]<-feat[[j]]\n    k=k+1\n    }\n  }\ng<-glue_collapse(nl,sep=\" \")\n  feat_new[i]<-g\n  io<-unlist(strsplit(feat_new[i], \" \"))\n  print(io)\n  print(length(io))\n}\nlength(feat_new)\nt<-c()\nfor(q in 1:38){\nio<-unlist(strsplit(feat_new[q], \" \"))\nprint(io)\n#change cluster number and calculate for each cluster\nsev <- as.matrix(FetchData(object=severe, vars = io,\ncells=c(names(severe$seurat_clusters[severe$seurat_clusters==10]))))\nvalues<-as.list(sev)\nh<-dim(sev)[1]∗dim(sev)[2]\nlength(values)\nval75<-round((0.90∗length(values)),digits=0)\nsev1<-sev[order(sev)]\nsev11<-sev1[val75:length(sev1)]\ndf<-data.frame(expr=sev11)\nt[q]<-median(df$expr)\n}\n#ranking the median values\nhig_od<-order(t,decreasing=T)\nmedian_desc<-t[order(t,decreasing=T)]\ntop<-hig_od[1]\npaste(\"The max median value is for \", colnames(my_data)[top], \"of\",\nmedian_desc[1], \"for cluster 1\" )\n#If u need box plot\nwrite.csv(df,\"sev.csv\", row.names = FALSE)",
    "#Add column headin as 'Sam' for sample and 'Exp' for expression values\nand mention cluster number for the 1st row\n#Sam  Exp\n#Cluster1  0\n#Cluster1  7.092988176\n#Cluster1  6.943530007\nexpr <- read.csv(\"sev.csv\")\ng <- ggplot(expr, aes(x=Sam, y=Exp, fill=Sam))\ng + geom_boxplot()+geom_point()+ggtitle(\"Cell_type_under_investigation\")\nCompare the median expression across the cell types per cluster and to the 99th percentile expression value from the datasets.\nlibrary(Seurat)\nsevere<-readRDS(\"/PATH/TO/SEURAT_R_DATA_FILE/ severe.rds\")\nall.genes <- rownames(Your_seurat_object)\nrt<-FetchData(Your_seurat_object, vars<-all.genes)\nq99<-quantile(rt,0.99)\nAssign the cell type identity based on the highest normalized median expression value for each cluster.\nPrepare comorbid gene list and identify subtype with upregulated comorbid gene expression.\nThis section describes steps in compiling the list of COVID-19 comorbid gene lists and identifying the cluster with maximum number of enriched comorbid gene set.",
    "We collated a list of COVID-19 associated genes to analyze and compare their expression among control, moderate and severe COVID-19 clusters. Since COVID-19 disease pathology is associated with enormous release of pro-inflammatory cytokines, we included the list of cytokines and cytokine receptor genes, in addition to the rare infection and syndromic genes accounting for the genetic predisposition, lung channelopathy genes, differentially expressed genes from COVID-19’s BALF transcriptome (Zhou et al., 2020[href=https://www.wicell.org#bib21]) and genes associated with key comorbid conditions such as chronic obstructive pulmonary disorder, cardiovascular disease, hypertension and diabetes. The list of cytokine and cytokine-receptor genes was retrieved from the Immunology Database and Analysis Portal (Bhattacharya et al., 2018[href=https://www.wicell.org#bib3]). The monogenic infection gene list was collected from (Casanova, 2015[href=https://www.wicell.org#bib5]). Syndromic genes (category S) were collected from the Simons Foundation Autism Research Initiative (https://gene.sfari.org/[href=https://gene.sfari.org/]). Primary comorbid disease genes associated with COVID-19 were extracted from GWAS catalog (https://www.ebi.ac.uk/gwas/[href=https://www.ebi.ac.uk/gwas/]), where the selected genes had a probability < 10-7. The normalized expression of these gene sets was plotted for all the clusters of control, moderate and severe datasets. Refer the script at Github data: https://github.com/MBRULab/2021_Nassir-etal/blob/main/comorbidexpression.R[href=https://github.com/MBRULab/2021_Nassir-etal/blob/main/comorbidexpression.R]. If using R-studio, copy and paste the code from GitHub in new R-Script. Select the whole script and press the ‘RUN’ icon and observe your outputs in the console window. Else, you can save this code as ‘comorbidexpression.R’, open R console on terminal by writing R, change and set directory and execute comorbidexpression.R as shown below. Quit the screen after running the code successfully.\nThe script below will yield cluster specific boxplots for comorbid gene expression.",
    "Mark clusters for which the normalized median expression of the comorbid condition associated gene sets was higher than 99th percentile expression value from the dataset. Compare the boxplots and choose the cluster in which most of the comorbid conditions is upregulated as your subtype of interest, as demonstrated in Figure 2[href=https://www.wicell.org#fig2] and Figure S5 of (Nassir et al., 2021b[href=https://www.wicell.org#bib13]).\n%R\n#R version will be printed on your screen\n>setwd(\"∼/PATH_TO_WORKING_DIRECTORY_WHERE_db.R_IS_SAVED\")\n> comorbidexpression.R\n>q()\nDownstream analysis. This section describes identifying genes restricted to cell type of interest. Using step 3, we identified a severe cluster which has maximum enrichment of the comorbid genes, severe cluster 11, which was assigned the identity as monocyte-derived alveolar macrophages (MoAM), indicated by the presence of CCL3L1 - MoAM_CCL3L1. One of the most important steps next is to identify the marker genes that are restrictively expressed in this cluster. Please follow the steps below.\nUse FindAllMarkers to compute the DEGs for each cluster using different tests - Wilcoxon-ranked sum test, t-test.\n>FindAllMarkers(seu_object, test.use= “wilkox”)\nSelect the genes which are differentially expressed (highest probability, combining all the three tests).\nRank the genes using their Log of fold change in descending order.\nUse top 20 genes and map them using feature plot and dot plot. Analyze the expression pattern and select the genes which are upregulated in severe cluster and have negligible expression in all other clusters in the dataset. Using this approach, we identified the most differentially regulated gene that demarcated cluster 11 in samples from severe COVID-19 patients, FCGR3B (Figure 3[href=https://www.wicell.org#fig3]).\nPathway enrichment.\nThis section describes pathway enrichment of differentially expressed genes and visualization of pathways using Cytoscape tool.",
    "We used the DEGs from severe cluster 11 for enrichment analysis and mapping. For enrichment analysis, please follow the script at Github data: https://github.com/MBRULab/2021_Nassir-etal/blob/main/geneoverlap.R[href=https://github.com/MBRULab/2021_Nassir-etal/blob/main/geneoverlap.R]. This script takes the list of genes from severe cluster 11 as input and scans the KEGG (Kyoto Encyclopedia of Genes and Genomes) and GO (Gene Ontology) databases to identify the overlapping pathways. The input file required (KEGG and GO file and gene list file) are deposited in Zenodo. Here, the intersection of your set of genes over KEGG and GO pathway genes is computed. This script generates a csv file with the following information: pathway id, pathway name, pvalue and Odds ratio. This file is used as the input to Cytoscape where two main plugins are used: ‘Enrichment map’ and ‘Autoannotate’. Cytoscape is an open-source network visualization software which can be downloaded from https://cytoscape.org/download.html[href=https://cytoscape.org/download.html]. Further, ‘App Manager’ present in the ‘APPS’ tab within the Cytoscape can be used to add these plugins (Figure 4[href=https://www.wicell.org#fig4]). Then, use the Enrichment map and input the above-mentioned files using ‘Generic/gprofiler’ type of analysis. Set the FDR cut off (<0.01) OR p value cut off (<0.001) (after clicking the advanced icon). After building the map, use the auto annotate plugin and refine the network map.\nCritical: This script restricts the pathway to size 50 to 1,000 genes (which means only pathways having more than 50 and less than 1,000 genes are included – to account for housekeeping genes), that can be modified on line 17 of the script.\nCritical: We consider a pathway intersection > 5 as positive match. It means that pathway will be considered only if more than 5 genes are included in it. This can be relaxed (by reducing the number) on line 26 of the script.\nIn silico validation.",
    "This section describes validation of findings using other single cell and bulk RNA-seq datasets.\nOnce the cell type and specific marker gene has been identified, you will need to validate your findings, for which you need to decide and download required validation data sets. We used single cell BALF, bulk PBMC and bulk nasopharyngeal datasets for validation. This step involved comparing the expression pattern of FCGR3B in control and patient data and then calculating the significance using t-test p-values. The validation script deposited at Github data: https://github.com/MBRULab/2021_Nassir-etal[href=https://github.com/MBRULab/2021_Nassir-etal] (validation_BALF_SC.R, validation_nasph.R, validation_pbmc.R) can be directly used for this purpose. If using R-studio, copy and paste the code from GitHub in new R-Script. Select the whole script and press the ‘RUN’ icon and observe your outputs in the console window. Else, you can save this code as ‘validation.R’, open R console on terminal by writing R, change and set directory and execute validation.R as shown below. Quit the screen after running the code successfully.\n%R\n#R version will be printed on your screen\n>setwd(\"∼/PATH_TO_WORKING_DIRECTORY_WHERE_db.R_IS_SAVED\")\n> validation.R\n>q()\nGene expression in severe COVID-19 clinical samples. This section describes processing of nasopharyngeal swabs for RNA isolation followed by real time PCR analysis.\nTransfer nasopharyngeal swabs into viral transport media utilizing BD Universal Transport Media (UTM) 3-mL collection kit with flexible minitip flocked swab (BD, Cat. No. 220531).\nPerform RT-qPCR for SARS-CoV-2 using the QIAamp Viral RNA Mini or the EZ1 DSP Virus Kits (QIAGEN, Hilden, Germany) following the manufacturer’s recommended protocol.\nExtract human RNA from nasopharyngeal swabs of control (SARS-CoV-2 negative) and severe/critical cases (pneumonia requiring admission to intensive care units and specialized life-support treatment (e.g., mechanical ventilation)) using RNeasy 96 QIAcube HT Kit (QIAGEN USA) as per the manufacturer’s instructions.\nCritical: Pay attention to avoid RNase contamination.",
    "Transfer 2 mL of Universal Transfer Medium (UTM) to a clean, sterile tube and centrifuge at 1,800 g for 3 min. Carefully remove 1,650 μL of supernatant without disturbing the pelleted squamous and respiratory epithelial cells.\nResuspend the pellet with remaining 350 μL of Universal Transfer Medium (UTM) and transfer to S Block (RNeasy 96 QIAcube HT Kit, QIAGEN USA).\nDetermine quality and quantity of the extracted RNA using NanoDrop™ 8000 Spectrophotometer (Thermo Fisher Scientific, USA).\nReverse transcribe RNA to cDNA using a High-Capacity cDNA Kit (Applied Biosystems, Foster City, CA) according to the manufacturer’s protocol. Prepare master mix for reverse transcriptase reaction in a microcentrifuge tube. RT Master Mix for cDNA Generation\ntable:files/protocols_protocol_1639_1.csv\nMix the reagents by briefly pipetting or gently vortexing. Label tubes and pipette 10 μL of master mix into PCR strip tubes. Add 10 μL RNA to respective PCR strip tube and gently mix by pipetting 5–10 times.\nFlash spin PCR strip tubes in a mini centrifuge at 2,000 g for approximately 10 s. Place tubes into thermocycler and run the following program: cDNA generation PCR steps\ntable:files/protocols_protocol_1639_2.csv\nThaw TaqMan Fast Advanced Master Mix on ice. Thaw primer/probe set on ice, protected from light. Label one microcentrifuge tube for each primer/probe set and mix the master mix and primer/probes. Two-Step Multiplex qPCR Master Mix Recipe\ntable:files/protocols_protocol_1639_3.csv\nNote: Use technical duplicates for each sample and primer/probe set.",
    "Prepare the above mixture and mix by pipetting slowly up and down. Dispense 9 μL of master mix reaction into a 96-well plate. Add 1 μL cDNA to the 96-well plate containing the reaction mixture. Cover the loaded 96-well plate with an adhesive cover and centrifuge the 96-well plate in a mini plate spinner at 500 g for approximately 20 s. Select the reagent type as TaqMan reagents. Choose the ramp speed and plate setup. Define the specific probe and samples, fluorescence reporter and the quencher for the experiment. Assign the probes and samples to selected wells.\nCritical: Include a no-template control. Prior to initializing the run, assign target genes with the appropriate fluorophore (GAPDH-VIC, FFAR2-FAM).\nSet up the following program: PCR cycling condition\ntable:files/protocols_protocol_1639_4.csv\nPlace the 96-well plate in the machine and start the Run method. Edit the default run method with appropriate Tm. Include Pre-PCR read to collect the background fluorescence.\nData Analysis - Review the QC summary (select amplification plot to show amplification curves in all wells. Specific PCR products should display a single sharp peak in the melting curve rather than multiple peaks or single broader peaks (non-specific PCR product)).\nCalculate relative levels of mRNA gene expression using the 2−ΔΔCT method and plot fold change. Relative gene expression = 2−ΔΔCT, where ΔCT is the difference in CT value of target gene with respect to housekeeping gene, ΔΔCT is the difference in CT value of target gene of patients with respect to control.\nGene expression in spike protein stimulated obese subjects. This section describes culturing lung epithelial cells, monocyte isolation and culturing followed by real time PCR analysis.\nLung epithelial cell culture.\nPurchase Normal human primary bronchial epithelial (NHBE) cells from non-obese and obese subjects from a commercial source (key resources table[href=https://www.wicell.org#key-resources-table]).",
    "Culture NHBE cells in BEGM media (Lonza, MD, USA) supplemented with 1% antibiotic antimycotic solution (Wisent, QC, CA) in 12 well tissue culture plates coated with Type 1 Rat tail collagen (Sigma-Aldrich, Ontario, Canada).\nGrow cells to 90% confluency and starve using BEBM Basal Medium (Lonza, MD, USA) supplemented with 1% antibiotic antimycotic solution (Wisent, QC, CA) over night.\nThe next day, stimulate cells with 1 μg/mL of SARS-CoV-2 spike protein (S1+S2) for 3 h.\nCollect the culture media in microtubes, centrifuge at 5,000 g for 5 min. Aliquot supernatants into fresh microtubes and freeze at −80°C.\nMonocyte isolation and culture.\nIsolate PBMCs of a healthy donor from 40 mL of blood using SepMate-50 tubes (StemCell, BC, CA), following manufacture’s protocol.\nResuspend PBMCs in RPMI 1640 supplemented with 1% Penicillin/Streptomycin, Glutamax and 10% FBS (Wisent, QC, CA) (Gibco, MD, USA) (Wisent, QC, CA).\nPerform differential cell count on the PBMC cell suspension using the Beckman Coulter AC-T DIFF cell counter and obtain concentration of monocytes.\nAdd calculated volume of PBMC cell suspension to a 48 well plate to obtain 1 × 10ˆ5 monocytes per well.\nIncubate cell suspension at 37°C, 5% CO2 for 3 h. Remove media from wells and wash twice with PBS.\nAdd fresh complete RPMI media with 0.5% FBS to each well and incubate attached monocytes (16 h). The following day, thaw an aliquot of conditioned media from stimulated NHBE cells on ice and vortex.\nRemove 100 μL of media from wells and add 100 μL of NHBE conditioned media to attached monocytes and incubate for 24 h. Remove media from cells and use cell pellets for RNA extraction.\nPerform total RNA extraction from monocytes using phenol-chloroform extraction (RiboZol RNA extraction reagent, VWR, Leicestershire, UK), as directed in the manufacturer’s instructions.",
    "Remove contaminated DNA from 500 ng of total RNA using the AccuRT Genomic DNA Removal Kit (Applied Biological Materials, Richmond, BC, Canada), following the manufacturer’s protocol. DNA Removal for cDNA Generation\ntable:files/protocols_protocol_1639_5.csv\nPerform reverse transcription using the 5× All-In-One Reverse Transcriptase Mastermix (ABM). RT Master Mix for cDNA Generation\ntable:files/protocols_protocol_1639_6.csv\ncDNA generation PCR steps\ntable:files/protocols_protocol_1639_7.csv\nMeasure mRNA expression of FCGR3B and GAPDH (housekeeping gene) using EvaGreen qPCR Mastermix (ABM).\nTest each sample in duplicates and perform qPCR amplification using CFX96 thermal cycler (Bio-Rad, Hercules, 130 CA, USA). qPCR Master Mix Recipe\ntable:files/protocols_protocol_1639_8.csv\nSet the cycler program: PCR cycling condition\ntable:files/protocols_protocol_1639_9.csv\nUse the ΔCT method to measure gene expression: amount of target = CT ref /ΔCT.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1639-Fig1.jpg\nFigure 1. Steps involved in the compilation of unique marker gene database using various sources\nMarker gene information is present in literature in the form of heat map (Gene expression plotted against cell types using color gradients for expression levels), dot plot (circles denoting the gene expression across various cell types), tables or databases. In case of dot plot, the size and color intensity are proportional to the level of expression in the percent of cells and degree of expression, respectively (in ascending order). In order to constitute the final marker database, the cell types and gene list were combined from all the sources retaining only unique genes into the list for each cell type (Removing any duplicate genes within inter and intra cell types).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1639-Fig2.jpg\nFigure 2. Assigning cell type identity for severe COVID-19 cluster 11",
    "(A) Mean expression of CCL3L1 across all clusters in severe COVID-19 dataset. The highest expression was observed for cluster 11, which was annotated as monocyte derived alveolar macrophages (MoAM), marked by CCL3L1. Red dotted line indicates the global median expression. A cluster was assigned a particular cell type if it had the highest median expression (across the clusters and expression value was more than 99th percentile overall expression.\n(B) Dot plot showing expression of macrophage and its subtype (TRAM and MoAM) marker genes for the severe COVID-19 dataset. The y-axis represents the cell types based on the marker database and x-axis represents the marker genes. Cluster 11 is marked by MoAM_CCL3L1.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1639-Fig3.jpg\nFigure 3. Steps in identifying cluster associated with comorbid disease gene expression and finding gene restricted to that cell type\nEnrichment analysis of severe COVID-19 clusters with comorbid gene set. Higher expression (above global median) is indicated by a star. The cluster having maximum number of upregulated gene set is selected for further downstream analysis and identifying candidate genes with restrictive expression in severe COVID-19 cluster. The representative feature plots are reused from Figure 3 of (Nassir et al., 2021b[href=https://www.wicell.org#bib13]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1639-Fig4.jpg\nFigure 4. Steps to perform Cytoscape analysis\nFlowchart representing pathway network creation using Enrichment Map and Autoannotate tool. The tab selections are highlighted in red."
  ],
  "subjectAreas": [
    "Genomics",
    "Rnaseq",
    "Immunology",
    "Bioinformatics",
    "Health Sciences",
    "Molecular Biology",
    "Gene Expression"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}