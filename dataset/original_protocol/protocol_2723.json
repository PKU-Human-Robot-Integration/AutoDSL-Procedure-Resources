{
  "id": 2876,
  "origin_website": "Cell",
  "title": "Identifying species-specific k-mers for fast and accurate metagenotyping with Maast and GT-Pro",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nStep 1: Download ZymoBIOMICS microbial community data\nTiming: 5 h (could vary depending on Internet bandwidth)\nIn this step, we download two types of genomic records that are related to the ZymoBIOMICS Microbial Community, including whole genome sequences of many strains of the eight species in this synthetic microbial community and shotgun metagenomic sequencing reads generated from three replicates of the community.\nDownload accession lists.\n$ git clone https://github.com/zjshi/zymo_accs.git[href=https://github.com/zjshi/zymo_accs.git]\nNote: We prepared this Github repository for this protocol. This command will result in a directory named “zymo_accs”, which contains a list (i.e., ZymoBIOMICS_species.list) of the names of the eight member species as well as eight lists of accession numbers for these species (e.g., Bacillus_subtilis__accessions.list). Each accession number can be used to access a whole genome sequence in the NCBI Assembly database. All the accession numbers were retrieved from NCBI assembly database as of Aug 3, 2022. Only assemblies in the highest tier of quality (i.e., complete level) are included.\nDownload whole genome sequences from NCBI assembly database.\n$ cat ZymoBIOMICS_species.list | xargs -I[] bash -c \"datasets download genome accession --inputfile []__accessions.list --filename [].zip --exclude-genomic-cds --exclude-gff3 --exclude-protein --exclude-rna\"\nNote: This command will download eight zip files (e.g., Bacillus_subtilis.zip), each containing whole genome sequences of a species included in the accession list.\nDownload shotgun metagenomic sequencing reads from NCBI SRA.\n$ mkdir fastq\n$ fasterq-dump -O fastq/SRR12324251_sra SRR12324251 -f\n$ fasterq-dump -O fastq/SRR12324252_sra SRR12324252 -f\n$ fasterq-dump -O fastq/SRR12324253_sra SRR12324253 -f\nNote: This command will create a directory named “fastq” and three subdirectories (e.g., SRR12324251_sra). Each subdirectory contains shotgun metagenomic sequencing reads of one replicate of the ZymoBIOMICS Microbial Community. Sequencing reads will be downloaded in FASTQ format.\nStep 2: Generate a catalog of common SNPs using Maast to compare genome assemblies\nTiming: 2 h",
    "Prepare Maast input files.\n$ cat ZymoBIOMICS_species.list | xargs -I[] -n1 -P8 bash -c \"unzip -o -d [] [].zip\"\n$ cat ZymoBIOMICS_species.list | xargs -I[] bash -c \"mkdir []/genomes && ls []/ncbi_dataset/data/ | grep -v json | xargs -I{} -n1 -P8 bash -c 'cat []/ncbi_dataset/data/{}/∗.fna > []/genomes/{}.fna'\"\nNote: These commands will prepare input files required by Maast for common SNP calling. Upon the successful execution, these commands will for each species create a working directory named by the species and extract all whole genome sequences in FASTA format into a subdirectory named “genomes” inside that working directory.\nCall common SNPs with Maast.\n$ cat ZymoBIOMICS_species.list | xargs -I[] -n1 -P1 bash -c \"maast genomes --fna-dir []/genomes/ --out-dir []/maast_out/ --min-prev 0.9 --snp-freq 0.01 --threads 8\"\nNote: For each species, this command will generate an output directory named “maast_out” as well as the following files in the output directory: 1) a centroid genome, named 'reference.fna', which is picked as the reference genome for SNP calling, 2) a multiple sequence alignment (MSA) of tag genomes named 'tag_msa.fna', 3) a VCF file named 'core_snps.vcf' describing common SNP sites, and 4) a tab-separated values (tsv) file named 'coords.tsv' describing the coordinates of the core genome regions. In this command, a genomic site is called a SNP site if the site is present in >90% of the tag genomes and has two or more alleles with a minor allele frequency >1% in these genomes. Both centroid and tag genomes are automatically picked by Maast. SNP sites and core genome regions are described in the coordinates of the reference genome.\nStep 3: Identify and create an optimized database of species-specific sck-mers with GT-Pro\nTiming: 4 h\nPrepare input files for GT-Pro database building.\n$ cat ZymoBIOMICS_species.list | xargs -I[] -n1 -P8 bash -c \"cp []/maast_out/∗.∗ []/\"",
    "$ cat ZymoBIOMICS_species.list | xargs -I[] -n1 -P8 bash -c \"mv []/tag_msa.fna []/msa.fa\"\n$ cat ZymoBIOMICS_species.list | xargs -I[] -n1 -P8 bash -c \"echo $PWD/[]\" > build.list\nNote: This command will prepare all input files required by the database building module of GT-Pro.\nBuild a GT-Pro database.\n$ GT_Pro build --in build.list --out db_build --dbname zymo8spec_db --threads 4 --overwrite\nNote: This command will build a GT-Pro database named “zymo8spec.bin” which stores in binary format all species-specific sck-mers (for k = 31) as well as the unique identifiers of target SNPs of these sck-mers. It will also create a SNP dictionary file named “zymo8spec.snp_dict.tsv” that will be used for parsing the raw output of metagenotyping from GT-Pro. For the convenience of computing, the species in the database are encoded with eight six-digit integer IDs, ranging from 100001 to 100008. Complete mapping between the species and ID is described in an output file named “zymo8spec.species_map.tsv”. This command is time consuming and takes 95% of the step 3 runtime (∼3.8 h).\nOptimize the GT-Pro database.\n$ GT_Pro optimize --db db_build/zymo8spec_db --in $HOME/gt-pro/test/SRR413665_2.fastq.gz --tmp ./here\nNote: This command will optimize the data structure for storing sck-mers into a GT-Pro database according to the specifications of the local computing environment. This can be used for rapid and RAM-efficient metagenotyping. This command requires an input file of metagenomic reads in FASTQ format for running a test. This file may contain a small number of reads for a quick test. A small test dataset downloaded with GT-Pro code repository is used here.\nStep 4: Metagenotype the ZymoBIOMICS microbial community using GT-Pro\nTiming: 20 min\nRun GT-Pro to metagenotype the dataset.\n$ GT_Pro genotype -d build/zymo8spec_db -o ./fastq/%{in} ./fastq/SRR12324251_sra/SRR12324251_1.fastq ./fastq/SRR12324252_sra/SRR12324252_1.fastq ./fastq/SRR12324253_sra/SRR12324253_1.fastq",
    "Note: This command performs the metagenotyping on shotgun metagenomic sequencing data of the ZymoBIOMICS Microbial Community. For simplicity, this command only metagenotypes the forward reads (fastq 1). In practice, users would genotype forward and reverse reads, if both are available. This can be done by supplying both forward and reverse reads as either two individual input files or a single concatenated file. The command does not need to be modified otherwise.\nParse GT-Pro metagenotyping output.\n$ echo -e \"SRR12324251\\nSRR12324252\\nSRR12324253\" > zymo_sample_sra.list\n$ cat zymo_sample_sra.list | xargs -I[] -n1 -P3 bash -c \"GT_Pro parse --in fastq/fastq_[]_sra_[]_1.tsv --dict ./build/zymo8spec_db.snp_dict.tsv --out fastq/[]_1__gtpro.tsv \"\nNote: This command will parse the GT-Pro output, which is encoded in a compact machine-readable format, into human-readable (tsv) format. The resulting output file has eight fields: 1) Species ID: six-digit integer which specifies a species, 2) Global Pos: an integer with up to seven digits which specifies the global position of a SNP in the representative genome of a species, 3) Contig: a string with arbitrary length which specifies the contig of the reference genome where a SNP is located, 4) Local Pos: an integer with up to seven digits which specifies the position of a SNP on a contig, 5) Allele 1: single character, A, C, G or T, which specifies allele 1 of a SNP, 6) Allele 2: similar as allele 1 but specifies allele 2 of a SNP, 7) Allele 1 Cnt: an integer specifying the count of metagenomic reads matching allele 1 and 8) Allele 2 Cnt: an integer specifying the count of reads matching allele 2.\nStep 5: Compare identified genotypes between technical replicates\nTiming: 5 min\nExtract genotypes for each species stratified by technical replicate.",
    "$ cat zymo_sample_sra.list | xargs -I[] -n1 -P3 bash -c 'sed \"1d\" fastq/[]_1__gtpro.tsv | awk \"$0\"' '{print $0 > \"fastq/\"$1\"__[]_1__gtpro.tsv\"}'\nNote: This command generates a total of 24 (8 species × 3 replicates) output files, each containing genotypes of one species in a replicate.\nCalculate the population average nucleotide identity (popANI) for each species across technical replicates.\nPrepare an input file.\n$ join -j 9999 zymo_sample_sra.list zymo_sample_sra.list | awk '$1 < $2 {print $1, $2}' OFS='\\t' | xargs -I[] bash -c \"seq 100001 100008 | sed 's/$/\\t[]/g'\" | sort -k1,3 > paired_input.tsv\nNote: This command will create a file in the format of tab-separated values, which contains all unique combinations of species and replicates. Each row of the file is a 3-tuple of species ID, replicate 1 and replicate 2.\nCopy and paste the text below with a text editor, and save it to a bash script named “count_popSNV.sh”.\nwhile IFS=$'\\t' read -r SPEC SAMPL1 SAMPL2;\ndo\nN_SITE=`comm -12 <(awk '$7 + $8 >=5 && ($7 == 0 || $8 == 0)' fastq/\"$SPEC\"__\"$SAMPL1\"_1__gtpro.tsv | awk '{print $1\"_\"$2}' | sort) <(awk '$7 + $8 >=5 && ($7 == 0 || $8 == 0)' fastq/\"$SPEC\"__\"$SAMPL2\"_1__gtpro.tsv | awk '{print $1\"_\"$2}' | sort) | wc -l`\nN_MATCH=`comm -12 <(awk '$7 + $8 >=5 && ($7 == 0 || $8 == 0)' fastq/\"$SPEC\"__\"$SAMPL1\"_1__gtpro.tsv | awk '{if($7 > $8){print $1\"_\"$2\"_\"$5}else{print $1\"_\"$2\"_\"$6}}' | sort) <(awk '$7 + $8 >=5 && ($7 == 0 || $8 == 0)' fastq/\"$SPEC\"__\"$SAMPL2\"_1__gtpro.tsv | awk '{if($7 > $8){print $1\"_\"$2\"_\"$5}else{print $1\"_\"$2\"_\"$6}}' | sort) | wc -l`\necho $SPEC $SAMPL1 $SAMPL2 $N_SITE $N_MATCH $(expr $N_SITE - $N_MATCH)\ndone < ./paired_input.tsv",
    "Note: We applied a filter to keep sites with 5× or higher coverage, similar to the previous study7[href=https://www.wicell.org#bib7] for the purpose of comparison. Compared to alignment-based methods, GT-Pro tends to be more resistant to false positives due to sequencing errors or reads from one species mapping to another species.1[href=https://www.wicell.org#bib1] Thus, GT-Pro enables accurate metagenotyping without coverage filters.\nRun the bash script to count popSNVs.\n$ bash count_popSNV.sh\nNote: This command will create a file in the format of tab-separated values. Each row has six fields: 1) species ID: six-digit integer which specifies a species, 2) replicate 1: a string with a length of 11 which specifies the name of replicate 1, 3) replicate 2: similar as replicate 1 but specifying the name of replicate 2, 4) no. of sites: an integer specifying the number of SNP sites genotyped in both replicates, 5) no. of matches: an integer specifying the number of SNP sites genotyped with the same allele in both replicates, and 6) no. of popSNVs: an integer specifying the number of population SNVs which is calculated as number of sites - number of matches. Here the definition of a popSNV is similar to that in the previous study,7[href=https://www.wicell.org#bib7] which is a site at which both replicates share no alleles, major or minor."
  ],
  "subjectAreas": [
    "Genomics",
    "Sequence Analysis",
    "Bioinformatics",
    "Microbiology",
    "Genetics",
    "Evolutionary Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}