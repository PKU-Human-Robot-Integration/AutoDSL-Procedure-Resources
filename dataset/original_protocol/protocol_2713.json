{
  "id": 2865,
  "origin_website": "Cell",
  "title": "Protocol for identification and computational analysis of human natural killer cells using flow cytometry and R",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nLoading and performing compensation of FCS files\nTiming: ∼30 min (for step 1)\nThis section’s goal is to load and perform compensation on instrument-exported flow cytometry standard (FCS) files. After completion of this section, the user will have properly compensated data that is subsequently read for downstream analyses.\nLoad FCS files for samples and single compensation controls into FlowJo (key resources table[href=https://www.wicell.org#key-resources-table]; other software may be used, but these protocol steps specifically refer to FlowJo).\nCreate groups for samples, if needed (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2369-Fig1.jpg\nFigure 1. Window configuration for creating and setting sample groups\n(A) Create or modify group settings panel, includes group name, role, staining, etc.\n(B) Main window showing groups and gating trees for the group.\nCreate a compensation matrix in FlowJo (Figure 2[href=https://www.wicell.org#fig2]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2369-Fig2.jpg\nFigure 2. Workflow for creating and modifying compensation matrices\n(A) Main tool ribbon showing compensation tools including creating compensation (left-most “Compensation” tool) and “Edit Compensation Matrix.”\n(B) Compensation creation window including definitions for negative and positive peaks.\n(C) Compensation matrix editor view including NxN displays for each channel and cells to directly modify compensation values.\nSelect the “Compensation” group.\nUsing the navigation ribbon, go to “Workspace” and then “Compensation” (Figure 2[href=https://www.wicell.org#fig2]A).\nEnsure the proper negative and positive peaks for each parameter are set (Figure 2[href=https://www.wicell.org#fig2]B).\nNote: For projects using a universal negative control, ensure that the negative gate on the marker histogram captures the entire peak that is at or near 0.\nThen for each compensation sample, select the brightest peak on the histogram.\nNote: For projects using per-tube negative controls, ensure that both a positive and negative gate are set such that the positive gate captures the brightest peak, and the negative gate captures the peak at or near 0.",
    "Apply the newly created compensation matrix to sample groups by clicking “Apply to group”, which is found in the top left of the “Compensation” window.\nNote: Ensure that compensation is applied to the groups that contain samples.\nOpen the compensation matrix and modify the matrix as needed by clicking “Edit Compensation Matrix” to ensure accurate compensation (Figure 2[href=https://www.wicell.org#fig2]C).\nFor more detail on compensation errors and how to correct them, see the troubleshooting[href=https://www.wicell.org#troubleshooting] section.\nGating NK cells\nTiming: ∼30 min (for step 7)\nThe goals for this section are to properly identify NK cells using accepted gating strategies for human NK cells. These NK cells are defined as lineage (CD3, CD14, CD19) negative, CD56+, CD16+/− lymphocytes. Depending on the user’s population of interest, these initial gating steps may differ. Initial cleanup gating is utilized to exclude non-lymphocytes, doublets, and non-viable cells. After completion of this section, the user will have properly identified CD56dimCD16+ NK cells.\nOpen a sample file and select mononuclear cells based on initial gating of FSC-A and SSC-A (Figure 3[href=https://www.wicell.org#fig3]; P1).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2369-Fig3.jpg\nFigure 3. Gating strategy to define NK cells in humans\nArrows denote sequential gating steps starting with P1 – mononuclear cells, P2 – single cells based on forward scatter, P3 – single cells based on side scatter, P4 – live cells based on negative staining of amine dye, P5 – cells negative for CD19 (B cell) and CD14 (monocyte) lineage markers, P6 – cells negative for CD3 (T cell lineage) and CD4 (other cell types), and P7 – NK cells based on expression of CD56dimCD16+ cells.\nOpen mononuclear cells and gate for single cells only using sequential gating for both FSC-A and FSC-H, and SSC-A and SSC-H (Figure 3[href=https://www.wicell.org#fig3]; P2; P3).",
    "Gate for live cells by gating on the negative population of the chosen viability dye (Figure 3[href=https://www.wicell.org#fig3]; P4).\nWe recommend being conservative with gating for viable cells. Dead cells can have a great impact on downstream marker expression profiles.\nFor identifying NK cells, use a general signature of CD3- CD14- CD19- CD56+.\nFirst, plot CD14 and CD19 and gate the double negative population (Figure 3[href=https://www.wicell.org#fig3]; P5).\nNote: It is critical to ensure that the population gated is negative for both of these markers. Monocytes and B cells have very different expression profiles from NK cells and can skew downstream results if a substantial number of contaminating cells are present.\nNext, plot CD4 and CD3 and gate for the double negative population (Figure 3[href=https://www.wicell.org#fig3]; P6).\nNote: It is critical that no contaminating T cells are present in downstream analysis. T cells, which can be similar to NK (especially CD8+ T Cells), can greatly skew downstream analysis.\nPlot CD56 and CD16 on CD14- CD19- CD4- CD3- population and gate for CD56dimCD16+ cells. These are the NK cells of interest (Figure 3[href=https://www.wicell.org#fig3]; P7).\nNote: This selection can be tailored to the user’s goals. We focus on the cytotoxic CD56dimCD16+ population, but the immunoregulatory CD56brightCD16- population can be of interest as well.\nSelect the entire gating path and drag it to the group folder to apply this gating to all samples.\nCheck each sample to ensure accurate gating and modify as needed.\nExporting NK populations as CSV files\nTiming: ∼30 min (for step 16)\nIn this following section, we will be exporting the compensated and gated NK populations to the generic comma-separated values (CSV) file format. This file format can be utilized in a wide arrange of analyses and software.\nOpen the group folder and on the first sample select the “NK cell” population.",
    "Go to the navigation ribbon and select “Edit” and “Select Equivalent Nodes” to select all NK cells (Figure 4[href=https://www.wicell.org#fig4]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/2369-Fig4.jpg\nFigure 4. Data exporting in FlowJo\n(A) Tool ribbon displaying population selection tools.\n(B) Tool ribbon displaying various exportation tools including “Export/Concatenation”.\n(C) Export/Concatenation dialog window including output format, file destination, parameter selection, and naming patterns.\nExport files using Command + E on Mac or Ctrl + E on Windows, or by going to “File” -> “Export/Concatenate” (Figure 4[href=https://www.wicell.org#fig4]B).\nIn the export window at the file type dropdown, select “CSV – Channel Values” (Figure 4[href=https://www.wicell.org#fig4]C).\nUnder “Parameters” select “All compensated parameters” (Figure 4[href=https://www.wicell.org#fig4]C).\nSelect an export location and export all files.\nCreation of metadata file\nTiming: ∼30 min (for step 22)\nMetadata is a critical component of every project. This file will serve as the guide for associating files to their appropriate sample IDs, group status, and any other pertinent information needed for downstream analyses. There are many ways of both manual and automated methods of creating these types of files, but for the purpose of this protocol the user will be instructed to perform this step manually.\nCreate a new file in Microsoft Excel or other tabular editing software.\nCreate at least two columns with the headers “Sample” and “Group”.\nFor each sample exported in the previous section, create a row with the sample identifier in “Sample” and relevant grouping factor in “Group”.\nThe sample identifier can be any combination of sample characteristics or sequential identifiers. For example, here we use a prefix “Sample” followed by sequential numbering to assign a unique ID to each sample.\nSave file as a CSV in a convenient location.",
    "Note: Make sure to save as CSV and not an Excel file since reading into R requires a CSV file. Excel files require a different method to read into R. This can be done but will require user to use their own code.\nLoading data into R and creating sample data.frame\nTiming: ∼30 min (for step 26)\nThe first step of computational analyses in R is loading data and getting it into a format suitable for downstream steps. In this section, we load all of the exported CSV files, combine them into a single R data.frame, and finally read in the metadata and add that information to the data.frame. This step is an important step, so care should be taken to examine the data as its loaded to ensure that it is loaded correctly.\nCreate a new Rscript file in RStudio.\nSet the working directory to the folder that exported CSV files were placed in steps 21 and 25.\n>setwd(\"<PATH>/<TO>/<PROJECT>\")\nInstall the required packages and load them.\n>if (!require(\"BiocManager\", quietly = TRUE)){\n  install.packages(\"BiocManager\")\n}\n>BiocManager::install(\"CytoGLMM\")\n>install.packages(c(\"ggplot2\",\"uwot\",\"dplyr\"))\n>library(ggplot2)\n>library(uwot)\n>library(dplyr)\n>library(CytoGLMM)\nIterate through each CSV of data and read it into memory. Then merge them into a single data.frame.\nNote: For this protocol, the folder structure used is a parent directory that contains a subdirectory named “flow” which holds the exported FlowJo CSV files. The metadata file is found in a subdirectory of the parent project folder named “meta.” The structure should be as follows:\nPROJECT FOLDER:\n  ⇒ meta/\n        metadata.csv.\n  ⇒ flow/\n        All sample CSV files.\n>csv.list <- list()\n># Iterate through each CSV\n># Adding the sample ID and adding it to our `csv.list`\n>csv.files <- list.files(paste0(getwd(), \"/flow/\"), pattern = \".csv\")\n># For each file, read it in and add the sample ID which is in the filename",
    ">for(i in 1:length(csv.files)) {\n>  sample.id <- strsplit(csv.files[i], \"_\")[[1]][4] # Split filename and take 3rd element\n>  tmp <- read.csv(csv.files[i], check.names = F) # read in the CSV\n>  try({ # Some samples had no viable cells. Handle that exception here\n>    tmp$Sample <- sample.id # Create a new column for the sample ID\n>    tmp <- as.data.frame(tmp)\n>  })\n>  csv.list[[i]] <- tmp # Append the CSV as a dataframe to the list\n>}\n># Now let's combine each of the csv files in csv.list\n>df <- do.call(\"rbind\", csv.list)\nNext, read in the newly created metadata file and match metadata information to the data.frame. You will need to set the path to your respective metadata file. See Table 1[href=https://www.wicell.org#tbl1] for example data.frame output.\ntable:files/protocols_protocol_2369_1.csv\n>metadata <- read.csv(\"./meta/metadata.csv\", check.names = F)\n># Add in metadata information\n>df <- merge(df, metadata[, c(\"Sample\",\"Group\",\"Age\")], by =\"Sample\", all=T)\n># Reorder the data frame(personal preference)\n># Change this for your specific dataset\n>df <- df[, c(\"Sample\",\"Group\",\"Age\", colnames(df)[2:29])]\n># Drop samples that were NA or had no cells\n>df <- df[complete.cases(df),]\nCritical: When combining data from several files, always examine the resulting data.frame to ensure that all data were loaded correctly. You may wish to check data columns for the correct class of variable.\nUniform Manifold Approximation and Projection (UMAP)\nTiming: ∼30 min (for step 31)\nOne of the first steps in many computational analyses is dimensionality reduction and visualization. These steps serve several purposes, including identifying distinct biological clustering of the data or identifying potential biases in the data (sample, technical, etc.). This section utilizes the UMAP for its speed and preservation of local relationships, but many other algorithms can be used, such as t-Distributed Stochastic Neighbor Embedding (t-SNE), Principal Component Analysis (PCA), etc.",
    "Before performing UMAP analysis, the phenotypic markers of interest need to be defined. These will be specific to your dataset. While here, we will also rename the columns for downstream CytoGLMM analysis.\nNote: Due to the complexity of high dimensional flow cytometry data, traditional gating workflows utilizing sequential biplots becomes extremely time intensive and prone to user bias. In an attempt to overcome these challenges, we utilize UMAP to create a two-dimensional embedding of the data to identify clusters of phenotypically similar cells. These clusters can then be labeled and interrogated in finer detail.\n>colnames(df) <- c(\"Sample\",\"Group\", \"Age\",\"a4B7\",\"CCR7\", \"KIR2DS4\",\"CD57\", \"CD4\",\"NKG2D\",\"NKG2C\", \"CD3\",\"CD16\",\"CD14\",\"HLADR\",\"CD56\",\"CD127\",\"KIR3DL1S1\",\"CD2\", \"CD8\",\"PD1\", \"CD244\",\"NKp46\",\"Tim3\",\"CXCR6\",\"LD\", \"KIR2DL1S1S3S5\", \"CD85j\",\"KLRG1\", \"CD19\",\"CCR5\",\"NKG2A\")\n>markers <- c(\"a4B7\", \"CCR7\",\"KIR2DS4\",\"CD57\", \"NKG2D\",\"NKG2C\", \"CD16\",\"HLADR\",\"CD56\", \"CD127\",\"KIR3DL1S1\",\"CD2\",\"CD8\",\"PD1\",\"CD244\",\"NKp46\",\"Tim3\",\"CXCR6\",\"KIR2DL1S1S3S5\", \"CD85j\",\"KLRG1\",\"CCR5\",\"NKG2A\")\nNext, call the UMAP function with default parameters.\nOptionally, you can run several iterations with differing parameters, but default parameters work for most use cases.\n>um.res <- umap(scale(df[, markers], center=T, scale=T), verbose=T)\nRename the um.res columns to something more readable and combine the original data.frame into UMAP results.\n>colnames(um.res) <- c(\"UMAP1\", \"UMAP2\")\n>um.df <- cbind(df, um.res)\nPlot the UMAP results using ggplot2.\nNote: You can modify the aes() settings to change which metadata or fluorescent values are used for coloring points.\nNote: Some datasets can contain hundreds of thousands or millions of events. One method to speed up graphic plotting is to subset the data. Here for each sample, a random sample of 300 cells or all cells are kept.\nNote: Additionally, due to how ggplot2 plots data points, we need to mix the data frame to ensure that samples read first do not get hidden by samples read in later.\n>um.df.small <- um.df %>%\n  group_by(Sample) %>%\n> sample_n(min(n(), 300))\n>um.df.small<- as.data.frame(um.df.small[sample(1:nrow(um.df.small)), ])\n>ggplot(um.df.small,\n    aes(x = UMAP1,\n      y = UMAP2,\n      color = Group)) +\n  geom_point(size = 0.5)",
    "Additionally, iterate through markers and plot a relative expression graph for each marker.\n>for(marker in markers) {\n>  p <- ggplot(um.df.small,\n          aes(x = UMAP1,\n            y = UMAP2,\n            color = um.df.small[, marker])) +\n  geom_point(size = 0.5) +\n  scale_color_gradientn(colors = c(\"blue\", \"white\", \"red\")) +\n  labs(color=marker)\n> ggsave(paste0(\"∼/Desktop/STAR Protocols/figures/UMAP/\", marker, \".pdf\"), p, width = 11,\n    height = 8.5, units = \"in\", device = \"pdf\")\n>}\nCritical: Depending on your dataset, you may need to perform a normalization step for each marker. Typically, either quantile clamping or z-scores can be used. For example, if z-score scaling is required, on the ggplot() call, replace >color = um.df.small[, marker] with >color = scale(um.df.small[, marker], center=T, scale=T)\nGeneralized linear modeling using CytoGLMM\nTiming: ∼30 min (dependent on number of cells and samples)\nIn this section, we apply generalized linear modeling (GLM) on the data to identify potential biomarkers of the chosen group comparisons. The CytoGLMM package was developed for applying GLM to flow cytometry data. Flow cytometry data contains thousands of cells from a single sample which presents a unique challenge in that these cells are independent yet representative of a single source.\nThe following steps are adapted from the CytoGLMM vignettes (https://christofseiler.github.io/CytoGLMM/articles/CytoGLMM.html[href=https://christofseiler.github.io/CytoGLMM/articles/CytoGLMM.html]).\nSelect two comparisons to make. For this example, select the healthy donor (HD) group and compare the under 45 to over 45 groups.\nNote: The purpose of these analyses is to identify markers that are predictive of each group. For example, these could be biomarkers useful for identifying diseased samples or identifying markers of the treatment group. Flow cytometry data generates millions of data points but are confined to dozens of samples. CytoGLMM leverages these large data sets to report log-odds ratios of marker expression defining group membership.\nFirst, create a categorical group name for age groups.",
    "Set samples, groups, and age groups to factors.\nThis step is time-dependent on the number of cells. Optionally, downsample to reduce computation time.\n>df$Age.Group <- ifelse(df$Age <= 45,\"Under45\",\"Over45\")\n>df$Sample <- as.factor(df$Sample)\n>df$Group <- factor(df$Group, levels = c(\"HD\",\"cART\",\"Viremic\"))\n># Can only compare two groups so we’ll compare HD ages\n# also need to downsample to 1000 events/sample since this step can take a long time\n>glm.df <- df %>% filter(Group ==\"HD\") %>% group_by(Sample, Group) %>% sample_n(if(n() < 1000) n() else 1000)\n>glm.df$Age.Group <- factor(glm.df$Age.Group, levels = c(\"Under45\",\"Over45\"))\n>glm.df[, markers] <- scale(glm.df[, markers], center=T, scale=T)\nPerform GLM analysis with the ‘cytoglm’ function.\nOptionally, change the ‘num_cores’ to increase how many CPU cores are utilized.\n>glm_fit = CytoGLMM::cytoglm(glm.df,\n                  num_boot = 1000,\n                  protein_names = markers,\n                  condition =\"Age.Group\",\n                  group =\"Sample\",\n                  num_cores = 1)\nPlot the results.\n>plot(glm_fit, order=T)\nCritical: Grouping variables will differ between projects. Ensure proper grouping is set up for the specific dataset being examined."
  ],
  "subjectAreas": [
    "Microbiology",
    "Immunology",
    "Flow Cytometry",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}