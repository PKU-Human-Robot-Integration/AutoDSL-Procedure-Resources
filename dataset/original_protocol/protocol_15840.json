{
  "id": 19666,
  "origin_website": "Wiley",
  "title": "A Guide to Gene-Centric Analysis Using TreeSAPP",
  "procedures": [
    "This protocol describes a workflow to create and validate a TreeSAPP reference package. Candidate reference McrA protein sequences are provided. These protein sequences were retrieved from FunGene (Fish et al., 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0014]), RefSeq (Wheeler et al., 2007[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0053]), and recent publications describing novel lineages with the potential to metabolize methane or other short-chain alkanes (Borrel et al., 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0004]; Boyd et al., 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0006]; Chen et al., 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0010]; Evans et al., 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0012]; McKay et al., 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0028]; Nobu, Narihiro, Kuroda, Mei, & Liu, 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0033]; Sorokin et al., 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0044]; Vanwonterghem et al., 2016[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0049]; Wang, Wegener, Hou, Wang, & Xiao, 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0051]). Subsequent curation steps within TreeSAPP are used to select for a nonredundant set of representative sequences that maximize phylogenetic breadth of the reference package.\nTaxonomic lineage information of candidate reference sequences can be provided by either the input FASTA or a table. FASTA sequence headers from RefSeq contain an Entrez-compatible accession identifier that can be queried and linked to a sequence's NCBI taxonomic lineage. This is the easiest way to provide lineage information, but also restricts the sources that can be used to create and update a reference package. To overcome this limitation, a tab-delimited table can also be provided, where lineages in SILVA or GTDB format are mapped to sequence accessions (i.e., all text before the first whitespace character) (Parks et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0035]; Quast et al., 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0038]). Both modes are used in this workflow.",
    "Reference package purity—achieved when only orthologous sequences are classified within a given reference package, thereby indicating all reference sequences are homologous—is confirmed by classifying sequences based on accurate functional annotations. This is accomplished by using a trusted source such as MetaCyc, TIGRFAM, or Swiss-Prot (Caspi et al., 2006[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0008]; Haft et al., 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0016]; UniProt Consortium, 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0047]). The reported coverage metric is a function of the number of phylogenetic tree leaves that are descendants of query sequence placements. A basal placement would accordingly yield 100% coverage and suggest remote homology between the reference set and the query's orthologous group. Conversely, low coverage where the queries map to the leaf tips indicates a close relationship to the reference(s). For this protocol the TIGRFAM database seed (61,111 sequences from 4488 TIGR families) is used by treesapp purity along with an optional table describing TIGR families to enrich the output. Although the TIGRFAM database seed is well suited for curating reference packages, it is no longer being actively developed. Alternative sources, such as eggNOG and Swiss-Prot (Bairoch & Apweiler, 1997[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0066]; Huerta-Cepas et al., 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0070]), will be needed in the future as more reference packages are constructed for user-defined protein coding genes of interest.\nNecessary Resources\nHardware\nTo efficiently implement TreeSAPP, 32 Gb RAM and at least a quad-core processor (up to eight threads) are required. In addition, 40 Gb free hard disk space is required to store the inputs and outputs (including temporary files) of the protocols.\nSoftware\nA computer running either a 64-bit Linux-based distribution (e.g., Ubuntu) or MacOS is required.\nTo install TreeSAPP and its dependencies, either Conda, Docker, or Singularity must be installed. To install Conda, execute the following commands, where the “$DIST ” variable must be replaced by “Linux” or “MacOSX”, depending on the computer's operating system.\ncurl -O \\\nhttps://repo.anaconda.com/miniconda/Miniconda3-latest-$DIST-x86\\_64.sh",
    "bash Miniconda3-latest-$DIST-x86_64.sh\nTo install Docker, follow the instructions at https://docs.docker.com/get-docker/[href=https://docs.docker.com/get-docker/]. To install Singularity, follow the instructions at https://sylabs.io/guides/3.0/user-guide/installation.html[href=https://sylabs.io/guides/3.0/user-guide/installation.html] (Linux only).\nTo install TreeSAPP, see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-prot-0002]. Support Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-prot-0003] requires users to have an iTOL account and subscription. This is only required for visualizing phylogenetic trees with query sequences placed; few alternatives that import JPlace files exist (Matsen, Hoffman, Gallagher, & Stamatakis, 2012[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0027]).\nThis protocol also requires a web browser such as Chrome, Safari, or Firefox.\nFiles\nChange your directory to a location on your computer's file system where you are able to write data for these protocols. It is suggested to create a new directory and then move into it to invoke TreeSAPP commands. The data archive is 1.5 GB and will require ∼3 minutes to download, assuming a 10-MB/s internet download speed.\nmkdir treesapp_protocols\ncd treesapp_protocols\nwget https://zenodo.org/record/7499961/files/treesapp_protocols_data.tar.gz\nmkdir protocols_reqs; tar -xzf treesapp_protocols_data.tar.gz -C protocols_reqs/\nThe last two commands will download a manifest and the files required for all Basic and Support Protocols into the current working directory.\n1. Install TreeSAPP as described (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-prot-0002]).\n2. Create a reference package with TreeSAPP.\nThe TreeSAPP subcommand used to build new reference packages is treesapp create. This command will query the Entrez server and gather taxonomic lineage information for all sequences, deduplicate sequences by clustering, align sequences together, and infer a phylogeny.\n         \ntreesapp create --refpkg_name McrA \\\n--fastx_input protocols_reqs/McrA_seed_proteome.faa \\\n--seqs2lineage protocols_reqs/lineage_table.tsv \\\n--output bp1_create/ \\\n--min_seq_length 400 --similarity 0.97 --min_taxonomic_rank p \\\n--headless --trim_align --cluster --fast --num_procs 8",
    "An explanation of the above command line arguments follows. –fastx_input and –output control the paths to the FASTA for creating the reference package and the directory to write the outputs, respectively. –seqs2lineage points to a table mapping a subset of the sequence accessions to taxonomic lineages. –min_seq_length was set to 400, thereby excluding all sequences shorter than 400 amino acids from the reference package. This corresponds to ∼75% of the full-length McrA protein sequence and may well need adjustment depending on the typical length of the reference sequences. Several optional treesapp create flags are also used, including –trim_align, which invokes multiple sequence alignment trimming to retain phylogenetically informative sites and remove those dominated by gaps; –min_taxonomic_rank, which ensures only reference sequences resolved to at least this rank prefix (‘d’ for domain, ‘p’ for phylum, etc.) are included in the reference package; –fast, which selects FastTree2 over RAxML-NG for phylogenetic inference; –headless, which skips manual selection of centroid sequences for each cluster; –cluster, which activates candidate reference sequence deduplication with MMSeqs2 pairwise alignment clustering; and –similarity, which sets the identity threshold (in this case, 0.97). This final parameter has widespread impact on reference package utility. Values approaching 1.0 will retain more reference sequences, allowing for relatively more resolved taxonomic classifications at the cost of greater resource expenditure to compute multiple alignments and phylogenetic placement. This parameter can be tuned to produce a reference package of reasonable size, allowing for classifications within an acceptable amount of time, with 1000 sequences being a reasonable upper bound.\n3. Check reference package purity.\nThe TIGRFAM database seed is used to identify whether any unexpected orthologous groups were included in the initial reference packages. Internally, treesapp purity calls treesapp assign with the target reference package before summarizing the prevalence of hits in the phylogeny.",
    "treesapp purity \\\n--refpkg_path bp1_create/final_outputs/McrA_build.pkl \\\n-i protocols_reqs/TIGRFAM_seed_named.faa \\\n-x protocols_reqs/TIGRFAM_info.tsv \\\n-o bp1_purity/ \\\n--num_procs 4\nThe output indicates that four query sequences (i.e., TIGRFAM hits) were classified (Table 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-tbl-0001]). Sequences were placed at four tips of the tree and covered 2.2% of the phylogeny. Since TIGR03256 represents the McrA protein family, the reference package is assumed to be pure.\nTable 1.\n                Treesapp Purity Classification Results for the McrA Reference Packagea[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-tbl1-note-0001_54]\ntable:\n﻿TIGR family,Hits,Leaves,Coverage (%),Description\nTIGR03256,4,4,2.2,\"Methyl-coenzyme M reductase, alpha subunit\"\na Hits refer to the number of query (TIGRFAM) sequences classified by the corresponding reference package. Coverage is the percentage of the reference package's phylogenetic tree leaves that were descendants of those hits. Greater coverage suggests the query sequences were placed more deeply in the phylogeny.",
    "TreeSAPP was written in Python 3 but relies on multiple software dependencies that must also be installed for proper functionality. TreeSAPP and its dependencies can be installed either by Conda or an image of a software container. Regardless of the installation method, the TreeSAPP software and protocols herein will only work on computers running Linux or Mac operating systems.\nOption 1: Installation using the Conda package manager\nThe recommended and most efficient method for installing TreeSAPP is by way of the platform-independent package manager, Conda. Package managers such as Conda are reliable tools that install a desired software and its respective dependencies while also ensuring all dependency versions are compatible with one another. The following two commands create a new Conda environment called treesapp cenv (this can be changed, just remember to be consistent), install TreeSAPP and its dependencies in this environment, and then activate the environment so that TreeSAPP is ready to be used.\n         \nconda init bash\nconda create -n treesapp_cenv -c bioconda -c conda-forge treesapp\nconda activate treesapp_cenv\nOption 2: Running TreeSAPP through a container-based image\nTreeSAPP can also be invoked through two container-based platforms, ensuring consistent versions and therefore maximal reproducibility between analyses. TreeSAPP containers are offered for both Docker and Singularity. Docker is suitable for compute environments where the user has root privileges (e.g., cloud systems and personal computers), whereas Singularity is amenable to systems where the user is operating on systems without root privileges (e.g., departmental servers and scientific computing grids). These images are updated with every version of TreeSAPP released.\nDocker\nThe latest Docker container can be pulled from a Quay.io repository via the following command.\n         \ndocker pull quay.io/hallamlab/treesapp:latest",
    "In most if not all cases, some directory of the local system will need to be bound to make it accessible to the Docker container. Otherwise, TreeSAPP will not be able to read the inputs you provide or write the outputs to your local storage. More information on what is required can be obtained from the official Docker documentation (docker service create; see Internet Resources). In the following example command, the user's Desktop directory is bound to the Docker container's /data directory so all files in Desktop can be accessed via /data.\n         \ndocker run -t -i -d \\\n–mount type=bind,src=/home/$USER/Desktop,dst=/data \\\nquay.io/hallamlab/treesapp:latest\nSingularity\nThe latest Singularity container can be downloaded from the Singularity repository by:\n         \nsingularity pull library://cmorganl/default/treesapp:latest\nThe image will be downloaded in Singularity Image Format (.sif) as treesapp_latest.sif.\nInvocation\nRunning TreeSAPP through the containers requires slight modification to all commands. With the Docker container, the first step is to find out the name of the running image, then execute commands within the image. This can be accomplished by the following commands:\n         \ndocker ps # to find the name, thirsty_shockley as an example\ndocker exec thirsty_shockley treesapp assign -h\nUsing a Singularity container is very similar to using a Docker image, but instead of referencing a running image, Singularity is pointed to the downloaded .sif file.\n         \nsingularity exec treesapp_latest.sif treesapp assign -h\nSimilar to Docker, if the input or output data are located on a drive other than the boot drive, the mounted drive(s) will need to be bound with the –bind argument. For example, to mount the /Desktop directory as before:\n         \nsingularity exec –bind /home/$USER/Desktop:/data \\\ntreesapp_latest.sif treesapp assign \\\n-i /data/input.fasta -o /data/assign_out/",
    "In this protocol, taxa in the reference package will be associated with their respective traits, i.e., different methane and short-chain alkane transformations. Trait annotations can be used both to automate trait classification of queries with treesapp layer and to illustrate trait linkages on a phylogenetic tree using the iTOL web interface with treesapp colour.\n1. Install TreeSAPP as described (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-prot-0002]).\n2. Loading trait annotations.\nTrait annotations are entered into the reference package with the treesapp package subcommand. treesapp package requires the path to a reference package (.pkl), a trait label, and a tabular file to link taxa to traits. Methane metabolism pathways were compiled for each taxon in the McrA reference package based on a literature review. All taxa were associated with a single orthologous group. The first column in the resulting table is a taxon label (e.g., g__Methanothrix) and the second column is the trait (e.g., Aceticlastic).\n         \nmkdir sp2/\ntreesapp package edit feature_annotations Pathways \\\n--refpkg_path protocols_reqs/refpkg/update/McrA_build.pkl \\\n--taxa_map protocols_reqs/Mcr_taxonomy-phenotype_map.tsv \\\n--output sp2/\nOptionally, this reference package can be overwritten to include the trait annotations by replacing the –output parameter with the –overwrite flag:\n         \ntreesapp package edit feature_annotations Pathways \\\n–refpkg_path protocols_reqs/refpkg/update/McrA_build.pkl \\\n–taxa_map protocols_reqs/Mcr_taxonomy-phenotype_map.tsv \\\n–overwrite\nThese traits were written to the feature annotations attribute of the McrA reference package and indexed under the “Pathways” label. By indexing each trait separately, multiple sets of traits can be affiliated with each reference sequence. For example, further traits could be entered into the reference package designating the substrate ranges, ecosystem preferences, or enzyme kinetics exhibited by taxa. Once all trait-based annotations are saved, reference packages are ready for trait classification.\n3. Perform trait classification with treesapp layer.",
    "Assignment at trait-level resolution occurs in two steps. First, treesapp assign classifies query sequences to the reference package, then treesapp layer maps query sequences to features according to their location in the tree (i.e., placement edge).\n         \ntreesapp layer \\\n--refpkg_dir sp2/ \\\n--treesapp_output bp3/metag/sak_2013_06_06_120m/\nThe output of this procedure is a new classification table called layered_classifications.tsv, with a column for each trait in the reference package found in bp3/metag/sak_2013_06_06_120m/final outputs/.\n4. Create iTOL color and style files.\nThe color subcommand generates files to visualize taxonomy or other features inherent to the phylogeny (such as orthologous groups) in iTOL (Letunic & Bork, 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0023]). A color-styles file colors the phylogeny's clades or labels and adds a legend, while the color-strip file creates a colorized strip encompassing the phylogeny. Multiple layers can be created to convey sophisticated evolutionary information in a digestible format. The treesapp colour commands used to paint the phylogeny of the McrA reference package are as follows:\n         \ntreesapp colour --palette RdYlBu \\\n--attribute Pathways \\\n--unknown_colour gray \\\n-r sp2/McrA_build.pkl\ntreesapp colour --palette BrBG \\\n--rank_level class \\\n-r sp2/McrA_build.pkl\nFour text files are written to the current working directory:\n         \nMcrA_class_colours_style.txt\nMcrA_class_colour_strip.txt\nMcrA_Pathways_colours_style.txt\nMcrA_Pathways_colour_strip.txt.\n5. View annotations in iTOL.",
    "The iTOL tool can be used to visualize phylogenetic trees with placements by reading the .jplace file generated by treesapp assign. All files (excluding color and style files created in the previous step) are in the iTOL output directory in a treesapp assign output directory. After navigating a web browser to https://itol.embl.de/[href=https://itol.embl.de/] and logging in, change the page to “My Trees”. Once there, upload the McrA complete_profile.jplace file from bp3/metag/sak 2013_06_0 (or the output for any other sample). Click on the highlighted file name to go to the iTOL viewing window. At this point, the annotation files can be uploaded by clicking and dragging McrA_labels.txt and the colors and styles files from step three. Without much more editing, the result should look identical to Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-fig-0002].\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/e7b210a4-3194-4313-b5d8-4013edaad2c8/cpz1671-fig-0002-m.jpg</p>\nFigure 2\nA fully annotated McrA phylogeny visualized in the Interactive Tree of Life (iTOL).",
    "This protocol describes how to update a reference package for McrA, first with homologous sequences identified in complete reference genomes and then with MAGs sourced from the Genomes from Earth's Microbiomes (GEM) catalog (Nayfach et al., 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0032]), to ensure the reference package is up to date with respect to known lineages. Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-fig-0003] demonstrates this process. Reference packages are not intended to be static depictions of microbial diversity within a single database, or even our collective understanding in the current moment. Rather, they must grow alongside an expanding tree of life. To this end, reference packages can be updated by traversing a genomic information hierarchy encompassing different levels of biological organization and genome complexity (Basher, McLaughlin, & Hallam, 2020[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0002]). While isolate genomes are the most reliable source of reference sequences, integrating SAGs and MAGs can increase the representation of new clades within a reference package. This is especially relevant when profiling environments where endemic diversity may not be represented in reference packages derived solely on the basis of public repositories or isolate sequences. However, specific caveats apply when using metagenomic sequence information to update reference packages. Bowers et al. (2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0005]) have established community standards for evaluating the quality of SAGs and MAGs based on completeness and contamination (and occasionally strain-heterogeneity) metrics, calculated using software applications such as CheckM (Parks, Imelfort, Skennerton, Hugenholtz, & Tyson, 2015[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0036]). Although SAGs are inherently incomplete, they are organismal in nature and should be used when available to update reference packages. Medium- and high-quality MAGs can also be used to update reference packages with caution. Although MAGs can be rendered as circular genomes (Singleton et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0043]), they represent a closely related population of microbes and frequently contain misclassified material (Meziti et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0030]; Shaiber, Eren, Shaiber, & Eren, 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0042]).",
    "Following these guidelines, the McrA reference package will be iteratively updated using complete reference genomes and MAGs. Archaeal SAGs were not leveraged here, as previously conducted searches found that the limited number available in public databases did not encode novel MCR subunits.",
    "<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/aff30f50-bc5b-4532-9c17-487dfe521d50/cpz1671-fig-0003-m.jpg</p>\nFigure 3\nConceptual diagram of the iterative update workflow with subsequent placement of identical McrA query sequences on the reference package phylogenies. All tree branches are consistent with the scale provided.\nTreeSAPP integrates homologous sequences from proteomes and genomes into reference packages. It is unable, however, to update a reference package using protein sequences directly from a FASTA file. Rather, protein sequences must first be classified and organized by the module treesapp assign before they can be integrated into a reference package. Thus, each treesapp update command is preceded by a call to treesapp assign in this protocol.\n1. Install TreeSAPP as described (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-prot-0002]).\n2. Assign query sequences from reference proteomes.\nThe first of two updates will leverage 1.8 million protein sequences encoded by 774 complete reference genomes. By default, treesapp assign searches and classifies query sequences using reference packages that are installed with the software package. In the following command, the McrA reference package created using Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-prot-0001] is used instead by providing its parent directory with the –refpkg_dir argument.\n         \ntreesapp assign \\\n-i protocols_reqs/RefSeq_Archaea_CompleteGenomes.fasta \\\n-o bp2_refseq_assign/ \\\n--refpkg_dir protocols_reqs/refpkg/seed/ \\\n--num_procs 8 --trim_align\nAll McrA homologs have been classified by treesapp assign and formatted for treesapp update to use directly from the output. The number of sequences classified can be counted by using either:\n         \ngrep -c \"ˆ>\" bp2_refseq_assign/final_outputs/*_classified.faa\nwhich counts the number of lines matching a header pattern in the FASTA containing classified protein sequences, or\n         \ntail -n +2 bp2_refseq_assign/final_outputs/classifications.tsv | wc -l\nwhich counts the number of lines in the classification table file excluding the header. In either case, the commands should return the number of classified sequences as 259.\n3. Update reference package with McrA homologs.",
    "Taking the 259 classified McrA sequences, it is now possible to integrate novel sequences into the existing reference set and create a new reference package. Novel sequences are the centroids of clusters, inferred by pairwise-alignment clustering with MMSeqs2, that do not contain current reference sequences. As before, the cluster radius is controlled by the –similarity threshold. The treesapp assign output (bp2_refseq_assign/) is provided by the –treesapp_output parameter. treesapp update requires a path to a reference package to be updated through the –refpkg path parameter (note the difference between this parameter and –refpkg_dir in treesapp assign). Similar to treesapp create, treesapp update can pull taxonomic lineage labels from Entrez and replace the labels from treesapp assign. This mode is activated by the –skip_assign flag. The remaining parameters are identical to those used by treesapp create because that command is invoked once the novel sequences have been sorted.\n         \ntreesapp update \\\n–treesapp_output bp2_refseq_assign/ \\\n–refpkg_path protocols_reqs/refpkg/seed/McrA_build.pkl \\\n-o bp2_refseq_update/ –num_procs 8 –similarity 0.97 \\\n–headless –fast –skip_assign –cluster\nThe runtime log printed to the terminal window records the number of candidate reference sequences, the number of assigned sequences to be used in the update (i.e., novel sequences), and the number of references (or leaf nodes) in the updated reference package. The updated McrA reference package should contain 183 sequences.\n4. Assign query sequences from archaeal MAGs\nThe McrA homologs encoded by archaeal MAGs must be classified, analogous to the process used for McrA encoded in reference genomes. One difference between these datasets is that the MAGs are provided as genomic sequences, and therefore open reading frames (ORFs) must first be predicted and conceptually translated. While the command-line arguments are unaffected, it will take more time to identify McrA homologs due to this additional step.\n         \ntreesapp assign \\\n-i protocols_reqs/IMG_Archaeal_MAG_MCR_contigs.fasta \\",
    "-o bp2_mag_assign/ \\\n–refpkg_dir bp2_refseq_update/final_outputs/ \\\n–num_procs 8 –trim_align\nThe following command shows 885 McrA homologs were identified.\n         \ngrep -c \"^>\" bp2_mag_assign/final_outputs/*_classified.faa\n5. Update reference package with McrA homologs.\nThe taxonomic identities of these MAGs were predicted using GTDB-Tk (Chaumeil, Mussig, Hugenholtz, & Parks, 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0009]). Given that these MAGs were not accessioned in the NCBI database, their taxonomic lineages need to be passed to treesapp update in a tabular file with the –seqs2lineage parameter. This file contains two fields: a sequence ID and a SILVA- or GTDB-formatted lineage. It can be viewed with the following command:\n         \nless -S protocols_reqs/GEM_seqs2lineage.tsv\nThe second reference package update iteration can be accomplished with these MAG-derived McrA sequences to produce a more comprehensive and representative McrA reference package.\n         \ntreesapp update \\\n--treesapp_output bp2_mag_assign/ \\\n--refpkg_path bp2_refseq_update/final_outputs/McrA_build.pkl \\\n-o bp2_mag_update/ --num_procs 8 --similarity 0.97 \\\n--seqs2lineage protocols_reqs/GEM_seqs2lineage.tsv \\\n--headless --fast --skip_assign --cluster\nThere should be 414 sequences/leaves in the reference package after this second update.",
    "This protocol calculates normalized relative abundance values for classified query sequences. To demonstrate this, TreeSAPP will be used to calculate abundance of McrA genes and transcripts using metagenomic and metatranscriptomic datasets sourced from three depths in meromictic Sakinaw Lake, British Columbia, Canada. The Sakinaw Lake water column is stratified, traversing fresh and oxic surface waters (to ∼30 m depth), a sharp chemocline (∼10 m), and saline and reduced (i.e., sulfidic and anoxic) basin water (to 140 m) (Perry & Pedersen, 1993[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0037]). The redox transition zone (i.e., sulfate-methane transition zone) lies at 45 m (Vagle, Hume, McLaughlin, MacIsaac, & Shortreed, 2010[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0048]). Previous studies indicate that Sakinaw Lake harbors numerous uncultivated microbial dark matter lineages (Gies, Konwar, Beatty, & Hallam, 2014[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0015]; Rinke et al., 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0041]).\nThe relative abundance calculation requires four steps. After installation, the treesapp assign subcommand identifies sequences with putative homology to a reference package's sequences and places those in the reference phylogeny. treesapp abundance aligns a sample's reads to all ORF nucleotide sequences with BWA-MEM (Li, 2013[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0025]), then uses the samsum package (https://github.com/hallamlab/samsum[href=https://github.com/hallamlab/samsum]) to calculate the transcripts per million (TPM) value of each classified ORF (Wagner, Kin, & Lynch, 2012[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-bib-0050]). treesapp assign is capable of both classification and relative abundance calculation by calling treesapp abundance internally, as shown in step 2 of this protocol. Alternatively, treesapp abundance can be executed independently, with the main benefit of being able to recruit reads from multiple datasets in a single command. Regardless of the approach used, the ORFs must have been predicted by TreeSAPP for the read alignments to be properly mapped. The protocol concludes with a visual comparison of McrA TPM between the metagenomic and metatranscriptomic datasets.\n1. Install TreeSAPP as described (see Support Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-prot-0002]).\n2. Create an updated McrA reference package as described (see Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-prot-0004]).",
    "3. Classify metagenome homologs and calculate TPM in one step.\nIn this step treesapp assign is used to predict, classify, and assign taxonomy to conceptually translated McrA ORFs. It also calls treesapp abundance internally to calculate TPM. A shell for loop is used to run treesapp assign for each metagenome fasta-fastq pair.\n         \nfor spath in protocols_reqs/SL/meta*/sak_2013_*m/\ndo\noutput=$( echo $spath | awk -F/ ’{ OFS=\"/\"; print $3,$4 }’)\nmkdir -p bp3/$output\ntreesapp assign \\\n-i $spath/*contigs.fasta -o bp3/$output/ \\\n--reads $spath/*_2M.fastq.gz \\\n--rel_abund --pairing pe \\\n--refpkg_dir bp2_mag_update/final_outputs/ \\\n--num_procs 8 --trim_align --delete\ndone\nIn the end, there should be 6 classification table files with 110 assigned McrA sequences.\n         \ncat bp3/meta*/sak_2013_*m/final_outputs/classifications.tsv | \\\ngrep -v Query | wc -l\n4. Calculate abundance of McrA transcripts.\nHere, metatranscriptomic reads are recruited to ORFs predicted from the metagenomes for each depth. Instead of creating a new output directory, the TPM values are appended to the classification tables (controlled by –report append), such that relative abundances for both the metagenomic and metatranscriptomic datasets are in the same file.\n         \nfor metat in protocols_reqs/SL/metat/sak_2013_*m/\ndo\nsid=$( echo $metat | awk -F/ ’{ print $4 }’)\ntreesapp abundance \\\n--treesapp_output bp3/metag/$sid/ \\\n--reads $metat/*_2M.fastq.gz --pairing pe \\\n--refpkg_dir bp2_mag_update/final_outputs/ \\\n--report append --num_procs 8 --delete\ndone\n5. Visualize differential abundances.\nThe classification tables in each output directory's final_outputs/classifications.tsv are ready to be analyzed. They can be concatenated using the commands:\n         \ncat bp3/meta*/sak*m/final_outputs/classifications.tsv | \\\nhead -n 1 >bp3/combined_classifications.tsv\nfor f in bp3/meta*/sak*m/final_outputs/classifications.tsv; do\ntail -n +2 $f >>bp3/combined_classifications.tsv\ndone\nThe R-script protocols_reqs/treesapp_visualiser.R generates plots from the classifications with the following command:\n         \nRscript protocols_reqs/treesapp_visualiser.R \\\n-t bp3/combined_classifications.tsv -o bp3/ -s protocols_reqs/sample_name_map.tsv",
    "McrA-encoding archaea are predominantly affiliated with the orders Methanosarcinales and Methanomicrobiales (Fig. 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.671#cpz1671-fig-0004]). The methanotrophic Methanophagales (also known as ANME-1) were neither abundant nor transcriptionally active at the depths analyzed. McrA transcripts were generally more abundant than gene copies in Sakinaw Lake at the depths and times analyzed. Furthermore, metatranscriptomic TPM values derived from alignments using metagenome ORFs as the reference were greater than those using metatranscriptome ORFs. Several factors may have led to the lower recruitment rates for metatranscriptome ORFs, including poor assembly of McrA transcripts in these samples.\nA two-million read (i.e., one million mate-pairs) subset of the sequenced reads was processed for each sample to reduce computation time. For this reason, the taxonomic abundance barplot created will be different than that shown in the publication. The version in the publication was retained to convey scientific accuracy, and should resemble the version created by this tutorial closely enough to indicate whether the protocol worked as intended.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/1d765edc-1f39-4b9f-b8b7-11fde7c63538/cpz1671-fig-0004-m.jpg</p>\nFigure 4\nPlot generated from relative abundance values associated with Mcr genes and transcripts identified in Sakinaw Lake, as calculated by TreeSAPP. Key: MetaG, TPM calculated by aligning metagenome reads to metagenome ORFs; MetaT, calculated from metatranscriptome reads aligned to metatranscriptome ORFs; MetaT.to.MetaG, calculated from metatranscriptome read alignments to metagenome ORFs."
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}