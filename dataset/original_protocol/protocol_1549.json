{
  "id": 1655,
  "origin_website": "Cell",
  "title": "RHybridFinder: An R package to process immunopeptidomic data for putative hybrid peptide discovery",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nStep 1: Load inputs into R\nTiming: 1 min\nBefore running HybridFinder, the inputs need to be loaded into R. We propose the following way of loading the files into R in order to facilitate the process Figure 2[href=https://www.wicell.org#fig2].\nCreate an object (folder_Exp1) for the path to the parent folder (Mel_Exp1) (but both can be named otherwise).\n> folder_Exp1 <- file.path(“/Users/YOURUSERNAME/Desktop/Mel_Exp1”)\nImport the de novo sequencing as well as the database results, both of which are located in the first_run child folder.\nde novo sequencing results file\n> denovo_Exp1 <- read.csv(file = file.path(folder_Exp1, “first_run”, \"all_denovo_candidates.csv\"), header=TRUE, sep=\",\", stringsAsFactors = FALSE)\ndatabase search results file\n> db_search_Exp1<- read.csv (file=file.path(folder_Exp1, “first_run”,“DB seach psm.csv”), header=TRUE, sep=“,”, stringsAsFactors=FALSE)\nCreate an object for the path to the proteome file, located in the parent folder (folder_Exp1) (see refproteome_Exp1, in the example below). The fasta proteome will be imported in R during the HybridFinder function.\n> refproteome_Exp1 <- file.path(folder_Exp1, “uniprothuman-20379entries-Nov2019_validated.fasta”)\nCritical: Please note that if you copy the file access path (in windows), you will need to switch the backslash (“\\”) to a normal slash ( “/”).\nAccess the datasets included in the R package\nThe RHybridFinder package also includes demonstration datasets from the HLA Ligand Atlas that have already been analyzed in PEAKS. These datasets include PEAKS de novo sequencing results and PEAKS database search results.\n# access denovo dataset\n> data(package= “RHybridFinder”, “denovo_Human_Liver_AUTD17”)\n# access database search dataset\n> data(package=”RHybridFinder”, “db_Human_Liver_AUTD17”)\nNote: that due to size constraints the proteome database (.fasta) file is not included in the package. It can be downloaded from the Uniprot database[href=https://www.uniprot.org/proteomes/UP000005640].\nNote: In the environment tab, the denovo_Human_Liver_AUTD17 and db_Human_Liver_AUTD17 should appear. Note that if you see <promise>, after clicking on the objects, the data would appear.\nStep 2: Run HybridFinder",
    "Timing: 2–5 min (with parallelism, 8 cores) - 10–15 min (without parallelism)\nIn order to have a relatively short runtime, we have implemented an option to use parallel computing. However, please note that because parallel computing requires a certain amount of processing units for proper functioning, it has been made possible to also run HybridFinder without parallel computing.\nBased on default parameters in the HybridFinder function, the “all de novo candidates.csv” file contains 16,286 peptide sequences and the runtime (parallelism with 8 cores) is of 2 min 17 s ∼5 min are required for double the number of peptides. Without parallelism, the runtime ranged between 10 and 15 min for 16,286 peptide sequences.\nRun Hybridfinder (Please refer to Table 1[href=https://www.wicell.org#tbl1] in order to know more about the inputs needed) and export the results in the parent folder.\ntable:files/protocols_protocol_1118_1.csv\n> HybridFinder_results_Exp1<- HybridFinder(denovo_candidates = denovo_Exp1, db_search = db_search_Exp1, proteome_db = refproteome_Exp1,customALCcutoff = NULL, with_parallel=TRUE, customCores = 8, export_files= TRUE, export_dir = folder_Exp1)\nCritical: if you use the datasets included in the package, please note that they are named differently so for instance the “denovo_candidates” and “db_search” parameters should be set to the datasets loaded from the package: denovo_Human_Liver_AUTD17 and db_Human_Liver_AUTD17, respectively.\nCritical: Make sure to store the HybridFinder results in an object (i.e HybridFinder_results_Exp1), as the HybridFinder output dataframe will come in handy in the second function.\nNote: At the end of the hybrid proteome will be the concatenated hybrid fake proteins with the name pattern ‘sp|denovo_HF_fake_protein_[#]’.\nNote: with_parallel is activated if set to true and if the PC has more than 5 cores.\nCritical: Please ensure to have a minimal number of other windows open and to save any work in other softwares prior to using HybridFinder with parallelism.",
    "The function will output a list (Figure 3[href=https://www.wicell.org#fig3]) containing: (1) the HybridFinder output containing all the denovo peptides along with their potential splice type explanation cis-/trans-, (2) a list of the step1 hybrid candidate peptides, (3) the hybrid proteome (merged proteome: the original user proteome along with the hybrid proteome composed of the concatenated candidate hybrid peptide sequences).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1118-Fig3.jpg\nFigure 3. Screenshot of the HybridFinder function results\nIn the results list you will find 3 items: 1) a dataframe containing the HybridFinder output. 2) a character vector containing the candidate spliced peptides. 3) a list which is in a seqinr class (Charif and Lobry, 2007[href=https://www.wicell.org#bib2]) containing the merged hybrid proteome.\nNote: In the example above, export_files have been set to TRUE and the export_dir has been defined which means that the files are also automatically exported. If these two parameters were not specified or were set to FALSE & NULL, the results are only stored in the Exp1_HybridFinder_results. In this case, you can still use “export_HybridFinder_results” as in the code below, where HybridFinder_results_Exp1 is the object created above for the storage of HybridFinder results.\n> export_HybridFinder_results(HybridFinder_results_Exp1, export_dir= folder_Exp1)\nPause point: If you would like to conduct the rest of the protocol at a later time, either use the export functionality and then load the HybridFinder output in order to use it for the second step. Alternatively, save the objects in R in a .rda file as follows and once you want to use it again for the step 4, load checknetMHCpan inputs into R.\n> save (HybridFinder_results_Exp1, file=file.path(folder_Exp1, ”HybridFinder_results_Exp1.rda”)\n>load (file.path(folder_Exp1, ”HybridFinder_results_Exp1.rda”))\nStep 3: Database search using hybrid Fasta\nTiming: 1 h",
    "An essential interim step must follow the HybridFinder function and consists of running a database search in PEAKS with the merged proteome. Importantly, now that a merged hybrid proteome has been obtained from the HybridFinder function, it can be used to obtain potential PSPs whose quality is comparable with all other database search peptides while filtering all peptides at the same FDR (False Discovery Rate) cutoff which can be adjusted by the users in PEAKS. In the original workflow by Faridi et al. (2018)[href=https://www.wicell.org#bib5], the database search peptides in both runs were filtered in PEAKS at a 1% FDR.\nPerform a database search in PEAKS using the original raw MS file (while using the same settings as in the beginning) however, this time while using the merged hybrid proteome (.fasta) file generated with the HybridFinder function.\nStep 4: Load checknetMHCpan inputs into R\nTiming: 1 min\nPrior to running checknetMHCpan, please ensure that netMHCpan (versions 4.0 or 4.1) is installed. checknetMHCpan is the last step of the hybrid finder workflow, the function uses the database search results from the second PEAKS analysis and provides the binding affinity results of all the peptides along with their categorizations.\nCreate an object for the location of the netMHCpan executable\n> netmhcpan_dir <- file.path(“/usr/local/bin”)\nCreate an object (vector) for storing the HLA-I alleles that you would like to have binding affinity predictions for.\n> alleles_Exp1 <- c(“HLA-A∗02:01”, “HLA-A∗03:01”, “HLA-B∗07:02”)\nRetrieve the HybridFinder output from the HybridFinder function results\n> HF_output_Exp1 <- HybridFinder_results_Exp1[[1]]\nImport the database search results (from step 3: Database search using hybrid fasta)\n> rerun_db_search_Exp1 <- read.csv(file.path(folder_Exp1, “second_run”, “DB search psm.csv”), sep=“,”, head = TRUE, stringsAsFactors = FALSE)",
    "Note: in case your computer’s OS is “Windows” (netMHCpan is not compatible with Windows) the web version of netMHCpan (http://www.cbs.dtu.dk/services/NetMHCpan-4.1/instructions.php[href=http://www.cbs.dtu.dk/services/NetMHCpan-4.1/instructions.php]) would come in handy. In this case, we propose to use a separate function from this package instead (step2_wo_netmhcpan) which outputs a netMHCpan-ready input of sequences in .pep format.\nAccess the datasets included in the R package\nThe demonstration datasets from the HLA Ligand Atlas included in this package also include datasets for the checknetMHCpan/step2_wo_netMHCpan functions. After having run the HybridFinder function and stored the results in HyrbidFinder_results_Exp1, PEAKS was run using the merged hybrid proteome. Below is a way to retrieve the second PEAKS run dataset included in the package:\n> data(package= “RHybridFinder”, “db_rerun_Human_Liver_AUTD17”)\nNote: The merged proteome used for the second database search is based on the customALCcutoff being set to NULL (default parameter value).\nCritical: The merged proteome database would change between different samples, and if the customALCcutoff parameter is changed. The same merged hybrid proteome cannot be used for separate analyses.\nStep 5: Run checknetMHCpan\nTiming: ∼ 1 min\nThe checknetMHCpan function embodies the second major step of the workflow. The categorizations of the hybrid peptides from the HybridFinder output are retrieved for matched peptides found in the second PEAKS database results. Then, peptide-MHC class I binding predictions for the entire database search results (for peptides between 9 and 12 amino acids) are computed using netMHCpan and are tidied in order to summarize the results.\nRun checknetMHCpan using the code below (Please refer to Table 2[href=https://www.wicell.org#tbl2] in order to know more about the inputs needed) and export the results in the same folder:\ntable:files/protocols_protocol_1118_2.csv\n> checknetMHCpan_results_Exp1 <- checknetMHCpan(netmhcpan_directory = netmhcpan_dir, netmhcpan_alleles = alleles_Exp1, peptide_rerun = rerun_db_search_Exp1, HF_step1_output = HF_output_Exp1, export_files= TRUE, export_dir = folder_Exp1)",
    "Note: checknetMHCpan is compatible with the exports from both netMHCpan 4.0 & netMHCpan 4.1.\nCritical: if you use the datasets included in the package, please note that they are named differently so for instance the “peptide_rerun” parameter should be set to dataset loaded from the package db_rerun_Human_Liver_AUTD17.\nAfter running the code above, a results list should be returned (Figure 4[href=https://www.wicell.org#fig4]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1118-Fig4.jpg\nFigure 4. Screenshot of the checknetMHCpan results list\nIn the results list you will find 3 items: 1) a dataframe containing the netMHCpan results. 2) a dataframe containing the tidied netMHCpan results. 3) the database search results with the “Potential_spliceType” for the hybrid peptides retrieved from step1.\nThese results are also exportable with the export_checknetMHCpan_results function.\n> export_checknetMHCpan_results(step2_RHF_results_Exp1 , export_dir = folder_Exp1)\nNote: If you intend on using the web version of netMHCpan (especially useful for windows OS users) or another software for peptide binding affinity, the step2_wo_netMHCpan function does the same as checknetMHCpan but without running netMHCpan. The function should return a list (Figure 5[href=https://www.wicell.org#fig5]) containing the updated database search results as well as a list of the peptides which can be used as input in the web version of netMHCpan.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1118-Fig5.jpg\nFigure 5. Screenshot of the step2_wo_netMHCpan results list\nIn the results list you will find 2 items: 1) a character vector containing the netMHCpan-ready input. 2) the database search results with the “Potential_spliceType” for the hybrid peptides retrieved from step1."
  ],
  "subjectAreas": [
    "Immunology",
    "Bioinformatics",
    "Computer Sciences",
    "Cancer",
    "Mass Spectrometry"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Bioinformatics & Computational Biology"
  ]
}