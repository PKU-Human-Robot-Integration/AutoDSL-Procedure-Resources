{
  "id": 1608,
  "origin_website": "Cell",
  "title": "Using ICLite for deconvolution of bulk transcriptional data from mixed cell populations",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nCritical: All code appearing in this protocol, including troubleshooting vignettes, is available as R script titled ‘STAR ICLite Run Code’ in Data S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1045-Mmc1.zip].\nInstall ICLite and its dependencies\nTiming: 5 min\nThe ICLite package for R is available through the following public repository:\nhttps://github.com/camiolomj/ICLite/[href=https://github.com/camiolomj/ICLite/]\nDownload the most recent version of the R package blockcluster (Bhatia et al., 2017[href=https://www.wicell.org#bib3]) from one of the following sources and install it into your R library:\nhttps://cran.r-project.org/src/contrib/Archive/blockcluster/[href=https://cran.r-project.org/src/contrib/Archive/blockcluster/]\nhttps://www.jstatsoft.org/article/view/v076i09[href=https://www.jstatsoft.org/article/view/v076i09]\nYou may also use the following command lines inside R for installation:\n> library(devtools)\n> install_github(\"cran/blockcluster\")\nDownload ICLite to your R library using the code:\n> library(devtools)\n> install_github(\"camiolomj/ICLite\")\nLoad ICLite and example data\nTiming: 5 min\nLoad the ICLite package:\n> library(ICLite)\nOptional: The ICLite package includes reference the input data from the Immune Mechanisms of Severe Asthma (IMSA) cohort (Camiolo et al., 2021[href=https://www.wicell.org#bib4]), which can be used as reference for formatting issues or trial runs of the algorithm.\nLoad the example IMSA data set:\n> load_IMSA_data()\nVerify the presence of ‘gene_expression_data’ and ‘immune_cell_logratios’ in the Global Environment. These objects will be used for example code going forward.\nTranscriptional data formatting\nFormat your gene expression data so that columns represent samples/individuals and rows represent genes.\nCell count data transformation and formatting\nTiming: 10 min\nOptional: This step is not necessary if using the included immune cell log ratio data.\nCell count data where each of the values for a given sample or individual represent a fraction of the whole must be log ratio transformed to address the constraints of compositional data (van den Boogaart and Tolosana-Delgado, 2008[href=https://www.wicell.org#bib15]). Failure to perform this step may lead to unreliable results as discussed below (troubleshooting[href=https://www.wicell.org#troubleshooting]).",
    "Inspect cell count values prior to running ICLite to determine whether your data is compositional. While relative percentages from cell count data must be log ratio transformed as detailed below, absolute cell counts do not.\nCritical: Many R packages commonly used for automated cell cluster analysis of mass cytometry data such as cytofkit, detailed above, provide cluster percentage values for downstream analysis. These data must be log ratio transformed as detailed below prior to use with ICLite.\nIf your cell count data is compositional:\nInstall and load the R package “compositions”:\n> install.packages(\"compositions\")\n> library(compositions)\nTransform your cell count data (obtained above in before you begin[href=https://www.wicell.org#before-you-begin]):\n> sample_compositions <-acomp(cell_ percentages, total = 100)\n> immune_cell_logratios<-cdt(comp_immune)\nThe input cell count matrix for ICLite should be formatted such that columns represent cell lineages and rows represent samples/individuals. The “immune_cell_logratios” object loaded by load_IMSA_data()provides an example of properly formatted data.\nSetup initial run_ICLite() parameters\nTiming: 5 min\nOnce you have prepared your input data and installed ICLite, you are ready to begin the deconvolution process. We recommend that initial runs with ICLite employ a broad range of run parameters.\nCreate a vector for rho exclusion values. These values should range from 0.3 to 0.9. Gene correlations below this value are converted to 0 in binary space while those above are converted to 1. Higher cutoffs will result in smaller gene modules.\n> input_rho<-c(0.4, 0.5, 0.6)\nCreate a vector of minimum connectivity values. Genes that do not meet a threshold of interactions above the rho exclusion will be removed from the analysis. Higher cutoffs will result in smaller gene modules that are more tightly connected.\n> input_connectivities<-c(150,300)\nCreate a list of assumed number of clusters to be used for blockclustering.\n> number_of_clusters<-as.list(c(12,24,36))",
    "Optional: Example formatting for run parameters is available in Data S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1045-Mmc1.zip]. This .ZIP file contains an R script titled ‘STAR ICLite Run Code’ related to the the toy example provided in this manuscript as fully executable code.\nCritical: Users should include a vector of at least 2 input parameters for minimum connectivity, rho cutoff and number of clusters.\nExecute run_ICLite()\nTiming: 5 h\nTo initiate a run of ICLite, use the code below. For the example code detailed in this manuscript, see Data S1[href=https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1045-Mmc1.zip].\n>set.seed(95)\n>\n>run_ICLite(gene_expression_data = gene_expression_data,\n>      immune_cell_logratios = immune_cell_logratios,\n>      input_connectivities = input_connectivities,\n>      input_rho = input_rho,\n>      number_of_clusters = number_of_clusters)\nOptional: The blockcluster algorithm is sensitive to seed. To ensure consistency, users may choose to set the global R seed value prior to running ICLite.\nPause point: Saving your workspace after an ICLite run can be done using the command:\n>save.image(\"Your_Experiment_Name_Here.Rdata\")\nThe session can be reloaded by using the following command:\n>load(\"Your_Experiment_Name_Here.Rdata\")\nInspect ICLite run results\nFollowing completion of an ICLite run, the user will be left with output files in the R working directory that include:\nA correlation plot describing all relationships between gene modules and cells in the analysis titled “mod solution corrplot.png”\nIndividual module vs cell lineage dot plots featuring a linear regression trend line, spearman’s rho calculation and p-value\nComma separated value (CSV) files for gene module membership\nThe data shown in Figure 1[href=https://www.wicell.org#fig1] illustrates the graphical output from solution generated by ICLite on the IMSA data set included in the package with the parameters described above. Several objects will be created in the Global Environment, including gene_module_lists, which contains the gene names for the modules assembled by ICLite.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1045-Fig1.jpg\nFigure 1. Initial output of ICLite using broad run parameters",
    "(A) Spearman correlation plot generated by execution of ICLite where calculated rho between BAL gene modules (x-axis) and cell lineages (y-axis) is demarcated by circles colored according to the scale detailed to the right. Only associations with FDR corrected p-value of < 0.05 are illustrated. The size of the circle is inversely proportional to p-value of interaction.\n(B) Plotting of module scoring vs cell log ratio values with super-imposed linear trend line, Spearman’s rho and p-value as indicated in the figure.\nShould your run produce no connectivity results, see topics below for more information (troubleshooting[href=https://www.wicell.org#troubleshooting]).\nTune ICLite run parameters\nAfter inspection of ICLite results, users may choose a narrower band of input parameters focused around the optimal solution identified during the initial run.\nTo explore the relationship between input parameters and genes included in module assembly, use the following code:\n>plot_solution_size()\nThe resultant graph plotting the relationship between gene matrix size, rho cutoff and minimum connectivity value will be saved in the working directory and is demonstrated in Figure 2[href=https://www.wicell.org#fig2].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1045-Fig2.jpg\nFigure 2. Graphical output from plot_solution_size()\nExecution of the plot_solution_size() function will use objects in the R global environment to generate a plot detailing the number of genes included for module assembly by ICLite (y-value) vs rho cutoff value (x-axis). Coloration of dots indicates solution connectivity value.\nTo examine run parameters from the optimal solution, use the following code to create a graph of fit scoring. Note that dot size is related to solution fit, with the largest dot equating to the best fit:\n>plot_fit_score()",
    "The graph will again be saved to the working directory. Results from the above example are illustrated in Figure 3[href=https://www.wicell.org#fig3]. The specific values for the identified optimal run conditions will also be displayed in the R console after executing this command. Note that subsequent ICLite run parameters can be chosen based on these data.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1045-Fig3.jpg\nFigure 3. Graphical output from plot_fit_score()\nExecution of the plot_fit_score () function will use objects in the R global environment to generate a plot detailing the ICLite solution score by input rho, connectivity and number of clusters. Size of dots in the plot correspond to relative value of fit scoring. Coloration of dots indicates solution connectivity value.\nCritical: We can see from both text and graphical outputs that the optimal solution occurred with a rho cutoff = 0.4, connectivity = 150 and number of clusters = 24.\nCreate input parameters with smaller gradients of change focusing around the optimal parameters from the initial run:\n> input_connectivities<-c(75,150,225)\n> input_rho<-c(0.4, 0.425, 0.45)\n> number_of_clusters<-as.list(c(22,24,26))\nRe-run ICLite:\n>set.seed(95)\n>\n>run_ICLite(gene_expression_data = gene_expression_data,\n>      immune_cell_logratios = immune_cell_logratios,\n>      input_connectivities = input_connectivities,\n>      input_rho = input_rho,\n>      number_of_clusters = number_of_clusters)\nThe data shown in Figure 4[href=https://www.wicell.org#fig4] illustrates the graphical output from ICLite based on the parameters described above. This time around, we can see that a solution with rho = 0.45, connectivity = 75 and number of clusters = 26 greatly outperformed our initial run.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1045-Fig4.jpg\nFigure 4. Output of ICLite using focused parameters\n(A) Plotting generated by execution of plot_solution_size() from focused run parameters following the initial ICLite run.\n(B) Plotting generated by execution of plot_fit_score () from focused run parameters.",
    "(C) Spearman correlation plot from the optimal solution using tuned run parameters in ICLite. Calculated rho between modules (x-axis) and cell lineages (y-axis) is demarcated by circles colored according to the scale detailed to the right. Only associations with FDR corrected p-value of < 0.05 are illustrated. The size of the circle is inversely proportional to p-value of interaction.\nOptional: At this time, the user may choose to move onto functional analysis or continue tuning ICLite parameters around the new optimal run.\nCritical: As stated above (before you begin[href=https://www.wicell.org#before-you-begin]), tuning of input parameters may influence the ability of ICLite to capture relationships to specific cells in your data set. For more information regarding parameter tuning to address these issues, please see troubleshooting[href=https://www.wicell.org#troubleshooting] below.\nPerform gene ontology analysis\nThe \"gene_module_lists\" may be used for subsequent Gene Ontology (GO) enrichment analysis as a means of understanding the biological functions represented by ICLite modules. In the analysis presented in Camiolo et al., we used the TopGO package in R (Alexa and Rahnenfuhrer, 2020[href=https://www.wicell.org#bib1]). Example code for running TopGO is detailed below. More information on TopGO can be found at:\nhttps://www.bioconductor.org/packages/devel/bioc/html/topGO.html[href=https://www.bioconductor.org/packages/devel/bioc/html/topGO.html]\nCritical: Output module membership lists will use whatever input nomenclature was used, which may require conversion prior to running enrichment analysis with popular tools such as fgsea (Korotkevich et al., 2021[href=https://www.wicell.org#bib10]) or topGO.\nPrior to GO enrichment using topGO, convert the gene symbols used in the example IMSA data into Entrez ids. To do so, first install and load the conversion database (Carlson, 2019[href=https://www.wicell.org#bib5]):\n> BiocManager::install(\"org.Hs.eg.db\")\n> library('org.Hs.eg.db')\nNext, convert our genes of interest from the R object containing our gene modules:\n> GOI<- gene_module_lists[[n]] ## where n = the module index from ICLite\n> GOI_converted<-unique(mapIds(org.Hs.eg.db, GOI, 'ENTREZID', 'SYMBOL'))\nGenerate a background index of all genes from our transcriptional dataset:\n> all_genes<-rownames(gene_expression_data)",
    "> background_names<-unique(mapIds(org.Hs.eg.db, all_genes, 'ENTREZID', 'SYMBOL'))\nInstall and load topGO:\n> BiocManager::install(\"topGO\")\n> library(topGO)\nRun TopGO for the selected ICLite module:\n> geneList <- factor(as.integer(background_names %in% GOI_converted))\n> names(geneList) <- background_names\n> GOdata <- new(\"topGOdata\", allGenes = geneList, nodeSize = 10, ontology = \"BP\",\n>          annot = annFUN.org, mapping = \"org.Hs.eg.db\")\n> resultFisher <- runTest(GOdata, algorithm = \"classic\", statistic = \"fisher\")\n> upRes <- GenTable(GOdata, classicFisher = resultFisher, ranksOf = \"classicFisher\",\n>          topNodes = 50, numChar = 40)\nOptional: The above example uses pre-defined values for node size, enrichment algorithm and test statistic. Please refer to the topGO website above for more information regarding parameter selection.\nExample GO enrichment results and corresponding cell log ratio vs module scoring plots from our optimized ICLite solution are illustrated in Figure 5[href=https://www.wicell.org#fig5].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1045-Fig5.jpg\nFigure 5. Pathway analysis of modules linked to T cell populations\n(A) Barplot of -log10(p-values) for GO term enrichment of ICLite modules 6 which correlates with CD4 and CD8 EMs, CMs and TRMs.\n(B) Barplot of -log10(p-values) for GO term enrichment of ICLite module 9, which correlates with CD4 and CD8 EMs, CMs and TRMs.\n(C) Plotting of module 6 scoring vs cell log ratio values with super-imposed linear trend line, Spearman’s rho and p-value as indicated in the figure.\n(D) Plotting of module 9 scoring vs cell log ratio values with super-imposed linear trend line, Spearman’s rho and p-value as indicated in the figure.\nPerform semantic similarity clustering\nGene module membership from ICLite solutions is exclusive, meaning that a single gene may be a member of only one module. GO semantic similarity allows us to take sets of gene ontology results and compare them for overlap. This can be used to generate distance measures for dendrogram construction to better understand functional relationships between gene modules.",
    "The GOSemSim package is not provided with ICLite and must be downloaded and installed separately (Yu et al., 2010[href=https://www.wicell.org#bib16]). Information on this package can be found at:\nhttps://bioconductor.org/packages/release/bioc/html/GOSemSim.html[href=https://bioconductor.org/packages/release/bioc/html/GOSemSim.html]\nInstall and load the GOSemSim package:\n> BiocManager::install(\"GOSemSim\")\n> library(GOSemSim)\nAfter identifying a satisfactory ICLite solution, obtain GO results for all modules as detailed above and create a list object containing all GO enrichment terms:\n> all_GO_terms<-list(module_1_terms, module_2_terms….)\nCreate a GO library object:\n> hsGO <- godata('org.Hs.eg.db', ont=\"BP\")\nCreate a matrix for semantic similarity results:\n> ##Where num_clust = the number of modules from the accepted ICLite solution\n> GO_semantic_mat<-matrix(0, ncol = num_clust, nrow = num_clust)\nPerform semantic similarity for pairwise comparison between GO term lists corresponding to ICLite modules:\n> for(c in 1:ncol(GO_semantic_mat)){\n>\n>  gs1<- all_GO_terms [[c]]\n>\n>  for(r in 1:nrow(GO_semantic_mat)){\n>\n>    gs2<- all_GO_terms [[r]]\n>    GO_semantic_mat[r,c]<-mgoSim(gs1, gs2, semData=hsGO, measure=\"Wang\",\n>          combine=\"BMA\")\n>\n>  }\n> }\nCreate a phylogram based on the sematic similarity results to illustrate similarities in the biological process represented by each ICLite module (Paradis and Schliep, 2019[href=https://www.wicell.org#bib14]):\n> install_github(\"cran/ape\")\n> library(\"ape\")\n>\n> GO_hclust = hclust(dist(GO_semantic_mat), method = \"ward.D2\")\n> GO_phylo<-as.phylo(GO_hclust)\n>\n> png(“GO semantic phylogram,.png\", height = 2400, width = 2400, res = 300)\n> plot(GO_phylo, type = \"unrooted\", cex = 1.2,\n>  no.margin = F, label.offset = 0.03)\n> dev.off()\nWhile not necessary, semantic similarity clustering can provide reassurance that the modules identified by ICLite are biologically plausible. As demonstrated in Figure 6[href=https://www.wicell.org#fig6], ICLite has linked modules of functionally related genes to similar cells. In principle, we expect that modules linked to the same cell lineages should themselves share ontological similarity.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1045-Fig6.jpg\nFigure 6. Using semantic similarity to explore functional similarity of ICLite modules",
    "Phylogram of GO term semantic similarity for ICLite modules described in the solution from Figure 4[href=https://www.wicell.org#fig4]. Distance is independent of cell associations and based only on functional enrichment in GO terms from recovered ICLite modules. Module coloring is based off hierarchical clustering of semantic similarity. Terms adjacent to phylogram summarize cell lineages attached to GO semantic families.\nUse modules from an ICLite solution for sample scoring\nOnce an ICLite solution has been validated, the modules created may be used for scoring individual samples. These scores may be treated as continuous variables.\nCritical: Module scoring may be done on external transcriptional data sets, as described in Camiolo et al., (2021)[href=https://www.wicell.org#bib4]. To do so, gene names must be consistent. Please see the section above on converting nomenclature.\nCreate module score values for the example cohort. Using this code, we call the function mod_score() from the ICLite package on the gene_module_lists object from a successful ICLite run.\n> individual_mod_scores<-do.call(cbind, lapply(gene_module_lists, mod_score))\n> colnames(individual_mod_scores)<-paste0(\"Mod_\",\n>       unique(accepted_solution@rowclass)+1)"
  ],
  "subjectAreas": [
    "Sequence Analysis",
    "Immunology",
    "Bioinformatics",
    "Systems Biology",
    "Gene Expression"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}