{
  "id": 19710,
  "origin_website": "Wiley",
  "title": "ntLink: A Toolkit for De Novo Genome Assembly Scaffolding and Mapping Using Long Reads",
  "procedures": [
    "Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001] describes running ntLink to scaffold an input draft assembly using long reads, with overlap detection enabled. The overlap detection functionality identifies when adjacent contigs (draft assembly sequences) overlap in genomic space and trims the contigs to ensure the sequences are merged without duplicating this overlapping sequence.\nntLink leverages the long-range information inherent in long-read sequencing data to scaffold an input draft assembly. First, ntLink maps the long reads to a draft assembly using a minimizer-based approach. Long-read mappings that span multiple contigs provide evidence that these contigs should be joined together. These mappings are also used to estimate gap sizes between the contigs. After ntLink determines the sequences of oriented contigs to be joined together as scaffolds, the overlap detection feature identifies adjacent contigs that have a putative overlap (indicated by a negative estimated gap size), and resolves the overlaps. Finally, the ordered and oriented scaffolds are output in FASTA format.\nNecessary Resources\nHardware\n64-bit Linux or MacOS operating system with sufficient RAM and available disk space (see Strategic Planning)\nSoftware\nThe steps of Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001] describe the installation of all required tools. For easier installation of the dependencies, see Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006] to set up a conda environment called “ntLink_env”.\nFiles\nThe input files for ntLink are long genome sequencing reads and a draft genome assembly. The long sequencing reads can be provided in FASTA or FASTQ format, either compressed with gzip or uncompressed. The input draft assembly to be scaffolded should be in FASTA format (multi-line or single-line).\nSample Files",
    "To demonstrate the usage of ntLink in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], we will scaffold a Caenorhabditis elegans draft assembly with a corresponding C. elegans Oxford Nanopore long-read dataset. The C. elegans long reads are available from the Sequence Read Archive (SRA) under accession SRR10028109. The draft assembly is a Flye (Kolmogorov et al., 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0007]) assembly of the same C. elegans long reads, and is available from https://doi.org/10.5281/zenodo.7526395[href=https://doi.org/10.5281/zenodo.7526395]. To assess the genome assemblies generated from ntLink, a C. elegans N2 (Bristol strain) reference genome (accession GCA_000002985.3) will be used. There are detailed steps in the protocol to guide the user in downloading these files.\n1. Install ntLink.\nSee Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006] for detailed instructions and options for installing ntLink.\n2. Install protocol-specific dependencies curl, QUAST, and SRA toolkit.\nOption A. Use conda package manager: If Option A of Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006] was used to install ntLink, the protocol-specific dependencies can be installed in the same conda environment.\n         \nconda activate ntlink_env\nconda install -y -c bioconda -c conda-forge curl quast 'sra-tools>=2.10.2'\nOption B. Install from source:\n         \na.Install curl.\nMany servers will already have curl installed. To check if curl is available:\n         \nwhich curl\nIf you see the path to a curl installation, curl is already installed and you can continue to part b below to install QUAST. Otherwise, follow the next steps.\n         \nGo to https://curl.se/download.html[href=https://curl.se/download.html], and find the tarball for the latest released version. Version 7.86.0 is used below to illustrate the steps. Change your terminal's current directory to the location where you would like curl installed, download the tarball, extract the tarball, and change your directory into the downloaded curl directory.\n               \nmkdir -p ∼/bin/curl && cd ∼/bin/curl\nwget https://curl.se/download/curl-7.86.0.tar.gz\ntar zvxf curl-7.86.0.tar.gz\ncd curl-7.86.0/\nCompile the source code.\n               \nmkdir curl_install\n./configure --with-ssl --prefix=$(pwd)/curl_install\nmake\nmake install\nAdd the curl installation directory to your PATH.",
    "export PATH=$(pwd)/curl_install/bin:$PATH\nb.Install QUAST (Mikheenko et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0014]).\nGo to https://github.com/ablab/quast/releases[href=https://github.com/ablab/quast/releases], download the latest release and extract the tarball. Version 5.2.0 is shown as an example in the following commands.\n               \nmkdir -p ∼/bin/quast_install && cd ∼/bin/quast_install\ncurl -L --output quast-5.2.0.tar.gz https://github.com/ablab/quast/releases/download/quast_5.2.0/quast-5.2.0.tar.gz\ntar xvzf quast-5.2.0.tar.gz\ncd quast-5.2.0/\n./install.sh\ncd ..\nAdd the QUAST installation directory to your PATH.\n               \nexport PATH=$(pwd)/quast-5.2.0:$PATH\nc.Install the SRA toolkit.\nGo to https://github.com/ncbi/sra-tools/wiki/01.-Downloading-SRA-Toolkit[href=https://github.com/ncbi/sra-tools/wiki/01.-Downloading-SRA-Toolkit], and find the pre-built binary appropriate for your system. Download the archive and extract it. We use the centOS Linux release v3.0.2 as an example below.\n               \nmkdir -p ∼/bin/sratools && cd ∼/bin/sratools\ncurl -L --output sratoolkit.3.0.2-centos_linux64.tar.gz https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/3.0.2/sratoolkit.3.0.2-centos_linux64.tar.gz\ntar xvzf sratoolkit.3.0.2-centos_linux64.tar.gz\nAdd the sratoolkit installation directory to your PATH.\n               \nexport PATH=$(pwd)/sratoolkit.3.0.2-centos_linux64/bin:$PATH\n3. Navigate to the directory where you want to run the ntLink tests, and download the sample long-read data. Note that downloading the long reads will take ∼1 hr.\n         \ncd ∼/ntLink/test\nfasterq-dump SRR10028109\nOnce the command has finished, the reads will be available in the file SRR10028109.fastq. These reads are ∼93-fold coverage C. elegans Oxford Nanopore long reads.\n4. Download the sample draft long-read assembly.\n         \ncurl -L --output celegans_flye.fa https://zenodo.org/record/7526395/files/celegans_flye.fa\nThis is a Flye (Kolmogorov et al., 2019[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0007]) assembly of the long reads downloaded in the previous step.\n5. Download a reference genome assembly for the C. elegans Bristol N2 strain.\n         \ncurl -L --output celegans_reference.fa.gz https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/002/985/ GCA_000002985.3_WBcel235/GCA_000002985.3_WBcel235_genomic .fna.gz\nThis assembly will be used in a later step when assessing the final assembly scaffolds using QUAST.\n6. Run ntLink. The specified values of k, w, and overlap are the default values, but are included in the command to demonstrate how to set these parameters using the ntLink Makefile driver script.\n         \nntLink scaffold target=celegans_flye.fa reads=SRR10028109.fastq k=32 w=100 t=5 overlap=True\n7. Check the logs and output files to ensure that the run executed successfully.",
    "If ntLink completed successfully, the ntLink terminal output should contain the message “Done ntLink! Final post-ntLink scaffolds can be found in: celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.fa”. In addition, the final output scaffolds file “celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.fa” should be in the current working directory.\n8. Assess the final output scaffolds using abyss-fac (de novo approach; Jackman et al., 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0005]) and QUAST (reference-based approach; Mikheenko et al., 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0014]). The abyss-fac utility is part of the ABySS suite of tools, which is installed as a dependency of ntLink. See Table 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0002] for detailed descriptions of the assembly statistics and Table 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0003] for the expected statistics generated from these steps.\n         \na.Run abyss-fac using the input draft genome assembly and the post-ntLink genome assembly.\n               \nabyss-fac -G100e6 --count-ambig celegans_flye.fa celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.fa\nThe “-G” option specifies the genome size, which is ∼100 Mbp for C. elegans. The “--count-ambig” option counts any ambiguous bases (e.g., “N”s) in the output statistics.\nAfter running this command, you will see that the NG50 length increases after ntLink scaffolding, and the number of sequences decreases.\nb.Run QUAST to assess the input draft genome assembly and the post-ntLink genome assembly using the previously downloaded C. elegans reference assembly.\n               \nquast -t 5 -o quast_ntlink_bp1 -r celegans_reference.fa.gz --fast --large celegans_flye.fa celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.fa\nAfter running QUAST, all output files will be written to the quast_ntlink_bp1 directory. The main statistics will be written to report.tsv. You will see that certain statistics, such as “# contigs (≥ 0 bp)” and “NG50” will be the same as calculated by abyss-fac. Important reference-based statistics to look at include the “NGA50” and “# misassemblies” (Table 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0002]). After scaffolding, we want to minimize the number of contigs and misassemblies, while maximizing the NG50 length and NGA50 length. Note that the QUAST executable will be quast.py if the tool was installed from source as described in step 2a.\nTable 2.",
    "Common Statistics Used in the Analysis of Genome Assembliesa[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl2-note-0001_52]\ntable:\n﻿Statistic,De novo or reference based,Description\nn,De novo,The number of sequences in the assembly\nNG50 length,De novo,\"At least half of the genome size is assembled in pieces of the NG50 length and larger. In other words, if you add up the lengths of the contigs that are the NG50 length and larger, it will sum to at least half of the expected genome size.\"\nNGA50 length,Reference based,\"Analogous to the NG50 length, but uses alignment blocks instead of contig lengths for the calculation. Therefore, it summarizes both the contiguity and correctness of the assemblies.\"\nMisassemblies,Reference based,\"Number of large-scale errors in the assembly as compared to the supplied reference. These QUAST extensive misassemblies can be classified into 3 categories: relocations, inversions, and translocations.\"\nScaffold NG50/NGA50 length,De novo (NG50) and reference based (NGA50),The “Scaffold NG50” and “Scaffold NGA50” lengths (as described above in this table) are computed directly on the full scaffold lengths.\nContig NG50/NGA50 length,De novo (NG50) and reference based (NGA50),\"Prior to calculating the NG50 or NGA50 lengths, the assembly sequences are broken at ambiguous codes (“N”s). By default, QUAST will break the sequences at regions of ≥10 “N”s when calculating these contig statistics.\"\nNumber of Ns per 100 kbp,De novo,Number of ambiguous bases (“N”s) in the assembly per 100 kbp of sequence.\na Each statistic is classified as de novo (no reference required) or reference based (reference genome required). All de novo statistics can be calculated using abyss-fac or QUAST, while the reference-based statistics are assessed using QUAST.\nTable 3.\n                Expected Results From Scaffolding the C. elegans Flye Assembly Using ntLink With the Steps Documented in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001]a[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl3-note-0001_54]\ntable:\n﻿Assembly,Number of sequences ≥3 kbp,NG50 length (Mbp),NGA50 length (Mbp),Number of misassemblies\nBaseline assembly,63,3.6,2.3,75\nBaseline assembly + ntLink,33,6.8,3.7,66",
    "a Compared to the baseline, scaffolding using ntLink with overlap detection increases the assembly NGA50 length ∼1.7-fold, while also reducing the number of misassemblies.",
    "Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0002] describes how to run ntLink scaffolding with a gap-filling step. In this protocol, instead of simply introducing ambiguous bases, ntLink fills gaps with sequence from the input long-read sequencing data. The initial steps of ntLink are executed as described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001]. Then, an additional step is performed, which fills in the ntLink-induced scaffold gaps with bases from a representative read that supports the given join (the read that has the highest average number of minimizers in common with the incident contigs). Following this gap-filling step, the scaffolds are output in FASTA format. Because the gaps are filled with raw long-read sequence, we recommend polishing the output assembly using long-read polishing tools such as ntEdit+Sealer (Li et al., 2022[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0009]; Wong et al., 2022[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0022]), Racon (Vaser et al., 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0019]), or Medaka (Medaka: Sequence Correction Provided by ONT Research, n.d.) following the ntLink scaffolding and gap-filling.\nNecessary Resources\nHardware\n64-bit Linux or MacOS operating system with sufficient RAM and available disk space (see Strategic Planning)\nSoftware\nThe following software must be installed and available in your PATH environment variable:\nSRA toolkit (v3.0.0+): (https://github.com/ncbi/sra-tools)[href=https://github.com/ncbi/sra-tools]\ncurl: (https://curl.se/[href=https://curl.se/])\nPython 3.7+: (https://www.python.org/[href=https://www.python.org/])\nntLink (v1.3.7+): (https://github.com/bcgsc/ntLink[href=https://github.com/bcgsc/ntLink])\nABySS (v2.3.0+): (https://github.com/bcgsc/abyss[href=https://github.com/bcgsc/abyss])\nQUAST (v5.2.0+): (https://github.com/ablab/quast[href=https://github.com/ablab/quast])\nFor more information about installing these dependencies, see Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006] and Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], steps 1-2. Instructions for creating a conda environment that can be used for installing protocol-specific dependencies, as described below, are available in Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006].\nFiles\nThe input files for ntLink are long genome sequencing reads and a draft genome assembly. The long sequencing reads can be provided in FASTA or FASTQ format, either compressed with gzip or uncompressed. The input draft assembly to be scaffolded should be in FASTA format (multi-line or single-line).\nSample Files",
    "The sample files used for this protocol are the same as used in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001]\n1. Install the required software.\nInstall protocol-specific dependencies minimap2 and Racon:\nOption A. Using conda package manager:\nIf ntLink was installed using Option A of Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006], minimap2 and Racon can be installed in the same environment.\n         \nconda activate ntlink_env\nconda install -y -c bioconda -c conda-forge minimap2 racon\nOption B. Installing from source:\n         \nInstall minimap2.\nFor Linux, minimap2 provides pre-compiled binaries. Go to https://github.com/lh3/minimap2/releases[href=https://github.com/lh3/minimap2/releases] to find the most recent pre-compiled binary. Here, we show downloading the v2.24 binary as an example:\n               \nmkdir -p ∼/bin/minimap2 && cd ∼/bin/minimap2\ncurl -L https://github.com/lh3/minimap2/releases/download/v2.24/minimap2-2.24_x64-linux.tar.bz2 | tar -jxvf -\ncd minimap2-2.24_x64-linux\nFor MacOS, review the minimap2 dependencies (https://github.com/lh3/minimap2[href=https://github.com/lh3/minimap2]), download the most recent release tarball from https://github.com/lh3/minimap2[href=https://github.com/lh3/minimap2], extract it, and compile the code. We show downloading and compiling the v2.24 release as an example.\n               \nmkdir -p ∼/bin/minimap2 && cd ∼/bin/minimap2\ncurl -L --output minimap2-2.24.tar.bz2 https://github.com/lh3/minimap2/releases/download/v2.24/minimap2-2.24.tar.bz2\ntar -jxvf minimap2-2.24.tar.bz2\ncd minimap2-2.24\nmake\nAppend the path to the minimap2 installation to your PATH environment variable.\n               \nexport PATH=$(pwd):$PATH\nb.Install Racon (see https://github.com/lbcb-sci/racon[href=https://github.com/lbcb-sci/racon] for information about dependencies) and add the path to the Racon installation to your PATH environment variable.\n               \ngit clone https://github.com/lbcb-sci/racon && cd racon\nmkdir build && cd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake\nexport PATH=$(pwd)/bin:$PATH\n2. Download the sample data.\nAs the sample data for this protocol is the same as used for Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], see steps 3-5 of Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001] for full details about downloading the long reads, draft genome assembly, and reference genome.\n3. Change to the directory with the downloaded data and run ntLink with the gap-filling option specified. The ntLink steps are powered by the ntLink Makefile.\n         \ncd ∼/ntLink/test\nntLink scaffold gap_fill target=celegans_flye.fa reads=SRR10028109.fastq k=32 w=100 t=5",
    "Note that the k (k-mer size) and w (window size) values specified are the default values but are included in the command to illustrate how they can be set when running ntLink. The target gap_fill being specified in the command triggers the gap-filling stage after the initial scaffolding steps of ntLink.\n4. Check the logs and output files to ensure that the run executed successfully.\nIf ntLink completed successfully, this message will be found in the terminal output: “Done ntLink! Final post-ntLink and gap-filled scaffolds can be found in: celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.fa”. In addition, the final output scaffolds file “celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.fa” will be in the current working directory. The intermediate scaffold file before gap-filling is “celegans_flye.fa.k32.w100.z1000.stitch.abyss-scaffold.fa”.\n5. Polish the gap-filled ntLink scaffolds. For illustrative purposes, we demonstrate polishing using Racon, but any long-read polishing tool can be utilized. This is an optional step in the pipeline and can be bypassed if the integration of raw long reads (with a lower base quality) into the draft assembly is not a concern.\n         \na.First, align the long reads to the draft assembly, and output the alignments in SAM format. This step will take ∼20 min.\n               \nminimap2 -a -t 5 -x map-ont -o celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.SRR10028109.sam celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.fa SRR10028109.fastq\nb.Next, run Racon, supplying the SAM file generated in step 5a. This step will take ∼60 min.\n               \nracon -u -t 5 SRR10028109.fastq celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.SRR10028109.sam celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.fa 1> celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.racon-polished.fa\nc.Check the Racon output files to ensure that the run executed successfully. The final, polished assembly will be in the file “celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.racon-polished.fa”, and the final terminal output message in a successful Racon run will include “[racon::Polisher::] total =”, along with the runtime.\n6. Assess the final, polished output scaffolds using abyss-fac (reference-free approach) and QUAST (reference-based approach). See Table 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0002] for detailed descriptions of the assembly statistics generated and Table 4[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0004] for the expected results.",
    "a.Run abyss-fac using the input draft genome assembly, the ntLink intermediate scaffolds file before gap-filling, and the final output scaffolds file after gap-filling and polishing.\n               \nabyss-fac -G100e6 --count-ambig celegans_flye.fa celegans_flye.fa.k32.w100.z1000.stitch.abyss-scaffold.fa celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.racon-polished.fa\nSee Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], step 8a for detailed information describing the abyss-fac output.\nb.Run QUAST to assess the input draft genome assembly, the ntLink intermediate scaffolds file before gap-filling, the output scaffolds after gap-filling, and the final output scaffolds file after gap-filling and polishing.\n               \nquast -t 5 -o quast_ntlink_bp2 -r celegans_reference.fa.gz --fast --large --split-scaffold celegans_flye.fa celegans_flye.fa.k32.w100.z1000.stitch.abyss-scaffold.fa celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.fa celegans_flye.fa.k32.w100.z1000.ntLink.scaffolds.racon-polished.fa\nSee Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], step 8b for detailed information about the QUAST output. In addition to the QUAST statistics described in the previous protocol, for this protocol we are also interested in distinguishing between “Scaffold NG50/NGA50” and “Contig NG50/NGA50”, which are available from the QUAST output in the quast_ntlink_bp2 directory. See Table 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0002] for detailed explanations of these statistics. When the --split-scaffold option is specified for QUAST, it will output the statistics for the full input assembly (“Scaffold” statistics), and the assembly after breaking the sequences at regions of ≥10 Ns (“Contig” statistics, “_broken” added to filename). Therefore, the “Contig NG50/NGA50” statistics are a measure of contiguity as well as the number and distribution of gaps in the assembly. Furthermore, the QUAST statistic “# N's per 100 kbp” gives a direct measure of the number of ambiguous bases in the assembly. With efficient gap-filling, the “Contig” statistics will become closer to the “Scaffold” statistics, and the “# N's per 100 kbp” will decrease.\nTable 4.\n                Expected Results From Scaffolding the C. elegans Flye Assembly Using ntLink With Gap-Filling Based on the Steps Documented in Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0002]a[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl4-note-0001_73]\ntable:",
    "﻿Assembly,Number of sequences ≥3 kbp,Scaffold NG50 length (Mbp),Contig NG50 length (Mbp),Scaffold NGA50 length (Mbp),Contig NGA50 length (Mbp),Number of misassemblies,Number of Ns per 100 kbp\nFlye baseline,63,3.6,3.6,2.3,2.3,75,0.0\nFlye + ntLink (before gap-filling),33,6.8,4.0,3.7,2.5,66,14.36\nFlye + ntLink,33,6.8,6.8,3.9,3.9,64,0.02\nFlye + ntLink + Racon,33,6.9,6.9,3.0,3.0,58,0.01\na Using the gap-filling feature of ntLink in addition to scaffolding increased the Contig NG50 and NGA50 lengths to be equivalent with their “Scaffold” statistic counterparts. Furthermore, while the intermediate ntLink scaffolds file prior to gap-filling had a sharp increase in the number of Ns per 100 kbp (14.4 compared to 0.0 in the baseline), the gap-filling step sealed the majority of the gaps (14.4 versus 0.02 Ns per 100 kbp before and after gap-filling, respectively).",
    "Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0003] describes how to run multiple iterations, or rounds, of ntLink using a liftover-based approach. When scaffolding assemblies, the goal is to achieve the highest possible contiguity without sacrificing the correctness of the assembly. While running a single round of ntLink, as described in Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001] and 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0002], is very effective in improving upon a draft genome assembly from any technology, further gains are possible with additional rounds of ntLink. Using the in-code round capability of ntLink allows a user to maximize the contiguity of the final assembly without needing to manually run ntLink multiple times. To avoid re-mapping the reads at each round, ntLink lifts over the mapping coordinates from the input draft assembly to the output post-ntLink scaffolds, which can then be used for the next round of ntLink. The same process can be repeated as many times as needed, thus enabling multiple rounds of ntLink to be powered by a single instance of long-read mapping.\nNecessary Resources\nHardware\n64-bit Linux or MacOS operating system with sufficient RAM and available disk space (see Strategic Planning)\nSoftware\nThe following software must be installed and available in your PATH environment variable:\nSRA toolkit (v3.0.0+): (https://github.com/ncbi/sra-tools[href=https://github.com/ncbi/sra-tools])\ncurl: (https://curl.se/[href=https://curl.se/])\nPython 3.7+: (https://www.python.org/[href=https://www.python.org/])\nntLink (v1.3.7+): (https://github.com/bcgsc/ntLink[href=https://github.com/bcgsc/ntLink])\nABySS (v2.3.0+): (https://github.com/bcgsc/abyss[href=https://github.com/bcgsc/abyss])\nQUAST (v5.2.0+): (https://github.com/ablab/quast[href=https://github.com/ablab/quast])\nFor more information about installing these dependencies, see Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006] and Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], steps 1-2.\nFiles\nThe input files for ntLink are long genome sequencing reads and a draft genome assembly. The long sequencing reads can be provided in FASTA or FASTQ format, either compressed with gzip or uncompressed. The input draft assembly to be scaffolded should be in FASTA format (multi-line or single-line).\nSample Files\nThe sample files used for this protocol are the same as used in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001]",
    "1. Download the sample data. The sample data is the same as for Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001] and 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0002].\nFor detailed instructions describing downloading the sample data, see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], steps 3-5.\n2. Run three rounds of ntLink scaffolding.\nChange into a new directory and create soft links so that the input files are accessible in the current working directory.\n         \ncd ∼/ntLink/test\nmkdir -p run_rounds && cd run_rounds\nln -s ../celegans_flye.fa && ln -s ../SRR10028109.fastq\nln -s ../celegans_reference.fa.gz\nOption A: Run rounds of ntLink without gap-filling.\n         \nntLink_rounds run_rounds target=celegans_flye.fa reads=SRR10028109.fastq k=32 w=100 t=5 rounds=3 dev=True\nOption B: Run rounds of ntLink with gap-filling.\n         \nntLink_rounds run_rounds_gaps target=celegans_flye.fa reads=SRR10028109.fastq k=32 w=100 t=5 rounds=3 dev=True\nThe dev=True option will retain all intermediate files. Although this is useful to be able to see all the file types generated by ntLink for working through this protocol, this option can be omitted for most runs. When omitted, some intermediate files will be automatically deleted to save disk space.\n3. Check the logs and output files to ensure that the ntLink run executed successfully.\nAfter the ntLink command has completed, check the terminal output for this final message, which indicates a successful run: “Done ntLink rounds! Final scaffolds found in celegans_flye.fa.k32.w100.z1000.ntLink.3rounds.fa”. This message also indicates the FASTA file which contains the final, scaffolded assembly sequences.\n4. Use abyss-fac (de novo approach) and QUAST (reference-based approach) to assess the genome assembly after each round of ntLink scaffolding and compare the results to the initial baseline assembly. See Table 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0002] for detailed descriptions of the assembly statistics generated in these steps and Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-fig-0002] for a summary of the expected assembly statistics.\n         \na.Reference-free analysis of the ntLink output scaffolds using abyss-fac:\n               \nIf Option A was followed in step 2:\n                     \nabyss-fac --count-ambig -G100e6 celegans_flye.fa celegans_flye.fa.k32.w100.z1000.ntLink.fa celegans_flye.fa.k32.w100.z1000.ntLink.ntLink.fa celegans_flye.fa.k32.w100.z1000.ntLink.3rounds.fa",
    "If Option B was followed in step 2:\n                     \nabyss-fac --count-ambig -G100e6 celegans_flye.fa celegans_flye.fa.k32.w100.z1000.ntLink.gap_fill.fa celegans_flye.fa.k32.w100.z1000.ntLink.ntLink.gap_fill.fa celegans_flye.fa.k32.w100.z1000.ntLink.3rounds.fa\nSee Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], step 8a for detailed information describing the abyss-fac output.\nb.Reference-based analysis of the ntLink output scaffolds using QUAST:\n               \nIf Option A was followed in step 2:\n                     \nquast -t 5 -o quast_ntlink_bp3 -r celegans_reference.fa.gz --fast --large --split-scaffold celegans_flye.fa celegans_flye.fa.k32.w100.z1000.ntLink.fa celegans_flye.fa.k32.w100.z1000.ntLink.ntLink.fa celegans_flye.fa.k32.w100.z1000.ntLink.3rounds.fa\nIf Option B was followed in step 2:\n                     \nquast -t 5 -o quast_ntlink_bp3 -r celegans_reference.fa.gz --fast --large --split-scaffold celegans_flye.fa celegans_flye.fa.k32.w100.z1000.ntLink.gap_fill.fa celegans_flye.fa.k32.w100.z1000.ntLink.ntLink.gap_fill.fa celegans_flye.fa.k32.w100.z1000.ntLink.3rounds.fa\nSee Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], step 8b and Basic Protocol 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0002], step 6b for detailed information about the QUAST output. The QUAST output will be written to the directory named quast_ntlink_bp3. Note that if QUAST was installed from source, the executable will be named quast.py.\nNote that the final scaffolds file name will be the same whether Option A or Option B was followed, but the names of the files from intermediate rounds differ slightly.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/487cea70-404c-428b-bc5f-3eb6068578a0/cpz1733-fig-0002-m.jpg</p>\nFigure 2\nResults from analyzing the output files from Basic Protocol 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0003] (ntLink Option B) using QUAST. The scaffold NGA50 length (A) and misassembly (B) statistics for each round are shown. Running additional rounds of ntLink results in a more contiguous final assembly (Scaffold NGA50 length of 3.9 Mbp and 5.4 Mbp for round 1 and 2, respectively). The third round of scaffolding did not produce any additional joins, showing that further ntLink rounds would not benefit the assembly. More rounds may be required when the baseline assembly is more fragmented, or a larger genome is being scaffolded.",
    "Although ntLink is most commonly used as a scaffolding tool, the minimizer-based mapping functionality that enables assembly scaffolding can also be run in isolation. In any mode, ntLink first maps the input long reads to the input draft genome. When using ntLink in the default scaffolding mode, these mappings are parsed to infer evidence that supports ordering and orienting contigs into scaffolds. However, this mapping information can also be simply output to a file in a standard format and used for other downstream applications. In Alternate Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0004], we demonstrate the mapping mode of ntLink, which outputs the mappings in a standard Pairwise mApping Format (PAF) format.\nNecessary Resources\nHardware\n64-bit Linux or MacOS operating system with sufficient RAM and available disk space (see Strategic Planning)\nSoftware\nThe following software must be installed and available in your PATH:\nSRA toolkit (v3.0.0+): (https://github.com/ncbi/sra-tools[href=https://github.com/ncbi/sra-tools])\ncurl: (https://curl.se/[href=https://curl.se/])\nPython 3.7+: (https://www.python.org/[href=https://www.python.org/])\nntLink (v1.3.7+): (https://github.com/bcgsc/ntLink[href=https://github.com/bcgsc/ntLink])\nFor more information about installing ntLink and other dependencies, see detailed instructions in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], steps 1-2. Instructions for creating a conda environment that can be used for installing protocol-specific dependencies, as described below, are available in Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006].\nFiles\nThe input files for mapping with ntLink are long genome sequencing reads and a draft genome assembly. The long sequencing reads can be provided in FASTA or FASTQ format, either compressed with gzip or uncompressed. The input draft assembly to be scaffolded should be in FASTA format (multi-line or single-line).\nSample Files\nIn this protocol, we will map the same Oxford Nanopore C. elegans long reads as used in the basic protocols to a short-read C. elegans ABySS (Jackman et al., 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0005]) assembly. The ABySS assembly is available from https://zenodo.org/record/7526395/files/celegans_abyss.fa[href=https://zenodo.org/record/7526395/files/celegans_abyss.fa].\n1. Install the protocol-specific dependency, miller.\nOption A: Use conda package manager.",
    "If Option A of Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006] was used to install ntLink, miller can be installed in the same conda environment.\n         \nconda activate ntlink_env\nconda install -y -c conda-forge miller\nOption B: Install from source.\n         \nGo to the miller releases page (https://github.com/johnkerl/miller/releases[href=https://github.com/johnkerl/miller/releases]) and find the pre-built binary that is appropriate for your system.\nDownload the binary from the releases page and extract the compressed tarball. A Linux pre-built binary is shown for illustration purposes but the path to any pre-built miller binary can be used in this step.\n               \ncurl -L --output miller_download.tar.gz https://github.com/johnkerl/miller/releases/download/v6.5.0/miller-6.5.0-linux-amd64.tar.gz\ntar xvzf miller_download.tar.gz\nAppend the path to the miller installation to your PATH environment variable.\n               \nexport PATH=$(pwd)/miller-6.5.0-linux-amd64/:$PATH\n2. Download the sample long reads. This file is the same as used for Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001]-3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0003].\nFor detailed instructions describing downloading the sample long reads, see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], step 3.\n3. Download the sample draft ABySS (Jackman et al., 2017[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0005]) short-read assembly.\n         \ncurl -L --output celegans-abyss.fa https://zenodo.org/record/7526395/files/celegans_abyss.fa\n4. Run ntLink to map the sample long reads to the draft assembly. Ensure that the downloaded sample data files are in your current working directory.\n         \nntLink pair target=celegans-abyss.fa reads=SRR10028109.fastq t=5 sensitive=True paf=True\n5. Check the logs and output files to ensure that the run executed successfully.\nIf the ntLink mapping completed successfully, the terminal output messages from ntLink should finish with a time stamp and “DONE!”. Furthermore, a PAF-formatted mapping file called “celegans-abyss.fa.k32.w100.z1000.paf” should be in your current working directory.\n6. Assess the mapping file output from ntLink. See Table 5[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0005] for the expected mapping statistics.\n         \na.To make the generation of summary statistics more straightforward with miller, add column labels to the PAF file.\n               \ncat celegans-abyss.fa.k32.w100.z1000.paf | mlr --tsv --implicit-csv-header label read,read_len,read_start,read_end,strand,contig,contig_len,contig_start,contig_end,num_minimizers,len_mapping,mapping_qual > celegans-abyss.fa.paf.mlr.tsv\nb.Count the total number of mappings of the long reads to the query contigs.",
    "mlr --tsv stats1 -a count -f read celegans-abyss.fa.paf.mlr.tsv\nc.Calculate the average mapping block length.\n               \ncat celegans-abyss.fa.paf.mlr.tsv | mlr --tsv stats1 -a mean -f len_mapping\nd.Calculate the average number of read mappings per draft assembly contig.\n               \ncat celegans-abyss.fa.paf.mlr.tsv | mlr --tsv cut -f read,contig then uniq -g read,contig then stats1 -a count -f contig -g contig then stats1 -a mean -f contig_count\nTable 5.\n                Expected Results From Assessing the ntLink Mappings of the Sample C. elegans Long Reads to the Draft ABySS Assembly in Alternate Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0004]\ntable:\n﻿0,1\nTotal number of read mappings,622975.0\nAverage mapping block length (bp),5647.7\nAverage number of distinct mapped reads per contig,105.2",
    "As described in Alternate Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0004], the mapping functionality in ntLink can be used to inform scaffolding, the most common use of ntLink, or separately to provide mapping information that can be used by other downstream pipelines. One such alternate application is Tigmint-long (Coombe et al., 2021[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0001]), a de novo genome assembly correction tool which utilizes information in long reads to detect and cut at putative misassemblies. In the default mode, Tigmint-long simulates pseudo-linked reads from the long reads. This involves breaking the long reads into tiles, which represent short-read fragments, then generating paired-end reads from the fragments. Each read pair from the same long read is assigned the same barcode, adhering to the expected format for linked reads. These reads are then mapped to the draft assembly using minimap2 (Li, 2018[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-bib-0008]), and these mappings are parsed to look for regions of the draft assembly that are not well-supported by the reads. However, as only approximate mappings are required, ntLink mapping can be used in place of minimap2. As ntLink uses more streamlined mapping logic, the reads do not need to be broken into pseudo-linked reads prior to mapping, thus eliminating a step in the pipeline. The output of Tigmint-long is a contigs file in FASTA format, where the sequences are broken at putative misassemblies.\nNecessary Resources\nHardware\n64-bit Linux or MacOS operating system with sufficient RAM and available disk space (See Strategic Planning for more detail).\nSoftware\nThe following software must be installed and available in your PATH:\nSRA toolkit (v3.0.0+): (https://github.com/ncbi/sra-tools[href=https://github.com/ncbi/sra-tools])\ncurl: (https://curl.se/[href=https://curl.se/])\nPython 3.7+: (https://www.python.org/[href=https://www.python.org/])\nntLink (v1.3.7+): (https://github.com/bcgsc/ntLink[href=https://github.com/bcgsc/ntLink])\nQUAST (v5.2.0+): (https://github.com/ablab/quast[href=https://github.com/ablab/quast])",
    "For more information about installing ntLink and other dependencies, see detailed instructions in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], steps 1-2. Instructions for creating a conda environment that can be used for installing protocol-specific dependencies, as described below, are available in Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006].\nFiles\nThe input files for ntLink are long genome sequencing reads and a draft genome assembly. The long sequencing reads can be provided in FASTA or FASTQ format, either compressed with gzip or uncompressed. The input draft assembly to be corrected should be in FASTA format (multi-line or single-line).\n1. Install the protocol-specific dependency Tigmint.\nOption A. Use conda package manager:\nIf Option A of Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0006] was used to install ntLink, Tigmint can be installed in the same conda environment.\n         \nconda activate ntlink_env\nconda install -y -c bioconda -c conda-forge tigmint 'samtools>=1.10'\nOption B. Install from source:\n         \nConsult the README in the Tigmint GitHub repository (https://github.com/bcgsc/tigmint[href=https://github.com/bcgsc/tigmint]) to ensure that the required dependencies are installed.\nGo to the releases page for Tigmint (https://github.com/bcgsc/tigmint/releases[href=https://github.com/bcgsc/tigmint/releases]) and find the most recent release tarball. Download and extract this tarball in the directory where you would like Tigmint to be installed. To demonstrate the required commands, Tigmint v1.2.9 is shown below, but the URL can be substituted for any later release of Tigmint.\n               \ncurl -L --output tigmint-1.2.9.tar.gz https://github.com/bcgsc/tigmint/releases/download/v1.2.9/tigmint-1.2.9.tar.gz\ntar xvzf tigmint-1.2.9.tar.gz\ncd tigmint-1.2.9\nCompile the required binaries.\n               \ncd src\nmake\ncd ../..\nAppend the path to the Tigmint installation to your PATH environment variable.\n               \nexport PATH=$(pwd)/tigmint-1.2.9/bin:$PATH\n2. Download the sample C. elegans long reads and reference genome. These files are the same as used in Basic Protocols 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001]-3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0003].\nFor detailed instructions describing downloading this sample data, see Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], steps 3 and 5.",
    "3. Download the sample draft C. elegans ABySS short-read assembly. This draft assembly FASTA is the same as used in Alternate Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0004].\nFor detailed instructions describing downloading the ABySS short-read assembly, see Alternate Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0004], step 3.\n4. Run Tigmint-long on the draft C. elegans ABySS assembly using ntLink mapping and the downloaded long reads to detect and cut at putative misassemblies. Ensure that the downloaded sample data files are in your current working directory.\n         \ntigmint-make tigmint-long draft=celegans-abyss reads=SRR10028109 mapping=ntLink t=5 span=2\n5. Check the logs and output files from Tigmint-long to ensure that the run executed successfully.\nA successful run of Tigmint will finish with the following terminal output messages: “Cutting assembly at breakpoints… DONE!”. There will also be a file named “celegans-abyss.cut500.tigmint.fa” in your current working directory which contains the corrected draft assembly sequences.\n6. Use the reference-based assessment tool QUAST to compare the contiguity and correctness of the corrected genome assembly and the initial baseline assembly. See Table 6[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0006] for results from running QUAST on these assemblies.\n         \nquast -t 5 -o quast_tigmint_ap2 -r celegans_reference.fa.gz --fast --large celegans-abyss.fa celegans-abyss.cut500.tigmint.fa\nSee Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], step 8b and Table 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl-0002] for detailed information about the QUAST output. Note that if QUAST was installed from the source code (as described in Basic Protocol 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-prot-0001], step 2b), the executable will be named quast.py. The QUAST results will be written to the quast_tigmint_ap2 directory.\nTable 6.\n                Results From Analyzing the Baseline and Tigmint-Long Corrected C. elegans ABySS Assemblya[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpz1.733#cpz1733-tbl6-note-0001_115]\ntable:\n﻿Assembly,Number of sequences ≥3 kbp,Scaffold NG50 length (bp),Scaffold NGA50 length (bp),Number of misassemblies\nABySS baseline,4552,30293,27015,433\nABySS + Tigmint-long,4793,27564,27015,162\na Following Tigmint-long misassembly correction using mappings from ntLink, the number of misassemblies decreases by more than two fold.",
    "ntLink can be installed using the conda package manager or from the source code. For a more straightforward installation process, and to ensure that all dependencies are properly installed, we recommend installing ntLink using conda.\nNecessary Resources\nHardware\nntLink requires a 64-bit Linux or MacOS operating system with sufficient RAM and available disk space (see Strategic Planning)\nSoftware\nMiniconda (https://docs.conda.io/en/latest/miniconda.html[href=https://docs.conda.io/en/latest/miniconda.html])\nInstalling ntLink\nOption A: Installing ntLink using the conda package manager\n1a. If miniconda is not already installed:\n         \nDownload the miniconda3 bash installer: https://docs.conda.io/en/latest/miniconda.html[href=https://docs.conda.io/en/latest/miniconda.html]\nRun the installer script.\n               \nOn MacOS:\n                     \nbash Miniconda3-latest-MacOSX-x86_64.sh\nOn Linux:\n                     \nbash Miniconda3-latest-Linux-x86_64.sh\nFollow the installer prompts.\nClose and re-open your terminal window to finalize the installation.\n2a. Create a new conda environment.\n         \nconda create -n ntlink_env\n3a. Activate the new conda environment.\n         \nconda activate ntlink_env\n4a. Install ntLink in the environment.\n         \nconda install -y -c bioconda -c conda-forge ntlink\nOption B: Installing ntLink from the source code\n1b. Install the following dependencies and ensure that each is available in your PATH environment variable. We recommend installing the dependencies using a package manager such as conda. Otherwise, visit the tool homepages for information about installing from the source code.\n         \n○Python 3.7+\n○Python modules:\n               \n▪NumPy: (https://numpy.org/[href=https://numpy.org/])\n▪Python-igraph: (https://igraph.org/python/[href=https://igraph.org/python/])\n○btllib: (https://github.com/bcgsc/btllib[href=https://github.com/bcgsc/btllib])\n○ABySS (v2.3.0+): (https://github.com/bcgsc/abyss[href=https://github.com/bcgsc/abyss])\n○Zlib: (https://zlib.net/[href=https://zlib.net/])\n○Make: (https://www.gnu.org/software/make/[href=https://www.gnu.org/software/make/])\n2b. Change your directory to the desired folder for the ntLink installation, then clone the ntLink repository from GitHub.\n         \ncd ∼/bin/ntlink\ngit clone https://github.com/bcgsc/ntLink.git\n3b. Append the location of the ntLink installation to your PATH environment variable.\n         \nexport PATH=$(pwd)/ntLink:$PATH\nChecking your installation\nTo verify that your installation is working properly, you can follow any of the basic protocols or run the small demo provided on GitHub.\nRunning test demo\n5. If you haven't already cloned ntLink during the installation process, clone the GitHub repository to download the small test demo.",
    "git clone https://github.com/bcgsc/ntLink.git\n6. Change your working directory to the cloned ntLink repository, then to the directory containing the test demo script.\n         \ncd ntLink/tests\n7. Run the provided demo shell script.\n         \n./test_installation.sh\n8. If the test was successful, indicating that your installation is working as expected, you will see this message: “Done tests! Compare your generated files with the files in the expected_outputs folder to ensure the tests were successful.”"
  ],
  "subjectAreas": [
    "Bioinformatics"
  ],
  "bigAreas": [
    "Bioinformatics & Computational Biology"
  ]
}