{
  "id": 19877,
  "origin_website": "Wiley",
  "title": "deltaTE: Detection of Translationally Regulated Genes by Integrative Analysis of Ribo-seq and RNA-seq Data",
  "procedures": [
    "The RNA-seq and Ribo-seq data should be processed first as described in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0003], in order to determine translationally regulated genes. In the following steps, we quantify the change in TE of each gene, calculate an FDR value for this change, and categorize genes into regulation classes using the ΔTE approach. A DTEG is determined based on significant change in TE (FDR < 0.05). This protocol describes a wrapper script, DTEG.R, to detect and classify DTEGs. It also includes a script to visualize the transcriptional, translational, and TE changes for a gene of interest. Alternatively, the protocol can also be carried out step-by-step in R, allowing flexibility for complex experimental designs (see Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0002]).\nMaterials\nHardware\nComputer running Unix, Linux or Mac OS X\nAdministrative privileges and internet connection to install packages\nSoftware\nDTEG.R and goi_viz.R script: These scripts can be downloaded from our github page by typing the following command in the terminal window:\n               \n$ git clone\nhttps://github.com/SGDDNB/translational_regulation.git[href=https://github.com/SGDDNB/translational_regulation.git]\nR: https://cran.r-project.org/bin/windows/base/[href=https://cran.r-project.org/bin/windows/base/]\nRstudio: https://www.rstudio.com/products/rstudio/download/[href=https://www.rstudio.com/products/rstudio/download/]\nDESeq2: https://bioconductor.org/packages/release/bioc/html/DESeq2.html[href=https://bioconductor.org/packages/release/bioc/html/DESeq2.html]\nDESeq2 can also be installed in R by typing the following command:\n               \n> if(!requireNamespace(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\")\n> BiocManager::install(\"DESeq2\")\nInput files\nribo_counts.txt: RPF count matrix including genes as rows and samples as columns\nrna_counts.txt: mRNA count matrix including genes as rows and samples as columns\nsample_info.txt: Sample-wise information about experimental condition, type of sample (RNA- or Ribo-seq), and sample batch where applicable\nPreparing input files for DTEG.R\n1. Generate read count matrices for both Ribo-seq and RNA-seq, as described in the Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0003].\nThese files contain raw read counts obtained from read-counting tools and should not be normalized or batch corrected. Each row represents a gene and each column represents a sample as shown below:\n         \ntable:\n﻿0,1,2,3,4\n,,,,\nGene ID,Sample 1,Sample 2,Sample 3,Sample 4\nENSG0000XX,1290,130,2,1000\nENSG0000XY,0,2,10,5\n….,..,..,..,..\nENSG0000ZZ,0,2,10,5\nribo_counts.txt\ntable:\n﻿0,1,2,3,4\n,,,,",
    "Gene ID,Sample 5,Sample 6,Sample 7,Sample 8\nENSG0000XX,4000,2000,200,1200\nENSG0000XY,10,20,0,40\n….,..,..,..,..\nENSG0000ZZ,0,2,10,5\nrna_counts.txt\n2. Create a tab-separated sample information file with rows as samples and columns as condition and sequencing methodology.\nThis file contains sample information for samples in both ribo_counts.txt and rna_counts.txt. The sample IDs should be unique and exactly match the sample names in the count matrices. This file contains two columns, Condition (treatment) and SeqType (sequencing methodology). Additionally, if there is a known batch effect in the dataset, it can also be included as another column, as shown below. If your experiment has more than one batch covariate, it is recommended to use the Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0002].\n         \ntable:\n﻿0,1,2,3\n,,,\nSample ID,Condition,SeqType,Batch\nSample 1,1,RIBO,1\nSample 2,1,RIBO,2\nSample 3,2,RIBO,1\nSample 4,2,RIBO,2\nSample 5,1,RNA,1\nSample 6,1,RNA,2\nSample 7,2,RNA,1\nSample 8,2,RNA,2\nsample_info.txt\nDetecting and categorizing differentially transcribed genes and differential translation efficiency genes\n3. Open a Unix/Linux command line environment (“Terminal” application in a Linux operating system or Mac OS). Run script DTEG.R using the following command line:\n         \n$ Rscript DTEG.R arg1 arg2 arg3 arg4 arg5 arg6\nwhere command arguments arg1-6 are as follows:\nArgument 1 (arg1): Ribo-seq count matrix file path\nArgument 2 (arg2): RNA-seq count matrix file path\nArgument 3 (arg3): Sample information file path\nArgument 4 (arg4): Batch effect covariate: yes=1, or no=0\nArgument 5 (arg5): Save Rdata file as a record for future use (optional, Default = 1)\nArgument 6 (arg6): Verbose mode (optional, Default = 0)\nExample:\n         \n$ Rscript DTEG.R ./ribo_counts.txt ./rna_counts.txt ./sample_info.txt 1\nThis command creates a Results/ directory including fold changes, gene lists for each regulatory group, and visualizations, as shown in Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-fig-0002]A-G. For further details on the different output files created, refer to Understanding Results.\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/8f6d6888-25ba-4390-93c2-5ce9ea52f89a/cpmb108-fig-0002-m.jpg</p>\nFigure 2",
    "Translational regulation in sample data using DTEG.R script. Principal component analysis of (A) Ribo-seq and (B) RNA-seq datasets. (C) Scatter plot of log fold change values across both sequencing methodologies. Differentially transcribed genes (DTGs) and differential translation efficiency genes (DTEGs) are marked. (D-G) Gene profiles of exemplars in each regulation class, translationally forwarded (D), exclusive (E), buffered (F), and intensified (G).\nVisualizing changes in mRNA counts, RPFs, and TE for a gene of interest\n4. Run goi_vis.R.\nThis step includes a one-step script to visualize the fold changes across the condition given in the study for a gene of interest as shown in Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-fig-0002]D-G:\n         \n$ Rscript goi_viz.R arg1 arg2 arg3 arg4\nwhere command arguments arg1-6 are as follows:\nArgument 1 (arg1): Ribo-seq fold change file path.\nArgument 2 (arg2): RNA-seq fold change file path.\nArgument 3 (arg3): TE fold change file path.\nArgument 4 (arg4): ENSEMBL gene ID\nThe fold change files (arg1, arg2, and arg3) are generated in step 3 and are located in the results directory within the fold_changes subdirectory. ENSEMBL gene ids for your gene of interest can be obtained from https://www.ensembl.org/index.html[href=https://www.ensembl.org/index.html]. It is required to use the same genome version as used for obtaining the count matrix by Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0003].\nExample:\n         \n$ Rscript goi_viz.R\npath/to/Results/directory/fold_changes/deltaRibo.txt\npath/to/Results/directory/fold_changes/deltaRNA.txt\npath/to/Results/directory/fold_changes/deltaTE.txt\nENSG00000095752\nThis script is also part of the github directory and is automatically downloaded with the git clone command described in Materials, Hardware, above. Running this script saves an output file in the current directory (gene_id.pdf). This file saves a visualization of the ΔRPF, ΔmRNA, and ΔTE for the gene of interest. A line plot is used to show fold changes of the mRNA, RPF, and TE for the gene of interest across conditions as shown in Figure 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-fig-0002]D-G.",
    "This protocol performs the same task as the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0001], but step-wise in R, describing each step allowing flexibility to users for complex experimental designs.\nMaterials\nHardware\nComputer running Unix, Linux or Mac OS X\nAdministrative privileges and internet connection to install packages\nSoftware\nR: https://cran.r-project.org/bin/windows/base/[href=https://cran.r-project.org/bin/windows/base/]\nRstudio: https://www.rstudio.com/products/rstudio/download/[href=https://www.rstudio.com/products/rstudio/download/]\nDESeq2: https://bioconductor.org/packages/release/bioc/html/DESeq2.html[href=https://bioconductor.org/packages/release/bioc/html/DESeq2.html]\nDESeq2 can also be installed in R by typing the following command:\n               \n> if(!requireNamespace(\"BiocManager\", quietly =TRUE)) install.packages(\"BiocManager\")\n> BiocManager::install(\"DESeq2\")\nInput files\nribo_counts.txt: RPF count matrix including genes as rows and samples as columns\nrna_counts.txt: mRNA count matrix including genes as rows and samples as columns\nsample_info.txt: Sample-wise information on sequencing methodology used, condition and batch\n1. Prepare input files as described in steps 1 and 2 of the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0001].\nAdditionally, using this protocol, the sample information file can have more columns for other covariates that can be included in the model design, as described in step 3.\n2. Open Rstudio and load count matrices and sample information file:\n         \n> ribo_counts = read.delim(“ribo_counts.txt”)\n> rna_counts = read.delim(“rna_counts.txt”)\n> sample_info = read.delim(“sample_info.txt”)\nThese commands assume that all required files are within your working directory. In case they are not, provide the full path to the input file in the read.delim command.\n3. Create DESeq2 object for the combined dataset of Ribo-seq and RNA-seq counts. The interaction term should be included in the linear model design as follows:\n         \n> ddsMat = DESeqDataSetFromMatrix(\ncountData=cbind(ribo_counts,rna_counts),\ncolData=sample_info,\ndesign=∼ Condition+SeqType+Condition:SeqType)\nThe data can be tested for batch effects using principal component analysis (PCA). If there is a batch effect/other covariate, the design can be modified by adding the covariate to the design as: ∼ Batch + Condition + SeqType + Condition:SeqType.\n4. Run DESeq2:\n         \n> ddsMat = DESeq(ddsMat)",
    "This step carries out estimation of size factors, estimation of dispersion, and model fitting. The relevel function in R can be used prior to running DESeq2 to assign a reference level from which comparisons will be made. It is important that the reference level for sequencing type be RNA-seq; the reference level for condition can be selected based on the experiment.\n5. Obtain fold changes for TE:\n         \n> res = results(ddsMat, name=“Condition2.SeqTypeRIBO”)\nThis step calculates the gene-wise fold change and its statistical significance for a given comparison. DESeq2 calculates this change between different groups that are described in the sample information file and model design. The calculated comparisons can be obtained by using resultsNames(ddsMat). For instance, name=“Condition_2_vs_Condition_1” quantifies changes between condition 2 and condition 1 using the reference level RNA-seq (see step 4). Similarly, name=“Sequencing_Ribo_vs_RNA” quantifies the difference between Ribo-seq counts and RNA-seq counts using the reference level as condition 1. These can also be supplied using the contrast parameter instead of the name parameter as follows: contrast=c(“Condition”,“2”,“1”) and contrast=c(“SeqType”,“RIBO”,“RNA”), respectively. For interaction term fold change we use name=“Condition2.SeqTypeRIBO”. This quantifies the change in TE in condition 2 versus baseline condition 1. Refer to Commentary for the mathematical proof that the interaction coefficient is equivalent to TE.\nDetecting differential translation efficiency genes\n6. Store the list of DTEGs in a file:\n         \n> write.table(res[which(res$padj<0.05), ], “DTEGs.txt”, quote=F)\nDTEGs are genes which have a significant interaction term fold change. FDR values can be chosen based on user preference; here we recommend using FDR < 0.05.\n7. Run DESeq2 for mRNA counts in order to obtain DTGs:\n         \n> ddsMat_rna = DESeqDataSetFromMatrix(\ncountData=rna_counts,\ncolData=sample_info[which(samples_info$SeqType == “RNA”),],\ndesign=∼Condition)\n> ddsMat_rna = DESeq(ddsMat_rna)\n> res_rna = results(ddsMat_rna, name=\"Condition_2_vs_1\")\n> res_rna = lfcShrink(ddsMat_rna,name=\"Condition_2_vs_1\",res=res_rna)\n> write.table(res_rna[which(res_rna$padj<0.05), ],“DTGs.txt”, quote=F)",
    "DTGs are genes that have a significant change in the mRNA counts. To obtain DTGs, we run DESeq2 separately for mRNA counts and use the same FDR as above (FDR < 0.05). These data may also be tested for batch effects using PCA, and if any batch effects are identified, they should be included in the sample_info.txt file and in the design as ∼Condition + Batch.\nCategorizing genes into different regulation groups\n8. Run DESeq2 for RPFs (Ribo-seq counts):\n         \n> ddsMat_ribo = DESeqDataSetFromMatrix(\ncountData=ribo_counts,\ncolData=sample_info[which(samples_info$SeqType == “RIBO”),],\ndesign=∼Condition)\n> ddsMat_ribo = DESeq(ddsMat_ribo)\n> res_ribo = results(ddsMat_ribo,name=\"Condition_2_vs_1\")\n> res_ribo =\nlfcShrink(ddsMat_ribo,name=\"Condition_2_vs_1\"),res=res_ribo)\nIn order to classify genes into different regulation classes, quantification of the change in the RPFs is required. Similar to mRNA counts, these data should also be tested for batch effects, and, if any batch effects are identified, the batches should be included in the file sample_info.txt and the model design.\n9. Obtain genes for each regulation class described in Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-fig-0001]D, E.\nFor each gene, the change in RPFs (ΔRPF), change in mRNA counts (ΔRNA), and change in its TE (ΔTE) are combined to determine its regulation group, as shown in Table 2[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-tbl-0002]. It is recommended to use an FDR threshold of 0.01 or 0.05.\nForwarded: Genes driven by transcriptional regulation. These genes do not have a change in TE, and the change in RNA drives the change in RPFs. Hence, genes that have significant ΔRPF and ΔRNA but that do not have a significant ΔTE fall into this class.\n               \n> forwarded = rownames(res)[which(res$padj > 0.05 & res_ribo$padj < 0.05 & res_rna$padj < 0.05)]",
    "Exclusive: Genes regulated exclusively by translation. This means that the change in TE is driven by change in RPFs exclusively, and there is no change in mRNA counts. Hence, genes with significant ΔTE and ΔRPFs but no significant change in mRNA counts belong to this group.\n               \n> exclusive = rownames(res)[which(res$padj < 0.05 & res_ribo$padj < 0.05 & res_rna$padj > 0.05)]\nIntensified and buffered: Genes regulated both by transcriptional and translational regulation (significant ΔRNA, ΔRPFs, and ΔTE) include intensified and buffered genes. These genes are both DTGs and DTEGs.\n               \n> both = rownames(res)[which(res$padj < 0.05 & res_ribo$padj < 0.05 & res_rna$padj < 0.05)]\nIn order to further categorize these genes into intensified and buffered genes, the direction of the transcriptional change (ΔRNA) and translational efficiency change (ΔTE) are compared.\nIntensified: Genes for which the translational regulation acts with the transcriptional regulation change. These genes have the translational change in the same direction as their transcriptional change:\n         \n> intensified = rownames(res)[both[which(res[both,2]*res_rna[both,2] > 0)]]\nBuffered: Genes for which the translational regulation counteracts the transcriptional regulation change. In these genes, the transcriptional change (ΔRNA) and translational efficiency change (ΔTE) are in the opposite direction:\n         \n> buffered = rownames(res)[both[which(res[both,2]*res_rna[both,2] < 0)]]\nThere is also a special case of buffered genes wherein the transcriptional change is cancelled out by the change in TE to the point of no significant change in RPFs. Hence, genes with significant ΔTE and ΔRNA but that do not have a significant ΔRPF are also considered as translationally buffered.\n         \n> buffered = c(rownames(res)[which(res$padj < 0.05 & res_ribo$padj > 0.05 & res_rna$padj < 0.05)], buffered)\nTable 2.\n                Classification of Genes into Regulatory Classes Shown in Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-fig-0001]Da[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-tbl2-note-0001_38],b[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-tbl2-note-0002_39]\ntable:\n﻿Class,ΔRPF,ΔRNA,ΔTE,Fold change direction,DTG/DTEG,Schematic\nNo change,n.s.,n.s.,n.s.,No change at either regulatory levels,,imgsrc:/cms/asset/3b39fcdd-7d6f-4018-8c9a-88426ccb66a1/cpmb108-gra-0001.png\nForwarded,sig,sig,n.s.,Change in RPF is in the same direction as change in RNA,DTG,imgsrc:/cms/asset/9ed7642f-1ee7-41e1-861f-8730b1a15eb7/cpmb108-gra-0002.png",
    "Exclusive,sig,n.s.,sig,Change in RPF is not driven by change in RNA,DTEG,imgsrc:/cms/asset/8611ed66-381a-488f-866e-5cca07c45a42/cpmb108-gra-0003.png\nIntensified,sig,sig,sig,Change in TE is counteracting the change in RNA,DTG and DTEG,imgsrc:/cms/asset/a19a22e0-fff1-40ca-ab1a-7348b492d3a3/cpmb108-gra-0004.png\nBuffered,sig,sig,sig,Change in TE is completely counteracting the change in RNA; No change in RPF,DTG and DTEG,imgsrc:/cms/asset/d44595df-167a-49f0-917c-395deee26c3a/cpmb108-gra-0005.png\nBuffered (special case),n.s.,sig,sig,Change in TE is intensifying change in RNA,DTG and DTEG,imgsrc:/cms/asset/d0230290-b62a-41fc-8aec-579559c3ba52/cpmb108-gra-0006.png\na DTG, differentially transcribed gene; DTEG, differential translation efficiency gene; n.s., not significant; sig, significant.\nb Genes with any other combinations, i.e., 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-disp-0001] RPF: n.s.; RNA: sig, TE: n.s.; (2) RPF: sig; RNA: n.s., TE: n.s.; and (3) RPF: n.s.; RNA: n.s., TE: sig; are considered as undetermined as they cannot be grouped into any of the classes.\n10. Visualize the global translational and transcriptional regulation as in Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-fig-0001]E.\n         \n> max_val = max(res_ribo[,2],res_rna[,2],na.rm = T)\n> plot(y=res_ribo[,2],x=res_rna[,2],\nxlab=\"RNA-seq log2 fold change\",\nylab = \"Ribo-seq log2 fold change\", asp=1, pch=16,\ncol=rgb(128/255,128/255,128/255,0.1), ylim=c(-\nmax_val,max_val), xlim=c(-max_val,max_val),cex=0.4)\n> abline(a=0,b=1,col=\"gray\")\n> abline(h=0,v=0,col=\"gray\")\n> points(y=res_ribo[forwarded,2], x=res_rna[forwarded,2],\npch=16,col=rgb(0,0,1,1))\n> points(y=res_ribo[exclusive,2], x=res_rna[exclusive,2],\npch=16,col=rgb(1,0,0,1))\n> points(y=res_ribo[intensified,2], x=res_rna[intensified,2],\npch=16,col=rgb(1,0,1,1))\n> points(y=res_ribo[buffered,2], x=res_rna[buffered,2],\npch=16,col=rgb(1,0,1,1))\nThese steps plot the global fold changes of mRNA counts versus the RPFs, as shown in Figure 1[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-fig-0001]E. Refer to Understanding Results for more details.\nVisualizing changes in mRNA counts, RPFs, and TE for a gene of interest\n11. Visualize the transcriptional, translational, and TE changes of a given gene id [id] using a line plot.\n         \n> ymax=max(res_ribo[id,2],res_rna[id,2],res[id,2],0)\n> ymin=min(res_ribo[id,2],res_rna[id,2],res[id,2],0)\n> plot(c(0,1), c(0,res_ribo[id,2]), type=\"l\",col=\"gray\",\nylim=c(ymin,ymax), ylab=\"Log2 fold change\",xlab=\"\",xaxt=\"n\")\n> lines(c(0,1), c(0,res_rna[id,2]),type=\"l\",col=\"blue\")\n> lines(c(0,1), c(0,res[id,2]), type=\"l\",col=\"red\")\n> legend(\"bottomleft\",c(\"RNA\",\"Ribo\",\"TE\"),fill=c(\"blue\",\"gray\",\"red\"),\ncex=1, border = NA, bty=\"n\")\n> axis(1,at=c(0,1),labels=c(1,2),las=1)",
    "This step carries out the same function as step 4 of the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0001]. It requires a gene id for your gene of interest, which can be obtained from https://www.ensembl.org/index.html,[href=https://www.ensembl.org/index.html,] or can be based on the genome annotation file used to obtain count matrices with Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0003]. The input id should be a row name in the count matrix file.",
    "The raw sequencing data should be processed prior to the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0001] or Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0002], as shown below. It is also strongly recommended to carry out quality check for the raw and processed data as described in the following steps.\nMaterials\nHardware\nComputer running Unix, Linux or Mac OS X\nSoftware\nTrimmomatic: http://www.usadellab.org/cms/?page=trimmomatic[href=http://www.usadellab.org/cms/?page=trimmomatic]\nBowtie2: http://bowtie-bio.sourceforge.net/bowtie2/index.shtml[href=http://bowtie-bio.sourceforge.net/bowtie2/index.shtml]\nSTAR: https://github.com/alexdobin/STAR[href=https://github.com/alexdobin/STAR]\nsubread: http://subread.sourceforge.net/[href=http://subread.sourceforge.net/]\nFastQC: https://www.bioinformatics.babraham.ac.uk/projects/download.html[href=https://www.bioinformatics.babraham.ac.uk/projects/download.html]\nMultiQC: https://multiqc.info[href=https://multiqc.info]\nRibo-TISH: https://github.com/zhpn1024/ribotish/blob/master/INSTALL.rst[href=https://github.com/zhpn1024/ribotish/blob/master/INSTALL.rst]\nInput files\nseq.fastq.gz: Raw sequencing files for both Ribo-seq and RNA-seq\nadaptors.fa: List of adaptor sequences in a fasta format\nabundant.fa: List of abundant sequences (rRNA, transfer RNA (tRNA), and mitochondrial RNA (mtRNA)) in fasta format\norganism.fa: Genome sequence in fasta format for the organism used in the study\norganism.gtf: Genome-wide transcript annotations in gene transfer format (GTF) for the organism used in the study\nProcessing the raw sequencing data to generate gene expression count matrix files\n1. Trim adaptor sequences from reads:\n         \n$ java -jar trimmomatic-0.36.jar SE -phred33 seq.fastq.gz outfile ILLUMINACLIP:adaptors.fa:2:30:10 MAXINFO:20:0.5 MINLEN:20\nwhere:\n         \nseq.fastq.gz is the raw sequencing file;\noutfile is the output file prefix;\nadaptors.fa is the list of sequences of adaptors used for sequencing in fasta format;\nMINLEN is the minimum length of reads required to retain.\nThe arguments are based on Trimmomatic V0.36, and other parameters can be explored as described in the manual, which can be obtained from http://www.usadellab.org/cms/?page=trimmomatic[href=http://www.usadellab.org/cms/?page=trimmomatic]. The minimum length required is set to 20, as the expected read length for RPFs is 29. This command trims the adaptor sequences from raw read sequences and saves an output file (outfile.fastq.gz) which is used as input file for step 2.\n2. Remove reads mapping to abundant sequences.",
    "This step first prepares a bowtie2 index for the known abundant sequences: rRNA, tRNA, and mtRNA. These sequences are considered contaminants of Ribo-seq data, since we want to capture only RPFs. Therefore, reads mapping to these contaminant sequences are removed prior to further analysis:\n         \n$ bowtie2-build abundant.fa index\nWhere:\n         \nabundant.fa is the list of abundant sequences (rRNA, tRNA, and mtRNA) in fasta format;\nindex is the prefix for the bowtie index output files.\n$ bowtie2 -L 20 -x index --un-gz outfile -U infile -S samfile\nWhere:\n         \ninfile is the trimmed sequencing fastq.gz file, which was the outfile obtained in step 1;\noutfile is the output filename for unmapped reads in fastq.gz format;\nsamfile is the output filename for mapped reads in SAM format;\nindex is the prefix used for the bowtie index.\nThe arguments are based on Bowtie2 (V2.2.9), and other parameters can be explored as described in the manual. This function builds the index for abundant sequences, aligns the reads to the same, and saves a fastq.gz file, retaining only the unmapped reads. This output fastq.gz file comprises a cleaned set of reads that do not map to the abundant sequences and represent the RPFs. The reads in this file are further mapped to the genome in the next step.\n3. Align reads to the genome file using the transcriptome index.\nBefore aligning the reads, it is required to generate a transcriptome index for the organism of interest. The required input files, the genome fasta and annotation files, can be downloaded from the Ensembl database at https://asia.ensembl.org/info/data/ftp/index.html[href=https://asia.ensembl.org/info/data/ftp/index.html]. These files should be for the same organism and same genome build. Run the following commands to generate the index, followed by alignment of reads to the same:\n         \n$ STAR --runMode genomeGenerate --genomeDir --genomeFastaFiles organism.fa --sjdbGTFfile organism.gtf\nWhere:",
    "organism.fa is the genome sequence in fasta format;\norganism.gtf is the genome-wide transcript information;\ngenomeDir is the directory name for the output STAR index files.\n$ STAR --runThreadN 16 --alignSJDBoverhangMin 1 --alignSJoverhangMin 51 --outFilterMismatchNmax 2 --alignEndsType EndToEnd --genomeDir star2.5.2b_genome_index --readFilesIn infile --readFilesCommand gunzip -c --outFileNamePrefix outPrefix --quantMode GeneCounts --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 31532137230 --outSAMattributes All\nWhere:\n         \ngenomeDir is the directory name for the STAR index files generated in the previous step;\ninfile is the cleaned fastq.gz file, which was the outfile in step 2;\noutPrefix is the prefix for the output filenames.\nThe arguments are based on STAR version 2.5, and other parameters can be explored as described in the manual. This function builds a STAR index for a given fasta and GTF, aligns the reads to the same, and saves an alignment file in the BAM format.\n4. Count reads mapped to coding regions of genes:\n         \n$ featureCounts -t CDS -g gene_id -O -s 1 -J -R -G organism.fa -a organism.gtf -o outfile infile_path/*bam\nWhere:\n         \norganism.fa is the genome sequence in fasta format;\norganism.gtf is the genome-wide transcript information;\noutfile is the output file name for the count matrix;\ninfile_path is the path to the directory containing all bam files obtained in step 3.\nThe arguments are based on FeatureCounts V1.5.1, and other parameters can be explored as described in the manual. This function counts the reads that have mapped to a given region and summarizes gene-wise counts for each alignment file. This script requires all bam files to be in one directory to make a combined count matrix for all files. Alternatively, this command can be run for each .bam file generated in step 3, and then the individual count files can be combined into one matrix prior to the Basic Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0001] or Alternate Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0002].",
    "Quality check of the raw sequencing data and processed files\n5. Run FastQC:\n         \n$ fastqc [filename].fastq.gz\nThe user needs to replace [filename] with the name of the raw sequencing or trimmed files. This command saves an .html file that documents the sequencing data quality. This includes sample-wise read quality, %GC content, adaptor content, over-represented sequences in the reads, read length distribution, etc. Refer to the Resources for the FastQC manual, which includes more details.\n6. Run MultiQC to summarize QC for all the steps in Support Protocol[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-prot-0003]:\n         \n$ multiqc/path/to/parent/directory/of/all/log/files/\nThe path to the parent directory for results from steps 1 to 4 needs to be provided as an argument to MultiQC. This command saves an .html file which summarizes the sequencing quality, trimming results, abundant sequence removal, mapping, and read counting results for all samples together. Refer to the Resources for link to the MultiQC website.\n7. Calculate and visualize periodicity of Ribo-seq dataset:\n         \n$ samtools index [bam_file_prefix].bam\n$ ribotish quality -b [bam_file_prefix].bam -g ensemble.gtf\nThe first step creates an index for the alignment file (.bam) generated in step 3. The user should replace [bam_file_prefix] with the outfile prefix specified in step 3 for alignment files. The second step evaluates the quality of the alignment file. This step saves a .pdf that shows the read-length distribution and periodicity of the Ribo-seq data, as shown in Figure 3[href=https://currentprotocols.onlinelibrary.wiley.com/doi/10.1002/cpmb.108#cpmb108-fig-0003].\n<p>imgsrc:https://currentprotocols.onlinelibrary.wiley.com/cms/asset/76d22b2f-4c5e-4af7-8606-eb5feb726bc3/cpmb108-fig-0003-m.jpg</p>\nFigure 3",
    "Quality check of Ribo-seq data using Ribo-TISH. The tool RiboTISH provides several visualizations to investigate the data quality of Ribo-seq. First, it includes the length distribution for the Ribo-seq reads as a histogram. As the length of ribosome-protected mRNA fragment (RPF) is expected to be around 29 base pairs, the length distribution of the sequenced reads is used as a quality measure. Second, the 3-nucleotide periodicity of the RPFs mapped on all known protein-coding genes is shown for each read length. As shown, in these data, we have a high (93%) percentage of reads in Frame 1 with the predominant read length (29 bp). This is shown using a histogram of read coverage in the three frames, a barplot of the number of RPFs in each position around the START codon and STOP codon, and lastly a density plot for read coverage on the coding sequence across all genes."
  ],
  "subjectAreas": [
    "Molecular Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}