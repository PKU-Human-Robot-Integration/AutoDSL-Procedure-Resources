{
  "id": 2378,
  "origin_website": "Cell",
  "title": "Protocol for profiling cell-centric assembled single-cell human transcriptome data in hECA",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nHere we describe step-by-step how to use hECA tools for exploring ‘quantitative portraiture’ of different biological entities, annotating single-cell data with customized reference data from hECA, and sorting cells from hECA database with a complex logical combination of conditions.\nExploring hECA database and quantitative portraiture\nTiming: 10 min\nIn this section, we describe the usage of the website tools of hECA. Users can follow these steps in any operating system with a web browser. Users can gain a multi-view quantitative description of their interested biological entities or sort the subgroup of cells in hECA database without coding.\nThere is no strict order to explore the quantitative portraiture in hECA. Users can switch their exploring focus at any time by clicking the navbar.\nTo Explore portraits of organs in hECA, users can click ‘uHAF Organs’ to browse the page (http://xglab.tech/#/organGallery[href=http://xglab.tech/]).\nUsers can select their interested organs. Here we use bone marrow as an example.\nA brief introduction of the selected organ, cell number and cell-type composition of the collected data, UMAP embedding, and anatomical relationships with other organs are presented on this page (Figure 1[href=https://www.wicell.org#fig1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1865-Fig1.jpg\nFigure 1. The portrait of bone marrow on the hECA website\nTo explore the portraits of cell types in hECA, users can click ‘uHAF Cells’ to browse the page (http://xglab.tech/#/cellTypeList?viewType=tree[href=http://xglab.tech/]) and select the cell type of interest by exploring the uHAF tree or searching by the name.\nHere we present fibroblast as an example. The description of fibroblast as well as the link to Wikipedia and Cell Ontology is provided (Figure 2[href=https://www.wicell.org#fig2]A).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1865-Fig2.jpg\nFigure 2. The portrait of fibroblast on the hECA website\n(A) Fibroblast on the uHAF tree.\n(B) Portrait of fibroblast.",
    "Click the “View details” button. The abundance of fibroblast in different organs, the marker genes of fibroblasts, and the UMAP embedding of all fibroblasts in hECA data are presented on the new page (Figure 2[href=https://www.wicell.org#fig2]B).\nTo explore gene portraits in hECA, users can click the ‘Gene Portraits’ in the navbar to browse the page (http://eca.xglab.tech/#/genePortrait[href=http://eca.xglab.tech/]). Users can enter their interested gene symbols and view the distributions across the selected organ or cell types (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1865-Fig3.jpg\nFigure 3. The portrait of ACTB gene on the hECA website\nOur online cell sorting tool based on hECA database and ECAUGT is available by clicking ‘Cell Sorting’ to browse the page (http://eca.xglab.tech/#/cellSorting[href=http://eca.xglab.tech/]). Users can sort hECA data in multiple steps, where each step can be a combination of conditions on both metadata and gene expression. Subsequent filtering steps are based on the previous step results. Here we present an example of sorting the cells expressing CD19 across all organs.\nAdd a step with a gene filter that CD19 expression should be larger than 0.1, and press the ‘Apply’ button.\nThe website takes 2–3 s to finish sorting and present the results. Users can view basic statistics including cell number, cell-type composition and original organs of these cells (Figure 4[href=https://www.wicell.org#fig4]).\nPress the ‘Analysis’ button to view more detailed information about the sorted cells such as the expression distribution of any interested gene across different cell types and organs. Users can also press ‘Download Data’ to gain the IDs of sorted cells in a txt file and then use ECAUGT to download data (the method is mentioned in step 6).\nCustomized reference creation for automatic annotation\nTiming: 6 h (5 h for download and 1 h for annotation)",
    "The steps in the following sections are designed for more professional usages of hECA. A common application of the single-cell atlas is using data as the reference of automatic annotation for new datasets. Here we give an example of creating a customized neuron cells reference from hECA and using it to annotate the dataset from PsychENCODE (Wang et al., 2018[href=https://www.wicell.org#bib4]).\nWe use ECAUGT, the cell sorting tool of hECA, to sort and download neuron cells from hECA as the customized reference.\nImport required packages in Python.\n>import sys\n>import pandas as pd\n>import ECAUGT\n>import time\n>import multiprocessing\n>import numpy as np\nConnect to the hECA database.\n>endpoint = \"https://HCAd-Datasets.cn-beijing.ots.aliyuncs.com[href=https://HCAd-Datasets.cn-beijing.ots.aliyuncs.com]\"\n>access_id = \"LTAI5t7t216W9amUD1crMVos\"\n>access_key = \"ZJPlUbpLCij5qUPjbsU8GnQHm97IxJ\"\n>instance_name = \"HCAd-Datasets\"\n>table_name = \"HCA_d\"\n>ECAUGT.Setup_Client(endpoint, access_id, access_key, instance_name, table_name)\nCritical: Ensure that the network connection is stable and these parameters are unchanged. The output in Figure 5[href=https://www.wicell.org#fig5]A means a successful connection.\nGet the IDs of neuron cells for download. Here ‘include_children’ parameter is set as True which means that all subtypes of neuron cells are included in the result. The number of cells will be printed when sorting is finished.\n>rows_to_get = ECAUGT.search_metadata(\"cell_type == Neuron\", include_children=True)\nNote: ‘search_metadata’ function receives a string parameter as the metadata condition and returns the IDs of sorted cells. We provide an example to sort cells with complex conditions on both metadata and gene expression in step 6. More details about the usage of ECAUGT can be found in the document of ECAUGT (http://eca.xglab.tech/ecaugt/index.html[href=http://eca.xglab.tech/ecaugt/index.html]).\nDownload the expression value of all genes and the metadata of the sorted cells.",
    "It will take about 5 h to download all the data containing 180 thousand neuron cells for this example, while the network fluctuation may cause errors. So, we separate sorted cells into chunks, each of which contains 10000 cells. The following codes generate both expression matrix csv file and metadata csv file in pair.\n>for i in range((len(rows_to_get)//10000)+1):\n>  st = i∗10000\n>  ed = (i+1)∗10000\n>  print(f'start to download cells from id {st} to {ed}')\n>  result = ECAUGT.get_columnsbycell_para(rows_to_get = rows_to_get[st:ed], do_transfer = True, thread_num = 95)\n>  print(f'saving cells from id {st} to {ed}')\n>  genes = result.columns[:43878]\n>  metaCols = result.columns[43878:43878+16]\n>  expr = result.loc[:,genes]\n>  meta = result.loc[:,metaCols]\n>  expr.to_csv(f\"hECA_exprs_{i}.csv\", index=True)\n>  meta.to_csv(f\"hECA_metadata_{i}.csv\", index=True)\nMerge all files to create the customized reference in R:\n>library(Seurat)\n>library(data.table)\n>for (i in 1:18){\n>  message(paste0('/home/test2/hECA_data/hECA_exprs_',i,'.csv'))\n>  tmpexpdf = as.data.frame(t(fread(paste0('/home/test2/hECA_data/hECA_exprs_',i,'.csv'))))\n>  tmpexpdf = tmpexpdf[-1,]\n>  tmpmetadf = as.data.frame(fread(paste0('/home/test2/hECA_data/hECA_metadata_',i,'.csv')))\n>  expdf = cbind(expdf,tmpexpdf)\n>  metadf = rbind(metadf,tmpmetadf)\n>}\n>row.names(metadf) <- metadf$cid\n>metadf = metadf[,1:16]\n>colnames(expdf) = rownames(metadf)\n>ref_obj <- CreateSeuratObject(expdf, meta.data = metadf)\n>saveRDS(ref_obj, file = \"Neuron_hECA_reference.rds\")\nPreprocess the collected query data.\nUnify the gene number and symbol of the collected data with GeneSymbolUniform_Rtoolkit in the command line.\n>cd hECA_GeneSymbolUniform_Rtoolkit/\n>Rscript Rtoolkit_GeneSymbolUniform.R ../DER-22_Single_cell_expression_raw_UMI.tsv ../\nCritical: GeneSymbolUniform_Rtoolkit takes a gene-by-cell expression matrix in a csv file as input and generates two files: the uniformed expression matrix with 43878 genes and the modified gene report. The first parameter is the path of the raw expression matrix as the input, and the second parameter is the path of the output folder. The gene names in the input matrix should be gene symbols instead of Ensemble IDs. The users should use the Rscript command in the terminal instead of running the r file in RStudio.\nPreprocess the uniformed expression matrix in R.",
    "Load the uniformed expression matrix:\n>data.matrix <- as.data.frame(fread(\"∼/UniformedExpression.csv\"))\n>row.names(data.matrix) <- data.matrix$V1\n>data.matrix = data.matrix[,-1]\n>cellid = colnames(data.matrix)\n>samp.devStage <- data.frame(samp.devStage = ifelse(grepl(\"ˆFetal\",cellid),\"Fetal\",\"Adult\"))\n>rownames(samp.devStage) = cellid\nPreprocess the query data with Seurat.\nWe follow the Seurat pipeline to conduct quality control and normalization on the uniformed data. More detail about the usage of Seurat can be found in https://satijalab.org/seurat/index.html[href=https://satijalab.org/seurat/index.html].\n>query_obj <- CreateSeuratObject(counts = as.matrix(data.matrix), meta.data = samp.devStage)\n>selected_c <- WhichCells(query_obj, expression = nFeature_RNA > 200)\n>selected_f <- rownames(query_obj)[Matrix::rowSums(query_obj) > 3]\n>query_obj.filt <- subset(query_obj, features = selected_f, cells = selected_c)\n>query_obj.filt <- NormalizeData(query_obj.filt)\n>saveRDS(query_obj.filt, file = \"Neuron_query.rds\")\nAutomatic annotation with SingleR.\nLoad the reference data and query data:\n>refrds = readRDS('∼/Neuron_hECA_reference.rds')\n>query_obj.filt = readRDS('∼/Neuron_query.rds')\n>gene.use = intersect(row.names(refrds),row.names(query_obj.filt))\n>refrds.filt <- subset(refrds, features = gene.use)\n>ct.ref <- refrds.filt$cell_type\n>trainedR <- trainSingleR(refrds.filt@assays$RNA@counts, ct.ref, de.method = \"wilcox\")\nTrain the singleR model.\n>trainedR <- trainSingleR(refrds@assays$RNA@data, ct.ref, de.method = \"wilcox\")\nAnnotate query data.\nTo speed up this protocol, we subset the first 1000 cells in the query data to be annotated as an example.\n>query_sample <- query_obj.filt[,1:1000]\n>predict <- classifySingleR(query_sample@assays$RNA@data,trainedR)\nThe output of SingleR model is a DataFrame with 5 columns: scores, first labels, tuning.scores, labels, and pruned.labels. Pruned.labels is the automatic annotation result we need and the tuning.scores present the similarity between the annotated cells and the target cell types (Figure 5[href=https://www.wicell.org#fig5]B).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1865-Fig4.jpg\nFigure 4. The web tool of cell sorting on the hECA databases\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1865-Fig5.jpg\nFigure 5. Customized reference creation for automatic annotation\n(A) Printed message when successfully connected to the hECA database.\n(B) The output of the SingleR annotation model on the query neuron cell data.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1865-Fig6.jpg\nFigure 6. Expression pattern of the marker genes of two CD8 T cell subtypes\n‘In data’ cell sorting\nTiming: 45 min",
    "ECAUGT is designed for sorting cells with a logical combination of any conditions on both metadata and gene expression. This ‘in data’ cell sorting enables complex experiment design in the digital space, which may be difficult to conduct in wet experiments. Here we present an example of sorting T cells from human lung without CD4 expression.\n‘In data’ cell sorting with ECAUGT.\nOpen the Python command line and import the required packages:\n>import sys\n>import pandas as pd\n>import ECAUGT\n>import time\n>import multiprocessing\n>import numpy as np\nConnect to the hECA database with following codes:\n>endpoint = \"https://HCAd-Datasets.cn-beijing.ots.aliyuncs.com[href=https://HCAd-Datasets.cn-beijing.ots.aliyuncs.com]\"\n>access_id = \"LTAI5t7t216W9amUD1crMVos\"\n>access_key = \"ZJPlUbpLCij5qUPjbsU8GnQHm97IxJ\"\n>instance_name = \"HCAd-Datasets\"\n>table_name = \"HCA_d\"\n>ECAUGT.Setup_Client(endpoint, access_id, access_key, instance_name, table_name)\nSort T cells satisfying the conditions.\nSort cells that are: (1) from the Lung organ, (2) sequenced by 10× platform, and (3) annotated as T cell or its subtypes (The unified hierarchical annotation framework (uHAF) which defines the subtypes of T cell can be found on http://xglab.tech/#/cellTypeList[href=http://xglab.tech/#/cellTypeList]).\n> metadata_condition = \"cell_type == T cell && organ== Lung && seq_tech==10×\"\n>cid_label = ECAUGT. search_metadata (metadata_conditions=metadata_condition, include_children=True)\nNote: Different conditions should be combined in a string with logistical operators ‘&&’, ‘||’, and ‘!’. The condition string can include brackets and is not sensitive to spaces.\nSort cells with CD4 expression value lower than 0 from the former result.\n>gene_condition = ECAUGT.seq2filter(\"CD4<=0\")\n>df_result_tcell = ECAUGT.get_columnsbycell_para( rows_to_get = cid_label, cols_to_get=['CD4'], col_filter=gene_condition, do_transfer = False, thread_num = 40)\nNote: The grammar of the gene condition string is similar to the metadata condition string, and genes existed in the gene condition string should be included in the ‘cols_to_get’ parameter. Users can adjust the ‘thread_num’ parameter to decide the number of threads used in data downloading.",
    "Here we reorganize the sorted cell IDs to a ‘rows_to_get’ variable for data downloading in the next step and print the number of cells.\n>rows_to_get = [[x[0]] for x in df_result_tcell]\n>print(len(rows_to_get))\nDownload the expression values of all genes and metadata of the sorted cells, and save the downloaded data in a cell-by-feature matrix in pandas.DataFrame.\n> result = ECAUGT.get_columnsbycell_para(rows_to_get = rows_to_get, cols_to_get = None, col_filter = None, do_transfer = True, thread_num = 40)\nNote: This download process costs about 36 min (about 3 min/1000 cells for 40 threads) so ensure that the network connection is stable. More threads can accelerate this process.\nOptional: Users can save the download result into a pickle file.\n>import pickle\n>pickle.HIGHEST_PROTOCOL\n>result.to_pickle(\"sorted_tcells_raw.pk\")\nA downstream analysis is conducted with scanpy as an example. The usage of scanpy can be found in its document (https://scanpy.readthedocs.io/en/stable/index.html[href=https://scanpy.readthedocs.io/en/stable/index.html]).\nSeparate the downloaded data into an expression matrix and a metadata matrix, and create a scanpy object from the matrices.\n>import scanpy as sc\n>expr = result.iloc[:,:43878]\n>meta = result.iloc[:,43878:43878+16]\n>meta.reset_index(inplace=True)\n>expr.reset_index(inplace=True)\n>expr.drop(['cid'],axis=1,inplace=True)\n> adata = sc.AnnData(X = expr, obs = meta)\n>adata.var_names_make_unique()\nConduct quality control:\n>sc.pp.filter_genes(adata, min_counts=5)\n>sc.pp.filter_genes(adata, min_cells=3)\nFind variable genes and conduct dimension reduction with principal component analysis (PCA):\n>sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)\n>sc.pp.scale(adata, max_value=10)\n>sc.tl.pca(adata, svd_solver='arpack')\nGenerate UMAP embedding and visualize some marker genes of CD8 T cells:\n>sc.pp.neighbors(adata, n_neighbors=10, n_pcs=20)\n>sc.tl.umap(adata)\n>sc.pl.umap(adata,color=['CD8A','CD8B','GZMK','CD3E','GZMH','GZMB'],ncols=3)\nHere we check the marker genes of Memory CD8 T cells (CD8A, CD8B, and GZMK) and the marker genes of Naïve CD8 T cells (CD3E, GZMH, and GZMB). In the UMAP, we can see CD8 T cells locate in the right part and these two subtypes of CD8 T cells form two clusters in the UMAP (Figure 6[href=https://www.wicell.org#fig6]).",
    "Optional: Users can conduct further analysis according to their experiment design or use other single-cell analysis tools like Seurat to conduct the downstream analysis."
  ],
  "subjectAreas": [
    "Rnaseq",
    "Gene Expression",
    "Single Cell",
    "Bioinformatics"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}