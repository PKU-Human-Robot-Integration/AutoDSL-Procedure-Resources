{
  "id": 2264,
  "origin_website": "Cell",
  "title": "ukbpheno v1.0: An R package for phenotyping health-related outcomes in the UK Biobank",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nBuild definition table for target health outcome\nTiming: 2–8 h\nHealth outcome information from various data sources / data fields within the main dataset is encoded differently. These relationships have been curated and recorded in the data setting file included in the ukbpheno package. For a target phenotype, survey the various data sources/ data fields on the Showcase and determine the definitions for the target phenotype in UK Biobank. An example definition table to define type 2 diabetes is included in the package. This example table can be used as a template for users to define their target health outcomes.\nDownload data setting file (data.settings.tsv) to the project directory from https://github.com/niekverw/ukbpheno/tree/master/inst/extdata/data.settings.tsv[href=https://github.com/niekverw/ukbpheno/tree/master/inst/extdata/data.settings.tsv].\nDownload definition table template to the project directory from https://github.com/niekverw/ukbpheno/tree/master/inst/extdata/definitions_DmRxT2.tsv[href=https://github.com/niekverw/ukbpheno/tree/master/inst/extdata/definitions_DmRxT2.tsv].\nFill in one phenotype (such as DmT2) per row. The column “TRAIT” contains the unique identifier of each phenotype which is case sensitive.\nFor each of code systems e.g., diagnosis codes ICD10 or operation codes OPCS4 as well as codes used in the self-report fields, fill in the corresponding codes in the table.\nEach code should be separated by a comma.\nFor code systems with hierarchical system (refer to data setting file), it is possible to fill in only the parent codes instead of specifying all codes.\nAnnotations of the codes can be made using curly bracket “()”. Figure 3[href=https://www.wicell.org#fig3] illustrates an example for the three rules above.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig3.jpg\nFigure 3. Basic syntax for filling in the definition tables",
    "Optional: We included a shiny app to cross-reference codes between systems using the map- ping file provided by UK Biobank. (https://github.com/niekverw/ukbpheno/blob/master/inst/util/shiny.lookup_codes.R[href=https://github.com/niekverw/ukbpheno/blob/master/inst/util/shiny.lookup_codes.R]). Download the code map file (Excel workbook) provided by the UK Biobank (https://biobank.ndph.ox.ac.uk/showcase/refer.cgi?id=592[href=https://biobank.ndph.ox.ac.uk/showcase/refer.cgi?id=592]): (1) locate the shiny app script and run the shiny app, and (2) visit the address returned (usually in the form of http://127.0.0.1:xxxx[href=http://127.0.0.1xxxx]) in a web browser and use the app. A screenshot of the shiny app can be found in Figure 4[href=https://www.wicell.org#fig4].\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig4.jpg\nFigure 4. The interface of the shiny app “ukb code explorer”\nFill in fields with conditions in the “TS” (touchscreen) column.\nFill in field number as Showcase followed by the condition e.g., “6177=3(insulin)”\nTable 2[href=https://www.wicell.org#tbl2] shows the conditions symbols accepted: = (equal), != (not equal), <, <=, >, >=, ≥, ≤\ntable:files/protocols_protocol_1733_2.csv\nAdd the corresponding age of diagnosis using “[]” following the condition e.g., “4041=1[2976](Gestational diabetes)”\nIt is possible to create a composite phenotype, which involves other phenotypes. Composite phenotypes are constructed using four columns in the definition table (Table 3[href=https://www.wicell.org#tbl3]).\ntable:files/protocols_protocol_1733_3.csv\nIn this example usage: cases with records of “DmT1” (type 1 diabetes) are excluded; Controls with records indicating “RxDm” (use of antidiabetic medication) are excluded; participants with records indicating “RxDmOr” (use of oral antidiabetic medication) will be considered as cases for this composite phenotype.\n“Study_population” can be used to restrict definition on a subgroup of participants with specific phenotype.\nParticipants with phenotypes in “Include_definition” will be considered to be a case for the composite phenotype.\nUsers may use the “Exclude_from_cases” and “Exclude_from_controls” column to exclude participants with certain phenotype(s) from cases and controls respectively.",
    "Note: For example, a composite phenotype “diabetes mellitus” may include two phenotypes “type 1 diabetes” and “type 2 diabetes”. Alternatively, for the phenotype “type 2 diabetes” we may want to exclude any cases with also a “type 1 diabetes” diagnosis.\nThe definition table template “definitions_DmRxT2.tsv” contains definitions constructed for the definition of type 2 diabetes in the UK Biobank.\nTrait “DmT2”, “DmT1” and “DmG” contain specific codes for diabetes type 2, type 1 and gestational diabetes respectively;\n“RxDm” defines the antidiabetic medication which is further divided into “RxDmIns” (Insulin) and “RxDmOr” (oral antidiabetic drugs);\n“Dm” captures general codes for diabetes and the remaining definitions are used to differentiate between type 1 and type 2 diabetes within this group.\nLoad input files in R\nTiming: 15 min\nInput files required by the package include data files from UK Biobank including the main dataset, the metadata file and optionally data tables from Data Portal; the completed definition table and data setting file.\nSpecify data file paths in R.\n# The directory with data files\npheno_dir <-\"mydata/ukb99999/\"\n# Main dataset\nfukbtab <- paste(pheno_dir,\"ukb99999.tab\",sep=\"\")\n# Metadata file\nfhtml <- paste(pheno_dir,\"ukb99999.html\",sep=\"\")\n# Hospital inpatient data\nfhesin <- paste(pheno_dir,\"hesin.txt\",sep=\"\")\nfhesin_diag <- paste(pheno_dir,\"hesin_diag.txt\",sep=\"\")\nfhesin_oper <- paste(pheno_dir,\"hesin_oper.txt\",sep=\"\")\n# GP data\nfgp_clinical <- paste(pheno_dir,\"gp_clinical.txt\",sep=\"\")\nfgp_scripts <- paste(pheno_dir,\"gp_scripts.txt\",sep=\"\")\n# Death registry\nfdeath_portal <- paste(pheno_dir,\"death.txt\",sep=\"\")\nfdeath_cause_portal <- paste(pheno_dir,\"death_cause.txt\",sep=\"\")\n# Participant withdrawal list\nf_withdrawal<-paste(pheno_dir,\"w12345_20210809.csv\",sep=\"\")\nSpecify files paths for the data setting file, the definition table and code maps which are included in the package (extdata/). Alternatively download the files from code repository of ukbpheno hosted at GitHub.\n# Or download the files from\n# https://github.com/niekverw/ukbpheno/tree/master/inst/extdata/[href=https://github.com/niekverw/ukbpheno/tree/master/inst/extdata/]\nextdata_dir<-paste0(system.file(\"extdata\", package=\"ukbpheno\"),\"/\")\nfdefinitions <- paste0(extdata_dir,\"definitions_DmRxT2.tsv\")\nfdata_setting <- paste0(extdata_dir,\"data.settings.tsv\")\nRead data setting file. The pre-curated data setting file specifies the characteristics of each data source which are taken into account in the data harmonization process.\ndfData.settings <- fread(fdata_setting)",
    "Run the “read_definition_table()” function to process the definition table.\nThe function “read_definition_table()” expands parent codes using the code maps and sort out codes relevant for inclusion and exclusion accordingly.\nCode maps include all available codes.\nThe function will also cross-check codes entered in the definition with the code maps and warn users of any non-matching codes e.g.,\nA specific ICD10 code may not exist in the UK Biobank ICD10 code map as this code is not present in the data.\nThere may be typos.\ndfDefinitions_processed_expanded<-read_defnition_table(fdefinitions,fdata_setting,extdata_dir)\nOptional: Alternatively download the code maps from the UK Biobank Showcase or create them manually by extracting all unique codes from your data using “get_all_exisiting_codes()” which generates flat-form (non-hierarchical) code maps. Adjust the data setting file accordingly.\n# First input: file path to GP clinical table\n# Second input: corresponding column names from the .txt file\n# Third input: output file-path\nget_all_exsiting_codes(fgp_clinical,c(\"read_2\",\"read_3\"),c(\"gpclinical.read2.code\",\" gpclinical.read3.code\"))\nHarmonize all data from various sources\nTiming: 15–45 min\nAt the harmonization step, we combine all the available data files from various sources and transform them to the format of clinical events to facilitate downstream analyses (Figure 1[href=https://www.wicell.org#fig1]). For individual level data including the self-report data, cancer registry and optionally death registry, the corresponding fields containing the information on the diagnosis and time of diagnosis are extracted (in the corresponding data types) from the main dataset and converted to the episodes of clinical events. Touchscreen data are processed according to the conditions described in the definition table, if one is provided. The record level data, downloaded from the Data Portal, will be parsed and reorganized by the data source and classification system.",
    "At the end of the harmonization, all clinical events will be returned in the same episode format. In addition, the original data from main dataset and a full list of participants are also returned.\nLoad, process and harmonize all data files using harmonized_ukb_data().\nThe “allow_missing_fields” flag specifies whether field(s) required on the definition table but missing in the main dataset is allowed and ignored. If this flag is set to “FALSE”, the harmonization step will halt in case of any missing field.\nIf the participant withdrawal list is provided, records of these individuals will be removed.\nNote: The function harmonized_ukb_data() harmonizes all available data (minimally works with only the main dataset and meta-data file). Additionally, the function will check if all fields required on the definition table are present in the main dataset and inform the user if any field is missing.\nlst.harmonized.data<-harmonize_ukb_data(f.ukbtab = fukbtab,f.html = fhtml,dfDefinitions=dfDefinitions_processed_expanded,f.gp_clinical = fgp_clinical,f.gp_scripts = fgp_scripts,f.hesin = fhesin,f.hesin_diag = fhesin_diag,f.hesin_oper =fhesin_oper,f.death_portal = fdeath_portal,f.death_cause_portal = fdeath_cause_portal,f.withdrawal_list=f_withdrawal,allow_missing_fields = TRUE)\nNote: Time required to harmonize the data is dependent on size of the files. Factors that should be taken into considerations include number of fields approved for the particular project, number of participants included as well as if record-level primary care data are present.\nExamine the harmonized data which contains 3 objects: “lst.data”, “dfukb” and “vct.identifiers” (Figure 5[href=https://www.wicell.org#fig5]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig5.jpg\nFigure 5. Screenshot of the lst.harmonized.data object\nView(lst.harmonized.data)\n“lst.data” contains data from all sources in same episode format documenting “identifier”, “code”,”eventdate” and an “event” column.\nDiagnosis codes without associated actual event date will have date of visit to assessment center (such as self-report diabetes) in the “eventdate” column and “0” in the “event” indicating that the date does not reflect a true event (Figure 6[href=https://www.wicell.org#fig6]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig6.jpg\nFigure 6. Screenshot of the harmonized records\nView(lst.harmonized.data$lst.data)",
    "“dfukb” is a subset of the main dataset and contains only columns necessary for the definition of target phenotypes.\n“vct.identifiers” is a vector of identifiers of all participants in the main dataset.\nGenerate phenotype and explore the data\nTiming: 2 h\nTo define case/control status of the participants, we need the phenotype (diabetes) definition, the harmonized data tables, the data settings and the individuals to be included (either specified by a vector of participant identifiers or a data-frame containing identifier in the first column and reference dates in the second column).\n# 1) definition of the target trait “Type 2 diabetes”\ntrait<-\"DmRxT2\"\n# 2) harmonized data table - lst.harmonized.data\n# 3) data setting data-frame - dfData.settings\n# 4) individuals specified via df_reference_date\n# Here the dates of baseline visit (f.53.0.0) are taken as reference\ndf_reference_dt_v0<-\nlst.harmonized.data$dfukb[,c(\"identifier\",\"f.53.0.0\")]\nUse “get_cases_controls()” function to obtain the case/control status. The function returns a list of three data.table objects: “df.casecontrol”, “all_event_dt.Include_in_cases” and “all_event_dt.Include_in_cases.summary” (Figure 7[href=https://www.wicell.org#fig7]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig7.jpg\nFigure 7. Screenshot of the result obtained from the get_cases_controls() function\nlst.DmRxT2.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==trait), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\nView(lst.DmRxT2.case_control)\n“df.casecontrol” is a data.table object of 16 columns providing summary of the diagnosis per participant (Table 4[href=https://www.wicell.org#tbl4]). Included case/control is marked with 2/1 respectively while excluded case/control will be marked with -2/-1 in this table.\ntable:files/protocols_protocol_1733_4.csv\n“all_event_dt.Include_in_cases” is data.table object including all event episodes supporting the diagnosis for the cases included (Table 5[href=https://www.wicell.org#tbl5]).\ntable:files/protocols_protocol_1733_5.csv\n“all_event_dt.Include_in_cases.summary” is a data.table object with the same format with “df.casecontrol” but includes only cases (both included and excluded case).\nGenerate timeline plot to check the relative contribution by various data sources over time (Figure 8[href=https://www.wicell.org#fig8]). Events with known event date will be included.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig8.jpg\nFigure 8. Disease timeline of type 2 diabetes by different data sources\nDmRxT2_timeline<-plot_disease_timeline_by_source(definition=dfDefinitions_processed_expanded%>%filter(TRAIT==trait),lst.harmonized.data$lst.data,dfData.settings, df_reference_dt_v0$identifiers)\nDmRxT2_timeline",
    "Use “make_upsetplot()” to examine the overlaps between the data sources at baseline to gain insight on their relationships (Figure 9[href=https://www.wicell.org#fig9]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig9.jpg\nFigure 9. UpSet plot of type 2 diabetes at baseline showing the overlaps between different data sources\nupset_plot<-make_upsetplot(definition=dfDefinitions_processed_expanded%>%filter(TRAIT==trait),lst.harmonized.data.gp$lst.data,dfData.settings,df.reference.dates = df_reference_dt_v0)\nupset_plot\nGenerate summary descriptions on the events with “get_stats_for_events”. For example, generation of a frequency plot of codes among all events from secondary care may help verify or refine the definition (Figure 10[href=https://www.wicell.org#fig10]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig10.jpg\nFigure 10. Frequency plots of type 2 diabetes diagnosis codes from secondary care\nLeft: y-axis in linear scale; Right: y-axis in logarithmic scale.\n# Extract all hospital admission records\nall_DmRxT2_evnt<-lst.DmRxT2.case_control$all_event_dt.Include_in_cases\nDmRxT2_hesin_rec<-all_DmRxT2_evnt[grepl (\"hesin\",all_DmRxT2_evnt$.id)]\n# Get some descriptive statistics on the records on a code level\nhesin_stats<-get_stats_for_events(DmRxT2_hesin_rec)\nhesin_stats$stats.codes.summary.phesin_stats$stats.codes.summary.p\nExplore secondary care code count by individual (Figure 11[href=https://www.wicell.org#fig11]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig11.jpg\nFigure 11. Barplot of type 2 diabetes diagnosis code count from secondary care per individual\n# Get some summary statistics on the records on individual level\nDmRxT2_rec_cnt<-DmRxT2_hesin_rec[,.(count=.N),by=c(\"identifier\")]\nmax(DmRxT2_rec_cnt$count)\nmedian(DmRxT2_rec_cnt$count)\nmean(DmRxT2_rec_cnt$count)\nquantile(DmRxT2_rec_cnt$count)\n# Visualize count with barplot with a zoom-in on count between 0-50\nggplot2::ggplot(DmRxT2_rec_cnt, ggplot2::aes(x=count)) +\n  ggplot2::geom_bar(fill=\"#0073C2FF\") + ggplot2::xlab(\"Number fo secondary care record per person\") +\n  ggplot2::ylab(\"Frequency\") + #theme with white background\n  ggplot2::theme_bw() + ggplot2::theme(text = ggplot2::element_text(size=22),panel.grid.minor =ggplot2::element_blank(),panel.grid.major =ggplot2::element_blank()) + ggforce::facet_zoom(xlim = c(0, 50))\nGenerate a timeline of the codes contributing to diagnosis for a particular individual (please replace the identifier if copied from the cell below) (Figure 12[href=https://www.wicell.org#fig12]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/1733-Fig12.jpg\nFigure 12. Diagnosis timeline of a hypothetical participant\n# Plot individual time line\nplot_individual_timeline(df.data.settings = dfData.settings,lst.data=lst.harmonized.data$lst.data,ind_identifier = 9999999)\nTo make the definition of the type 2 diabetes more precise, we may screen and exclude individuals with evidence of other types of diabetes as well as the use of metformin not due to diabetes.",
    "First identify participants with specific diabetes codes (gestational diabetes, type 1 and type 2 diabetes) as well as general diabetes code.\n# Identify individuals with specific DmT2 codes\nlst.DmT2.case_control<-get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==\"DmT2\"), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\n# Identify individuals with specific DmT1 codes\nlst.DmT1.case_control<-get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==\"DmT1\"), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\n# Identify individuals with DmG\nlst.DmG.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==\"DmG\"), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\n# Identify individuals with general diabetes diagnosis codes excl. medication\nlst.Dm.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==\"Dm\"), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\nIdentify use of different anti-diabetic medications. Find individuals on metformin likely due to diseases other than diabetes by cross checking with the list of individuals with diabetes diagnoses.\n# Identify individuals with metformin use\nlst.RxMet.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==\"RxMet\"), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\n#Identify use of insulin/oral diabetic med. excl. metformin\nlst.RxDmNoMet.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==\"RxDmNoMet\"), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\n#Identify individuals that are on metformin but no diabetes codes\n#nor medication other than metformin\nRxMet_DmUnlikely<-setdiff(lst.RxMet.case_control$df.casecontrol[Hx==2]$identifier,union(lst.Dm.case_control$df.casecontrol[Hx==2]$identifier,lst.RxDmNoMet.case_control$df.casecontrol[Hx==2]$identifier))\nCross-examine various diagnoses. For example we want to get individuals with young onset diabetes but did not have records supporting a diagnosis of non-type 2 diabetes. Namely these individuals did not have evidence of type 1 diabetes nor gestational diabetes.\nWe identify these individuals via set operations of the relevant diagnoses.\nInspect the records of these individuals for evidence of type 2 diabetes.\n# Identify individuals with self-report insulin <12 months post-diagnosis\nlst.RxDmInsFirstYear.case_control<-get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==\"RxDmInsFirstYear\"), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\n# Identify young onset self reported diabetes (European origin)\nlst.SrDmYEw.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==\"SrDmYEw\"), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\n# identify young onset self reported diabetes (Caribbean African origin)\nlst.SrDmYSaCa.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==\"SrDmYSaCa\"), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\n# Individuals of young onset diabetes\nind_young_onset<- union(lst.SrDmYSaCa.case_control$df.casecontrol[Any==2]$identifier,lst.SrDmYEw.case_control$df.casecontrol[Any==2]$identifier)\n# Individuals with evidence of other types of diabetes reported\nind_RxInsFirstYear_DmT1_DmG<- union(union(lst.RxDmInsFirstYear.case_control$df.casecontrol[Any==2]$identifier,lst.DmT1.case_control$df.casecontrol[Hx==2]$identifier),lst.DmG.case_control$df.casecontrol[Hx==2]$identifier)\n# Young onset but no DM type 1/ gestational diabetes specific codes nor self report of insulin within first year of diagnosis\ninds_young_onset_possible_DmT2 <-setdiff(ind_young_onset,ind_RxInsFirstYear_DmT1_DmG)",
    "# Check the records of these individuals\nlst.DmRxT2.case_control$all_event_dt.Include_in_cases[identifier %in% inds_young_onset_probable_DmT2]\nGenerate phenotypes in batch\nTiming: 15–30 min\nThis session demonstrates how to generate multiple phenotypes and make a clinical characteristics table with these phenotypes, stratified by type 2 diabetes status. An example definition table with the selected cardiometabolic diseases, family history of these diseases and diabetes medication usage is provided in the package. We additionally extract demographic information namely age and sex as well as biomarkers BMI, blood glucose, glycated hemoglobin and self-report insulin use within one year of diabetes diagnosis from the main dataset.\nRead and process the definition file.\n# Read the definitions table\nfdefinitions <- paste0(extdata_dir,\"definitions_cardiometabolic_traits.tsv\")\ndfDefinitions_processed_expanded<-read_defnition_table(fdefinitions,fdata_setting, extdata_dir)\nExtract only the required fields from the main dataset using read_ukb_tabdata().\nThe metadata provides information such as data type of these fields.\nExtract age at assessment center visit (Field 21003), sex (Field 31), body mass index (Field 21001), glycated hemoglobin level (Field 30750), glucose level (Field 30740), self-report insulin use within the first year of diabetes diagnosis (Field 2986), UK Biobank assessment center visited (Field 54) and Date of attending assessment center (Field 53).\n# Extract clinical variables from the main dataset using read_ukb_tabdata()\n# We need the metadata (.html) file for read_ukb_tabdata()\ndfhtml <- read_ukb_metadata(fhtml)\n# Rename the identifier column in the metadata\ndfhtml[which(dfhtml$field.tab==\"f.eid\"),]$field.tab<-\"identifier\"\n# Age at assessment center visit, sex, BMI, HbA1c, glucose,insulin within 1 year of diagnosis,UK Biobank assessment center location, date of visit\nbaseline_fields<-c(21003,31,21001,30750,30740,2986,54,53)\n# Extract these variables from main dataset\ndfukb_baseline <- read_ukb_tabdata(fukbtab,dfhtml,fields_to_keep = baseline_fields)\ngc()\nGenerate the phenotypes for atrial fibrillation, coronary artery disease, type 2 diabetes, hypertrophic cardiomyopathy, heart failure, hypertension and hyperlipidemia with a loop and merge the phenotype information into one table “dfukb_baseline_pheno”.\n# The target disease traits we will generate in batch\ndiseases<-c(\"Af\",\"Cad\",\"DmT2\",\"Hcm\",\"Hf\",\"HtRx\",\"HyperLipRx\")",
    "# Make an output folder to store the result\nout_folder<-paste0(pheno_dir,\"output/\")\nif(!dir.exists(file.path(out_folder))){\ndir.create(file.path(out_folder))\n}\ndf_withdrawal<-fread(f_withdrawal)\n# remove withdrawn participants\ndfukb_baseline_pheno<-dfukb_baseline[! identifier %in% df_withdrawal$V1]\n# Loop through the traits, including family history of related diseases and the diabetes medication use\nfor (disease in c(diseases,\"HxDm\",\"HxHrt\",\"HxHt\",\"RxDmOr\",\"RxDmIns\")){\nprint(disease)\nlst.case_control <- get_cases_controls(definitions=dfDefinitions_processed_expanded %>% filter(TRAIT==disease), lst.harmonized.data$lst.data,dfData.settings, df_reference_date=df_reference_dt_v0)\n  # Add the trait to the column names\ncolnames(lst.case_control$df.casecontrol) <- paste(disease,\"0\",colnames(lst.case_control$df.casecontrol), sep = \"_\")\n  # Except for participant identifier\nnames(lst.case_control$df.casecontrol)[names(lst.case_control$df.casecontrol) == paste(disease,\"0\",\"identifier\", sep = \"_\")]<-\"identifier\"\n# Merge these columns with dfukb_baseline_pheno\ndfukb_baseline_pheno<-merge(dfukb_baseline_pheno,lst.case_control$df.casecontrol,by=\"identifier\",all.x = TRUE,all.y = FALSE)\n}\nReport clinical characteristics at baseline\nTiming: 10 min\nIn the following example analyses, we investigate the characteristics of participants with type 2 diabetes specific codes. We exclude the cases with type 1 diabetes diagnosis codes and we exclude any controls with non-specific diabetes codes (Table 6[href=https://www.wicell.org#tbl6]).\ntable:files/protocols_protocol_1733_6.csv\nSelect variables to be reported in the clinical characteristics table. Rename the variables in the table to improve readability. Create the clinical characteristics table stratified by type 2 diabetes. Write the clinical characteristic table to a file.\n# Keep only the variables needed for the table\ndfukb_baseline_pheno_fortable1<-dfukb_baseline_pheno[,c('identifier',\"DmT2_0_Hx\",\"f.21003.0.0\",\"f.21001.0.0\",\"f.30740.0.0\",\"f.30750.0.0\",\"DmT2_0_first_diagnosis_days\",\"f.31.0.0\",\"HxDm_0_Any\",\"HxHrt_0_Any\",\"HxHt_0_Any\",\"HtRx_0_Hx\",\"HyperLipRx_0_Hx\",\"Af_0_Hx\",\"Hcm_0_Hx\",\"Hf_0_Hx\",\"RxDmOr_0_Hx\",\"RxDmIns_0_Hx\",\"f.2986.0.0\"),with=FALSE]\n# Negative first diagnosis day indicates history while positive indicates follow-up cases\ndfukb_baseline_pheno_fortable1$DmT2_0_first_diagnosis_years<-(-1∗dfukb_baseline_pheno_fortable1$DmT2_0_first_diagnosis_days)/365.25\n# Rename for readability\ncolnames(dfukb_baseline_pheno_fortable1)<-c(\"identifier\",\"Type 2 diabetes\",\"Age\",\"BMI\",\"Glucose\",\"HbA1c\",\"Days since type 2 diabetes diagnosis\",\"Sex\",\"Family history of diabetes\",\"Family history of heart disease\",\"Family history of hypertension\",\"Hypertension\",\"Hyperlipidemia\",\"Atrial fibrillation\",\"Hypertrophic cardiomyopathy\",\"Heart failure\",\"Oral diabetes medication\",\"Insulin\",\"Insulin within 1 year of diagnosis\",\"Years since type 2 diabetes diagnosis\")\n# Below the parameters for CreateTableOne\n# The full variable list\nvars<-c(\"Age\",\"BMI\",\"Glucose\",\"HbA1c\",\"Years since type 2 diabetes diagnosis\",\"Sex\",\"Family history of diabetes\",\"Family history of heart disease\",\"Family history of hypertension\",\"Hypertension\",\"Hyperlipidemia\",\"Atrial fibrillation\",\"Hypertrophic cardiomyopathy\",\"Heart failure\",\"Oral diabetes medication\",\"Insulin\",\"Insulin within 1 year of diagnosis\")\n# The categorical variables on the clinical characteristics table\nfactorVars<-setdiff(vars,c(\"Age\",\"BMI\",\"Glucose\",\"HbA1c\",\"Years since type 2 diabetes diagnosis\"))\n# Create the clinical characteristic table stratified by type 2 diabetes",
    "tableOne <- CreateTableOne(vars = vars, strata = \"Type 2 diabetes\", data = dfukb_baseline_pheno_fortable1, factorVars = factorVars)\nhist(dfukb_baseline_pheno_fortable1$`Years since type 2 diabetes diagnosis`)\ntableOne\ntab1Mat <- print(tableOne, quote = FALSE, noSpaces = TRUE, printToggle = FALSE,nonnormal =c(\"Glucose\",\"HbA1c\",\"Years since type 2 diabetes diagnosis\"))\n# Save the table to a CSV file\nwrite.csv(tab1Mat, file =paste0(out_folder,\"BaselineTable.csv\"))\nSurvival analysis on heart failure stratified by type 2 diabetes\nTiming: 5 min\nWith time-to-event data as well as the censoring dates for different data sources for different regions, compute the observed time for each participant.\nThe start time is the date when the participant visited the assessment center;\nObserved time is up to date of event or earliest among date of death and censoring date of hospital inpatient records (last follow up).\n# Get death dates from data\ndeathdt<-unique(lst.harmonized.data$lst.data$tte.death.icd10.primary[,.(identifier,eventdate)])\n# Rename the column and merge\ncolnames(deathdt)<-c(\"identifier\",\"deathdt\")\ndfukb_baseline_pheno<-merge(dfukb_baseline_pheno,deathdt,by=\"identifier\",all.x=TRUE,all.y = FALSE)\n# HESIN censoring date are different by regions\n# Use the UK Biobank assessment center location attended by the participants\nengland<-c(\"10003\",\"11001\",\"11002\",\"11007\",\"11008\",\"11009\",\"11010\",\"11011\",\"11012\",\"11013\",\"11014\",\"11016\",\"11017\",\"11018\",\"11019\",\"11020\",\"11021\")\nscotland<-c(\"11004\",\"11005\")\nwales<-c(\"11003\",\"11022\", \"11006\",\"11023\")\n# Corresponding censoring dates\ndfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% england,\"censordateHES\"]<-as.Date(\"2021-03-31\")\ndfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% scotland,\"censordateHES\"]<-as.Date(\"2021-03-31\")\ndfukb_baseline_pheno[dfukb_baseline_pheno$f.54.0.0 %in% wales,\"censordateHES\"]<-as.Date(\"2018-02-28\")\n# Time-to-event/observed time is determined at earliest of date of event, date of death and censoring date of HESIN data (last follow up)\n# This is already calculated for those who have events\nrange(dfukb_baseline_pheno[Hf_0_Fu==2,Hf_0_Fu_days])\n# non-event but died before HESIN censoring date\ndfukb_baseline_pheno[Hf_0_Fu==1 & !is.na(deathdt) & deathdt-censordateHES<=0,Hf_0_Fu_days:=deathdt-as.Date(f.53.0.0)]\n# People censored at last fu\n# non-event but died after censoring date (HESIN),\ndfukb_baseline_pheno[Hf_0_Fu==1 &!is.na(deathdt)& deathdt-censordateHES>0,Hf_0_Fu_days:=censordateHES-as.Date(f.53.0.0)]\n# non-event and alive by censoring date\ndfukb_baseline_pheno[Hf_0_Fu==1 &is.na(deathdt),Hf_0_Fu_days:=censordateHES-as.Date(f.53.0.0)]\nCreate the survival object and Kaplan-Meier plot for new onset heart failure stratified by type 2 diabetes status at baseline.\n#Estimate risk of new onset heart failure by presence/absence of type 2 diabetes at baseline\nfit<-survival::survfit(survival::Surv(Hf_0_Fu_days/365.25,Hf_0_Fu) ∼ DmT2_0_Hx, data = dfukb_baseline_pheno[DmT2_0_Hx>0])\n# summary(fit)\n# Make Kaplan-Meier plot",
    "ggsurvplot(fit, data = dfukb_baseline_pheno[DmT2_0_Hx>0], size = 0.8,\n              break.time.by=2,\n              xlab = \"Follow up (years)\",\n              censor.size=2,\n              palette = c(\"#072A6C\", \"#FF8400\"),\n              conf.int = TRUE, # Add confidence interval\n              pval = TRUE, # Add p-value\n              risk.table = TRUE, # Add risk table\n              risk.table.col = \"strata\", # Risk table color by groups\n              legend.labs = c(\"No type 2 diabetes at baseline\",\"Type 2 diabetes at baseline\"),\n              risk.table.height = 0.2)\nCase-control matching with MatchIt\nTiming: 5 min\nSometimes it may be desirable to match cases and controls by characteristics such as age and sex in certain studies. Here we demonstrate how to further process phenotypes created in ukbpheno to generate matched case-control pairs. We utilize an R package MatchIt for the matching task.\nTo match type 2 diabetes case to control by age, sex and body mass index. We extract those variables and remove individuals with missing values in either the target phenotype or any covariates.\n########################################\n# 1:2 case control matching with MatchIt\n########################################\n#library(“MatchIt”)\n# Remove individuals with either missing or excluded phenotype for target phenotype (type 2 diabetes at baseline)\ndf_to_matchit<-dfukb_baseline_pheno[!is.na(DmT2_0_Hx) & DmT2_0_Hx>0]\n# Pick three covariates age at assessment center visit, sex and BMI for matching\ndf_to_matchit<-na.omit(df_to_matchit[,.(identifier,DmT2_0_Hx,f.21003.0.0,f.31.0.0,f.21001.0.0)])\nFormat the coding of the phenotype and name the rows by participant identifier in preparation for the matchit() function. Run the matchit() function to match 2 controls to each case. Examine the result.\n# Format the data for the matchit function\n# Control/case: 1/2 to 0/1\ndf_to_matchit$DmT2_0_Hx<-df_to_matchit$DmT2_0_Hx-1\n# Name the rows\nrownames(df_to_matchit)<-df_to_matchit$identifier\ncolnames(df_to_matchit)<-c(\"identifier\",\"Type 2 diabetes\",\"Age\",\"Sex\",\"BMI\")\n# Run matchit\nm.dm2<-matchit(`Type 2 diabetes`∼Age + Sex+BMI,data=df_to_matchit,ratio=2)\n#Check result\nsummary(m.dm2)\n# Each row in the match.matrix shows identifier of one case with 2 matched controls\nm.dm2$match.matrix"
  ],
  "subjectAreas": [
    "Health Sciences",
    "Bioinformatics",
    "Systems Biology"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}