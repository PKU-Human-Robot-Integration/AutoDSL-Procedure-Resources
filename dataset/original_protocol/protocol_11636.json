{
  "id": 13036,
  "origin_website": "Jove",
  "title": "A Typical Workflow to Simulate Cytoskeletal Systems",
  "procedures": [
    "NOTE: The protocol consists of these steps: platform preparation for Windows 10, MacOS, and Linux; the installation of Cytosim; configuration of the simulation and test run and the graphical display; multiple runs, varying a parameter: the number of crosslinkers in the network; generating a graph to view how contractility is affected by the number of crosslinkers; parallel runs; and random sampling. All text following a \">\" are commands that are to be entered verbatim in the terminal window. The \">\" represents the terminal prompt and must not be included, but all other characters are important.\n1. Platform preparation\nNOTE: Depending on the OS (MacOS, Windows 10, or Linux), follow step 1.1, step 1.2, or step 1.3.\nPreparation (MacOS)\n\t\nInstall Xcode Command Line Tools by opening the Terminal (in Applications/Utilities), and enter:\n\t\tgt; xcode-select --install\nTo view or edit Cytosim's code, install Xcode from the Apple App Store (https://apps.apple.com/us/app/Xcode/id497799835?mt=12).\n\t\tNOTE: Xcode's built-in editor is perfectly suitable. Other code-oriented editors would also work, for example, TextMate. For using TextMate, download and follow instructions from https://macromates.com.\nPreparation (Windows)\n\tNOTE: For Windows 10 or higher, Cytosim can run using the \"Windows Subsystem for Linux\" (WSL), as described below. An alternative for an older version is Cygwin, but instructions are not provided here.\n\t\nUpdate the computer operating system to fulfill the requirements for WSL 2: Windows 10 version 1903 or higher, with Build 18362 or higher, for x64 systems and Version 2004 or higher, with Build 19041 or higher, for ARM64 systems. For subsequent version updates, check https://docs.microsoft.com/en-us/windows/release-health/release-information.\nType Turn Windows features on and off in the search box of the taskbar. Manually enable (imgsrc://cloudfront.jove.com/files/ftp_upload/64125/64125eq03.jpg) Virtual Machine Platform and (imgsrc://cloudfront.jove.com/files/ftp_upload/64125/64125eq03.jpg) Windows Subsystem for Linux. Click OK and restart Windows.",
    "Go to Windows Microsoft Store and search for Ubuntu. Download and install the current release (Ubuntu 20.04 LTS as of 03.2022)\nClick Launch to start the Ubuntu Terminal. If asked to download the latest WSL2 Linux Kernel, proceed by following the instructions that will be provided. Install the update and relaunch Ubuntu.\nFollow the terminal instructions to Enter new UNIX username and set a password. Once the user account is set up, launch Ubuntu from the search box of the Windows task bar. Open the home directory (aka \".\"), from the command window:\n\t\t> explorer.exe .\nInstall a WSL-compatible X-Window server, for example, Xming: https://sourceforge.net/projects/xming/\nStart the X-Window server, Xming by double-clicking on the Xming icon; select Multiple Windows. Hereafter, open the Ubuntu terminal and follow step 1.3 (Linux).\nPreparation (Linux)\n\tNOTE: These instructions are appropriate for Linux distributions that use the APT package manager. These commands must be modified for distributions such as Red Hat Linux that use a different package manager. In this case, follow the instructions of the Linux distribution to install the same packages.\n\t\nUpdate the Linux system:\n\t\t> sudo apt-get update\n\t\t> sudo apt-get upgrade\nInstall a C++ compiler and GNU's make (https://www.gnu.org/software/make):\n\t\t> sudo apt-get install build-essential\nInstall BLAS/LAPACK Libraries (http://www.netlib.org/lapack):\n\t\t> sudo apt-get install libblas-dev liblapack-dev\nInstall OpenGL developer library and header files (https://www.mesa3d.org):\n\t\t> sudo apt-get install mesa-common-dev\nInstall the GLEW library (http://glew.sourceforge.net):\n\t\t> sudo apt-get install libglew-dev\nInstall the freeGLUT library (http://freeglut.sourceforge.net):\n\t\t> sudo apt-get install freeglut3-dev\nInstall the GIT version control system (https://git-scm.com):\n\t\t> sudo apt-get install git\nInstall the X11 tests programs (e.g., xeyes, xclock, xcalc):\n\t\t> sudo apt-get install x11-apps\nAdjust the environment variable DISPLAY:\n\t\t> export DISPLAY=:0\n\t\t\nTry to open a X11 window:\n\t\t\t> xeyes",
    "If this works, proceed to step 2. If the error is failed to open the display, try a different DISPLAY value.\nFind the IP address of the WSL2 machine:\n\t\t\t> cat /etc/resolv.conf\nIf the IP number appears, e.g., \"nameserver 10.16.0.7\", use this IP number instead of X.X.X.X below:\n\t\t\t> export DISPLAY= X.X.X.X:0\n\t\t\t> xeyes\nIf this works, proceed to step 2. If \"play\" fails to \"open the display\", try to run it from within an \"xterm\" window:\n\t\t\t> sudo apt install xterm\n\t\t\t> xterm -display :0\nIn the new window that opens, type:\n\t\t\t> xeyes\n2. Installation of Cytosim\nNOTE: These steps are similar for any OS: MacOS, WSL, and Linux. In the following section, commands will be issued in the terminal, and the \"current working directory\" should be set to the directory in which the simulation was compiled. This directory will be referred to as being the base directory. Alternatively, everything can be done in a separate directory if files are copied as needed. If unfamiliar with the command line, consider following a tutorial, for example, https://www.learnenough.com/command-line-tutorial or https://learnpythonthehardway.org/book/appendixa.html.\nDownload Cytosim source code:\n\t> git clone https://gitlab.com/f-nedelec/cytosim.git cytosim\n\tNOTE: A Gitlab account is not necessary to download the code. This should create a new subdirectory \"cytosim\" in the current directory.\nCompile:\n\t> cd cytosim\n\t> make\n\t\nCheck that three files are created in a subdirector \"bin\" by running:\n\t\t> ls bin\nIf step 2.2.1 fails, try this alternative method to compile by installing cmake (https://cmake.org):\n\t\t> mkdir b\n\t\t> cd b\n\t\t> cmake ..\n\t\t> make\n\t\t> cd ..\nCheck executables:\n\t> bin/sim info\n\t> bin/play info\n\t\nVerify that both executables have been compiled to perform 2D simulations. Look for the following output of the \"info\" queries above:\nDimension: 2 Periodic: 1 Precision: 8 bytes",
    "If this is not the case, and only then, modify the file \"src/math/dim.h\" (open, edit to change DIM to 2, save) and recompile Cytosim:\n\t\t> make clean\n\t\t> make\nTest run\n\t\nCopy three executables:\n\t\t> cp bin/sim sim\n\t\t> cp bin/play play\n\t\t> cp bin/report report\nCreate a new directory:\n\t\t> mkdir run\nCopy and rename the standard configuration file:\n\t\t> cp cym/fiber.cym run/config.cym\nStart the simulation:\n\t\t> cd run\n\t\t> ../sim\nVisualize the results of the simulation:\n\t\t> ../play\n\t\t\nPress the space bar to animate. Press h for help on keyboard shortcuts.\nTo quit the program, on MacOS try imgsrc://cloudfront.jove.com/files/ftp_upload/64125/64125eq05.jpg-Q, or CTRL-Q, or select Quit from the menu. As a last resort, enter CTRL-C in the terminal window from which \"play\" was started.\nRun in live mode:\n\t\t> ../play live\n3. Configuration of the simulation\nInstall a code-oriented text editor (e.g., TextMate, SublimeText) if not already available.\n\tOpen the editor and open the file \"config.cym\", located in the \"run\" directory created in step 2.4.2. Become familiar with the different sections of the configuration file, which is a copy of \"fiber.cym\" (Supplementary File 1).\n\tNOTE: Cytosim usually only reads one configuration file ending with \".cym\". All modifications will be made here to \"config.cym\". See Supplementary Table S1 for a list of parameters.\nModify the simulation by making the following changes to \"config.cym\":\n\tradius=5 → radius=3\n\tnew 1 filament → new 100 filament\nSave the file without changing its name or location (overwrite \"config.cym\"). Switch to the Terminal Window, and check that the simulation is modified as expected with:\n\t> ../play live\n\tNOTE: The radius of the circle is specified in micrometers (µm), as are all distances in Cytosim. Cytosim follows a system of units adapted to the scale of the cell, derived from micrometers, piconewtons, and seconds.",
    "In the paragraph \"set fiber filament\", make the following changes:\n\trigidity=20 → rigidity=0.1\n\tsegmentation= 0.5 → segmentation=0.2\n\tconfine=inside, 200, cell → confine= inside, 10, cell\n\tIn the paragraph \"new filament\", change:\n\tlength=12 → length=2\n\tReduce the time to be simulated by changing:\n\trun 5000 system → run 1000 system\n\tNOTE: This adjusts the filament's properties. The paragraph \"set\" defines persistent properties of the filaments, while parameters in \"new\" are usually initial conditions. The bending rigidity is specified in pN µm2. The segmentation is the approximate distance between the vertices describing the filaments in micrometers (µm). It needs to be reduced if filaments are made more flexible. The last change reduces the stiffness (pN/µm) of the confinement potential associated with the \"cell\" edges. The length declared in the \"new\" paragraph (2 µm) is the initial length of the filaments, and since in this model the filaments are not dynamic, their lengths will not change. It is a recommended to sign the configuration file, by editing the first line:\n\t​% Your name, date, place\n\t\nCheck the validity of the configuration file (repeat step 3.3).\nCreate passive connectors.\n\t\nAdd a new paragraph to \"config.cym\", before the lines with the \"new\" and \"run\" command, to define a molecular activity with affinity to the filaments:\n\t\tset hand binder {\n\t\tbinding_rate = 10\n\t\tbinding_range = 0.01\n\t\tunbinding_rate = 0.2\n\t\t}\nTo define bifunctional entities, add another paragraph just below:\n\t\tset couple crosslinker {\n\t\thand1 = binder\n\t\thand2 = binder\n\t\tstiffness = 100\n\t\tdiffusion = 10\n\t\t}\nAdd a \"new\" command after the previous paragraphs and before the \"run\" command:\n\t\tnew 1000 crosslinker",
    "NOTE: In Cytosim, rates are specified in units of s−1 and the range in micrometers (µm). The stiffness is specified in units of piconewtons per micrometer (pN/µm) and the diffusion coefficient in micrometers squared per second (µm2/s). The order of the commands in the configuration file is important, and these paragraphs must appear before any \"run\" command, otherwise they will not be effective. To learn more about Cytosim's objects, follow the tutorial in \"tuto_introduction.md\", which is in a subfolder \"doc\" of the base directory: doc/tutorials/.\nCreate bifunctional motors.\n\t\nAdd a new paragraph to \"config.cym\", before the lines with the \"new\" and \"run\" command:\n\t\tset hand motor {\n\t\tbinding_rate = 10\n\t\tbinding_range = 0.01\n\t\tunbinding_rate = 0.2\n\t\tactivity = move\n\t\tunloaded_speed = 1\n\t\tstall_force = 3\n\t\t}\nAdd another paragraph, following the previous one:\n\t\tset couple complex {\n\t\thand1 = motor\n\t\thand2 = motor\n\t\tstiffness = 100\n\t\tdiffusion = 10\n\t\t​}\nAdd a \"new\" command after the previous paragraphs and before the \"run\" command:\n\t\tnew 200 complex\n\t\tNOTE: The \"activity = move\" specifies a motor that moves continuously over the filament. The motor obeys a linear force-velocity curve (Figure 1) characterized by the unloaded speed (µm/s) and the stall force (piconewton). At each time-step, τ, it moves by a distance, v × τ. Using \"activity = none\" would specify a molecule that does not move, and since this is the default activity, one could simply omit \"activity\" altogether. Other activities are possible, for example, \"activity = walk\" would specify a motor with discrete steps along the filament. The \"unloaded_speed\" is positive for a plus-end directed motor. Specifying a negative value would make the motor move toward the minus-ends. This is further explained in Cytosim's first tutorial (see link in step 3.5.2).\nSave the file.\n\tCheck the simulation:\n\t> ../play live",
    "Run the simulation:\n\t> ../sim\n\tVisualize the results:\n\t> ../play\n\tCopy the final configuration file to the base directory:\n\t> cp config.cym ../config.cym\n\tNOTE: Your final file should be similar to Supplementary File 2 (\"jove.cym\"). Note how much time was needed to compute this simulation. In the following sections, this time will be multiplied by the number of simulations made to generate a graph where a parameter is varied.\n4. Parameter sweep\nNOTE: In this section, the number of crosslinkers in the network is systematically varied.\nImport Python scripts.\n\t\nCreate a subdirectory \"byn\", inside the base directory:\n\t\t > mkdir byn\nCopy three scripts from the standard Cytosim distribution:\n\t\t> cp python/run/preconfig.py byn/preconfig\n\t\t> cp python/look/scan.py byn/.\n\t\t> cp python/look/make_page.py byn/.\n\t\tNOTE: For safety, copies of these files are provided as Supplementary File 3, Supplementary File 4, and Supplementary File 5 with this article.\nMake the files executable:\n\t> chmod +x byn/preconfig\n\t> chmod +x byn/scan.py\n\t> chmod +x byn/make_page.py\n\t\nCheck that the scripts execute correctly:\n\t\t> byn/preconfig help\n\t\t> byn/scan.py help\n\t\t> byn/make_page.py help\n\t\t​NOTE: This should print a description of how each command can be used. It is possible to modify the PATH variable to call the scripts more simply; see https://en.wikipedia.org/wiki/PATH_(variable).\nTroubleshooting\n\t\t\nIf the error is \"command not found\", check the path specified, which should correspond to the location of the file. If there is another type of error because the OS does not provide python2, edit the three .py files and modify the shebang, which is the first line of each file (just add \"3\"):\n\t\t\t#!/usr/bin/env python → #!/usr/bin/env python3\nCopy the configuration file to make it a \"template\" (Supplementary File 6):\n\t> cp config.cym config.cym.tpl",
    "Edit the template configuration file. In the code editor, open the file \"config.cym.tpl\", located in the base directory. Change one line to introduce a variable text element:\n\tnew 1000 crosslinker → new [[range(0,4000,100)]] crosslinker\n\tNOTE: Preconfig will recognize the code contained in the double brackets and replace it with a value obtained by executing this code in Python. In Python \"range(X,Y,S)\" specifies integers from X to Y, with an increment of S; in this case [0, 100, 200, 300, ... 4000]. The intent is to change the number of crosslinkers added to the simulation.\nGenerate config files from the template:\n\t> byn/preconfig run%04i/config.cym config.cym.tpl\n\tNOTE: This should create 40 files, one for each value specified in \"range(0,4000,100)\". The names of the files to be generated by Preconfig are specified by \"run%04i/config.cym\". With this specific code, Preconfig will generate \"run0000/config.cym\", \"run0001/config.cym\", etc. It will actually make the directories \"run0000\", \"run0001\", etc., and create a file \"config.cym\" in each of them. Check Preconfig's help for more details (run \"byn/preconfig help\"). In case of error, check that the command is typed exactly. Every character counts.\nRun all simulations sequentially:\n\t> byn/scan.py '../sim' run????\n\t​NOTE: The program \"scan.py\" will execute the quoted command in the list of directories provided. In this case, this list of directories is specified by \"run????\". The question mark is a wild card that matches any one character. Hence, \"run????\" matches any name starting with \"run\" and followed by exactly four characters. Alternatively, one could use \"run*\" to generate the same list, since \"*\" matches any string.",
    "In case of problems, execute this command from a new terminal window to run \"sim\" sequentially into all the directories created in step 4.5. Wait for approximately 30 min for the process to complete, but this depends very much on the computer capacities. Reduce the amount of calculation requested by editing \"config.cym\":\n\t\trun 1000 system → run 500 system\nVisualize some simulations:\n\t> ./play run0010\n\t> ./play run0020\nGenerate images for all simulations:\n\t> byn/scan.py '../play image size=256 frame=10' run????\nGenerate an HTML summary page:\n\t> byn/make_page.py tile=5 run????\n\t\nOpen \"page.html\" in a web browser.\n5. Making a graph\nNOTE: In this section, a plot is made from the results of the parameter sweep.\nCheck the report executable:\n\t> cd run\n\t> ../report network:size\n\t​NOTE: For each frame in the trajectory, this will print some comments and two numbers, corresponding to \"polymer\" and \"surface\". Only the network \"surface\" (last column) will be used.\n\t\nSpecifically restrict the information to one frame using:\n\t\t> ../report network:size frame=10\nRemove comments to make the output easier to process:\n\t\t> ../report network:size frame=10 verbose=0\nFinally, redirect the output to a file using the Unix pipe facility (\">\"):\n\t\t> ../report network:size frame=10 verbose=0 > net.txt\nPrint the content of the file to terminal for verification:\n\t\t> cat net.txt\n\t\tNOTE: This should print two numbers. The second one is the surface covered by the network in the 10th frame. To execute the same operation in all \"run\" directories, change directory:\n\t\t> cd ..\nGenerate a report in each simulation subdirectory:\n\t> byn/scan.py '../report network:size frame=10 verbose=0 > net.txt' run????\n\tNOTE: Again, scan.py will execute the quoted command in all directories specified by \"run????\". The command is the last one tried in step 5.1. This will generate a file \"net.txt\" in every directory (try \"ls run????\").",
    "Examine these numbers:\n\t​> byn/scan.py 'cat net.txt' run????\n\t\nAdd the \"+\" option to concatenate the name of the directory and the command's output:\n\t\t> byn/scan.py + 'cat net.txt' run????\nCollect these numbers into a file:\n\t> byn/scan.py + 'cat net.txt' run???? > results.txt\nClean the file \"results.txt\" by deleting the repeated text that is not numeric. Open \"result.txt\" in the code editor, and use the \"replace text\" to remove all \"run\" strings. Remove only three letters, and keep the numbers; \"run0000\" should become \"0000\".\n\tNOTE: This should leave a file with only numbers organized in three columns.\nGenerate a contractility plot from the data in \"result.txt\". Use any method to generate a plot using column 1 for X and column 3 for Y. Label the X-axis as number of crosslinkers/100. Label the Y-axis as surface (micrometer^2).\nStore all simulations in a separate directory:\n\t> mkdir save1\n\t> mv run???? save1\n6. Alternative method for making a graph\nAdd a report command at the end of \"config.cym.tpl\" on a new line after the closing \"}\" of the run command:\n\treport network:size net.txt { verbose = 0 }\nGenerate config files:\n\t> byn/preconfig run%04i/config.cym config.cym.tpl\nRun all simulations using parallel threads:\n\t> byn/scan.py '../sim' run???? njobs=4\n\t\nAdjust the number of jobs (njobs=4), depending on the computer's capacity. Monitor the usage of the CPU resources, for example, by the Activity Monitor App on MacOS.\nCollect the data:\n\t> byn/scan.py + 'cat net.txt' run???? > results.txt\nMake a plot, same as in steps 5.5 and 5.6.\nStore all the previous runs in a separate directory:\n\t> mkdir save2\n\t> mv run???? save2\n7. Improved plot using random sampling\nNOTE: A variable is sampled here using a generator function from the \"random\" module of Python.",
    "In the code editor, open the template configuration file \"config.cym.tpl\", located in the base directory. Add two lines, just before the \"new crosslinker\":\n\t[[num = int(random.uniform(0,4000))]]\n\t%[[num]] xlinkers\n\tAlso change the \"new\" command to use this variable:\n\tnew [[range(0,4000,100)]] crosslinker → new [[num]] crosslinker\n\tNOTE: The first line creates a random variable \"num\". The second line prints the parameter value. The \"%\" character is important since it will instruct Cytosim to skip the line. Soon \"xlinkers\" will serve as a recognizable tag, and it must appear only once in each file.\n\t\nAt the very end of \"config.cym.tpl\", ensure that there is a report instruction:\n\t\treport network:size net.txt { verbose = 0 }\nGenerate config files:\n\t> byn/preconfig run%04i/config.cym 42 config.cym.tpl\n\tNOTE: This should generate 42 files. This number can be increased if the computer is fast enough. The values generated randomly can be seen by using the Unix tool \"grep\" to search files:\n\t> grep xlinkers run????/config.cym\nRun all simulations in parallel:\n\t> byn/scan.py '../sim' run???? njobs=4\n\tNOTE: Adjust the number of jobs to the computer's capacity. For the best results, the variable \"njobs\" should be set equal to the number of cores of the computer.\nCollect the data using a single command:\n\t> byn/scan.py + 'grep xlinkers config.cym; cat net.txt' run???? > results.txt\n\tNOTE: The \"+\" option of scan.py will concatenate all the output of the command to a single line. In this case, the command is actually composed of two commands separated by a semi-column (\";\"). Data collection can always be automated with a Python script.",
    "Clean the file. Open \"result.txt\" in the code editor. To ensure that all the data corresponding to one simulation are contained in one line, delete all occurrences of the string \"xlinkers\" and remove the \"%\" characters at the start of each line. Finally, save \"result.txt\", which should be neatly organized in three columns of numeric values.\nMake a graph to plot the data by repeating step 5.6, but label the X-axis as number of crosslinkers\nSave the dataset into a new subdirectory:\n\t>mkdir set1\n\t> mv run???? set1/.\n\t> mv results.txt set1/.\nCalculate another dataset by repeating steps 7.2-7.6, and then repeat step 7.8, replacing \"set1\" by \"set2\" in all three commands.\nMake a combined plot.\n\t\nConcatenate the two data files:\n\t\t> cat set?/results.txt > results.txt\n\t\tNOTE: The new \"result.txt\" should be larger.\nPlot data to make a combined graph, as described in step 7.7.\n8. Fully automated pipeline\nNOTE: In this part, all operations requiring manual intervention are replaced by commands. When this is done, it will be possible to write a single script that performs all the steps automatically. This script can be run on a remote computer such as a compute farm.\nUse the Unix \"sed\" command to \"clean\" the results.txt file, replacing step 7.6.\n\t\nRemove the \"%\" at the beginning of lines:\n\t\t> sed -e 's/%//g' results.txt > tmp.txt\nRemove \"xlinkers\":\n\t\t> sed -e 's/xlinkers//g' tmp.txt > results.txt\nWrite a script to call all the commands successively in the right order.\n\t\nUse different languages: bash or Python.\nCreate a file \"pipeline.bash\", and copy all the commands needed to run the pipeline.\nExecute the script:\n\t\t> bash pipeline.bash\nUse an automated plotting script.",
    "NOTE: It can be advantageous to remove all manual intervention. Many tools exist to generate a PDF plot directly from a data file, for example, gnuplot (http://www.gnuplot.info), PyX (https://pyx-project.org), or Seplot (https://pypi.org/project/seplot/).\nSubscription Required. Please recommend JoVE to your librarian."
  ],
  "subjectAreas": [
    "Developmental Biology"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics"
  ]
}