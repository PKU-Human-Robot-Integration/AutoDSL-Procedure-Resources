{
  "id": 2117,
  "origin_website": "Cell",
  "title": "Protocol for Identification and Removal of Doublets with DoubletDecon",
  "procedures": [
    "Step-By-Step Method Details\nStep-By-Step Method Details\nStep 1: Installing DoubletDecon\nTiming: 5 min\nFull installation of DoubletDecon includes downloading the DoubletDecon package from GitHub. An example of how to perform all steps of this protocol using real data is available on the project GitHub at https://github.com/EDePasquale/DoubletDecon/wiki/DoubletDecon-Vignette-with-Dexmulet-Data[href=https://github.com/EDePasquale/DoubletDecon/wiki/DoubletDecon-Vignette-with-Dexmulet-Data].\nInstall DoubletDecon by running the following code: >if(!require(devtools)){ >  install.packages(\"devtools\") # If not already installed >} >devtools::install_github('EDePasquale/DoubletDecon')\nTo access the user interface after installation, run the following code: >shiny::runGist('a81cdc2aea5742c08e5fc3fa66d47698',launch.browser=TRUE)\nStep 2: Formatting Input Files for Use with DoubletDecon\nTiming: 5–30 min\nDoubletDecon accepts input from both ICGS and Seurat unsupervised clustering pipelines either directly (ICGS) or with use of a conversion function (Seurat). The files described in the following note can also be used to guide input file creation from the output of other pipelines.\nNote: Example files for testing DoubletDecon can be found at the project GitHub repository in the folder “Seurat_Conversion_Files”. This folder contains the Seurat object that has been generated following the below instructions (Variant 2) as well as the three output files that have been converted to ICGS version 2 format using the DoubletDecon function Improved_Seurat_Pre_Process().\nVariant 1. Iterative Clustering and Guide Gene Selection (ICGS) version 2\nDoubletDecon is designed to natively work with ICGS files, so no reformatting is necessary. The files that are needed for running DoubletDecon can be found navigating through the paths listed below:\nICGS marker gene expression file: ∼/Project_Name/ICGS-NMF/MarkerFinder/FinalMarkerHeatmap_all.txt\nICGS groups file: ∼/Project_Name/ICGS-NMF/MarkerFinder/FinalGroups.txt\n(Optional) Full expression file: ∼/Project_Name/ExpressionInput/exp.Project_Name.txt\nNote: Additional description of ICGS and ICGS2 file formats can be found at https://altanalyze.readthedocs.io/en/latest/ICGS/[href=https://altanalyze.readthedocs.io/en/latest/ICGS/].\nVariant 2. Seurat version 3\nSeurat files can be converted into ICGS-like file formats using the Improved_Seurat_Pre_Processing() function using the following code: >newFiles=Improved_Seurat_Pre_Process(seuratObject, num_genes=50, write_files=FALSE\nThe required parameters are:",
    "seuratObject: Seurat object following a protocol such as https://satijalab.org/seurat/v3.1/pbmc3k_tutorial.html[href=https://satijalab.org/seurat/v3.1/pbmc3k_tutorial.html] or using the “seurat-3.0.R” script provided in the DoubletDecon GitHub repository. Please note that idents must be set to the original Seurat cluster numbers.\nnum_genes: Number of genes for the top_n function. Default is 50. This parameter determines the number of marker genes that are output for each cell cluster. Fewer than 50 marker genes per cluster is likely to reduce the performance of DoubletDecon.\nwrite_files: Save the output files to .txt format. Default is FALSE. It is recommended to set this to TRUE when the size of the dataset is larger or when you want to rerun DoubletDecon more than once on the same dataset, as the Improved_Seurat_Pre_Processing() function can take some time.\nThe outputs of this function are three files directly equivalent in format to the ICGS files described above:\nICGS marker gene expression file: newFiles$newExpressionFile\nICGS groups file: newFiles$newGroupsFile\n(Optional) Full expression file: newFiles$newFullExpressionFile\nNote: These files will be used for the following parameters when running DoubletDecon, in combination with selecting a project name and identifying the input/output directory:\nfilename – this parameter should be a character string specifying a unique name for this run of DoubletDecon. An example of this would be “AML_May5th_DoubletDecon”. Please refrain from using spaces or special characters not accepted by R, including “-“.\nlocation – this parameter should be a character string specifying the path to the input/output folder containing the input files for DoubletDecon. This will also be the location of the output of the DoubletDecon run. An example of this would be “/Users/UserName/Documents/ProjectName/Doublets/\", which will be specific to the user and the operating system but must include the final “/”. It is important to note that the input directory must be the same folder as the output directory.",
    "rawDataFile – this parameter specifies the file name of the clustered and feature selected gene expression file in a .txt file format or the data.frame containing this information within the R environment. When using ICGS files, this is the ICGS marker gene expression file. When using Seurat and Improved_Seurat_Pre_Process(), this is the newFiles$newExpressionFile. An example of this file might be called “FinalMarkerHeatmap_all.txt”\ngroupsFile – this parameter specifies the file name of the cell cluster definitions file in a .txt file format or the data.frame containing this information within the R environment. When using ICGS files, this is the ICGS groups file. When using Seurat and Improved_Seurat_Pre_Process(), this is the newFiles$newGroupsFile. An example of this file might be called “FinalGroups.txt”\nfullDataFile – this parameter specifies the file name of the full, non-clustered gene expression file in a .txt file format or the data.frame containing this information within the R environment. When using ICGS files, this is the Full expression file. When using Seurat and Improved_Seurat_Pre_Process(), this is the newFiles$newFullExpressionFile. An example of this file might be called “exp.Project_Name.txt”\nNote: This is a good time to compare your input files to example files provided in the DoubletDecon GitHub repository (https://github.com/EDePasquale/DoubletDecon[href=https://github.com/EDePasquale/DoubletDecon]) to ensure that the conversion completed correctly. This is particularly important as unsupervised clustering software packages are often updated, leading to format differences from what was initially anticipated.\nCritical: When using DoubletDecon with Seurat-originated input, the output files and figures will have the cluster numbers increased by 1 to match ICGS format. We are aware that this may be inconvenient for Seurat users and future releases of DoubletDecon will disable this renumbering by default.\nStep 3: Determining the Cluster Merging Parameter (ρ′)\nTiming: ∼15 min",
    "Cluster merging is a unique feature of DoubletDecon that allows the user to overcome overly granular clustering of cells in the pre-processing steps to establish transcriptionally distinct clusters for use with DoubletDecon. The algorithm accomplishes this by calculating a Pearson correlation threshold for the similarity of clusters determined by the user input value of ρ′ (“rho prime”). An understanding of the cell-type identities of each cluster in the dataset is recommended for this step. In cases where knowledge of cell types is unavailable, it is important that the user at least ensure that cell clusters have unique gene expression patterns relative to other clusters in the dataset. If two clusters share a highly similar pattern, based on correlation or visual inspection of the heatmap, then we recommend setting the cluster merging parameter to a value that would lead to merging of those clusters. In the case of ICGS2, the user can examine initial automatically predicted cell-type labels (based on the built-in marker gene set enrichment) to identify transcriptionally related clusters. In general, knowing the identity of the cell clusters to be merged will help prevent merging of clusters that are transcriptionally similar based on the genes selected during unsupervised clustering, but may actually be functionally distinct. In these cases, the user would lose the ability to identify doublets between those two cell types. However, understanding the transcriptional similarity between clusters is more important that knowing the actual cluster identities for this step.",
    "The Demuxlet data presented in the original DoubletDecon paper serves as a useful real world example for describing the process of merging clusters. When evaluating the heatmap of these cells (created in AltAnalyze with ICGS), we noticed that clusters 1–7 shared a common gene expression pattern, in which each cluster shows some minor differences while still sharing the same overall larger expression signature (Figure 2[href=https://www.wicell.org#fig2]A). If we had left those cells as 7 separate clusters, we would have created simulated doublets between clusters 1 and 2, for example, that would look too similar to real cells in cluster 3, leading to false positives. To confirm this is appropriate, we also looked at the gene enrichment results and see that all of these cells are monocytes or monocyte progenitors, lending further support for merging these clusters. Further, we noticed that clusters 9 and 10 are both T-cells with similar expression patterns, though the expression is \"stronger\" in cluster 10. These were also merged. The UMAP for these data show that clusters 1–7 occupy the same space, which is further confirmation that they should be merged, as synthetic (and real) doublets created between these clusters would also reside in that same space (Figure 2[href=https://www.wicell.org#fig2]B). A cluster merging value of 1.2 was selected based on the knowledge of which clusters should be merged using the UI version of DoubletDecon (Figure 2[href=https://www.wicell.org#fig2]C). Two methods can be used to identify an appropriate ρ′ value: manually or through the user interface. Further details and considerations for this step are presented in the STAR Methods of the original DoubletDecon paper (DePasquale et al., 2019[href=https://www.wicell.org#bib1]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/160-Fig2.jpg\nFigure 2. Selection of the Cluster Merging Parameter in the Demuxlet Dataset\nPeripheral Blood Mononuclear Cells (PBMC) clustered with ICGS version 1.",
    "(A) Heatmap from ICGS displaying row and column clusters with gene enrichment analysis. Sets of cell clusters selected for merging are marked with red boxes on the heatmap.\n(B) UMAP from ICGS displaying the same cell clusters, with a red circle around a clump of cells belonging to clusters 1-7, indicating their transcriptional similarity.\n(C) Cluster merging heatmap from DoubletDecon after testing for all possible cluster merging parameters in the UI. This cluster merging heatmap shows that clusters 1-7 and clusters 9 and 10 will be merged into two new, larger clusters if this cluster merging value is selected.\nVariant 1. Manual Identification\nBegin by running DoubletDecon with default parameters, including a ρ′ value of 1. This ρ′ value results in the cluster similarity threshold being set to the cluster correlation mean plus 1 standard deviation, and is generally a good starting point.\nThe code for this is: >Main_Doublet_Decon(rawDataFile, groupsFile, filename, location, fullDataFile=NULL, removeCC=FALSE, species=\"hsa\", rhop=1, write=TRUE, PMF=TRUE, useFull=FALSE, heatmap=FALSE, centroids=TRUE, num_doubs=100, only50=FALSE, min_uniq=4, nCores=-1)\nWhen DoubletDecon completes the cluster merging step (denoted by printing of \"Creating synthetic doublet profiles...\" in the console and log file), terminate DoubletDecon.\nExamine the clustering merging heatmap that was automatically generated in conjunction with previously identified cluster labels to assess the appropriateness of merging. This cluster-by-cluster heatmap colors blocks of clusters in yellow if they are to be merged using the selected ρ′ value, meaning no cluster merging will take place when only the diagonal is colored in yellow.",
    "When merging clusters, the goal is to combine highly similar clusters to improve the formation of reference clusters for deconvolution and to generate transcriptionally distinct synthetic doublets, both of which improve the overall accuracy of the method. However, by merging two clusters the software will no longer be able to detect doublets formed between those two clusters. This is why a thorough understanding of the cell cluster identifications and relevant biology are critical to using DoubletDecon, as it may be very important to remove doublets of some classes while retention of other doublet types may not affect downstream analyses. For more information of what clustering should look like prior to running DoubletDecon, please see Figure 1[href=https://www.wicell.org#fig1].\nRepeat the above process while adjusting ρ′ down (if too few clusters are merged) or up (if too many clusters are merged) by 0.1 increments until an acceptable ρ′ value is reached.\nVariant 2. Interface Identification\nBegin by starting the DoubletDecon UI and uploading all relevant data files. Keep the remaining parameters at their default values.\nSelect the “Test for rho-prime values” button at the bottom of the initial screen. During processing, cluster merging heatmaps may appear in the R window; however, these should be ignored as they are for use in Variant 1. A new tab will automatically open when processing is completed, which will display a number of cluster merging heatmaps along with the associated ρ′ values used to generate those heatmaps.\nNote: Please be patient, as the processing for this step may take several minutes.\nComplete Variant 1, steps 5c and 5d to decide on the appropriate ρ′ value for your experiment. Please note this value for later use.",
    "Critical: The results of DoubletDecon are highly dependent on the selection of an appropriate ρ′ value! Please ensure that you understand the cell types/states of any clusters being merged prior to selecting which clusters to merge.\nStep 4: Selecting Additional Parameters\nTiming: ∼5 min\nWhile the cluster merging parameter chosen in Step 2: Formatting input files for use with DoubletDecon of this protocol is the most critical for accurate and reliable performance of DoubletDecon, other parameters may affect the results, and their values should be carefully considered. Listed below are the remaining parameters to choose, listed in descending order of importance in most test cases, with default values and tips for each selection provided.\nonly50 – this parameter, set to FALSE by default, determines whether the synthetic doublets are created with only a 50%/50% average of two parent cells (only50 set to TRUE) or if 70%/30% and 30%/70% weighted averages are included as well (only50 set to FALSE). In most cases, “only50” set to FALSE increases the sensitivity of DoubletDecon to detect doublets at a minor decrease of specificity. However, datasets that are known to contain a large proportion of cells from transitional populations or those with more continuous cell definitions will likely have a higher accuracy when “only50” is set to TRUE, assuming a small decrease in sensitivity.",
    "PMF – this parameter, set to TRUE by default, “rescues” cell clusters from inappropriate removal by checking for unique gene expression that cannot be explained as a combination of any of the remaining cluster expression profiles. The name is an abbreviation of “pseudo MarkerFinder”, as MarkerFinder is a function in AltAnalyze that performs a similar unique gene expression check (Olsson et al., 2016[href=https://www.wicell.org#bib2]). In nearly all cases, rescue of erroneous identified clusters improves the accuracy of doublet detection, though the results of this “rescue” should be reviewed for rescue of non-biologically feasible cell clusters.\nuseFull – this parameter, set to FALSE by default, checks for unique expression during the rescue step of DoubletDecon (when “PMF” is TRUE) in all of the genes of the expression file. By leaving this parameter as FALSE, DoubletDecon only uses those genes included in the “rawDataFile” input, which should be a set of genes selected to best define each cell cluster. When using useFull as TRUE, special care will need to be taken on selecting the appropriate value of “min_uniq” (see below). In most cases, the use of the full gene set is unnecessary, as most cluster-defining genes are included in the “rawDataFile” input, though unique gene expression may be found in one of the genes not represented. As such, we recommend testing your data with the “useFull” option set to TRUE and an appropriate “min_uniq” value selected if suspected progenitor or transitional clusters are removed.",
    "centroids – this parameter, set to TRUE by default, is the parameter for determining whether cluster centroids or medoids are used to define the references for the deconvolution “remove” step of DoubletDecon. Medoids (“centroids” set to FALSE) should be used when some cell clusters contain a large (>40%) proportion of suspected doublets and consequently centroids may skew the result. However, centroids (“centroids” set to TRUE) may better represent the data when this case is not met and is the recommended choice in most cases.\nnum_doubs – this parameter, set to 100 by default, is the number of synthetic doublets generated for each pair of clusters during the synthetic doublet generation step of DoubletDecon. This value, along with 250 and 500, gave similar and consistent results when testing the Demuxlet and Cell Hashing datasets in the original DoubletDecon paper, though a larger value should be chosen in very large datasets. A good rule of thumb is that the total number of synthetic doublets generated is approximately 10% of the number of cells in the dataset.\nNote: increasing this number greatly increases the run time of DoubletDecon, especially in combination with only50 set to FALSE.\nremoveCC – this parameter, set to FALSE by default, checks for gene clusters enriched in cell cycle genes via KEGG analysis. When setting this parameter to TRUE to remove cell cycle gene clusters, the user will also be required to input the appropriate “species” (see below) and have an internet connection. The presence of cell cycle clusters may confound the identification of doublets due to shared genes expressed between clusters. In most cases, cell cycle removal only improves doublet detection, though in some cases the cell cycle genes are what define a cluster (e.g., studying cell metabolism in tumors) and should be retained.",
    "nCores – this parameter, set to -1 by default, is used during the “rescue” step of DoubletDecon and indicates how many processing cores should be used when parallel processing of the full gene list is selected. The default value of -1 triggers automatic detection of core and will work for most purposes. When using a computational cluster, setting this value to the number of available cores designated in a particular job will eliminate related errors.\nmin_uniq – this parameter, set to 4 by default, indicates the minimum number of genes that must be uniquely expressed per potential doublet cluster to be “rescued” during the final step of DoubletDecon. When using the full gene list (when “useFull” is TRUE), the “min_uniq” value should be set to 30, which was guided by the verified mouse non-doublet evaluation dataset in the original DoubletDecon publication (see STAR Methods for more details) (DePasquale et al., 2019[href=https://www.wicell.org#bib1]; Venkatasubramanian et al., 2020[href=https://www.wicell.org#bib5]). These values were chosen to correct for multiple tests and reduce the risk of false positive genes labeled as uniquely expressed. Increasing this number decreases the number of putative doublet clusters that are rescued.\nspecies – this parameter, set to “hsa” by default, is used only when cell cycle genes are removed (when “removeCC” is TRUE). The correct species should be indicated by the official three letter code to allow for accurate conversion of gene identifiers to use by the Enrichr module.",
    "write – this parameter, set to TRUE by default, gives permission for all text-based output files of DoubletDecon to be written to the hard drive. These files include intermediate results files from the primary steps of DoubletDecon, final doublet and non-doublet group files, and doublet and non-doublet expression files. Setting this parameter to FALSE should only be used when testing large number of parameter combinations while using an alternative method of storing the results.\nCritical: DoubletDecon will over-write previous files saved with the same name, so please use a unique “filename” name for each run.\nheatmap – this parameter, set to TRUE by default, causes DoubletDecon to generate expression heatmaps for the original data, the final non-doublets, and the final doublets. This is useful for visually evaluating the DoubletDecon-predicted doublets and non-doublets overall accuracy when obvious doublet expression patterns are visible in the data. In extremely large datasets, this parameter should be set to FALSE during testing and heatmaps should only be generated when the final parameters are selected to minimize computational burden.\nStep 5: Running DoubletDecon\nTiming: 5–30 min\nAfter selecting all of the initial parameters and generating the formatted input files, the final step is to run DoubletDecon. DoubletDecon can be used either in the R console (or as part of a larger script) or with the user interface (DoubletDecon UI). Both methods produce the same doublet predictions, but the UI automatically generates UMAPs and bar charts for visualization of the results that are not available using the command line version. Additional details for running DoubletDecon and updates to the parameters can be found at the project GitHub repository (https://github.com/EDePasquale/DoubletDecon[href=https://github.com/EDePasquale/DoubletDecon]).\nVariant 1. Console\nLoad DoubletDecon by calling: >library(DoubletDecon)",
    "Set your working directory (using setwd()) to the DoubletDecon folder containing the code used to run DoubletDecon. This is necessary for accessing the conversion files for cell cycle gene removal.\nRun DoubletDecon by calling the Main_Doublet_Decon() function with all of the above parameters clearly defined as shown in the example below: >results_DD=Main_Doublet_Decon(rawDataFile=paste0(location,\"rawData.txt\"),   groupsFile=paste0(location, “groups.txt”),   filename=”test_file”,   location=location,   fullDataFile=NULL,   removeCC=FALSE,   species=\"hsa\",   rhop=1,   write=TRUE,   PMF=TRUE,   useFull=FALSE,   heatmap=FALSE,   centroids=TRUE,   num_doubs=100,   only50=FALSE,   min_uniq=4,   nCores=-1)\nWhen using Seurat files, the “rawDataFile”, “groupsFile”, and (optional) “fullDataFile” should be provided as: >results_DD=Main_Doublet_Decon(rawDataFile=Files$newExpressionFile,   groupsFile= Files$newGroupsFile,   filename=”test_file”,   location=location,   fullDataFile= Files$newFullExpressionFile,   ... where “Files” is the resulting object from the Improved_Seurat_Pre_Process() function.\nVariant 2. User Interface\nBegin by starting the DoubletDecon UI.\nChoose a project name (or use the one automatically generated), which will serve as your “filename” parameter, and select the directory containing your input files (the “location” parameter).\nChoose whether you wish to use ICGS files or Seurat files and upload appropriately.\nWhen using Seurat, Option 1 is preferred as is the Improved_Seurat_Pre_Process() function, which takes as input a Seurat object prepared as described in Step 2: Formatting input files for use with DoubletDecon of this guide. Option 2 is a legacy option that we have retained for people who have already generated the three necessary input files separately.\nInput the remaining parameters decided in Step 3: Determining the cluster merging parameter (ρ′) and Step 4: Selecting additional parameters, keeping in mind that some of the parameters are not visible until necessary conditions are met (i.e., the dialog for uploading the full expression file will not be available until “Use full gene list?” is set to TRUE.\nSelect the “Run DoubletDecon” button at the bottom of the screen, which will run DoubletDecon with the given parameters.",
    "Note: The “Generate function call only” button at the bottom of the user interface takes the provided parameters and generates code for running the same set of parameters in the console. The is especially useful if you wish to run DoubletDecon multiple times in a loop (see Optional Step 6: Running DoubletDecon Multiple Times) to improve accuracy.\nCritical: If using the user interface version of the software, close and restart the DoubletDecon application window and R or R Studio before running DoubletDecon a second time.\nPause Point: Once you know the parameters you wish to use and have successfully run DoubletDecon, you may find this to be a good place to pause and evaluate the results before proceeding with the optional steps.\nNote: Please close R and reopen to run DoubletDecon with new parameters, as failing to do this may lead to errors.\nOptional Step 6: Running DoubletDecon Multiple Times\nTiming: 5–30 min\nDue to the random nature of synthetic doublet generation in DoubletDecon, results will vary slightly across runs. To ensure only high-confidence doublets are predicted and subsequently removed from the input data, DoubletDecon should be run multiple times with the same or slightly varying settings. Following this, the intersection of the DoubletDecon doublet predictions could be used for further downstream analysis.\nRun DoubletDecon and evaluate the results as described in the following section on Expected Outcomes[href=https://www.wicell.org#expected-outcomes].\nStore the list of predicted doublets in a text file or R object. This list will be the row names of the “Final_doublets_groups” output of DoubletDecon.\nRepeat steps 20 and 21 the desired number of times (recommended 20) and record the predicted doublet results from each run.",
    "Identify the intersection of predicted doublets by loading the file or object into R as a list object. Using the intersect() function in R with each list of cell names as parameters in the function call will result in an intersection of the cell names provided (for more details on how to use the intersect() function, see https://stat.ethz.ch/R-manual/R-devel/library/base/html/sets.html[href=https://stat.ethz.ch/R-manual/R-devel/library/base/html/sets.html]).\nOptional Step 7: Assessing Consensus with Other Doublet Detection Methods\nTiming: ∼60 min\nWhile DoubletDecon has been shown to perform comparably to alternative computational doublet detection approaches, using a combination of algorithms allows the user to prioritize sensitivity or specificity depending on the research question. Two options for this additional step would be to run two or more doublet detection algorithms and use the union or intersection of the predictions for downstream analyses. This process is very similar to what is described in Optional Step 6: Running DoubletDecon Multiple Times.\nVariant 1. Intersection of doublet predictions\nRun DoubletDecon and evaluate the results as described in the following section on Expected Outcomes[href=https://www.wicell.org#expected-outcomes].\nStore the list of predicted doublets in a text file, Excel spreadsheet, or R object. This list will be the row names of the “Final_doublets_groups” output of DoubletDecon.\nRun alternative computational doublet detection methods according to the developer’s instructions and save the lists of predicted doublets.\nIdentify the intersection of predicted doublets with one of the following methods:\nIf using an Excel spreadsheet to store predicted doublets, copy these cells into an interactive Venn Diagram generator, such as Venny (https://bioinfogp.cnb.csic.es/tools/venny/[href=https://bioinfogp.cnb.csic.es/tools/venny/]), taking care to place each algorithm’s predicted cells as separate lists. Click on the center of the Venn Diagram to generate a list of only cells predicted in all doublet detection algorithms.",
    "If using a text file or R object, load the file or object into R as list objects. Using the intersect() function in R with each list of cell names as parameters in the function call will result in an intersection of the cell names provided (for more details on how to use the intersect() function, see https://stat.ethz.ch/R-manual/R-devel/library/base/html/sets.html[href=https://stat.ethz.ch/R-manual/R-devel/library/base/html/sets.html]).\nVariant 2. Union of doublet predictions\nRun DoubletDecon and evaluate the results as described in the following section on Expected Outcomes[href=https://www.wicell.org#expected-outcomes].\nStore the list of predicted doublets in a text file, Excel spreadsheet, or R object. This list will be the row names of the “Final_doublets_groups” output of DoubletDecon.\nRun alternative computational doublet detection methods according to the developer’s instructions and save the lists of predicted doublets.\nIdentify the union of predicted doublets with one of the following methods:\nIf using an Excel spreadsheet to store predicted doublets, simply paste together the lists of predicted doublet cell names to create the union of lists.\nIf using a text file or R object, load the file or object into R as list objects. Using the union() function in R with each list of cell names as parameters in the function call will result in a union of the cell names provided (for more details on how to use the union() function, see https://stat.ethz.ch/R-manual/R-devel/library/base/html/sets.html[href=https://stat.ethz.ch/R-manual/R-devel/library/base/html/sets.html]).\nNote: Cell names containing special characters, such as “.”, “_”, “-“, “/”, etc. may have been altered during the DoubletDecon or alternative algorithm processes. Please ensure that all lists of cells have the same naming conventions following doublet prediction before combining results."
  ],
  "subjectAreas": [
    "Genomics",
    "Bioinformatics",
    "Sequencing",
    "Single Cell",
    "High Throughput Screening"
  ],
  "bigAreas": [
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology"
  ]
}