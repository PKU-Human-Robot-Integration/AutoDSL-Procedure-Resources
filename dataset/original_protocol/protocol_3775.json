{
  "id": 3978,
  "origin_website": "Cell",
  "title": "An imaging analysis protocol to trace, quantify, and model multi-signal neuron morphology",
  "procedures": [
    "Step-by-step method details\nStep-by-step method details\nWe begin by describing how to pre-process image-stacks of a Class IV WT neuron, followed by reconstruction. We then demonstrate the procedure to run neuron-group level analysis of dendritic morphology and cytoskeletal distribution for two distinct da neuron types (Class I and Class IV da neurons) as well as a genetic manipulation, namely Form3 overexpression (Form3-OE).\nPre-processing of images (tools used: Fiji and Vaa3D)\nTiming: [days to weeks]\nCritical: The raw neural images taken from the microscopes cannot be directly reconstructed in tracing tools, as a single neuron may be captured using multiple image tiles, and additional pseudo-signals are required for reliable and accurate tracing of the arbors.\nOpen the raw image file (in this specific example, the used raw image stack is in the .czi format) in FIJI (Schindelin et al., 2012[href=https://www.wicell.org#bib14]) and save as 8 bit image in .v3draw format.\nAdd the red and green signals (Figure 1[href=https://www.wicell.org#fig1]) using the FIJI> process> image calculator > add signal module to create a third pseudo channel (Figures 2[href=https://www.wicell.org#fig2]B and 2C). This third channel has a higher signal-to-noise ratio and is also continuous. Hence it is used to guide the tracing process.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/697-Fig1.jpg\nFigure 1. Preprocessing of image-stacks in FIJI\nTwo-channel image with microtubule (A) and F-actin (B) signals.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/697-Fig2.jpg\nFigure 2. Creation of a pseudo-channel from two signals\n(A) The channels of an image stack can be separated using the Split channel plugin in FIJI (Image>Color>Split Channels).\n(B) Signals from two channels can be added using the Image calculator plugin (Process>Image Calculator).\n(C) Signals from two split channels can be added to create a third channel.\nMerge the third pseudo-channel with the original two channels to create a three-channel image-stack (Figure 3[href=https://www.wicell.org#fig3]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/697-Fig3.jpg\nFigure 3. Integration of multiple signals and pseudo-channel",
    "(A) Separate channels of an Image-stack can be combined in FIJI using the Merge Channels plugin.\n(B) The two original channels (Figure 1[href=https://www.wicell.org#fig1]A and B) can be merged together with the newly created pseudo-channel (added as the third channel).\nThe three-channel composite image (C) can be saved.\nOpen the three channel image tiles in Vaa3D (Peng et al., 2014[href=https://www.wicell.org#bib11]). Stitch together multiple image tiles in Vaa3D with the Image-stitching >> istitch >> Pairwise Image stitching protocol (Figure 4[href=https://www.wicell.org#fig4]) using the created third channel as a reference guide.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/697-Fig4.jpg\nFigure 4. Image-stitching\n(A) Two image tiles of a Class IV neuron can be stitched together in Vaa3D using the Pairwise Image Stitching plug-in (Plugins>Image Stitching> iStitch > Pairwise Image Stitching).\n(B) In the plug-in menu, the third channel (from Figure 3[href=https://www.wicell.org#fig3]C) is used to guide the stitching process.\nSemi-automatic multi-signal reconstruction of confocal neural images (tools used: neuTube and Vaa3D)\nTiming: [days to weeks]\nCritical: Analysis of neural morphology directly from microscopic images is coarse, noise-prone, and inadequate. Digital neural reconstructions are required to precisely analyze neuron morphology.\nAccurate reconstructions of the neural arbors require faithful manual input along with the semi-automated reconstruction system in neuTube. (Watch video demonstration of tracing in neuTube at youtube.com/watch?reload=9&v=QlCl_U2Zwkc&ab[href=http://youtube.com/watch?reload=9&v=QlCl_U2Zwkc&ab])\nMulti-Channel plugin in Vaa3D (version 3.1) is used to create multi-signal neural reconstructions that describe morphology along with additional subcellular characteristics captured through multiple signals.\nOpen neuTube and load the three-channel stitched .v3draw image of a single Class IV da neuron.\nExtract the third channel (Tools >> Process >> Extract). This will create another image of just the third channel (Figure 5[href=https://www.wicell.org#fig5]). Open the image in 3D (trace mode) and use the third channel to guide the reconstruction process.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/697-Fig5.jpg",
    "Figure 5. The pseudo-channel can be extracted from the three-channel image-stack in neuTube (Tools>Process>Extract Channel>select the 3rd channel) and used to guide the reconstruction process\nUse the Volume >> Transfer Function 1 >> adjust_signal module to increase the intensity of the signal so that the image is clear enough to begin reconstruction. Increase the brightness and contrast by adjusting the curve (Figure 6[href=https://www.wicell.org#fig6]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/697-Fig6.jpg\nFigure 6. Signal intensity adjustment\n(A) The brightness of the third channel loaded in neuTube 3D viewer can be adjusted using the transfer function under the Volume Tab in the Control and Setting menu.\n(B) The red curve can be adjusted by dragging in order to make the image brighter. This process helps with the manual editing of the reconstruction.\nTrace the brightest branches by left-clicking and selecting trace from the resulting menu (Figure 7[href=https://www.wicell.org#fig7]A). Once the main structure is traced, trace the remaining arbors using the extend mode. To activate extend mode, click on an end point and press space. Press Ctrl+S (Command+S in Mac) to save the swc file. Alternatively, select the neural reconstruction in “normal mode” (under the Neurons tab in Control and Settings, see Geometry and select normal mode), right click, and then click on “save as”. Use a file name that matches the image stack name for consistency.\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/697-Fig7.jpg\nFigure 7. Reconstruction process in neuTube\n(A) The brighter signals within the image can be reliably traced automatically, by simply left-clicking and then pressing the “Trace” button.\n(B) For manual interventions, several operations are available in the reconstruction mode: extend, connect, move, delete etc.\n(C) Completed reconstruction of a Class IV WT neuron.\nRight-click on a soma node and select as root (change property >> set as root). That node will then turn blue.\nConnecting and disconnecting nodes (Figure 7[href=https://www.wicell.org#fig7]):",
    "Press and hold the ‘Ctrl’ key and select two nodes, the click ‘C’ to connect.\nSelect two or more connected nodes and press ‘B’ to break the connections.\nChanging the size of nodes: after selecting one or more nodes, press ‘Q’ to make them smaller or ‘E’ to make them bigger. Manually adjust dendrite thickness based on the signal intensity and spread, to accurately represent local dendritic diameter.\nDelete nodes: select nodes and hit ‘Del’ key.\nExtend nodes: click on a terminal node and press ‘Space’ to go into the extend mode. Left-click on image stack to extend and continue to extend by left clicking. Multiple nodes will be added to form a connection between the current selected end point and the point at which the mouse is clicked. Move individual nodes in all three dimensions by first selecting the node, then pressing “V”, and then dragging the node by mouse movements while pressing the “shift” button.\nWhere precise manual input is required, press and hold ‘ctrl’ and left-click to add single nodes per click.\nInserting nodes: select two or more nodes to add a node in between. Right-click and select Insert from the opened menu.\nMerging adjacent nodes: select both nodes, right-click, and select merge from the opened menu.\nCritical: Topology of the dendritic arbor",
    "Specific issues must be taken into consideration when tracing a neuron in neuTube. Use the sphere mode (under the Neurons tab in Control and Settings, select Sphere mode in the Geometry options; this is also the default mode) in neuTube to visualize the neural skeleton in a “ball and stick” format during the tracing process. Use the default color scheme (under the Neurons tab in Control and Settings, select Topology mode in the Color options). In this topology mode color scheme, the soma root should be the only dark blue node. If any other node turns dark blue in addition to the soma root, this indicates a fragmented subtree that must be connected to the rest of the arbor. A single neuron should have a single root node. If another node is dark blue and the soma is not, this indicates that the original root was accidentally shifted. This needs to be corrected by re-clicking on the root in the soma and setting it as the root. Branching nodes (bifurcation points) should have a light green color. Bifurcations are connected to two child nodes. If more than two child nodes of a bifurcation point exist, insert another point and create an additional bifurcation at that location (Verwer and Van Pelt, 1990[href=https://www.wicell.org#bib17]). End of branch nodes (terminal tips) should have yellow color. All remaining traced nodes (continuation points) should only have red color.\nPostprocessing reconstructions\nCopy the reconstructed SWCs in the repair folder.",
    "Run the Process_tree.m. This script identifies and corrects topological errors in the reconstructed tree structure and repairs them; the process also sorts the neural arbors in an anterograde manner: when sorted, a parent of an swc compartment is closer to the soma than the compartment itself. Reconstructions can also be resampled to make all compartment lengths (adjacent node to node distance) equal. Here the neurons are resampled at 2 μm. The outputs will be generated in the out folder.\nCopy the output swc files from the out folder and open them back in neuTube along with the image for inspection and further edits, if required.\nMinor editing of the nodes manually (in neuTube) may be required since resampling (while running Process_tree.m) slightly changes node locations within the arbor.\nMake sure all the dendritic compartments are tagged as type 3, all the axonal compartments are tagged as type 2, and all the somatic compartments are tagged as type 1. If needed, select the nodes that require updating, right click, and select “change type” from the pop-up menu. Then choose the correct types for the selected nodes.\nGenerating multi-signal ESWC files\nCritical: Multi-signal ESWC reconstructions are generated starting from the multi-channel image data and the standard SWC reconstructions. The basic SWC file is used as input in the Multichannel_SWC plugin of Vaa3D along with the image stacks for each channel. Within each compartment (frustums defined by the basic SWC file), the plugin then identifies the voxels with intensities above the input threshold for the primary channel (in this case the overall morphology signal) and then checks the intensity of the same voxels for the secondary signal.\nAccess the Multichannel_SWC plugin from the Vaa3D main plugin menu (Figure 8[href=https://www.wicell.org#fig8]).\nimgsrc:https://prod-shared-star-protocols.s3.amazonaws.com/protocols/697-Fig8.jpg\nFigure 8. Multi-signal reconstruction acquisition plugin in Vaa3D",
    "(A) multi_channel_swc plugin can be accessed under the main plugin menu of Vaa3D, after the required libraries are copied (See Before You Begin[href=https://www.wicell.org#before-you-begin] section for installation details). The multi_channel_compute plugin interface asks for an input image file, an input swc file and an output file name. The interface also asks the user to specify the primary and the secondary channels as well as their corresponding thresholds. For two signals, the Plug-in has to be run twice.\n(B) In this specific scenario, the first signal is microtubule, represented in Channel 1. Therefore Channel 3 and Channel 1 are selected as Primary and Secondary channels for the first run, respectively.\n(C) For the second run, F-actin is measured. Therefore Channel 3 and Channel 2 are selected as Primary and Secondary channels, respectively. For all channels, a signal intensity threshold of 10 is used (in a 0 to 255 scale).\nNote: this plugin should be part of the Vaa3D main plugin menu after completing Vaa3D installation and copying the relevant libraries under the bin/Multi_channel_swc folder. See the Before you Begin section above for details on installation.\nThis plug-in has two tools (Figure 8[href=https://www.wicell.org#fig8]A):\nMultichannel_Compute to acquire multi-signal swc files.\nMultichannel_Render to graphically represent multi-signal swc files. Click on the Multichannel_Compute tool to acquire multi-signal reconstructions.\nIn the Multichannel_Compute interface, select the third channel (created by adding the first and the second channels) as the primary channel. Then select the first channel (in this specific case, the red channel containing the microtubule signal) as the secondary channel. Select the basic swc reconstruction file as the Input SWC file. Determine the optimum threshold depending on the noise level in the image stack and then apply that threshold for both the channels (Figure 8[href=https://www.wicell.org#fig8]B). A threshold of 10 has been used in this example.",
    "Run the Multichannel_Compute plugin once (Figure 8[href=https://www.wicell.org#fig8]B). This will output two multichannel files. One file details the multichannel data in the ESWC format with three additional columns for each channel, annotating (1) fraction of voxels above threshold, (2) mean intensity, and (3) standard deviation of intensity. The second file, in a back-compatible SWC format with the regular 7 columns, appends the fraction and mean of subcellular channels (in this case, the microtubule channel, since it is selected as the secondary channel) at the end of the basic neuron tree after a #CHANNELSWC tag.\nRun the Multichannel_Compute plugin for the second time (Figure 8[href=https://www.wicell.org#fig8]C), this time using the resultant SWC file (the second output file from step 18d, containing channel information from the microtubule signal) as the input SWC file. The selection for the primary channel remains the same as in the first run, i.e., it consists of the third channel. Select the second channel (green F-actin signal) as the secondary channel. Choose 10 (on a 0–255 scale) as the voxel intensity threshold, signifying that any voxel below 10 will not be considered.\nThe output file from the second run will contain signal information from both the first (microtubule) and second (F-actin) signals. Use the output swc file from this second run for the remaining quantification processes (steps 19 and beyond).\nCritical: The number of Multichannel_Compute runs per neuron equals the number of distinct signals that are to be measured.\nScale SWC\nPlace all multi-signal SWC files (from all neuron types) in the scaling folder. This folder contains two MATLAB scripts: Imp_eswc.m and finalize_tree.m. Create a subfolder called scaled.",
    "Run the finalize_tree.m script. The scaling factors are hardcoded: [X, Y, Z, Radius = 0.593, 0.593, 1, 0.593] in line 17–18 of the finalize_tree.m script. Change these factors in the finalize_tree.m script, if required, based on the pixel size (X, Y, Radius) and Z-step (Z), all expressed in microns.\nMulti-signal analysis and quantification of cytoskeletal morphometrics (analysis environment: Matlab)\nTiming: [hours to days]\nCritical: Multi-signal analysis of neuron morphology is novel. Hence, custom scripts have been created to capture subcellular characteristics simultaneously with overall morphology. In this example protocol, the final multi-signal reconstructions contained sub-structural information for both microtubule and F-actin. These could be any other set of signals, depending on the researcher’s experimental setup and the following quantifications may also require alterations depending on the scientific questions. In this specific scenario, the two signals are represented and analyzed in each compartment as cytoskeletal (microtubule and F-actin) quantity, which was calculated as a product of three parameters: average signal intensity, fraction of compartment volume occupied by the signal, and compartment thickness. The local cytoskeletal quantity, CQ (i.e., quantity of microtubule or F-actin signal within a compartment), is thus defined as:\n  C Q = F ∗ ASI ∗ W  \nwhere F is the fraction of the compartment volume occupied by the signal, ASI is average signal intensity within that fraction volume, and W is local dendrite width, i.e., the diameter of the compartment.\nQuantification process All quantification is carried out in the MATLAB environment and extensively leverages the built-in morphological functions of TREES Toolbox.\nOpen the Quantify folder and go into the Basic_Quantification subfolder in MATLAB. Copy all scaled SWC files of a given neuron type to the Basic_Quantification subfolder.",
    "Run the Cyto_Ana_Regular_20Col.m script. This script will iterate over all neurons in the folder to calculate the following 20 values for each compartment within each neuron (for detailed definitions, see Nanda et al., 2020[href=https://www.wicell.org#bib8]):\nTopological distance from the root\nMicrotubule Quantity\nF-actin Quantity\nDiameter\nBranch Order\nTopological event (bifurcation, elongation or termination)\nArbor length (total downstream length of dendritic arbor from the given compartment. The arbor length of the soma is that neuron’s total neurite length and the arbor length of any terminal tip is zero)\nMicrotubule Intensity (quantity normalized for branch thickness)\nF-actin Intensity (quantity normalized for branch thickness)\nRelative local change in Microtubule Quantity\nRelative local change in F-actin Quantity\nRelative local change in Microtubule Intensity\nRelative local change in F-actin Intensity\nPath Distance\nCompartment length\nStrahler Order\nParent compartment id\nCompartment Type (axon, dendrite, soma)\nIntegral Microtubule\nIntegral F-actin\nA single 20 column matrix is produced as output. Update the output file name (at the bottom of the script) in the Cyto_Ana_Regular_20Col.m script according to the neuron type. For example, for Class IV Form3-OE neuron quantification, rename the output file from C4_20Column.mat (default name for Class IV WT) to C4Form3OE_20Column.mat.\nRun the TopologicalAna.m script to calculate the Strahler and path distance-based distribution of dendritic length, microtubule, and F-actin. This will create a file called RealToPo.mat.\nRename the file to reflect the neuron type. For example, for Class IV wild type, rename to RealToPo_C4WT.mat.\nRemove the swc files in the Basic_Quantification subfolder, and then replace them with the swc files from the next neuron type. Repeat the previous five substeps (20 a, b, c, d and e) until all neuron types are complete.",
    "To create Sholl-like plots, copy the RealToPo.mat files from all neuron types to the PD_Strahler_Based_Quant folder. Current script is written to process three specific neuron types: Class IV wildtype (WT), Class I WT and Class IV Form3-OE. Edit the script to suit the specific needs for each study.\nRun norm_script.m to normalize cytoskeletal parameters. Cytoskeletal quantities are normalized based on average total microtubule and average total F-actin of Class IV WT neurons. All other cytoskeletal quantities are represented relative to average total Class IV cytoskeletal quantity (Microtubule or F-actin).\nRename the .mat file names within the script as required.\nRun TopoAna_Graph.m to generate Strahler order and Path distance-based figures of length, Microtubule and F-actin. Current script is created to process three specific neuron types: Class IV WT, Class I WT and Class IV Form3-OE. Edit the script to suit the specific needs for each study.\nCompute the Correlation between Arbor length and local topological/cytoskeletal parameters.\nCritical: Linear (Pearson’s) correlations between local Arbor Length (total downstream arbor length) and local cytoskeletal/topological parameters are measured to determine whether microtubule (or any other parameter) is the best predictor of arbor length amongst all the measured topological and cytoskeletal parameters.\nCopy the C4_20Column.mat for Class IV to the ArborLength_Corr folder and run the Arbor_Len_Corr.m script to measure the correlation between arbor length and the following topological and cytoskeletal parameters:\nPath Distance\nBranch Order\nDiameter\nLocal Microtubule Quantity\nLocal F-actin Quantity\nCompute the relative local change in F-actin\nCritical: The local change in F-actin at every compartment from its parent compartment is measured by subtracting the current quantity of F-act from that of the parent compartment. The ratio of F-act change to the parent F-act quantity yields the relative F-act change (FΔ):\n  F Δ =   (  Fc − Fp  )  Fp",
    "where Fp and Fc are the F-actin quantities of the parent and of the current compartment, respectively.\nTo measure the cumulative distribution of local F-actin change separately for bifurcating, elongating, and terminating compartments, first copy the folder to the Quantify_actin_enrichment folder.\nNote: the C4_20Column.mat folder is specific for Class IV WT; use the relevant output files for Class I and Class IV Form3-OE neuron groups.\nRun the Fdelta_CurveShifts.m script to produce the cumulative frequency distribution curves for the three neuron types.\nExample application: Generative model of dendritic growth and comparative analysis of real and simulated neuron (simulation environment: Matlab)\nTiming: [Minutes for a single simulation run]\nA major scientific application of neuromorphological reconstruction is simulation of virtual morphology (Ascoli, 2002[href=https://www.wicell.org#bib2]). These simulations are often driven by different growth rules and the reproduced morphologies are compared with their real counterparts on topology and geometry (Nanda et al., 2018b[href=https://www.wicell.org#bib10]). The simulation protocol we describe here is based on the specific kind of signals measured in the above examples, namely the arbor-wide distribution of microtubule and F-actin. At each iteration, a branch within the virtual growing tree either elongates, bifurcates, or terminates depending (stochastically) on its cytoskeletal composition. For more details, see Nanda et al., 2020[href=https://www.wicell.org#bib8].\nSimulation protocol of dendritic arbor generation\nUnder the Simulation folder identify the subfolders corresponding to the three neuron types analyzed.\nTo launch the model for each neuron type, run the Auto_M_F_Sim_MHSorted.m file (within the \"Simfolder\"), under every neuron type folder. The output .mat files will be generated within the \"Simfolder\". Each generated .mat file is a simulated neuron.",
    "Create artificial reconstruction (swc) files by running the createSwCsMultiNeuBW.m script within the \"analysis\" folder. Copy the .mat files (generated from the simulation) within the \"analysis\" folder and run the createSwCsMultiNeuBW.m script. Each .mat file, describing a single virtual neuron, will be converted to two swc versions with identical topology: in both cases, the column to describe diameter is repurposed to describe microtubule and F-actin quantity, respectively. Further analysis of the simulated neurons read both the files together.\nFor each artificial neuron generated, two swc files are created: one for microtubule and the other for F-actin distribution.\nComparative Analysis of Simulated Neurons vs. Real Neurons\nCopy the simulated swc files to the Sim_Neuron_Basic_Quantification folder under the Quantify folder (after removing the previous swc files from the folder). Run the SimNeuronsProperties.m script to calculate for each compartment within every simulated neuron seventeen of the twenty properties calculated for the real neurons in step 20b.\nRun the TopologicalAna_Sim.m script to create the Strahler order and Path distance-based distributions of length, microtubule, and F-actin for the simulated neurons.\nTo compare the topological and cytoskeletal distribution for all neuron types, move the three real and the three simulated neuron group outputs to the Comparative_Analysis_of_real_and_Simulated_Neurons folder under the Quantify folder.\nRun the Comparative_Topological_Cytoskeletal_Dist.m script to generate the graphs that display the simulated neuron distribution in dark thin lines and the real distributions in the background with lighter, thicker lines."
  ],
  "subjectAreas": [
    "Cell Biology",
    "Neuroscience",
    "Bioinformatics",
    "Microscopy"
  ],
  "bigAreas": [
    "Biomedical & Clinical Research",
    "Molecular Biology & Genetics",
    "Bioinformatics & Computational Biology",
    "Bioengineering & Technology"
  ]
}